{"version":3,"sources":["webpack:///./source/src/app/components/Shared/ScopeValidation.jsx","webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./node_modules/@material-ui/icons/PlayForWork.js","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx"],"names":["resourcePaths","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEYS","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","resourceMethods","POST","PUT","GET","DELETE","ScopeValidation","React","Component","constructor","props","super","this","state","componentDidMount","resourcePath","resourceMethod","hasScope","AuthManager","hasScopes","then","haveScope","setState","render","children","propTypes","PropTypes","node","isRequired","string","definition","number","Joi","integer","url","uri","allow","ipAddress","ip","version","cidr","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ImportExternalApp","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","useState","handleClose","handleChange","event","Button","variant","color","startIcon","onClick","disabled","defaultMessage","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","container","spacing","direction","item","xs","TextField","name","formatMessage","e","margin","fullWidth","FormControl","FormHelperText","DialogActions","Typography","shape","func","bool","defaultProps","AppConfiguration","classes","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","target","currentTarget","hasMandatoryError","fieldValue","error","Array","isArray","length","AppConfigLabels","defineMessages","application_access_token_expiry_time","user_access_token_expiry_time","refresh_token_expiry_time","id_token_expiry_time","AppConfigToolTips","getAppConfigLabel","getAppConfigToolTip","tooltip","useEffect","TableRow","TableCell","component","scope","className","leftCol","Box","maxWidth","type","multiple","root","removeHelperPadding","select","helperText","required","values","map","MenuItem","formControl","InputLabel","Select","labelId","displayEmpty","input","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","primary","onAdd","tag","chipRenderer","size","onDelete","filter","oldScope","style","float","display","notFound","instanceOf","any","injectIntl","withStyles","theme","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","padding","button","marginLeft","quotaHelp","position","checkboxWrapper","checkboxWrapperColumn","flexDirection","group","KeyConfiguration","urlCopied","setUrlCopied","callbackHelper","setCallbackHelper","keyManagerConfig","updateKeyRequest","keyRequest","updateHasError","callbackError","selectedGrantTypes","callbackUrl","applicationConfiguration","availableGrantTypes","description","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","tokenEndpoint","userInfoEndpoint","field","newRequest","cloneDeep","newGrantTypes","keyManager","includes","clonedAdditionalProperties","forEach","prop","console","log","onCopy","setTimeout","getPreviousValue","isPreviousValueSet","defaultValue","ResourceNotFound","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","grantType","getGrantTypeDisplayList","Settings","alignItems","Table","table","TableBody","Tooltip","title","placement","iconStyle","text","IconButton","aria-label","iconButton","Icon","keys","FormControlLabel","control","placeholder","validating","array","isKeysAvailable","setGenerateEnabled","flexWrap","whiteSpace","cursor","fontSize","titleColumn","fontWeight","keyInfoTable","marginBottom","borderCollapse","borderBottom","useStyles","makeStyles","code","background","palette","grey","flex","command","encodeVisible","textDecoration","contentWrapper","ViewCurl","keyType","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","applyReal","Fragment","ViewKeys","accessTokenRequest","that","elementName","data","preventDefault","showToken","keyMappingId","selectedTab","applicationPromise","application","regenerateSecret","response","showSecretGen","secretGenResponse","catch","showCurl","isKeyJWT","isUpdating","generateToken","timeout","scopesSelected","tokenResponse","token","accessToken","tokenScopes","tokenValidityTime","validityTime","Alert1","body","Alert","message","selectedApp","hashEnabled","keyCopied","secretCopied","showCS","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","subscriptionScopes","getKeys","componentDidUpdate","prevProps","fullScreen","tokenType","summary","initialToken","initialValidityTime","initialScopes","Loading","csCkKeys","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","gutterBottom","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","inputWrapper","dialogWrapper","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","ViewSecret","secret","CircularProgress","generateAccessToken","autoFocus","tokenSection","find","a","handleClickOpen","handleClickOpenCurl","getContrastText","paper","marginTop","marginRight","keyState","states","REJECTED","noKeysRoot","backgroundImage","app","context","custom","overviewPage","keysBackground","height","backgroundPosition","backgroundRepeat","backgroundSize","minHeight","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","TabPanel","index","other","role","hidden","p","indicator","justifyContent","backgroundColor","transition","flexContainer","borderLeft","Tabs","TabIndicatorProps","textTransform","typography","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","mode","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","push","selectdKM","selectdKMGrants","validatingState","hasError","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","loadApplication","nextProps","nextKeyType","prevKeyType","confItem","split","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","info","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","mb","keyTitle","toTitleCase","InlineMessage","dialogContainer","username","getUser","owner","Progress","cleanUpInfoText","cleanUpButton","AppBar","handleTabChange","indicatorColor","textColor","scrollButtons","keymanager","displayName","tabPanel","heading","subTitle","ml","m","enableTokenHashing","setValidating","generateWrapper","warningIcon","kmName","main","keyConfigWrapper","muiFormGroupRoot","appContent","genericDisplayDialog","handleClick","caption","buttonText","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","selectedKeyType","applicationOwner","td","policy","actionColumn","to","CustomIcon","strokeColor","icon","classNames","activeLink","colSpan","selectedWrapper","textAlign","A200","withTheme","Credentials","api","applicationsAvailable","subscriptionRequest","newSubscriptionRequest","throttlingPolicyList","tiers","tierName","expanded","apiType","Api","isSubscribing","subscribe","updateData","history","result","subscribedApplications","user","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","isPrototypedAPI","lifeCycleStatus","isSetAllorResidentKeyManagers","md","lg","handleExpandClick","titleSub","isSubscriptionAvailable","pointerEvents","addLinkWrapper","Paper","elevation","descWrapper","GenericDisplayDialog","goToWizard","generateCredentialWrapper","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","subsListTitle","subsListDesc","tableMain","th","SubscriptionTableRow","renderCredentialInfo","contextType","ApiContext","contentAreaWidth","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","subscribeRoot","A100","appBar","toolbar","subscribeTitle","border","borderRadius"],"mappings":"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","file":"APICredentials.3ddbc4fbc7b6d4c16c63.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\nimport { useIntl } from 'react-intl';\nimport ChipInput from 'material-ui-chip-input';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    }\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n    const intl = useIntl();\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    const hasMandatoryError = (fieldValue) => {\n        let error = false;\n        if (fieldValue === '' || (Array.isArray(fieldValue) && !fieldValue.length)) {\n            error = intl.formatMessage({\n                defaultMessage: 'Required field is empty',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.required.empty.error',\n            });\n        }\n        return error;\n    }\n\n    const AppConfigLabels = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time',\n          defaultMessage: 'Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time',\n          defaultMessage: 'User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time',\n           defaultMessage: 'Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time',\n           defaultMessage: 'Id Token Expiry Time',\n        }\n    });\n\n    const AppConfigToolTips = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time.tooltip',\n           defaultMessage: 'Type Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time.tooltip',\n           defaultMessage: 'Type ID Token Expiry Time',\n        }\n    });\n\n    const getAppConfigLabel = () => {\n        return AppConfigLabels[config.name]\n            ? props.intl.formatMessage(AppConfigLabels[config.name])\n            : config.label\n    }\n\n    const getAppConfigToolTip = () => {\n        return AppConfigToolTips[config.name]\n            ? props.intl.formatMessage(AppConfigToolTips[config.name])\n            : config.tooltip\n    }\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {getAppConfigLabel()}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n                    {config.type === 'select' && config.multiple === false ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            select\n                            label={getAppConfigLabel()}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={(config.required && hasMandatoryError(selectedValue)) || getAppConfigToolTip()}\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                            required={config.required}\n                            error={config.required && hasMandatoryError(selectedValue)}                            \n                        >\n                            {config.values.map(key => (\n                                <MenuItem key={key} value={key}>\n                                    {key}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                        <>\n                            <FormControl \n                            variant=\"outlined\" \n                            className={classes.formControl} \n                            fullWidth \n                            error={config.required && hasMandatoryError(selectedValue)}\n                            required={config.required}\n                            >\n                                <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                <Select\n                                    labelId=\"multi-select-label\"\n                                    id=\"multi-select-outlined\"\n                                    margin='dense'\n                                    displayEmpty\n                                    name={config.name}\n                                    multiple\n                                    value={selectedValue}\n                                    onChange={e => handleAppRequestChange(e)}\n                                    input={<Input id='multi-select-outlined' />}\n                                    renderValue={selected => (\n                                        <div className={classes.chips}>\n                                            {selected.map(value => (\n                                                <Chip key={value} label={value} className={classes.chip} />\n                                            ))}\n                                        </div>\n                                    )}\n                                    label={getAppConfigLabel()}\n                                >\n                                    {config.values.map(key => (\n                                        <MenuItem key={key} value={key}>\n                                            <Checkbox checked={selectedValue.indexOf(key) > -1} />\n                                            <ListItemText primary={key} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText>{(config.required && hasMandatoryError(selectedValue)) || getAppConfigToolTip()}</FormHelperText>\n                            </FormControl>\n                        </>\n                    ) : (config.type === 'input' && config.multiple === true) ? (\n                        <>\n                            <ChipInput\n                                value={selectedValue}\n                                fullWidth\n                                variant='outlined'\n                                id=\"multi-input-outlined\"\n                                label={config.label}\n                                onAdd={(tag) => {\n                                    const e = {target:{name:config.name,value:[...selectedValue, tag]}}\n                                    handleAppRequestChange(e)\n                                    }\n                                }\n                                chipRenderer={({ value }, key) => (\n                                    <Chip\n                                        key={key}\n                                        size='small'\n                                        label={value}\n                                        onDelete={() => {\n                                            const e = {target:{name:config.name,value:selectedValue.filter(\n                                            (oldScope)=> oldScope !== value)}}\n                                            handleAppRequestChange(e);\n                                        }}\n                                        style={{\n                                            margin: '0 8px 12px 0',\n                                            float: 'left',\n                                        }}\n                                    />\n                                )}\n                                style={{ display: 'flex' }}\n                            />\n                            <Typography variant='caption'>\n                                {config.tooltip}\n                            </Typography>\n                        </>\n                    ) : (config.type === 'input') ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            label={getAppConfigLabel()}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={(config.required && hasMandatoryError(selectedValue)) || getAppConfigToolTip()}\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                            required={config.required}\n                            error={config.required && hasMandatoryError(selectedValue)}\n                        />\n                    ) : (\n                                    <TextField\n                                        classes={{\n                                            root: classes.removeHelperPadding,\n                                        }}\n                                        fullWidth\n                                        id={config.name}\n                                        label={getAppConfigLabel()}\n                                        value={selectedValue}\n                                        name={config.name}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {getAppConfigToolTip()}\n                                            </Typography>\n                                        }\n                                        margin='dense'\n                                        variant='outlined'\n                                        disabled={!isUserOwner}\n                                    />\n                                )}\n                            </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        classes, notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':  \n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                let hasMandatoryError = false;\n                keyManagerConfig.applicationConfiguration.forEach((config) => {\n                    let prop = newRequest.additionalProperties[config.name];\n                    if (config.required) {\n                        console.log(prop);\n                        if (prop === '' || (Array.isArray(prop) && !prop.length)) {\n                            hasMandatoryError = true;\n                        }\n                    }\n                });\n                updateHasError(hasMandatoryError);\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={tokenEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={revokeEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={userInfoEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn}>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyType,\n        keyManagerConfig,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    return (\n        <React.Fragment>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help'\n                    defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                />\n            </Typography>\n\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=password&username=Username&password=Password\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                    defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                />\n            </Typography>\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=client_credentials\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Alert1 from 'AppComponents/Shared/Alert';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    Alert1.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const {\n            classes, intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                                id='visibility-toggle-btn'\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={\n                                                    secretCopied\n                                                        ? intl.formatMessage({\n                                                            defaultMessage: 'Copied',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                        })\n                                                        : intl.formatMessage({\n                                                            defaultMessage: 'Copy to clipboard',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copy.to.clipboard',\n                                                        })\n                                                }\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                className={classes.button}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead = 'Undefined';\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button\n                                        onClick={this.generateAccessToken}\n                                        color='primary'\n                                        id='generate-access-token-generate-btn'\n                                        disabled={isUpdating}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button \n                                onClick={this.handleClose} \n                                id='generate-access-token-close-btn'\n                                color='primary' \n                                autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {keyManagerConfig.enableTokenGeneration && supportedGrantTypesUnchanged\n                                    && supportedGrantTypesUnchanged.find((a) => a.includes('client_credentials'))\n                                    && (\n                                        <Button\n                                            id='generate-access-token-oauth2'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    id='curl-to-generate-access-token-btn'\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {supportedGrantTypesUnchanged && !supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport Validation from 'AppData/Validation';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        '& label>span:nth-child(1)': {\n            color: 'red',\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{children: <span/>}}/>);\n\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            if (confItem.type === 'select' && confItem.multiple) {\n                additionalProperties[confItem.name] = (confItem.default && confItem.default.split(\",\")) || [];\n            } else {\n                additionalProperties[confItem.name] = confItem.default || '';\n            }\n        });\n        return additionalProperties;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                || availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({ keyRequest: newRequest, selectedTab: newSelectedTab, mode });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys, keyRequest: newRequest, keyManagers: responseKeyManagerList, selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectdKMGrants = selectdKM.availableGrantTypes || [];\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes: selectdKMGrants.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({ keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(`${intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                    defaultMessage: 'Error occurred when generating application keys',\n                })}, ${error.response.body.message}`);\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                    defaultMessage: 'Error occurred when providing application keys',\n                }));\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary, selectedApp: { hashEnabled },\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled, mode,\n        } = this.state;\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography variant='h5' component='h3'>\n                            <FormattedMessage id='Shared.AppsAndKeys.TokenManager.no.km' defaultMessage='No Key Managers' />\n                        </Typography>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                defaultMessage='No Key Managers active to generate keys.'\n                            />\n                        </Typography>\n                    </InlineMessage>\n                </div>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Loading />;\n        }\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        selectedTab={selectedTab}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        return (\n            <>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={selectedTab}\n                            onChange={this.handleTabChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                            aria-label=\"scrollable auto tabs example\"\n                        >\n                            {keyManagers.map((keymanager) => (\n                                <Tab\n                                    label={keymanager.displayName || keymanager.name}\n                                    value={keymanager.name}\n                                    disabled={!keymanager.enabled}\n                                    id={keymanager.name.replace(/\\s/g, '')}\n                                />\n                            ))}\n                        </Tabs>\n                    </AppBar>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                            <Box display='flex' flexDirection='row'>\n                                <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                    <FormattedMessage\n                                        defaultMessage='Key and Secret'\n                                        id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                    />\n                                </Typography>\n                                {\n                                    keymanager.enableMapOAuthConsumerApps && (\n                                        <Box ml={2}>\n                                            <ImportExternalApp\n                                                onChange={this.handleOnChangeProvidedOAuth}\n                                                consumerKey={providedConsumerKey}\n                                                consumerSecret={providedConsumerSecret}\n                                                isUserOwner={isUserOwner}\n                                                key={key}\n                                                provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                importDisabled={importDisabled}\n                                            />\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            <Box m={2}>\n                                <ViewKeys\n                                    initialToken={initialToken}\n                                    initialValidityTime={initialValidityTime}\n                                    initialScopes={initialScopes}\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    keys={keys}\n                                    selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                    isUserOwner={isUserOwner}\n                                    hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                    keyManagerConfig={keymanager}\n                                />\n                            </Box>\n                            <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                {\n                                    key\n                                        ? (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configurations'\n                                                id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configuration'\n                                                id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                            />\n                                        )\n                                }\n                            </Typography>\n                            <Box m={2}>\n                                <KeyConfiguration\n                                    keys={keys}\n                                    key={key}\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    updateKeyRequest={this.updateKeyRequest}\n                                    keyRequest={keyRequest}\n                                    isUserOwner={isUserOwner}\n                                    isKeysAvailable={key}\n                                    keyManagerConfig={keymanager}\n                                    validating={validating}\n                                    updateHasError={this.updateHasError}\n                                    callbackError={hasError}\n                                    setValidating={this.setValidating}\n                                />\n                                <div className={classes.generateWrapper}>\n                                    <ScopeValidation\n                                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                        resourceMethod={resourceMethods.POST}\n                                    >\n                                        {!isUserOwner ? (\n                                            <>\n                                                <Button\n                                                    id='generate-keys'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={\n                                                        key ? this.updateKeys : this.generateKeys\n                                                    }\n                                                    disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation}\n                                                >\n                                                    {key ?\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.update.keys',\n                                                            defaultMessage: 'Update Keys'})\n                                                    :\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                            defaultMessage: 'Generate Keys'})\n                                                    }\n                                                    {isLoading && <CircularProgress size={20}/>}\n                                                </Button>\n                                                <Typography variant='caption'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Only owner can generate or update keys'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        ) : (\n                                            <Box display='flex'>\n                                                <Button\n                                                    id='generate-keys'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={key ? this.updateKeys : this.generateKeys}\n                                                    disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation) || (mode && mode === 'MAPPED')}\n                                                >\n                                                    {key ?\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.update',\n                                                            defaultMessage: 'Update'})\n                                                    :\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                            defaultMessage: 'Generate Keys'})\n                                                    }\n                                                    {isLoading && <CircularProgress size={20}/>}\n                                                </Button>\n                                                {!keymanager.enableOAuthAppCreation && (\n                                                    <Box m={2} display='flex'>\n                                                        <WarningIcon className={classes.warningIcon}/>\n                                                        <Typography variant='body1'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                values={{kmName: keymanager.displayName || keymanager.name}}\n                                                            />\n                                                        </Typography>\n                                                    </Box>\n                                                )}\n                                            </Box>\n                                        )}\n                                    </ScopeValidation>\n                                </div>\n\n                            </Box>\n                        </TabPanel>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td} id={app.label}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <Link\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                            id={app.label + '-MA'}\n                            aria-labelledby={app.label + '-MA ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </Link>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <Link\n                                className={classes.button}\n                                onClick={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                                id={app.label + '-UN'}\n                                aria-labelledby={app.label + '-UN ' + app.label}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </Link>\n                        </ScopeValidation>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                            id={app.label + '-PK'}\n                            aria-labelledby={app.label + '-PK ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                            id={app.label + '-SB'}\n                            aria-labelledby={app.label + '-SB ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    tableMain: {\n        '& > table': {\n            width: '100%',\n            borderCollapse: 'collapse',\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(1),\n        },\n        '& table > tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '&  table > tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '&  table > tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '&  table > tr > th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n        '& table > tr > th:last-child': {\n            textAlign: 'right',\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    /**\n     *Creates an instance of Credentials.\n     * @param JSON props\n     * @memberof Credentials\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            selectedAppId: false,\n            selectedKeyType: false,\n            subscriptionRequest: {\n                applicationId: '',\n                apiId: '',\n                throttlingPolicy: '',\n            },\n            throttlingPolicyList: [],\n            applicationOwner: '',\n            hashEnabled: false,\n            isSubscribing: false,\n        };\n        this.api = new Api();\n    }\n\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                Alert.error(intl.formatMessage({\n                    id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                    defaultMessage: 'Error occurred during subscription',\n                }));\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2')\n        && !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2')\n         && !api.securityScheme.includes('api_key');\n        const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n        const isSetAllorResidentKeyManagers = (api.keyManagers && api.keyManagers.includes('all'))\n            || (api.keyManagers && api.keyManagers.includes('Resident Key Manager'));\n        const renderCredentialInfo = () => {\n            if (isPrototypedAPI) {\n                return (\n                    <>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Credentials.Credentials.you.do.not.need'\n                                        + '.credentials.to.access.prototyped.api'}\n                                    defaultMessage='You do not need credentials to access Prototyped APIs'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </>\n                );\n            } else if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Apis.Details.Creadentials.credetials.mutualssl'\n                                defaultMessage={'Subscription is not required for Mutual SSL APIs'\n                                        + ' or APIs with only Basic Authentication.'}\n                            />\n                        </Typography>\n                    </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5' component='h2'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                            >\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.buttonElm}\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                        || isOnlyBasicAuth || !isSetAllorResidentKeyManagers}\n                                                >\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                                id='subscribe-to-api-btn'\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' component='h2' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <div className={classes.tableMain}>\n                                    <table id='subscription-table'>\n                                        <tr>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.name'}\n                                                    defaultMessage='Application Name'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.api.'\n                                                    + 'credentials.subscribed.apps.tier'}\n                                                    defaultMessage='Throttling Tier'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.status'}\n                                                    defaultMessage='Application Status'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.action'}\n                                                    defaultMessage='Actions'\n                                                />\n                                            </th>\n                                        </tr>\n                                        {subscribedApplications.map((app, index) => (\n                                            <SubscriptionTableRow\n                                                key={app.id}\n                                                loadInfo={this.loadInfo}\n                                                handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                selectedAppId={selectedAppId}\n                                                updateSubscriptionData={updateSubscriptionData}\n                                                selectedKeyType={selectedKeyType}\n                                                app={app}\n                                                index={index}\n                                                applicationOwner={applicationOwner}\n                                                hashEnabled={hashEnabled}\n                                            />\n                                        ))}\n                                    </table>\n                                </div>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={2}>\n                        <Grid item md={12}>\n                            <Typography onClick={this.handleExpandClick} variant='h4' component='div' className={classes.titleSub}>\n                                {applicationsAvailable.length > 0 && (\n                                    <Link\n                                        to={(isOnlyMutualSSL || isOnlyBasicAuth || isPrototypedAPI\n                                            || !isSetAllorResidentKeyManagers) ? null\n                                            : `/apis/${api.id}/credentials/wizard`}\n                                        style={!api.isSubscriptionAvailable\n                                            ? { pointerEvents: 'none' } : null}\n                                        className={classes.addLinkWrapper}\n                                    >\n                                        <Button\n                                            color='secondary'\n                                            disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                 || isOnlyBasicAuth || isPrototypedAPI\n                                                 || !isSetAllorResidentKeyManagers}\n                                            size='small'\n                                            id='start-key-gen-wizard-btn'\n                                        >\n                                            <Icon>add_circle_outline</Icon>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.'\n                                                + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                defaultMessage='Subscription &amp; Key Generation Wizard'\n                                            />\n                                        </Button>\n                                    </Link>\n                                )}\n                            </Typography>\n                            <Paper elevation={0} className={classes.paper}>\n                                <Typography variant='body2' className={classes.descWrapper}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.Credentials.'\n                                        defaultMessage={`An application \n                                        is primarily used to decouple the consumer from the APIs. It allows you to \n                                        generate and use a single key for multiple APIs and subscribe multiple times to \n                                        a single API with different SLA levels.`}\n                                    />\n                                </Typography>\n                                {renderCredentialInfo()}\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\nCredentials.contextType = ApiContext;\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n"],"sourceRoot":""}