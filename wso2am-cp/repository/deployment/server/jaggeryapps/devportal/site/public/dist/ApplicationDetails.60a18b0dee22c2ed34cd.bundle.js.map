{"version":3,"sources":["webpack:///./source/src/app/components/Shared/InlineMessage.jsx","webpack:///./source/src/app/components/Shared/ScopeValidation.jsx","webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewToken.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewSecret.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/Tokens.jsx","webpack:///./source/src/app/components/Apis/Listing/NoApi.jsx","webpack:///./source/src/app/components/Shared/LeftMenuItem.jsx","webpack:///./source/src/app/components/Applications/Listing/DeleteConfirmation.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Shared/ApiKey.jsx","webpack:///./source/src/app/components/Shared/ApiKeyRestriction.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx","webpack:///./source/src/app/components/Apis/Listing/SubscriptionPolicySelect.jsx","webpack:///./source/src/app/components/Apis/Listing/APICardView.jsx","webpack:///./source/src/app/components/Applications/Details/Invoice.jsx","webpack:///./source/src/app/components/Applications/Details/SubscriptionTableData.jsx","webpack:///./source/src/app/components/Applications/Details/Subscriptions.jsx","webpack:///./source/src/app/components/Applications/Details/InfoBar.jsx","webpack:///./source/src/app/components/Applications/Details/Overview.jsx","webpack:///./source/src/app/components/Applications/Details/WebHookDetails.jsx","webpack:///./source/src/app/components/Applications/Details/index.jsx"],"names":["InlineMessage","props","type","title","messageType","severity","children","propTypes","classes","PropTypes","shape","isRequired","string","resourcePaths","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEYS","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","resourceMethods","POST","PUT","GET","DELETE","ScopeValidation","React","Component","constructor","super","this","state","componentDidMount","resourcePath","resourceMethod","hasScope","AuthManager","hasScopes","then","haveScope","setState","render","node","definition","number","Joi","integer","url","uri","allow","ipAddress","ip","version","cidr","ViewToken","tokenCopied","name","that","elementName","setTimeout","getTokeScopesString","tokenScopes","join","token","consumerSecret","intl","className","root","secretWrapper","secret","variant","component","isOauth","id","defaultMessage","epWrapper","for","prodLabel","defaultValue","accessToken","multiline","fullWidth","rows","InputProps","disableUnderline","bootstrapRoot","input","bootstrapInput","InputLabelProps","shrink","bootstrapFormLabel","formatMessage","placement","text","onCopy","aria-label","color","validityTime","defaultProps","array","injectIntl","withStyles","theme","padding","marginTop","spacing","flex","marginRight","borderRadius","backgroundColor","custom","apiDetailPages","tokenTextBoxBackground","palette","getContrastText","border","height","width","transition","transitions","create","fontFamily","borderColor","boxShadow","display","marginBottom","lineHeight","whiteSpace","contentWrapper","maxWidth","contentAreaWidth","leftMenu","background","paper","ViewSecret","secretCopied","common","white","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","MenuProps","PaperProps","style","maxHeight","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","tokens","handleChange","field","event","accessTokenRequest","updateAccessTokenRequest","newRequest","target","currentTarget","scopesSelected","value","keyType","subscriptionScopes","margin","FormControlOdd","disabled","length","htmlFor","quotaHelp","multiple","onChange","e","renderValue","selected","chips","map","key","chip","scope","contextTypes","FormControl","position","flexWrap","useStyles","makeStyles","flexGrow","messageWrapper","textAlign","secondary","NoApi","useTheme","container","item","xs","alt","src","app","context","noApiImage","gutterBottom","useStylesBootstrap","arrow","black","tooltip","BootstrapTooltip","LeftMenuItem","setSelected","useState","Icon","to","history","route","submenu","open","routeToCheck","strokeColor","iconSize","ditectCurrentMenu","location","window","pathname","test1","RegExp","test2","match","useEffect","listen","activeBackground","leftMenuActive","leftMenuActiveSubmenu","classNames","leftLInk","leftLink_IconLeft","replace","cloneElement","leftLink_Icon","noIcon","icon","iconText","leftLInkText","leftLInkText_IconLeft","leftLInkText_NoText","leftLInkText_NoTextWhenSmall","element","oneOfType","bool","withRouter","textTransform","overflow","textOverflow","paddingLeft","LeftMenu","typography","bottom","left","top","paddingTop","paddingBottom","breakpoints","down","paddingRight","fontSize","caption","cursor","textDecoration","alignItems","justifyContent","grey","withTheme","DeleteConfirmation","handleAppDelete","isDeleteOpen","toggleDeleteConfirmation","Slide","role","dense","onClick","size","func","ImportExternalApp","consumerKey","isUserOwner","provideOAuthKeySecret","importDisabled","useIntl","setOpen","handleClose","Button","startIcon","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","direction","TextField","FormHelperText","DialogActions","Typography","AppConfiguration","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","hasMandatoryError","fieldValue","error","Array","isArray","AppConfigLabels","defineMessages","application_access_token_expiry_time","user_access_token_expiry_time","refresh_token_expiry_time","id_token_expiry_time","AppConfigToolTips","getAppConfigLabel","getAppConfigToolTip","TableRow","TableCell","leftCol","Box","removeHelperPadding","select","helperText","required","values","MenuItem","formControl","InputLabel","Select","labelId","displayEmpty","Input","Chip","Checkbox","checked","indexOf","ListItemText","primary","onAdd","tag","chipRenderer","onDelete","filter","oldScope","float","notFound","instanceOf","Object","any","button","marginLeft","checkboxWrapper","checkboxWrapperColumn","flexDirection","group","KeyConfiguration","urlCopied","setUrlCopied","callbackHelper","setCallbackHelper","keyManagerConfig","updateKeyRequest","keyRequest","updateHasError","callbackError","selectedGrantTypes","callbackUrl","applicationConfiguration","availableGrantTypes","description","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","tokenEndpoint","userInfoEndpoint","cloneDeep","newGrantTypes","keyManager","includes","clonedAdditionalProperties","forEach","prop","console","log","getPreviousValue","isPreviousValueSet","default","ResourceNotFound","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","grantType","getGrantTypeDisplayList","Settings","Table","table","TableBody","Tooltip","iconStyle","IconButton","iconButton","keys","FormControlLabel","control","placeholder","validating","isKeysAvailable","setGenerateEnabled","titleColumn","fontWeight","keyInfoTable","borderCollapse","borderBottom","code","command","encodeVisible","ViewCurl","bas64Encoded","btoa","showReal","setShowReal","setTokenCopied","applyReal","Fragment","ViewKeys","data","preventDefault","showToken","keyMappingId","selectedTab","applicationPromise","application","regenerateSecret","response","showSecretGen","secretGenResponse","catch","showCurl","isKeyJWT","isUpdating","generateToken","timeout","tokenResponse","tokenValidityTime","Alert1","body","Alert","message","selectedApp","hashEnabled","keyCopied","showCS","copyWrapper","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","getKeys","componentDidUpdate","prevProps","fullScreen","tokenType","summary","initialToken","initialValidityTime","initialScopes","Loading","csCkKeys","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","inputWrapper","dialogWrapper","DialogContentText","Tokens","CircularProgress","generateAccessToken","autoFocus","tokenSection","find","a","handleClickOpen","handleClickOpenCurl","keyState","states","REJECTED","noKeysRoot","backgroundImage","overviewPage","keysBackground","backgroundPosition","backgroundRepeat","backgroundSize","minHeight","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","TabPanel","index","other","hidden","p","indicator","flexContainer","borderLeft","Tabs","TabIndicatorProps","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","mode","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","push","selectdKM","selectdKMGrants","validatingState","hasError","str","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","loadApplication","nextProps","nextKeyType","prevKeyType","confItem","split","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","info","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","mb","keyTitle","toTitleCase","dialogContainer","username","getUser","owner","Progress","cleanUpInfoText","cleanUpButton","AppBar","handleTabChange","indicatorColor","textColor","scrollButtons","keymanager","displayName","tabPanel","heading","subTitle","ml","m","enableTokenHashing","setValidating","generateWrapper","warningIcon","kmName","main","keyConfigWrapper","muiFormGroupRoot","infiniteValidity","setInfiniteValidity","invalidTimeout","setInvaildTimeout","undefined","Validation","validate","inputText","apiKeyRestrictions","invalidIP","setInvalidIP","invalidReferer","setInvalidReferer","newIP","updateNewIp","ipList","updateIpList","restrictSchema","updateRestrictSchema","newReferer","updateNewReferer","refererList","updateRefererList","outterBox","RadioGroup","row","Radio","labelPlacement","justify","md","trim","Fab","List","ListItem","ListItemSecondaryAction","edge","deleteIpItem","ipItem","splice","referer","deleteRefererItem","refererItem","ApiKeyManager","isGenerating","restrictions","permittedIP","permittedReferer","generateApiKey","apikey","ApiKeyRestriction","FormGroup","formGroup","generateKey","formLabel","dialog","dialogTitle","dialogContent","ApiKey","Card","CardContent","cardBody","linebreak","ip1","ip2","ip3","ip4","url1","url2","url3","gridWrapper","SubscriptionPolicySelect","selectedPolicy","policies","handleSubscribe","policy","buttonGap","APICardView","xhrRequest","pagination","total","count","updateUnsubscribedAPIsList","setTenantDomain","loading","page","searchText","rowsPerPage","api","getAllAPIs","query","offset","pageType","getData","subscriptions","getIdsOfSubscribedEntities","sub","Boolean","listLocal","subscribedIds","i","advertiseInfo","advertised","isSubscriptionAvailable","throttlingPolicies","apisNotFound","columns","options","customBodyRender","tableMeta","rowData","search","print","download","viewColumns","customToolbar","responsive","serverSide","onTableChange","action","tableState","changePage","selectableRows","onChangeRowsPerPage","numberOfRows","pageInner","countInner","textLabels","filterType","sort","selectableRowsHeader","Invoice","tiers","showPopup","setShowPopup","showErrorPopup","setShowErrorPopup","invoice","setInvoice","handleAlertClose","obj","invoiceData","properties","invoiveItem","insideArray","arrayOf","SubscriptionTableData","openMenu","openMenuEdit","isMonetizedAPI","isDynamicUsagePolicy","selectedTier","handleRequestClose","handleRequestOpen","handleRequestDelete","checkIfDynamicUsagePolicy","checkIfMonetizedAPI","populateSubscriptionTiers","handleSubscriptionTierUpdate","handleRequestCloseEditMenu","handleRequestOpenEditMenu","setSelectedTier","subscription","handleSubscriptionDelete","currentThrottlingPolicy","handleSubscriptionUpdate","apiUUID","Api","getAPIById","apiTiers","JSON","parse","tierName","apiData","monetization","getTierByName","policyResponse","policyData","monetizationAttributes","billingType","apiInfo","link","external","path","mdiOpenInNew","hover","lifeCycleStatus","tier","subscriptionsNotFound","isAuthorize","openDialog","updateSubscriptions","handleOpenDialog","handleSearchTextChange","handleSearchTextTmpChange","handleClearSearch","handleEnterPress","searchTextTmp","params","prevState","subscriptionLimit","endpointIndex","prototype","hasOwnProperty","call","statusInner","subscribe","searchInputElem","keyCode","titleWrapper","buttonElm","xl","genericMessageWrapper","cardContent","subsTable","TableHead","firstCell","subscribePop","disableTypography","searchWrapper","Paper","searchRoot","clearSearchIcon","InputBase","inputProps","inputRef","el","onKeyDown","searchResults","closeButton","appInner","divider","cardTitle","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","InfoBar","showOverview","applicationOwner","toggleOverview","handleDeleteConfimation","getApplication","promisedPolicy","promisedDelete","deleteApp","ok","todo","infoBarMain","linkTitle","align","subscriptionCount","VerticalDivider","editButton","mainBack","infoBar","infoBarHeight","starColor","A200","backIcon","backText","starRate","starRateMy","rateLink","topBar","infoContent","infoContentBottom","sliderBackground","ratingBoxWrapper","ratingBox","userRating","verticalDividerStar","backLink","ratingSummery","buttonView","buttonOverviewText","appNameXSmall","overflowX","overflowY","appNameSmall","appNameMid","appNameBig","minWidth","iconAligner","iconTextWrapper","iconEven","iconOddColor","iconOdd","summaryRoot","actionPanel","setApplication","tierDescription","setTierDescription","setNotFound","promisedTier","tierResponse","attributes","attr","attrValue","dayjs","extend","relativeTime","buttonIcon","grid","userNotificationPaper","titleSub","listWrapper","subscriptionRow","callbackurl","subscriptionTimestamp","SubscriptionHeader","WebHookDetails","matchPath","exact","strict","subscribedTopics","setSubscribedTopics","getWebhookubScriptions","sortedSubscriptions","_","groupBy","deliveryStatus","getLogoForDeliveryStatus","callBackUrl","deliveryTime","Divider","Details","menuLink","application_uuid","secScheme","pathPrefix","redirectUrl","rootIconSize","rootIconTextVisible","rootIconVisible","prefix","suffix","Helmet","leftMenuHorizontal","leftMenuVerticalLeft","leftMenuVerticalRight","leftLInkMain","CustomIcon","leftLInkMainText","content","innerRef","contentLoader","contentLoaderRightMenu","from","Overview","renderManager","shiftToLeft","shiftToRight","leftMenuPaddingLeft","right","rootBackground","detailsContent"],"mappings":"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","file":"ApplicationDetails.60a18b0dee22c2ed34cd.bundle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport VerticalDivider from './VerticalDivider';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n/**\n * Main style object\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n});\n/**\n *  Renders a inline massage\n *\n * @class InlineMessage\n * @extends {React.Component}\n */\nfunction InlineMessage(props) {\n    const { type, title } = props;\n    const messageType = type || 'info';\n    return (\n        <Alert severity={messageType}>\n            {title && (<AlertTitle>{title}</AlertTitle>)}\n            {props.children}\n        </Alert>\n\n    );\n}\n\nInlineMessage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n};\n\nexport default InlineMessage;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport InlineMessage from '../InlineMessage';\nimport ViewSecret from './ViewSecret';\n/**\n *\n *\n * @param {*} theme\n */\nconst styles = (theme) => ({\n    bootstrapRoot: {\n        padding: 0,\n        'label + &': {\n            marginTop: theme.spacing(3),\n        },\n        flex: 1,\n        marginRight: theme.spacing(1),\n    },\n    bootstrapInput: {\n        borderRadius: 4,\n        backgroundColor: theme.custom.apiDetailPages.tokenTextBoxBackground,\n        color: theme.palette.getContrastText(theme.custom.apiDetailPages.tokenTextBoxBackground),\n        border: '1px solid #ced4da',\n        padding: '5px 12px',\n        height: 100,\n        width: '100%',\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        fontFamily: ['-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"',\n            'Arial', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(','),\n        '&:focus': {\n            borderColor: '#80bdff',\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n        },\n    },\n    epWrapper: {\n        display: 'flex',\n        marginTop: 20,\n    },\n    secretWrapper: {\n        display: 'flex',\n        marginBottom: 20,\n    },\n    prodLabel: {\n        lineHeight: '30px',\n        marginRight: 10,\n        width: 100,\n        'text-align-last': 'center',\n        whiteSpace: 'nowrap',\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth - theme.custom.leftMenu.width,\n    },\n    root: {\n        marginTop: 20,\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n\n    },\n});\n/**\n *\n *\n * @class ViewToken\n * @extends {React.Component}\n */\nclass ViewToken extends React.Component {\n    state = {\n        tokenCopied: false,\n    };\n\n    /**\n     *\n     *\n     * @memberof ViewToken\n     */\n    onCopy = (name) => () => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = function () {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Generate a comma separate string of token scopes\n     * @param {string} tokenScopes token scopes\n     * @returns {String} scopeString comma separated string of token scopes\n     * @memberof ViewToken\n     */\n    getTokeScopesString(tokenScopes) {\n        if (tokenScopes) {\n            return tokenScopes.join(', ');\n        }\n        return '';\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof ViewToken\n     */\n    render() {\n        const {\n            classes, token, consumerSecret, intl,\n        } = this.props;\n        const { tokenCopied } = this.state;\n        return (\n            <div className={classes.root}>\n                {consumerSecret && (\n                    <div className={classes.secretWrapper}>\n                        <ViewSecret secret={{ consumerSecret }} />\n                    </div>\n                )}\n                <InlineMessage type='warn'>\n                    <Typography variant='h5' component='h3'>\n                        {(token.isOauth) && (\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewToken.please.copy'\n                                defaultMessage='Please Copy the Access Token'\n                            />\n                        )}\n                        {(!token.isOauth) && (\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewToken.please.copy.apikey'\n                                defaultMessage='Please Copy the API Key'\n                            />\n                        )}\n                    </Typography>\n                    <Typography component='p'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewToken.please.copy.help'\n                            defaultMessage={'If the token type is JWT or API Key, please copy this generated token value as it will be displayed only for'\n                            + ' the current browser session. '\n                            + '( The token will not be visible in the UI after the page is refreshed. )'}\n                        />\n                    </Typography>\n                </InlineMessage>\n                <div className={classes.epWrapper}>\n                    <label for='access-token' className={classes.prodLabel}>\n                        {(token.isOauth) && (\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewToken.access.token'\n                                defaultMessage='Access Token'\n                            />\n                        )}\n                        {(!token.isOauth) && (\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewToken.apikey'\n                                defaultMessage='API Key'\n                            />\n                        )}\n                    </label>\n                    <TextField\n                        defaultValue={token.accessToken}\n                        id='access-token'\n                        multiline\n                        fullWidth\n                        rows={4}\n                        InputProps={{\n                            disableUnderline: true,\n                            classes: {\n                                root: classes.bootstrapRoot,\n                                input: classes.bootstrapInput,\n                            },\n                        }}\n                        InputLabelProps={{\n                            shrink: true,\n                            className: classes.bootstrapFormLabel,\n                        }}\n                    />\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewToken.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewToken.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard text={token.accessToken} onCopy={this.onCopy('tokenCopied')}>\n                            <IconButton aria-label='Copy to clipboard'>\n                                <FileCopy color='secondary'>file_copy</FileCopy>\n                            </IconButton>\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n                <FormHelperText>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewToken.info.first'\n                        defaultMessage='Above token has a validity period of '\n                    />\n                    {token.validityTime}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewToken.info.second'\n                        defaultMessage=' seconds'\n                    />\n                    {token.isOauth && (\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewToken.info.third'\n                            defaultMessage=' and the token has ('\n                        />\n                    )}\n                    {this.getTokeScopesString(token.tokenScopes)}\n                    {token.isOauth && (\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewToken.info.fourth'\n                            defaultMessage=') scopes'\n                        />\n                    )}\n.\n                </FormHelperText>\n            </div>\n        );\n    }\n}\n\nViewToken.defaultProps = {\n    consumerSecret: null,\n};\n\nViewToken.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    token: PropTypes.shape({\n        accessToken: PropTypes.string.isRequired,\n        validityTime: PropTypes.number.isRequired,\n        tokenScopes: PropTypes.array.isRequired,\n    }).isRequired,\n    consumerSecret: PropTypes.string,\n};\n\nexport default injectIntl(withStyles(styles)(ViewToken));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport InlineMessage from '../InlineMessage';\n/**\n *\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    bootstrapRoot: {\n        padding: 0,\n        'label + &': {\n            marginTop: theme.spacing(3),\n        },\n    },\n    bootstrapInput: {\n        borderRadius: 4,\n        backgroundColor: theme.palette.common.white,\n        border: '1px solid #ced4da',\n        padding: '5px 12px',\n        width: 350,\n        height: 100,\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        fontFamily: ['-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"',\n            'Arial', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(','),\n        '&:focus': {\n            borderColor: '#80bdff',\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n        },\n    },\n    epWrapper: {\n        display: 'flex',\n        marginTop: 20,\n    },\n    prodLabel: {\n        lineHeight: '30px',\n        marginRight: 10,\n        width: 100,\n        'text-align-last': 'center',\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth - theme.custom.leftMenu.width,\n    },\n    root: {\n        marginBottom: 20,\n    },\n});\n/**\n *\n *\n * @class ViewSecret\n * @extends {React.Component}\n */\nclass ViewSecret extends React.Component {\n    state = {\n        secretCopied: false,\n    };\n\n    /**\n     *\n     *\n     * @memberof ViewSecret\n     */\n    onCopy = name => () => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = function () {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Generate a comma separate string of token scopes\n     *\n     * @param {string} tokenScopes token scopes\n     * @returns {String} scopeString comma separated string of token scopes\n     * @memberof ViewSecret\n     */\n    getTokeScopesString(tokenScopes) {\n        if (tokenScopes) {\n            return tokenScopes.join(', ');\n        }\n        return '';\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof ViewSecret\n     */\n    render() {\n        const { classes, secret, intl } = this.props;\n        const { secretCopied } = this.state;\n        return (\n            <div className={classes.root}>\n                <InlineMessage type='warn'>\n                    <Typography variant='h5' component='h3'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewSecret.please.copy.secret'\n                            defaultMessage='Please Copy the Consumer Secret'\n                        />\n                    </Typography>\n                    <Typography component='p'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewSecret.please.copy.secret.help'\n                            defaultMessage={`Please make a note of the regenerated consumer \n                            secret value as it will be displayed only once.`}\n                        />\n                    </Typography>\n                </InlineMessage>\n                <div className={classes.epWrapper}>\n                    <Typography className={classes.prodLabel}>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewSecret.consumer.secret'\n                            defaultMessage='Consumer Secret'\n                        />\n                    </Typography>\n                    <TextField\n                        defaultValue={secret.consumerSecret}\n                        id='bootstrap-input'\n                        multiline\n                        rows={4}\n                        InputProps={{\n                            disableUnderline: true,\n                            classes: {\n                                root: classes.bootstrapRoot,\n                                input: classes.bootstrapInput,\n                            },\n                        }}\n                        InputLabelProps={{\n                            shrink: true,\n                            className: classes.bootstrapFormLabel,\n                        }}\n                    />\n                    <Tooltip\n                        title={\n                            secretCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewSecret.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewSecret.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard text={secret.consumerSecret} onCopy={this.onCopy('secretCopied')}>\n                            <FileCopy color='secondary'>file_copy</FileCopy>\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n        );\n    }\n}\n\nViewSecret.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    secret: PropTypes.shape({\n        consumerSecret: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(ViewSecret));\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\n// Styles for Grid and Paper elements\nconst styles = theme => ({\n    FormControl: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: theme.spacing(0.25),\n    },\n});\n\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: 224,\n            width: 250,\n        },\n    },\n    anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"left\"\n    },\n    transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"left\"\n    },\n    getContentAnchorEl: null,\n};\n\n/**\n * Used to display generate acctoken UI\n */\nconst tokens = (props) => {\n    /**\n    * This method is used to handle the updating of create application\n    * request object.\n    * @param {*} field field that should be updated in appliction request\n    * @param {*} event event fired\n    */\n    const handleChange = (field, event) => {\n        const { accessTokenRequest, updateAccessTokenRequest } = props;\n        const newRequest = { ...accessTokenRequest };\n\n        const { target: currentTarget } = event;\n\n        switch (field) {\n            case 'scopesSelected':\n                newRequest.scopesSelected = currentTarget.value;\n                break;\n            case 'keyType':\n                newRequest.keyType = currentTarget.value;\n                break;\n            default:\n                break;\n        }\n        updateAccessTokenRequest(newRequest);\n    };\n    const {\n        classes, accessTokenRequest, subscriptionScopes,\n    } = props;\n\n    return (\n        <>\n            <FormControl\n                margin='normal'\n                className={classes.FormControlOdd}\n                disabled={subscriptionScopes.length === 0}\n            >\n                <InputLabel htmlFor='quota-helper' className={classes.quotaHelp}>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.Tokens.when.you.generate.scopes'\n                        defaultMessage='Scopes'\n                    />\n\n                </InputLabel>\n                <Select\n                    name='scopesSelected'\n                    multiple\n                    value={accessTokenRequest.scopesSelected}\n                    onChange={e => handleChange('scopesSelected', e)}\n                    input={<Input id='select-multiple-chip' />}\n                    renderValue={selected => (\n                        <div className={classes.chips}>\n                            {selected.map(value => (\n                                <Chip key={value} label={value} className={classes.chip} />\n                            ))}\n                        </div>\n                    )}\n                    MenuProps={MenuProps}\n                >\n                    {subscriptionScopes.map(scope => (\n                        <MenuItem\n                            key={scope}\n                            value={scope}\n                        >\n                            {scope}\n                        </MenuItem>\n                    ))}\n                </Select>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.Tokens.when.you.generate'\n                        defaultMessage={'When you generate access tokens to APIs protected by scope/s,'\n                            + ' you can select the scope/s and then generate the token for it. Scopes enable '\n                            + 'fine-grained access control to API resources based on user roles. You define scopes to '\n                            + 'an API resource. When a user invokes the API, his/her OAuth 2 bearer token cannot grant '\n                            + 'access to any API resource beyond its associated scopes.'}\n                    />\n                </Typography>\n            </FormControl>\n        </>\n    );\n};\ntokens.contextTypes = {\n    intl: PropTypes.shape({}).isRequired,\n};\nexport default withStyles(styles)(tokens);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport { app } from 'Settings';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    messageWrapper: {\n        marginTop: theme.spacing(4),\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\n/**\n * Render no api section\n * @returns {void}\n */\nexport default function NoApi() {\n    const classes = useStyles();\n    const theme = useTheme();\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                <Grid item xs={12} className={classes.messageWrapper}>\n                    <img alt='API icon' src={app.context + theme.custom.noApiImage} className={classes.messageWrapper} />\n                    <Typography id='itest-no-apis' variant='h5' gutterBottom>\n                        <FormattedMessage id='Apis.Listing.NoApi.nodata.title' defaultMessage='No APIs Available' />\n                    </Typography>\n                    <Typography variant='subtitle1' gutterBottom>\n                        <FormattedMessage\n                            id='Apis.Listing.NoApi.nodata.content'\n                            defaultMessage='There are no APIs to display right now.'\n                        />\n                    </Typography>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CustomIcon from './CustomIcon';\n\nconst useStylesBootstrap = makeStyles((theme) => ({\n    arrow: {\n        color: theme.palette.common.black,\n    },\n    tooltip: {\n        backgroundColor: theme.palette.common.black,\n    },\n}));\n\nfunction BootstrapTooltip(props) {\n    const classes = useStylesBootstrap();\n\n    return <Tooltip arrow classes={classes} {...props} />;\n}\nconst styles = (theme) => ({\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.custom.leftMenu.background),\n        textTransform: 'capitalize',\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n    leftLInkText_IconLeft: {\n        paddingLeft: 10,\n    },\n    LeftMenu: {\n        backgroundColor: theme.custom.leftMenu.background,\n        width: theme.custom.leftMenu.width,\n        textAlign: 'center',\n        fontFamily: theme.typography.fontFamily,\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        top: 0,\n    },\n    leftLInk: {\n        paddingTop: theme.spacing(0.6),\n        paddingBottom: theme.spacing(0.6),\n        paddingLeft: theme.spacing(1),\n        [theme.breakpoints.down('sm')]: {\n            paddingLeft: 0,\n        },\n        paddingRight: 0,\n        fontSize: theme.typography.caption.fontSize,\n        cursor: 'pointer',\n        textDecoration: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    leftLink_Icon: {\n        color: theme.palette.getContrastText(theme.custom.leftMenu.background),\n        fontSize: theme.custom.leftMenu.iconSize + 'px',\n    },\n    leftLink_IconLeft: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    noIcon: {\n        display: 'none',\n    },\n    leftLInkText_NoText: {\n        display: 'none',\n    },\n    leftLInkText_NoTextWhenSmall: {\n        [theme.breakpoints.down('sm')]: {\n            display: 'none !important',\n        }\n    },\n    submenu: {\n        paddingLeft: 12,\n        [theme.breakpoints.down('sm')]: {\n            paddingLeft: 0,\n            color: theme.palette.grey[500],\n        }\n    },\n});\n/**\n * Renders the left menu section.\n * @param {JSON} props props passed from parent\n * @returns {JSX} Leftmenu element.\n */\nfunction LeftMenuItem(props) {\n    const [selected, setSelected] = useState(false);\n\n    const {\n        classes, theme, Icon, to, history, text, route, submenu, open, id,\n    } = props;\n    const routeToCheck = route || text;\n    const { leftMenu } = theme.custom;\n    const strokeColor = theme.palette.getContrastText(leftMenu.background);\n    const { iconSize } = leftMenu;\n    const ditectCurrentMenu = (location = null) => {\n        if (!location) {\n            location = window.location;\n        }\n        const { pathname } = location;\n\n        const test1 = new RegExp('/' + routeToCheck + '$', 'g');\n        const test2 = new RegExp('/' + routeToCheck + '/', 'g');\n        if (pathname.match(test1) || pathname.match(test2)) {\n            setSelected(true);\n        } else {\n            setSelected(false);\n        }\n\n\n    };\n    useEffect(() => {\n        ditectCurrentMenu();\n    }, []);\n    history.listen((location) => {\n        ditectCurrentMenu(location);\n    });\n    let activeBackground = '';\n    if (selected && !submenu) {\n        activeBackground = leftMenu.leftMenuActive;\n    } else if (selected && submenu) {\n        activeBackground = leftMenu.leftMenuActiveSubmenu;\n    }\n    return (\n        <BootstrapTooltip title={props.text} placement=\"right\">\n            <Link\n                className={classNames(\n                    classes.leftLInk,\n                    {\n                        [classes.leftLink_IconLeft]: leftMenu === 'icon left',\n                        [classes.submenu]: submenu,\n                        'selected': selected,\n                    },\n                    'leftLInk',\n                )}\n                to={to}\n                style={{ backgroundColor: activeBackground }}\n                title={text}\n                id={id}\n            >\n                {\n                    // If the icon pro ( which is coming from the React Material library )\n                    // is coming we add css class and render.\n                    // If leftMenu='no icon' at the theme object we hide the icon. Also we add static classes to\n                    // allow customers theme\n                    // the product without compiling.\n                    Icon ? (\n                        <span className={`${route.replace(/[^a-zA-Z ]/g, '-')}-left-menu-icon`}>\n                            {React.cloneElement(Icon, {\n                            className: classNames(\n                                classes.leftLink_Icon,\n                                {\n                                    [classes.noIcon]: leftMenu.style === 'no icon',\n                                    [classes.submenu]: submenu,\n                                },\n                                'leftLink_Icon',\n                            ),\n                        })}</span>\n                    ) : (\n                            // We can also add custom icons\n                            <span className={`${route.replace(/[^a-zA-Z ]/g, '-')}-left-menu-icon`}>\n                                <CustomIcon\n                                    strokeColor={submenu ? '#cccccc' : strokeColor}\n                                    width={submenu ? iconSize - 10 : iconSize}\n                                    height={submenu ? iconSize - 10 : iconSize}\n                                    icon={props.iconText}\n                                    className={classNames(\n                                        classes.leftLInk,\n                                        {\n                                            [classes.noIcon]: leftMenu.style === 'no icon',\n                                        },\n                                        'leftLink_Icon',\n                                    )}\n                                />\n                            </span>\n                        )}\n                {open && (\n                    <Typography\n                        className={classNames(\n                            classes.leftLInkText,\n                            {\n                                [classes.leftLInkText_IconLeft]: leftMenu.style === 'icon left',\n                                [classes.leftLInkText_NoText]: leftMenu.style === 'no text',\n                            },\n                            classes.leftLInkText_NoTextWhenSmall,\n                            'leftLInkText',\n                        )}\n                    >\n                        {props.text}\n                    </Typography>\n                )}\n                {!open && (\n                    <Typography\n                        className={classNames(\n                            {\n                                [classes.leftLInkText_IconLeft]: leftMenu.style === 'icon left',\n                            },\n                            classes.leftLInkText_NoTextWhenSmall,\n                            'leftLInkText',\n                        )}\n                    />\n                )}\n\n\n            </Link>\n        </BootstrapTooltip>\n    );\n}\nLeftMenuItem.defaultProps = {\n    route: null,\n    iconText: null,\n    Icon: null,\n    submenu: false,\n};\nLeftMenuItem.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    Icon: PropTypes.element,\n    text: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({}),\n    ]).isRequired,\n    to: PropTypes.string.isRequired,\n    route: PropTypes.string,\n    iconText: PropTypes.string,\n    history: PropTypes.shape({\n        location: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    submenu: PropTypes.bool,\n};\nexport default withRouter(withStyles(styles, { withTheme: true })(LeftMenuItem));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport {\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\n} from '@material-ui/core/';\nimport Slide from '@material-ui/core/Slide';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst DeleteConfirmation = (props) => {\n    const { handleAppDelete, isDeleteOpen, toggleDeleteConfirmation } = props;\n    return (\n        <Dialog open={isDeleteOpen} transition={Slide} role='alertdialog'>\n            <DialogTitle>\n                <FormattedMessage\n                    id='Applications.Listing.DeleteConfirmation.dialog.title'\n                    defaultMessage='Delete Application'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.text.description'\n                        defaultMessage='The application will be removed'\n                    />\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button dense onClick={toggleDeleteConfirmation}>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button\n                    id='itest-confirm-application-delete'\n                    size='small'\n                    variant='outlined'\n                    color='primary'\n                    onClick={handleAppDelete}\n                >\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog,delete'\n                        defaultMessage='Delete'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\nDeleteConfirmation.propTypes = {\n    handleAppDelete: PropTypes.func.isRequired,\n    isDeleteOpen: PropTypes.bool.isRequired,\n    toggleDeleteConfirmation: PropTypes.func.isRequired,\n};\nexport default DeleteConfirmation;\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\nimport { useIntl } from 'react-intl';\nimport ChipInput from 'material-ui-chip-input';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    }\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n    const intl = useIntl();\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    const hasMandatoryError = (fieldValue) => {\n        let error = false;\n        if (fieldValue === '' || (Array.isArray(fieldValue) && !fieldValue.length)) {\n            error = intl.formatMessage({\n                defaultMessage: 'Required field is empty',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.required.empty.error',\n            });\n        }\n        return error;\n    }\n\n    const AppConfigLabels = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time',\n          defaultMessage: 'Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time',\n          defaultMessage: 'User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time',\n           defaultMessage: 'Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time',\n           defaultMessage: 'Id Token Expiry Time',\n        }\n    });\n\n    const AppConfigToolTips = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time.tooltip',\n           defaultMessage: 'Type Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time.tooltip',\n           defaultMessage: 'Type ID Token Expiry Time',\n        }\n    });\n\n    const getAppConfigLabel = () => {\n        return AppConfigLabels[config.name]\n            ? props.intl.formatMessage(AppConfigLabels[config.name])\n            : config.label\n    }\n\n    const getAppConfigToolTip = () => {\n        return AppConfigToolTips[config.name]\n            ? props.intl.formatMessage(AppConfigToolTips[config.name])\n            : config.tooltip\n    }\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {getAppConfigLabel()}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n                    {config.type === 'select' && config.multiple === false ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            select\n                            label={getAppConfigLabel()}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={(config.required && hasMandatoryError(selectedValue)) || getAppConfigToolTip()}\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                            required={config.required}\n                            error={config.required && hasMandatoryError(selectedValue)}                            \n                        >\n                            {config.values.map(key => (\n                                <MenuItem key={key} value={key}>\n                                    {key}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                        <>\n                            <FormControl \n                            variant=\"outlined\" \n                            className={classes.formControl} \n                            fullWidth \n                            error={config.required && hasMandatoryError(selectedValue)}\n                            required={config.required}\n                            >\n                                <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                <Select\n                                    labelId=\"multi-select-label\"\n                                    id=\"multi-select-outlined\"\n                                    margin='dense'\n                                    displayEmpty\n                                    name={config.name}\n                                    multiple\n                                    value={selectedValue}\n                                    onChange={e => handleAppRequestChange(e)}\n                                    input={<Input id='multi-select-outlined' />}\n                                    renderValue={selected => (\n                                        <div className={classes.chips}>\n                                            {selected.map(value => (\n                                                <Chip key={value} label={value} className={classes.chip} />\n                                            ))}\n                                        </div>\n                                    )}\n                                    label={getAppConfigLabel()}\n                                >\n                                    {config.values.map(key => (\n                                        <MenuItem key={key} value={key}>\n                                            <Checkbox checked={selectedValue.indexOf(key) > -1} />\n                                            <ListItemText primary={key} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText>{(config.required && hasMandatoryError(selectedValue)) || getAppConfigToolTip()}</FormHelperText>\n                            </FormControl>\n                        </>\n                    ) : (config.type === 'input' && config.multiple === true) ? (\n                        <>\n                            <ChipInput\n                                value={selectedValue}\n                                fullWidth\n                                variant='outlined'\n                                id=\"multi-input-outlined\"\n                                label={config.label}\n                                onAdd={(tag) => {\n                                    const e = {target:{name:config.name,value:[...selectedValue, tag]}}\n                                    handleAppRequestChange(e)\n                                    }\n                                }\n                                chipRenderer={({ value }, key) => (\n                                    <Chip\n                                        key={key}\n                                        size='small'\n                                        label={value}\n                                        onDelete={() => {\n                                            const e = {target:{name:config.name,value:selectedValue.filter(\n                                            (oldScope)=> oldScope !== value)}}\n                                            handleAppRequestChange(e);\n                                        }}\n                                        style={{\n                                            margin: '0 8px 12px 0',\n                                            float: 'left',\n                                        }}\n                                    />\n                                )}\n                                style={{ display: 'flex' }}\n                            />\n                            <Typography variant='caption'>\n                                {config.tooltip}\n                            </Typography>\n                        </>\n                    ) : (config.type === 'input') ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            label={getAppConfigLabel()}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={(config.required && hasMandatoryError(selectedValue)) || getAppConfigToolTip()}\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                            required={config.required}\n                            error={config.required && hasMandatoryError(selectedValue)}\n                        />\n                    ) : (\n                                    <TextField\n                                        classes={{\n                                            root: classes.removeHelperPadding,\n                                        }}\n                                        fullWidth\n                                        id={config.name}\n                                        label={getAppConfigLabel()}\n                                        value={selectedValue}\n                                        name={config.name}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {getAppConfigToolTip()}\n                                            </Typography>\n                                        }\n                                        margin='dense'\n                                        variant='outlined'\n                                        disabled={!isUserOwner}\n                                    />\n                                )}\n                            </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        classes, notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':  \n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                let hasMandatoryError = false;\n                keyManagerConfig.applicationConfiguration.forEach((config) => {\n                    let prop = newRequest.additionalProperties[config.name];\n                    if (config.required) {\n                        console.log(prop);\n                        if (prop === '' || (Array.isArray(prop) && !prop.length)) {\n                            hasMandatoryError = true;\n                        }\n                    }\n                });\n                updateHasError(hasMandatoryError);\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={tokenEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={revokeEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={userInfoEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn}>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyType,\n        keyManagerConfig,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    return (\n        <React.Fragment>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help'\n                    defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                />\n            </Typography>\n\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=password&username=Username&password=Password\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                    defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                />\n            </Typography>\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=client_credentials\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Alert1 from 'AppComponents/Shared/Alert';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    Alert1.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const {\n            classes, intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                                id='visibility-toggle-btn'\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={\n                                                    secretCopied\n                                                        ? intl.formatMessage({\n                                                            defaultMessage: 'Copied',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                        })\n                                                        : intl.formatMessage({\n                                                            defaultMessage: 'Copy to clipboard',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copy.to.clipboard',\n                                                        })\n                                                }\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                className={classes.button}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead = 'Undefined';\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button\n                                        onClick={this.generateAccessToken}\n                                        color='primary'\n                                        id='generate-access-token-generate-btn'\n                                        disabled={isUpdating}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button \n                                onClick={this.handleClose} \n                                id='generate-access-token-close-btn'\n                                color='primary' \n                                autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {keyManagerConfig.enableTokenGeneration && supportedGrantTypesUnchanged\n                                    && supportedGrantTypesUnchanged.find((a) => a.includes('client_credentials'))\n                                    && (\n                                        <Button\n                                            id='generate-access-token-oauth2'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    id='curl-to-generate-access-token-btn'\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {supportedGrantTypesUnchanged && !supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport Validation from 'AppData/Validation';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        '& label>span:nth-child(1)': {\n            color: 'red',\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{children: <span/>}}/>);\n\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            if (confItem.type === 'select' && confItem.multiple) {\n                additionalProperties[confItem.name] = (confItem.default && confItem.default.split(\",\")) || [];\n            } else {\n                additionalProperties[confItem.name] = confItem.default || '';\n            }\n        });\n        return additionalProperties;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                || availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({ keyRequest: newRequest, selectedTab: newSelectedTab, mode });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys, keyRequest: newRequest, keyManagers: responseKeyManagerList, selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectdKMGrants = selectdKM.availableGrantTypes || [];\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes: selectdKMGrants.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({ keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(`${intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                    defaultMessage: 'Error occurred when generating application keys',\n                })}, ${error.response.body.message}`);\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                    defaultMessage: 'Error occurred when providing application keys',\n                }));\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary, selectedApp: { hashEnabled },\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled, mode,\n        } = this.state;\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography variant='h5' component='h3'>\n                            <FormattedMessage id='Shared.AppsAndKeys.TokenManager.no.km' defaultMessage='No Key Managers' />\n                        </Typography>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                defaultMessage='No Key Managers active to generate keys.'\n                            />\n                        </Typography>\n                    </InlineMessage>\n                </div>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Loading />;\n        }\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        selectedTab={selectedTab}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        return (\n            <>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={selectedTab}\n                            onChange={this.handleTabChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                            aria-label=\"scrollable auto tabs example\"\n                        >\n                            {keyManagers.map((keymanager) => (\n                                <Tab\n                                    label={keymanager.displayName || keymanager.name}\n                                    value={keymanager.name}\n                                    disabled={!keymanager.enabled}\n                                    id={keymanager.name.replace(/\\s/g, '')}\n                                />\n                            ))}\n                        </Tabs>\n                    </AppBar>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                            <Box display='flex' flexDirection='row'>\n                                <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                    <FormattedMessage\n                                        defaultMessage='Key and Secret'\n                                        id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                    />\n                                </Typography>\n                                {\n                                    keymanager.enableMapOAuthConsumerApps && (\n                                        <Box ml={2}>\n                                            <ImportExternalApp\n                                                onChange={this.handleOnChangeProvidedOAuth}\n                                                consumerKey={providedConsumerKey}\n                                                consumerSecret={providedConsumerSecret}\n                                                isUserOwner={isUserOwner}\n                                                key={key}\n                                                provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                importDisabled={importDisabled}\n                                            />\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            <Box m={2}>\n                                <ViewKeys\n                                    initialToken={initialToken}\n                                    initialValidityTime={initialValidityTime}\n                                    initialScopes={initialScopes}\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    keys={keys}\n                                    selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                    isUserOwner={isUserOwner}\n                                    hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                    keyManagerConfig={keymanager}\n                                />\n                            </Box>\n                            <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                {\n                                    key\n                                        ? (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configurations'\n                                                id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configuration'\n                                                id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                            />\n                                        )\n                                }\n                            </Typography>\n                            <Box m={2}>\n                                <KeyConfiguration\n                                    keys={keys}\n                                    key={key}\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    updateKeyRequest={this.updateKeyRequest}\n                                    keyRequest={keyRequest}\n                                    isUserOwner={isUserOwner}\n                                    isKeysAvailable={key}\n                                    keyManagerConfig={keymanager}\n                                    validating={validating}\n                                    updateHasError={this.updateHasError}\n                                    callbackError={hasError}\n                                    setValidating={this.setValidating}\n                                />\n                                <div className={classes.generateWrapper}>\n                                    <ScopeValidation\n                                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                        resourceMethod={resourceMethods.POST}\n                                    >\n                                        {!isUserOwner ? (\n                                            <>\n                                                <Button\n                                                    id='generate-keys'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={\n                                                        key ? this.updateKeys : this.generateKeys\n                                                    }\n                                                    disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation}\n                                                >\n                                                    {key ?\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.update.keys',\n                                                            defaultMessage: 'Update Keys'})\n                                                    :\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                            defaultMessage: 'Generate Keys'})\n                                                    }\n                                                    {isLoading && <CircularProgress size={20}/>}\n                                                </Button>\n                                                <Typography variant='caption'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Only owner can generate or update keys'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        ) : (\n                                            <Box display='flex'>\n                                                <Button\n                                                    id='generate-keys'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={key ? this.updateKeys : this.generateKeys}\n                                                    disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation) || (mode && mode === 'MAPPED')}\n                                                >\n                                                    {key ?\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.update',\n                                                            defaultMessage: 'Update'})\n                                                    :\n                                                        this.props.intl.formatMessage({\n                                                            id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                            defaultMessage: 'Generate Keys'})\n                                                    }\n                                                    {isLoading && <CircularProgress size={20}/>}\n                                                </Button>\n                                                {!keymanager.enableOAuthAppCreation && (\n                                                    <Box m={2} display='flex'>\n                                                        <WarningIcon className={classes.warningIcon}/>\n                                                        <Typography variant='body1'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                values={{kmName: keymanager.displayName || keymanager.name}}\n                                                            />\n                                                        </Typography>\n                                                    </Box>\n                                                )}\n                                            </Box>\n                                        )}\n                                    </ScopeValidation>\n                                </div>\n\n                            </Box>\n                        </TabPanel>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Validation from 'AppData/Validation';\n\n// Styles for Grid and Paper elements\nconst styles = theme => ({\n    FormControl: {\n        'margin-bottom': '8px',\n        width: '100%',\n        padding: '0px 10px',\n    },\n});\n\n/**\n * Used to display generate api key in UI\n */\nconst tokens = (props) => {\n    const [infiniteValidity, setInfiniteValidity] = useState(true);\n    const [invalidTimeout, setInvaildTimeout] = useState(false);\n\n    /**\n    * This method is used to handle the updating of create api key\n    * request object.\n    * @param {*} field\n    * @param {*} event event fired\n    */\n    const handleChange = (field, event) => {\n        const { accessTokenRequest, updateAccessTokenRequest } = props;\n        const newRequest = { ...accessTokenRequest };\n\n        const { target: currentTarget } = event;\n\n        switch (field) {\n            case 'infiniteValidity':\n                setInfiniteValidity(currentTarget.checked);\n                if (currentTarget.checked) {\n                    newRequest.timeout = -1;\n                } else {\n                    newRequest.timeout = null;\n                }\n                break;\n            case 'timeout':\n                if (Validation.number.validate(currentTarget.value).error === undefined) {\n                    newRequest.timeout = currentTarget.value;\n                    setInvaildTimeout(false);\n                } else {\n                    newRequest.timeout = null;\n                    setInvaildTimeout(true);\n                }\n                break;\n            default:\n                break;\n        }\n        updateAccessTokenRequest(newRequest);\n    };\n    const { classes, intl, accessTokenRequest } = props;\n\n    return (\n        <React.Fragment>\n            <FormControl margin='normal' className={classes.FormControl}>\n                <FormControlLabel\n                    control={<Checkbox\n                        checked={infiniteValidity}\n                        onChange={e => handleChange('infiniteValidity', e)}\n                        value={accessTokenRequest.timeout}\n                        color='primary'\n                    />}\n                    label={intl.formatMessage({\n                        defaultMessage: 'API Key with infinite validity period',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey.validity.period.label',\n                    })}\n                />\n                {!infiniteValidity && <TextField\n                    required\n                    label={intl.formatMessage({\n                        defaultMessage: 'API Key validity period',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey',\n                    })}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    helperText={\n                        invalidTimeout ? (\n                            intl.formatMessage({\n                                defaultMessage: 'Please use a valid number for API Key expiry time',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.error',\n                            })\n                        ) : (\n                            intl.formatMessage({\n                                defaultMessage: 'You can set an expiration period to determine the validity period of '\n                                + 'the token after generation. Set this as -1 to ensure that the '\n                                + 'apikey never expires.',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.help',\n                            })\n                        )\n                    }\n                    fullWidth\n                    name='timeout'\n                    onChange={e => handleChange('timeout', e)}\n                    placeholder={intl.formatMessage({\n                        defaultMessage: 'Enter time in seconds',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey.enter.time',\n                    })}\n                    value={accessTokenRequest.timeout}\n                    autoFocus\n                    className={classes.inputText}\n                    error={invalidTimeout}\n                />\n                }\n            </FormControl>\n        </React.Fragment>\n    );\n};\ntokens.contextTypes = {\n    intl: PropTypes.shape({}).isRequired,\n};\nexport default injectIntl(withStyles(styles)(tokens));\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from \"react\";\nimport { injectIntl, FormattedMessage } from \"react-intl\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Box from \"@material-ui/core/Box\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Validation from 'AppData/Validation';\n\nconst styles = (theme) => ({\n  FormControl: {\n    \"margin-bottom\": theme.spacing(1),\n    width: \"100%\",\n    padding: theme.spacing(0, 1),\n  },\n  outterBox: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    borderColor: theme.palette.text.secondary,\n    marginLeft: 20,\n    borderColor: '#cccccc',\n  },\n  Fab: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n});\n\n/**\n * Used to display IP address and Http Referer restrictions in generate api key UI\n */\nconst apiKeyRestrictions = (props) => {\n  const [invalidIP, setInvalidIP] = useState(false);\n  const [invalidReferer, setInvalidReferer] = useState(false);\n\n  const {\n    intl,\n    classes,\n    newIP,\n    updateNewIp,\n    ipList,\n    updateIpList,\n    restrictSchema,\n    updateRestrictSchema,\n    newReferer,\n    updateNewReferer,\n    refererList,\n    updateRefererList,\n  } = props;\n\n  const onRefererTextUpdate = (e) => {\n    updateNewReferer(e.target.value.trim());\n    if (e.target.value.trim() === \"\") {\n      setInvalidReferer(false);\n    }\n  };\n\n  const addRefererItem = () => {\n    if (newReferer !== null && newReferer !== \"\") {\n      setInvalidReferer(false);\n      refererList.push(newReferer.trim());\n      updateRefererList(refererList);\n      updateNewReferer(\"\");\n    } else {\n      setInvalidReferer(true);\n    }\n  };\n\n  const deleteRefererItem = (refererItem) => {\n    refererList.splice(refererList.indexOf(refererItem), 1);\n    updateRefererList(refererList);\n  };\n\n  const onIpTextUpdate = (e) => {\n    updateNewIp(e.target.value.trim());\n    if (e.target.value.trim() === \"\") {\n      setInvalidIP(false);\n    }\n  };\n\n  const addIpItem = () => {\n    if (newIP !== null && newIP !== \"\") {\n      if (Validation.ipAddress.validate(newIP).error) {\n        setInvalidIP(true);\n      } else {\n        setInvalidIP(false);\n        ipList.push(newIP);\n        updateIpList(ipList);\n        updateNewIp(\"\");\n      }\n    }\n  };\n\n  const deleteIpItem = (ipItem) => {\n    ipList.splice(ipList.indexOf(ipItem), 1);\n    updateIpList(ipList);\n  };\n\n  const onRestrictSchemaChange = (e) => {\n    updateRestrictSchema(e.target.value);\n    updateIpList([]);\n    updateRefererList([]);\n    updateNewIp(\"\");\n    updateNewReferer(\"\");\n    setInvalidIP(false);\n    setInvalidReferer(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Box border={1} borderRadius={5} className={classes.outterBox}>\n        <Typography variant=\"body1\">\n          <FormattedMessage\n              defaultMessage='Key Restrictions'\n              id='Shared.ApiKeyRestriction.key.restrictions'\n          />\n        </Typography>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            aria-label=\"API Key Restrictions\"\n            value={restrictSchema}\n            row\n            onChange={onRestrictSchemaChange}\n          >\n            <FormControlLabel\n              value=\"none\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-none'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"None\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.none\",\n              })}\n              labelPlacement=\"end\"\n            />\n            <FormControlLabel\n              value=\"ip\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-ip'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"IP Addresses\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.ip.addresses\",\n              })}\n              labelPlacement=\"end\"\n            />\n            <FormControlLabel\n              value=\"referer\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-referer'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"HTTP Referrers (Web Sites)\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.http.referrers\",\n              })}\n              labelPlacement=\"end\"\n            />\n          </RadioGroup>\n        </FormControl>\n\n        {restrictSchema === \"ip\" && (\n          <Box component=\"div\" id=\"ipPanel\">\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justify=\"left\"\n              alignItems=\"left\"\n            >\n              <Grid item md={10} xs={10}>\n                <TextField\n                  label={intl.formatMessage({\n                    defaultMessage: \"IP Address\",\n                    id:\n                      \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.address.label\",\n                  })}\n                  value={newIP}\n                  onChange={onIpTextUpdate}\n                  className={classes.inputText}\n                  helperText={\n                    invalidIP\n                      ? intl.formatMessage({\n                          defaultMessage: \"Invalid IP Address\",\n                          id:\n                            \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.validity.error\",\n                        })\n                      : \"\"\n                  }\n                  error={invalidIP}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  placeholder={intl.formatMessage({\n                    defaultMessage: \"Enter IP Address\",\n                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.ip\",\n                  })}\n                  fullWidth\n                  id='ip-address-txt'\n                />\n              </Grid>\n              <Grid item md={2} xs={2}>\n                <span>\n                  <Fab\n                    className={classes.Fab}\n                    size=\"small\"\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={addIpItem}\n                    id='ip-address-add-btn'\n                  >\n                    <AddIcon />\n                  </Fab>\n                </span>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justify=\"left\"\n              alignItems=\"left\"\n              md={10}\n              xs={10}\n            >\n              {ipList.length > 0 && (\n                <List>\n                  {ipList.map((ip, index) => (\n                    <ListItem>\n                      <ListItemText primary={ip} />\n                      <ListItemSecondaryAction>\n                        <Tooltip title={\n                          intl.formatMessage({\n                            defaultMessage: 'Delete task',\n                            id: 'Shared.ApiKeyRestriction.key.restrictions.delete.task.tooltip',\n                          })}\n                          placement=\"top\"\n                        >\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => deleteIpItem(ip)}\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </Grid>\n          </Box>\n        )}\n\n        {restrictSchema === \"referer\" && (\n          <Box component=\"div\" id=\"refererPanel\">\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justify=\"left\"\n              alignItems=\"left\"\n            >\n              <Grid item md={10} xs={10}>\n                <TextField\n                  label={intl.formatMessage({\n                    defaultMessage: \"Referer\",\n                    id:\n                      \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.referer.label\",\n                  })}\n                  value={newReferer}\n                  onChange={onRefererTextUpdate}\n                  className={classes.inputText}\n                  helperText={\n                    invalidReferer\n                      ? intl.formatMessage({\n                          defaultMessage: \"Invalid Http Referer\",\n                          id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.referer.validity.error\",\n                        })\n                      : \"\"\n                  }\n                  error={invalidReferer}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  placeholder={intl.formatMessage({\n                    defaultMessage: \"Enter Http Referer\",\n                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.referer\",\n                  })}\n                  fullWidth\n                  id='referer-txt'\n                />\n              </Grid>\n              <Grid item md={2} xs={2}>\n                <span>\n                  <Fab\n                  size=\"small\"\n                    className={classes.Fab}\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={addRefererItem}\n                  id='referer-add-btn'\n                  >\n                    <AddIcon />\n                  </Fab>\n                </span>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justify=\"left\"\n              alignItems=\"left\"\n              md={10}\n              xs={10}\n            >\n              {refererList.length > 0 && (\n                <List>\n                  {refererList.map((referer, index) => (\n                    <ListItem>\n                      <ListItemText primary={referer} />\n                      <ListItemSecondaryAction>\n                        <Tooltip title={\n                          intl.formatMessage({\n                            defaultMessage: 'Delete task',\n                            id: 'Shared.ApiKeyRestriction.key.restrictions.delete.task.tooltip',\n                          })}\n                          placement=\"top\"\n                        >\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => deleteRefererItem(referer)}\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </Grid>\n          </Box>\n        )}\n      </Box>\n    </React.Fragment>\n  );\n};\napiKeyRestrictions.contextTypes = {\n  intl: PropTypes.shape({}).isRequired,\n};\nexport default injectIntl(withStyles(styles)(apiKeyRestrictions));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Grid from '@material-ui/core/Grid';\nimport ViewToken from './ViewToken';\nimport ApiKey from '../ApiKey';\nimport ApiKeyRestriction from '../ApiKeyRestriction';\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = (theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    '& span, & h5, & label, & input': {\n      color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n  },\n  dialog: {\n    '& span, & h2, & label': {\n      color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n  },\n  button: {\n    '& span': {\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n    }\n  },\n  tokenSection: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  margin: {\n    marginRight: theme.spacing(2),\n  },\n  keyConfigWrapper: {\n    flexDirection: 'column',\n    marginBottom: 0,\n  },\n  generateWrapper: {\n    padding: '10px',\n    'margin-inline-end': 'auto',\n  },\n  paper: {\n    display: 'flex',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(10),\n  },\n  dialogTitle: {\n    padding: '24px 24px 0px',\n  },\n  dialogContent: {\n    padding: '0 24px 0px',\n  },\n  formGroup: {\n    padding: '20px',\n  },\n  gridWrapper: {\n    'align-self': 'center',\n  },\n  keyTitle: {\n    textTransform: 'capitalize',\n  },\n  cardBody: {\n    padding: theme.spacing(1),\n    lineHeight: 2,\n  },\n  generateKey: {\n    '& span': {\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n    }\n  },\n});\n\nclass ApiKeyManager extends React.Component {\n  constructor(props) {\n    super(props);\n    const { classes, selectedApp, keyType } = this.props;\n    this.state = {\n      apikey: null,\n      open: false,\n      showToken: false,\n      accessTokenRequest: {\n        timeout: -1,\n      },\n      ipList: [],\n      newIP: null,\n      restrictSchema: 'none',\n      refererList: [],\n      newReferer: null,\n      isGenerating: false,\n    };\n  }\n\n  updateIpList = (ipList) => {\n    this.setState(() => ({ ipList }));\n  };\n\n  updateNewIp = (newIP) => {\n    this.setState(() => ({ newIP }));\n  };\n\n  updateRefererList = (refererList) => {\n    this.setState(() => ({ refererList }));\n  };\n\n  updateNewReferer = (newReferer) => {\n    this.setState(() => ({ newReferer }));\n  };\n\n  updateRestrictSchema = (restrictSchema) => {\n    this.setState(() => ({ restrictSchema }));\n  }\n\n  handleClose = () => {\n    this.setState(() => ({ open: false, accessTokenRequest: { timeout: -1 } }));\n  }\n\n  handleClickOpen = () => {\n    this.setState(() => ({ open: true, showToken: false }));\n  }\n\n  updateAccessTokenRequest = (accessTokenRequest) => {\n    this.setState(() => ({ accessTokenRequest }));\n  }\n\n  generateKeys = () => {\n    const { selectedApp, keyType } = this.props;\n    this.setState({isGenerating: true});\n    const client = new API();\n    const restrictions = {\n      permittedIP: this.state.ipList.join(\",\"),\n      permittedReferer: this.state.refererList.join(\",\"),\n    };\n    const promisedKey = client.generateApiKey(selectedApp.appId, keyType,\n      this.state.accessTokenRequest.timeout, restrictions);\n\n    promisedKey\n      .then((response) => {\n        console.log('Non empty response received');\n        const apikey = { accessToken: response.body.apikey, validityTime: response.body.validityTime, isOauth: false };\n        this.setState(() => ({\n          apikey, open: true, showToken: true,\n          ipList: [], refererList: []\n        }));\n        this.setState({isGenerating: false});\n      })\n      .catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(error);\n        }\n        const { status } = error;\n        if (status === 404) {\n          this.setState({\n            notFound: true, ipList: [],\n            refererList: []\n          });\n        }\n        this.setState({isGenerating: false});\n      });\n  }\n\n  render() {\n    const { classes, keyType } = this.props;\n    const {\n      showToken, accessTokenRequest, open, apikey, newIP, ipList,\n      newReferer, refererList, restrictSchema, isGenerating,\n    } = this.state;\n    return (\n      <Grid container direction=\"row\" spacing={0} justify=\"left\" alignItems=\"left\">\n        <Grid item md={5} xs={12}>\n          <ApiKeyRestriction\n            updateNewIp={this.updateNewIp}\n            newIP={newIP}\n            updateIpList={this.updateIpList}\n            ipList={ipList}\n            restrictSchema={restrictSchema}\n            updateRestrictSchema={this.updateRestrictSchema}\n            refererList={refererList}\n            newReferer={newReferer}\n            updateNewReferer={this.updateNewReferer}\n            updateRefererList={this.updateRefererList}\n          />\n          <FormGroup row className={classes.formGroup}>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClickOpen}\n              className={classes.generateKey}\n              id='generate-key-btn'\n            >\n              {this.props.intl.formatMessage({\n                id: 'Shared.AppsAndKeys.ApiKeyManager.generate.key.btn',\n                defaultMessage: 'Generate Key'})}\n            </Button>\n            <Typography\n              component=\"div\"\n              variant=\"body2\"\n              className={classes.formLabel}\n            >\n              <FormattedMessage\n                id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n                defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n              />\n            </Typography>\n          </FormGroup>\n          <Dialog\n            open={open}\n            onClose={this.handleClose}\n            aria-labelledby=\"form-dialog-title\"\n            className={classes.dialog}\n          >\n            <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n              {this.props.intl.formatMessage({\n                id: 'Shared.AppsAndKeys.ApiKeyManager.generate.api.key.btn',\n                defaultMessage: 'Generate API Key'})}\n            </DialogTitle>\n            <DialogContent className={classes.dialogContent}>\n              <DialogContentText>\n                {!showToken && (\n                  <ApiKey\n                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n                    accessTokenRequest={accessTokenRequest}\n                  />\n                )}\n                {showToken && <ViewToken token={apikey} />}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              {!showToken && (\n                <Button\n                  onClick={this.generateKeys}\n                  disabled={!accessTokenRequest.timeout || isGenerating}\n                  color=\"primary\"\n                  variant='contained'\n                  className={classes.button}\n                  id='generate-api-keys-btn'\n                >\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n                    defaultMessage=\"Generate\"\n                  />\n                   {isGenerating && <CircularProgress size={24} />}\n                </Button>\n              )}\n              <Button onClick={this.handleClose} color=\"primary\" autoFocus id='generate-api-keys-close-btn'>\n                <FormattedMessage\n                  id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n                  defaultMessage=\"Close\"\n                />\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Grid>\n        {restrictSchema === \"ip\" && (\n          <Grid item md={5} xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.heading\"\n                    defaultMessage=\"Examples of IP Addresses allowed\"\n                  />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\" className={classes.cardBody}>\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.content\"\n                    defaultMessage={\n                      \"Specify one IPv4 or IPv6 or a subnet using CIDR notation{linebreak}Examples: {ip1}, {ip2}, {ip3} or {ip4}\"\n                    }\n                    values={{\n                      linebreak: <br />,\n                      ip1: <b>192.168.1.2</b>,\n                      ip2: <b>152.12.0.0/13</b>,\n                      ip3: <b>2002:eb8::2</b>,\n                      ip4: <b>1001:ab8::/44</b>,\n                    }}\n                  />\n                </Typography>\n\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n        {restrictSchema === \"referer\" && (\n          <Grid item md={5} xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.referer.example.heading\"\n                    defaultMessage=\"Examples of URLs allowed to restrict websites\"\n                  />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\" className={classes.cardBody}>\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.content.message\"\n                    defaultMessage={\n                      \"A specific URL with an exact path: {url1}{linebreak}Any URL in a single subdomain, using a wildcard asterisk (*): {url2}{linebreak}Any subdomain or path URLs in a single domain, using wildcard asterisks (*): {url3}\"\n                    }\n                    values={{\n                      linebreak: <br />,\n                      url1: <b>www.example.com/path</b>,\n                      url2: <b>sub.example.com/*</b>,\n                      url3: <b>*.example.com/*</b>,\n                    }}\n                  />\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n}\n\nApiKeyManager.propTypes = {\n  classes: PropTypes.shape({}).isRequired,\n  selectedApp: PropTypes.shape({\n    tokenType: PropTypes.string.isRequired,\n  }).isRequired,\n  keyType: PropTypes.string.isRequired,\n  intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(ApiKeyManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../../Shared/ScopeValidation';\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n    },\n    buttonGap: {\n        marginLeft: 20,\n        '& span span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    select: {\n        width: 100,\n    },\n});\n\n/**\n * @class SubscriptionPolicySelect\n * @extends {React.Component}\n */\nclass SubscriptionPolicySelect extends React.Component {\n    /**\n     * Create instance of SubscriptionPolicySelect\n     * @param {JSON} props Props pass from the parent.\n     * @returns {void}\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedPolicy: null,\n        };\n    }\n\n    /**\n     * Calls when component did mount.\n     * @returns {void}\n     */\n    componentDidMount() {\n        const { policies } = this.props;\n\n        this.setState({ selectedPolicy: policies[0] });\n    }\n\n    /**\n     * renders method.\n     * @returns {JSX} Policy selection component.\n     */\n    render() {\n        const {\n            classes, policies, apiId, handleSubscribe, applicationId,\n        } = this.props;\n        const { selectedPolicy } = this.state;\n\n        return (\n            policies\n            && (\n                <div className={classes.root}>\n                    <Select\n                        className={classes.select}\n                        value={selectedPolicy}\n                        onChange={(e) => {\n                            this.setState({ selectedPolicy: e.target.value });\n                        }}\n                        id='policy-select'\n                    >\n                        {policies.map((policy) => (\n                            <MenuItem\n                                value={policy}\n                                key={policy}\n                                id={'policy-select-' + policy}\n                            >\n                                {policy}\n                            </MenuItem>\n                        ))}\n\n                    </Select>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.SUBSCRIPTIONS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        <Button\n                            variant='contained'\n                            size='small'\n                            className={classes.buttonGap}\n                            onClick={() => {\n                                handleSubscribe(applicationId, apiId, selectedPolicy);\n                            }}\n                            id={'policy-subscribe-btn-' + apiId}\n                        >\n                            <FormattedMessage\n                                defaultMessage='Subscribe'\n                                id='Apis.Listing.SubscriptionPolicySelect.subscribe'\n                            />\n                        </Button>\n                    </ScopeValidation>\n                </div>\n            )\n        );\n    }\n}\n\nSubscriptionPolicySelect.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    policies: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.string.isRequired,\n    handleSubscribe: PropTypes.func.isRequired,\n    applicationId: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(SubscriptionPolicySelect);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport MUIDataTable from 'mui-datatables';\nimport { injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport NoApi from 'AppComponents/Apis/Listing/NoApi';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport SubscriptionPolicySelect from './SubscriptionPolicySelect';\n\n\nconst styles = () => ({\n    root: {\n        display: 'flex',\n    },\n    buttonGap: {\n        marginRight: 10,\n    },\n});\n\n/**\n * @class APICardView\n * @param {number} page page number\n * @extends {React.Component}\n */\nclass APICardView extends React.Component {\n    /**\n     * @param {JSON} props properties passed from parent\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null,\n            loading: true,\n        };\n        this.page = 0;\n        this.count = 100;\n        this.rowsPerPage = 10;\n        this.pageType = null;\n    }\n\n    /**\n     * component mount callback\n     */\n    componentDidMount() {\n        this.getData();\n    }\n\n    /**\n     * @param {JSON} prevProps props from previous component instance\n     */\n    componentDidUpdate(prevProps) {\n        const { subscriptions, searchText } = this.props;\n        if (subscriptions.length !== prevProps.subscriptions.length) {\n            this.getData();\n        } else if (searchText !== prevProps.searchText) {\n            this.page = 0;\n            this.getData();\n        }\n    }\n\n    // get data\n    getData = () => {\n        const { intl } = this.props;\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list, pagination } = body;\n                const { total } = pagination;\n                this.count = total;\n                this.setState({ data: this.updateUnsubscribedAPIsList(list) });\n            })\n            .catch((error) => {\n                const { response } = error;\n                const { setTenantDomain } = this.props;\n                if (response && response.body.code === 901300) {\n                    setTenantDomain('INVALID');\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Invalid tenant domain',\n                        id: 'Apis.Listing.ApiTableView.invalid.tenant.domain',\n                    }));\n                } else {\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Error While Loading APIs',\n                        id: 'Apis.Listing.ApiTableView.error.loading',\n                    }));\n                }\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    /**\n    *\n    * Get List of the Ids of all APIs that have been already subscribed\n    *\n    * @returns {*} Ids of respective APIs\n    * @memberof APICardView\n    */\n    getIdsOfSubscribedEntities() {\n        const { subscriptions } = this.props;\n\n        // Get arrays of the API Ids and remove all null/empty references by executing 'fliter(Boolean)'\n        const subscribedAPIIds = subscriptions.map((sub) => sub.apiId).filter(Boolean);\n\n        return subscribedAPIIds;\n    }\n\n    changePage = (page) => {\n        const { intl } = this.props;\n        this.page = page;\n        this.setState({ loading: true });\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list } = body;\n                this.setState({\n                    data: this.updateUnsubscribedAPIsList(list),\n                });\n            })\n            .catch(() => {\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error While Loading APIs',\n                    id: 'Apis.Listing.ApiTableView.error.loading',\n                }));\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    xhrRequest = () => {\n        const { searchText } = this.props;\n        const { page, rowsPerPage } = this;\n        const api = new API();\n\n        if (searchText && searchText !== '') {\n            return api.getAllAPIs({ query: `${searchText} status:published`, limit: this.rowsPerPage, offset: page * rowsPerPage });\n        } else {\n            return api.getAllAPIs({ query: 'status:published', limit: this.rowsPerPage, offset: page * rowsPerPage });\n        }\n    };\n\n    /**\n    * Update list of unsubscribed APIs\n    * @param {Array} list array of apis\n    * @returns {Array} filtered list of apis\n    * @memberof APICardView\n    */\n    updateUnsubscribedAPIsList(list) {\n        const listLocal = list;\n        const subscribedIds = this.getIdsOfSubscribedEntities();\n        for (let i = 0; i < listLocal.length; i++) {\n            if (!((!subscribedIds.includes(listLocal[i].id) && !listLocal[i].advertiseInfo.advertised)\n                && listLocal[i].isSubscriptionAvailable)) {\n                listLocal[i].throttlingPolicies = null;\n            }\n        }\n        return listLocal;\n        // return unsubscribedAPIList;\n    }\n\n    /**\n     * @returns {JSX} render api card view\n     * @memberof APICardView\n     */\n    render() {\n        const { apisNotFound } = this.props;\n        const { loading, data } = this.state;\n        const { page, count, rowsPerPage } = this;\n\n        if (apisNotFound) {\n            return <ResourceNotFound />;\n        }\n\n        const {\n            handleSubscribe, applicationId, intl,\n        } = this.props;\n        const columns = [\n            {\n                name: 'id',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.id',\n                    defaultMessage: 'Id',\n                }),\n                options: {\n                    display: 'excluded',\n                },\n            },\n            {\n                name: 'isSubscriptionAvailable',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.isSubscriptionAvailable',\n                    defaultMessage: 'Is Subscription Available',\n                }),\n                options: {\n                    display: 'excluded',\n                },\n            },\n            {\n                name: 'name',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.name',\n                    defaultMessage: 'Name',\n                }),\n            },\n            {\n                name: 'version',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.version',\n                    defaultMessage: 'Version',\n                }),\n            },\n            {\n                name: 'throttlingPolicies',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.subscription.status',\n                    defaultMessage: 'Subscription Status',\n                }),\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const apiId = tableMeta.rowData[0];\n                            const isSubscriptionAvailable = tableMeta.rowData[1];\n                            const policies = value;\n                            if (!isSubscriptionAvailable) {\n                                return (intl.formatMessage({\n                                    id: 'Apis.Listing.APICardView.not.allowed',\n                                    defaultMessage: 'Not Allowed',\n                                }));\n                            }\n                            if (!policies) {\n                                return (intl.formatMessage({\n                                    id: 'Apis.Listing.APICardView.already.subscribed',\n                                    defaultMessage: 'Subscribed',\n                                }));\n                            }\n                            return (\n                                <SubscriptionPolicySelect\n                                    key={apiId}\n                                    policies={policies}\n                                    apiId={apiId}\n                                    handleSubscribe={(app, api, policy) => handleSubscribe(app, api, policy)}\n                                    applicationId={applicationId}\n                                />\n                            );\n                        }\n                        return <span />;\n                    },\n                },\n            },\n        ];\n        const options = {\n            search: false,\n            title: false,\n            filter: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n            responsive: 'stacked',\n            serverSide: true,\n            count,\n            page,\n            onTableChange: (action, tableState) => {\n                switch (action) {\n                    case 'changePage':\n                        this.changePage(tableState.page);\n                        break;\n                    default:\n                        break;\n                }\n            },\n            selectableRows: 'none',\n            rowsPerPage,\n            onChangeRowsPerPage: (numberOfRows) => {\n                const { page: pageInner, count: countInner } = this;\n                if (pageInner * numberOfRows > countInner) {\n                    this.page = 0;\n                }\n                this.rowsPerPage = numberOfRows;\n                this.getData();\n            },\n            textLabels: {\n                pagination: {\n                    rowsPerPage: intl.formatMessage({\n                        id: 'Apis.Listing.APICardView.rows.per.page',\n                        defaultMessage: 'Rows per page',\n                    }),\n                },\n            },\n        };\n        if (loading) {\n            return <Loading />;\n        }\n        if ((data && data.length === 0) || !data) {\n            return <NoApi />;\n        }\n        return (\n            <MUIDataTable\n                title=''\n                data={data}\n                columns={columns}\n                options={options}\n            />\n        );\n    }\n}\n\nAPICardView.propTypes = {\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\nexport default injectIntl(withStyles(styles, { withTheme: true })(APICardView));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport MUIDataTable from 'mui-datatables';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage } from 'react-intl';\nimport Subscription from 'AppData/Subscription';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n    dialogWrapper: {\n        '& span,& p , & h5, & label, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& div, & input, & p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n});\n\nconst columns = ['Name', 'Value'];\n\nconst options = {\n    filterType: 'checkbox',\n    sort: false,\n    search: false,\n    viewColumns: false,\n    filter: false,\n    selectableRowsHeader: false,\n    selectableRows: 'none',\n    pagination: false,\n    download: false,\n};\n\n/**\n *\n * @param {JSON} props props passed from parent\n * @returns {JSX} jsx output\n */\nfunction Invoice(props) {\n    const {\n        subscriptionId, classes, tiers,\n    } = props;\n    const [showPopup, setShowPopup] = useState(false);\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    const [invoice, setInvoice] = useState(null);\n\n    /**\n     * Handle the popup for invoice\n     */\n    const handlePopup = () => {\n        setShowPopup(true);\n        setInvoice(null);\n        const client = new Subscription();\n        const promiseInvoice = client.getMonetizationInvoice(subscriptionId);\n        promiseInvoice.then((response) => {\n            if (response && response.obj) {\n                const invoiceData = [];\n                const { obj: { properties } } = response;\n                Object.keys(properties).forEach((invoiveItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiveItem);\n                    insideArray.push(properties[invoiveItem]);\n                    invoiceData.push(insideArray);\n                });\n                setInvoice(invoiceData);\n            }\n        }).catch((error) => {\n            console.error(error);\n            setShowErrorPopup(true);\n        });\n    };\n\n    /**\n     * Handle closing the popup for invoice\n     */\n    const handleClose = () => {\n        setShowPopup(false);\n    };\n\n    const handleAlertClose = () => {\n        setShowErrorPopup(false);\n    };\n\n    return (\n        <>\n            <Button\n                color='default'\n                onClick={handlePopup}\n                startIcon={<Icon>receipt</Icon>}\n                disabled={tiers.length === 0}\n            >\n                <FormattedMessage\n                    id='Applications.Details.Invoice.view.btn'\n                    defaultMessage='View Invoice'\n                />\n            </Button>\n            {invoice ? (\n                <Dialog\n                    open={showPopup}\n                    onClose={handleClose}\n                    fullWidth='true'\n                    className={classes.dialogWrapper}\n                >\n                    {invoice && (\n                        <MUIDataTable\n                            title='Upcoming Invoice'\n                            data={invoice}\n                            columns={columns}\n                            options={options}\n                        />\n                    )}\n                </Dialog>\n            ) : (\n                <Dialog\n                    open={showErrorPopup}\n                    onClose={handleAlertClose}\n                    fullWidth='true'\n                    className={classes.dialogWrapper}\n                >\n                    <DialogTitle>\n                        <FormattedMessage\n                            id='Applications.Details.Invoice.no.data.available'\n                            defaultMessage='No Data Available'\n                        />\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='invoice-dialog-description'>\n                            <FormattedMessage\n                                id='Applications.Details.Invoice.pending.invoice.data'\n                                defaultMessage='Pending invoice data not found for this subscription.'\n                            />\n\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleAlertClose} color='primary'>\n                            <FormattedMessage\n                                id='Applications.Details.Invoice.close'\n                                defaultMessage='Close'\n                            />\n\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </>\n    );\n}\nInvoice.defaultProps = {\n    tiers: [],\n};\nInvoice.propTypes = {\n    subscriptionId: PropTypes.string.isRequired,\n    tiers: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default withStyles(styles)(Invoice);\n","/* eslint-disable no-nested-ternary */\n/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Slide from '@material-ui/core/Slide';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport PropTypes from 'prop-types';\nimport Api from 'AppData/api';\nimport Subscription from 'AppData/Subscription';\nimport { mdiOpenInNew } from '@mdi/js';\nimport { Icon as MDIcon } from '@mdi/react';\nimport Invoice from './Invoice';\n\n/**\n *\n *\n * @class SubscriptionTableData\n * @extends {React.Component}\n */\nclass SubscriptionTableData extends React.Component {\n    /**\n     *Creates an instance of SubscriptionTableData.\n     * @param {*} props properties\n     * @memberof SubscriptionTableData\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openMenu: false,\n            openMenuEdit: false,\n            isMonetizedAPI: false,\n            isDynamicUsagePolicy: false,\n            tiers: [],\n            selectedTier: '',\n        };\n        this.handleRequestClose = this.handleRequestClose.bind(this);\n        this.handleRequestOpen = this.handleRequestOpen.bind(this);\n        this.handleRequestDelete = this.handleRequestDelete.bind(this);\n        this.checkIfDynamicUsagePolicy = this.checkIfDynamicUsagePolicy.bind(this);\n        this.checkIfMonetizedAPI = this.checkIfMonetizedAPI.bind(this);\n        this.populateSubscriptionTiers = this.populateSubscriptionTiers.bind(this);\n        this.handleSubscriptionTierUpdate = this.handleSubscriptionTierUpdate.bind(this);\n        this.handleRequestCloseEditMenu = this.handleRequestCloseEditMenu.bind(this);\n        this.handleRequestOpenEditMenu = this.handleRequestOpenEditMenu.bind(this);\n        this.setSelectedTier = this.setSelectedTier.bind(this);\n    }\n\n    componentDidMount() {\n        this.checkIfMonetizedAPI(this.props.subscription.apiId);\n        this.checkIfDynamicUsagePolicy(this.props.subscription.subscriptionId);\n        this.populateSubscriptionTiers(this.props.subscription.apiId);\n    }\n\n    /**\n    *\n    *\n    * @memberof SubscriptionTableData\n    */\n    setSelectedTier(e) {\n        this.setState({ selectedTier: e });\n    }\n\n    /**\n     *\n     * Handle onclick for subscription delete\n     * @param {*} subscriptionId subscription id\n     * @memberof SubscriptionTableData\n     */\n    handleRequestDelete(subscriptionId) {\n        const { handleSubscriptionDelete } = this.props;\n        this.setState({ openMenu: false });\n        if (handleSubscriptionDelete) {\n            handleSubscriptionDelete(subscriptionId);\n        }\n    }\n\n    /**\n     *\n     *\n     * @memberof SubscriptionTableData\n     */\n    handleRequestCloseEditMenu() {\n        this.setState({ openMenuEdit: false });\n    }\n\n    /**\n    *\n    *\n    * @memberof SubscriptionTableData\n    */\n    handleRequestOpenEditMenu() {\n        this.setState({ openMenuEdit: true });\n    }\n\n    /**\n    * @memberof SubscriptionTableData\n    */\n    handleRequestOpen() {\n        this.setState({ openMenu: true });\n    }\n\n    /**\n     * @memberof SubscriptionTableData\n     */\n    handleRequestClose() {\n        this.setState({ openMenu: false });\n    }\n\n    /**\n     *\n     * Handle onclick for subscription update\n     * @param {*} apiId subscription id\n     * @param {*} subscriptionId subscription id\n     * @param {*} throttlingPolicy throttling tier\n     * @param {*} status subscription status\n     * @memberof SubscriptionTableData\n     */\n    handleSubscriptionTierUpdate(apiId, subscriptionId, requestedThrottlingPolicy, status, currentThrottlingPolicy) {\n        const { handleSubscriptionUpdate } = this.props;\n        this.setState({ openMenuEdit: false });\n        if (handleSubscriptionUpdate) {\n            handleSubscriptionUpdate(apiId, subscriptionId, currentThrottlingPolicy, status, requestedThrottlingPolicy);\n        }\n    }\n\n    /**\n     * Getting the policies from api details\n     *\n     */\n    populateSubscriptionTiers(apiUUID) {\n        const apiClient = new Api();\n        const promisedApi = apiClient.getAPIById(apiUUID);\n        promisedApi.then((response) => {\n            if (response && response.data) {\n                const api = JSON.parse(response.data);\n                const apiTiers = api.tiers;\n                const tiers = [];\n                for (let i = 0; i < apiTiers.length; i++) {\n                    const { tierName } = apiTiers[i];\n                    tiers.push({ value: tierName, label: tierName });\n                }\n                this.setState({ tiers });\n            }\n        });\n    }\n\n    /**\n     * Check if the API is monetized\n     * @param apiUUID API UUID\n     */\n    checkIfMonetizedAPI(apiUUID) {\n        const apiClient = new Api();\n        const promisedApi = apiClient.getAPIById(apiUUID);\n        promisedApi.then((response) => {\n            if (response && response.data) {\n                const apiData = JSON.parse(response.data);\n                this.setState({ isMonetizedAPI: apiData.monetization.enabled });\n            }\n        });\n    }\n\n    /**\n     * Check if the policy is dynamic usage type\n     * @param subscriptionUUID subscription UUID\n     */\n    checkIfDynamicUsagePolicy(subscriptionUUID) {\n        const client = new Subscription();\n        const promisedSubscription = client.getSubscription(subscriptionUUID);\n        promisedSubscription.then((response) => {\n            if (response && response.body) {\n                const subscriptionData = JSON.parse(response.data);\n                if (subscriptionData.throttlingPolicy) {\n                    const apiClient = new Api();\n                    const promisedPolicy = apiClient.getTierByName(subscriptionData.throttlingPolicy, 'subscription');\n                    promisedPolicy.then((policyResponse) => {\n                        const policyData = JSON.parse(policyResponse.data);\n                        if (policyData.monetizationAttributes.billingType\n                             && (policyData.monetizationAttributes.billingType\n                                === 'DYNAMICRATE')) {\n                            this.setState({ isDynamicUsagePolicy: true });\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n    * @inheritdoc\n    * @memberof SubscriptionTableData\n    */\n    render() {\n        const {\n            subscription: {\n                apiInfo, status, throttlingPolicy, subscriptionId, apiId, requestedThrottlingPolicy, applicationId,\n            },\n        } = this.props;\n        const {\n            openMenu, isMonetizedAPI, isDynamicUsagePolicy, openMenuEdit, selectedTier, tiers,\n        } = this.state;\n        let link = (\n            <Link\n                to={tiers.length === 0 ? '' : '/apis/' + apiId}\n                style={{ cursor: tiers.length === 0 ? 'default' : '' }}\n                external\n            >\n                {apiInfo.name + ' - ' + apiInfo.version + ' '}\n                <MDIcon path={mdiOpenInNew} size='12px' />\n            </Link>\n        );\n        if (apiInfo.type === 'WEBSUB') {\n            link = (\n                <Link\n                    to={tiers.length === 0 ? '' : '/applications/' + applicationId + '/webhooks/' + apiId}\n                    style={{ cursor: tiers.length === 0 ? 'default' : '' }}\n                >\n                    {apiInfo.name + ' - ' + apiInfo.version}\n                </Link>\n            );\n        }\n        return (\n            <TableRow hover>\n                <TableCell>\n                    { link }\n                </TableCell>\n                <TableCell>{apiInfo.lifeCycleStatus}</TableCell>\n                <TableCell>{throttlingPolicy}</TableCell>\n                <TableCell>{status}</TableCell>\n                <TableCell>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                        resourceMethod={resourceMethods.PUT}\n                    >\n                        <Button\n                            id={'edit-api-subscription-' + apiId}\n                            color='default'\n                            onClick={this.handleRequestOpenEditMenu}\n                            startIcon={<Icon>edit</Icon>}\n                            disabled={tiers.length === 0}\n                        >\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.edit.text'\n                                defaultMessage='Edit'\n                            />\n                        </Button>\n                    </ScopeValidation>\n                    <Dialog open={openMenuEdit} transition={Slide}>\n                        <DialogTitle>\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.update.subscription'\n                                defaultMessage='Update Subscription'\n                            />\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.update.business.plan'\n                                    defaultMessage='Current Business Plan : '\n                                />\n                                {throttlingPolicy}\n                                <div>\n                                    { (status === 'BLOCKED')\n                                        ? (\n                                            <FormattedMessage\n                                                id={'Applications.Details.SubscriptionTableData.update.'\n                                                + 'throttling.policy.blocked'}\n                                                defaultMessage={'Subscription is in BLOCKED state. '\n                                                + 'You need to unblock the subscription inorder to edit the tier'}\n                                            />\n                                        )\n                                        : (status === 'ON_HOLD')\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Applications.Details.SubscriptionTableData.update.'\n                                                    + 'throttling.policy.onHold'}\n                                                    defaultMessage={'Subscription is currently ON_HOLD state.'\n                                                    + ' You need to get approval to the subscription before editing the tier'}\n                                                />\n                                            )\n                                            : (status === 'REJECTED')\n                                                ? (\n                                                    <FormattedMessage\n                                                        id={'Applications.Details.SubscriptionTableData.update.'\n                                                        + 'throttling.policy.rejected'}\n                                                        defaultMessage={'Subscription is currently REJECTED state.'\n                                                        + ' You need to get approval to the subscription before editing the tier'}\n                                                    />\n                                                )\n                                                : (\n                                                    <div>\n                                                        <TextField\n                                                            required\n                                                            fullWidth\n                                                            id='outlined-select-currency'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    defaultMessage='Business Plan'\n                                                                    id={'Applications.Details.SubscriptionTableData.'\n                                                                    + 'update.business.plan.name'}\n                                                                />\n                                                            )}\n                                                            value={selectedTier}\n                                                            name='throttlingPolicy'\n                                                            onChange={(e) => this.setSelectedTier(e.target.value)}\n                                                            helperText={(\n                                                                <FormattedMessage\n                                                                    defaultMessage={'Assign a new Business plan to the '\n                                                                    + 'existing subscription'}\n                                                                    id={'Applications.Details.SubscriptionTableData.'\n                                                                    + 'update.throttling.policy.helper'}\n                                                                />\n                                                            )}\n                                                            margin='normal'\n                                                            variant='outlined'\n                                                        >\n                                                            {this.state.tiers.map((tier) => (\n                                                                <MenuItem key={tier.value} value={tier.value}>\n                                                                    {tier.label}\n                                                                </MenuItem>\n                                                            ))}\n                                                        </TextField>\n                                                        { (status === 'TIER_UPDATE_PENDING')\n                                                    && (\n                                                        <div>\n                                                            <FormattedMessage\n                                                                id={'Applications.Details.SubscriptionTableData.update.'\n                                                                + 'throttling.policy.tier.update'}\n                                                                defaultMessage='Pending Tier Update : '\n                                                            />\n                                                            {requestedThrottlingPolicy}\n                                                        </div>\n                                                    )}\n                                                    </div>\n                                                )}\n                                </div>\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button dense onClick={this.handleRequestCloseEditMenu}>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                            <Button\n                                variant='contained'\n                                disabled={(status === 'BLOCKED' || status === 'ON_HOLD' || status === 'REJECTED')}\n                                dense\n                                color='primary'\n                                onClick={() => this.handleSubscriptionTierUpdate(apiId,\n                                    subscriptionId, selectedTier, status, throttlingPolicy)}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.update'\n                                    defaultMessage='Update'\n                                />\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                        resourceMethod={resourceMethods.DELETE}\n                    >\n                        <Button\n                            id={'delete-api-subscription-' + apiId}\n                            color='default'\n                            onClick={this.handleRequestOpen}\n                            startIcon={<Icon>delete</Icon>}\n                            disabled={tiers.length === 0}\n                        >\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.delete.text'\n                                defaultMessage='Delete'\n                            />\n                        </Button>\n                    </ScopeValidation>\n\n                    <Dialog open={openMenu} transition={Slide}>\n                        <DialogTitle>\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.delete.subscription.confirmation.dialog.title'\n                                defaultMessage='Confirm'\n                            />\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.delete.subscription.confirmation'\n                                    defaultMessage='Are you sure you want to delete the Subscription?'\n                                />\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button dense onClick={this.handleRequestClose}>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                            <Button\n                                id='delete-api-subscription-confirm-btn'\n                                dense\n                                variant='contained'\n                                color='primary'\n                                onClick={() => this.handleRequestDelete(subscriptionId)}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.delete'\n                                    defaultMessage='Delete'\n                                />\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                    { isMonetizedAPI && (\n                        <Invoice\n                            tiers={tiers}\n                            subscriptionId={subscriptionId}\n                            isDynamicUsagePolicy={isDynamicUsagePolicy}\n                        />\n                    ) }\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\nSubscriptionTableData.propTypes = {\n    subscription: PropTypes.shape({\n        apiInfo: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            version: PropTypes.string.isRequired,\n            lifeCycleStatus: PropTypes.string.isRequired,\n        }).isRequired,\n        throttlingPolicy: PropTypes.string.isRequired,\n        subscriptionId: PropTypes.string.isRequired,\n        apiId: PropTypes.string.isRequired,\n        status: PropTypes.string.isRequired,\n        requestedThrottlingPolicy: PropTypes.string.isRequired,\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    handleSubscriptionUpdate: PropTypes.func.isRequired,\n};\nexport default SubscriptionTableData;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Progress from 'AppComponents/Shared/Progress';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIList from 'AppComponents/Apis/Listing/APICardView';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Subscription from 'AppData/Subscription';\nimport Api from 'AppData/api';\nimport { app } from 'Settings';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport SubscriptionTableData from './SubscriptionTableData';\n\n/**\n *\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = (theme) => ({\n    searchRoot: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n        flex: 1,\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n    root: {\n        padding: theme.spacing(3),\n        '& h5': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n    subscribePop: {\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    firstCell: {\n        paddingLeft: 0,\n    },\n    cardTitle: {\n        paddingLeft: theme.spacing(2),\n    },\n    cardContent: {\n        '& table tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '& table tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '& table tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '& table th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n        },\n\n    },\n    titleWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n        '& h5': {\n            marginRight: theme.spacing(1),\n        },\n    },\n    dialogTitle: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        padding: theme.spacing(1),\n    },\n    genericMessageWrapper: {\n        margin: theme.spacing(2),\n    },\n    searchWrapper: {\n        flex: 1,\n    },\n    searchResults: {\n        height: 30,\n        display: 'flex',\n        paddingTop: theme.spacing(1),\n        paddingRight: 0,\n        paddingBottom: 0,\n        paddingLeft: theme.spacing(2),\n    },\n    clearSearchIcon: {\n        cursor: 'pointer',\n    },\n    subsTable: {\n        '& td': {\n            padding: '4px 8px',\n        },\n    },\n});\n/**\n *\n *\n * @class Subscriptions\n * @extends {React.Component}\n */\nclass Subscriptions extends React.Component {\n    /**\n     *Creates an instance of Subscriptions.\n     * @param {*} props properties\n     * @memberof Subscriptions\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscriptions: null,\n            apisNotFound: false,\n            subscriptionsNotFound: false,\n            isAuthorize: true,\n            openDialog: false,\n            searchText: '',\n        };\n        this.handleSubscriptionDelete = this.handleSubscriptionDelete.bind(this);\n        this.handleSubscriptionUpdate = this.handleSubscriptionUpdate.bind(this);\n        this.updateSubscriptions = this.updateSubscriptions.bind(this);\n        this.handleSubscribe = this.handleSubscribe.bind(this);\n        this.handleOpenDialog = this.handleOpenDialog.bind(this);\n        this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n        this.handleSearchTextTmpChange = this.handleSearchTextTmpChange.bind(this);\n        this.handleClearSearch = this.handleClearSearch.bind(this);\n        this.handleEnterPress = this.handleEnterPress.bind(this);\n        this.searchTextTmp = '';\n    }\n\n    /**\n     *\n     *\n     * @memberof Subscriptions\n     */\n    componentDidMount() {\n        const {\n            match: {\n                params: { applicationId },\n            },\n        } = this.props;\n        this.updateSubscriptions(applicationId);\n    }\n\n    handleOpenDialog() {\n        this.setState((prevState) => ({ openDialog: !prevState.openDialog, searchText: '' }));\n    }\n\n    /**\n     *\n     * Update subscriptions list of Application\n     * @param {*} applicationId application id\n     * @memberof Subscriptions\n     */\n    updateSubscriptions(applicationId) {\n        const client = new Subscription();\n        const subscriptionLimit = app.subscriptionLimit || 1000;\n        const promisedSubscriptions = client.getSubscriptions(null, applicationId, subscriptionLimit);\n        promisedSubscriptions\n            .then((response) => {\n                this.setState({ subscriptions: response.body.list });\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ subscriptionsNotFound: true });\n                } else if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle subscription deletion of application\n     * @param {*} subscriptionId subscription id\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete(subscriptionId) {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n\n        promisedDelete\n            .then((response) => {\n                if (response.status !== 200) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Something went wrong while deleting the Subscription!',\n                        id: 'Applications.Details.Subscriptions.something.went.wrong',\n                    }));\n                    return;\n                }\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Subscription deleted successfully!',\n                    id: 'Applications.Details.Subscriptions.delete.success',\n                }));\n                const { subscriptions } = this.state;\n                for (const endpointIndex in subscriptions) {\n                    if (\n                        Object.prototype.hasOwnProperty.call(subscriptions, endpointIndex)\n                        && subscriptions[endpointIndex].subscriptionId === subscriptionId\n                    ) {\n                        subscriptions.splice(endpointIndex, 1);\n                        break;\n                    }\n                }\n                this.setState({ subscriptions });\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error occurred when deleting subscription',\n                    id: 'Applications.Details.Subscriptions.error.while.deleting',\n                }));\n            });\n    }\n\n    /**\n     *\n     * Handle subscription update of application\n     *\n     * @param {*} apiId API id\n     * @param {*} subscriptionId subscription id\n     * @param {*} throttlingPolicy throttling tier\n     * @param {*} status subscription status\n     * @memberof Subscriptions\n     */\n    handleSubscriptionUpdate(apiId, subscriptionId, currentThrottlingPolicy, status, requestedThrottlingPolicy) {\n        const {\n            intl,\n            match: {\n                params: { applicationId },\n            },\n        } = this.props;\n        const client = new Subscription();\n        const promisedUpdate = client.updateSubscription(\n            applicationId,\n            apiId,\n            subscriptionId,\n            currentThrottlingPolicy,\n            status,\n            requestedThrottlingPolicy,\n        );\n\n        promisedUpdate\n            .then((response) => {\n                if (response.status !== 200 && response.status !== 201) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Something went wrong while updating the Subscription!',\n                        id: 'Applications.Details.Subscriptions.wrong.with.subscription',\n                    }));\n                    return;\n                }\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Business Plan updated successfully!',\n                    id: 'Applications.Details.Subscriptions.business.plan.updated',\n                }));\n                this.updateSubscriptions(applicationId);\n            })\n            .catch((error) => {\n                const { status: statusInner } = error;\n                if (statusInner === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error occurred when updating subscription',\n                    id: 'Applications.Details.Subscriptions.error.when.updating',\n                }));\n            });\n    }\n\n    /**\n     * Handle onClick of subscribing to an API\n     * @param {*} applicationId application id\n     * @param {*} apiId api id\n     * @param {*} policy policy\n     * @memberof Subscriptions\n     */\n    handleSubscribe(applicationId, apiId, policy) {\n        const api = new Api();\n        const { intl } = this.props;\n        if (!policy) {\n            Alert.error(intl.formatMessage({\n                id: 'Applications.Details.Subscriptions.select.a.subscription.policy',\n                defaultMessage: 'Select a subscription policy',\n            }));\n            return;\n        }\n\n        const promisedSubscribe = api.subscribe(apiId, applicationId, policy);\n        promisedSubscribe\n            .then((response) => {\n                if (response.status !== 201) {\n                    Alert.error(intl.formatMessage({\n                        id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                        defaultMessage: 'Error occurred during subscription',\n                    }));\n                } else {\n                    if (response.body.status === 'ON_HOLD') {\n                        Alert.info(intl.formatMessage({\n                            defaultMessage: 'Your subscription request has been submitted and is now awaiting '\n                                + 'approval.',\n                            id: 'subscription.pending',\n                        }));\n                    } else {\n                        Alert.info(intl.formatMessage({\n                            id: 'Applications.Details.Subscriptions.subscription.successful',\n                            defaultMessage: 'Subscription successful',\n                        }));\n                    }\n                    this.updateSubscriptions(applicationId);\n                }\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Applications.Details.Subscriptions.error.occurred.during.subscription',\n                    defaultMessage: 'Error occurred during subscription',\n                }));\n            });\n    }\n\n    handleSearchTextChange() {\n        this.setState({ searchText: this.searchTextTmp });\n    }\n\n    handleSearchTextTmpChange(event) {\n        this.searchTextTmp = event.target.value;\n    }\n\n    handleClearSearch() {\n        this.setState({ searchText: '' });\n        this.searchInputElem.value = '';\n    }\n\n    handleEnterPress(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            this.handleSearchTextChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof Subscriptions\n     */\n    render() {\n        const { isAuthorize, openDialog, searchText } = this.state;\n\n        if (!isAuthorize) {\n            window.location = app.context + '/services/configs';\n        }\n\n        const {\n            subscriptions, apisNotFound, subscriptionsNotFound,\n        } = this.state;\n        const {\n            match: {\n                params: { applicationId },\n            },\n        } = this.props;\n        const { classes, intl } = this.props;\n\n        if (subscriptions) {\n            return (\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            <FormattedMessage\n                                id='Applications.Details.Subscriptions.subscription.management'\n                                defaultMessage='Subscription Management'\n                            />\n                        </Typography>\n                        <Button\n                            color='secondary'\n                            className={classes.buttonElm}\n                            size='small'\n                            onClick={this.handleOpenDialog}\n                        >\n                            <Icon>add_circle_outline</Icon>\n                            <FormattedMessage\n                                id='Applications.Details.Subscriptions.subscription.management.add'\n                                defaultMessage='Subscribe APIs'\n                            />\n                        </Button>\n                    </div>\n                    <Grid container className='tab-grid' spacing={2}>\n                        <Grid item xs={12} xl={11}>\n                            {(subscriptions && subscriptions.length === 0)\n                                ? (\n                                    <div className={classes.genericMessageWrapper}>\n                                        <InlineMessage type='info' className={classes.dialogContainer}>\n                                            <Typography variant='h5' component='h3'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.no.subscriptions'\n                                                    defaultMessage='No Subscriptions Available'\n                                                />\n                                            </Typography>\n                                            <Typography component='p'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.no.subscriptions.content'\n                                                    defaultMessage='No subscriptions are available for this Application'\n                                                />\n                                            </Typography>\n                                        </InlineMessage>\n                                    </div>\n                                )\n                                : (\n                                    <div className={classes.cardContent}>\n                                        {subscriptionsNotFound ? (\n                                            <ResourceNotFound />\n                                        ) : (\n                                            <Table className={classes.subsTable}>\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell className={classes.firstCell}>\n                                                            <FormattedMessage\n                                                                id='Applications.Details.Subscriptions.api.name'\n                                                                defaultMessage='API'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id={`Applications.Details.Subscriptions\n                                                                        .subscription.state`}\n                                                                defaultMessage='Lifecycle State'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id={`Applications.Details.Subscriptions\n                                                                        .business.plan`}\n                                                                defaultMessage='Business Plan'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id='Applications.Details.Subscriptions.Status'\n                                                                defaultMessage='Subscription Status'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <FormattedMessage\n                                                                id='Applications.Details.Subscriptions.action'\n                                                                defaultMessage='Action'\n                                                            />\n                                                        </TableCell>\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {subscriptions\n                                                                && subscriptions.map((subscription) => {\n                                                                    return (\n                                                                        <SubscriptionTableData\n                                                                            key={subscription.subscriptionId}\n                                                                            subscription={subscription}\n                                                                            handleSubscriptionDelete={\n                                                                                this.handleSubscriptionDelete\n                                                                            }\n                                                                            handleSubscriptionUpdate={\n                                                                                this.handleSubscriptionUpdate\n                                                                            }\n                                                                        />\n                                                                    );\n                                                                })}\n                                                </TableBody>\n                                            </Table>\n                                        )}\n                                    </div>\n                                )}\n                        </Grid>\n                    </Grid>\n                    <Dialog\n                        onClose={this.handleOpenDialog}\n                        aria-labelledby='simple-dialog-title'\n                        open={openDialog}\n                        maxWidth='lg'\n                        className={classes.subscribePop}\n                    >\n                        <MuiDialogTitle disableTypography className={classes.dialogTitle}>\n                            <Typography variant='h6'>\n                                <FormattedMessage\n                                    id='Applications.Details.Subscriptions.subscription.management.add'\n                                    defaultMessage='Subscribe APIs'\n                                />\n                            </Typography>\n                            <Box className={classes.searchWrapper}>\n                                <Paper component='form' className={classes.searchRoot}>\n                                    {searchText && (\n                                        <HighlightOffIcon\n                                            className={classes.clearSearchIcon}\n                                            onClick={this.handleClearSearch}\n                                        />\n                                    )}\n                                    <InputBase\n                                        className={classes.input}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'Search APIs',\n                                            id: 'Applications.Details.Subscriptions.search',\n                                        })}\n                                        inputProps={{\n                                            'aria-label': intl.formatMessage({\n                                                defaultMessage: 'Search APIs',\n                                                id: 'Applications.Details.Subscriptions.search',\n                                            }),\n                                        }}\n                                        inputRef={(el) => { this.searchInputElem = el; }}\n                                        onChange={this.handleSearchTextTmpChange}\n                                        onKeyDown={this.handleEnterPress}\n                                    />\n                                    <IconButton\n                                        className={classes.iconButton}\n                                        aria-label='search'\n                                        onClick={this.handleSearchTextChange}\n                                    >\n                                        <SearchIcon />\n                                    </IconButton>\n                                </Paper>\n                                <Box className={classes.searchResults}>\n                                    {(searchText && searchText !== '') ? (\n                                        <>\n                                            <Typography variant='caption'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.filter.msg'\n                                                    defaultMessage='Filtered APIs for '\n                                                />\n                                                {searchText}\n                                            </Typography>\n                                        </>\n                                    ) : (\n                                        <Typography variant='caption'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Subscriptions.filter.msg.all.apis'\n                                                defaultMessage='Displaying all APIs'\n                                            />\n                                        </Typography>\n                                    )}\n                                </Box>\n\n                            </Box>\n\n                            <IconButton aria-label='close' className={classes.closeButton} onClick={this.handleOpenDialog}>\n                                <Icon>cancel</Icon>\n                            </IconButton>\n                        </MuiDialogTitle>\n                        <Box padding={2}>\n                            <APIList\n                                apisNotFound={apisNotFound}\n                                subscriptions={subscriptions}\n                                applicationId={applicationId}\n                                handleSubscribe={(appInner, api, policy) => this.handleSubscribe(appInner, api, policy)}\n                                searchText={searchText}\n                            />\n                        </Box>\n                    </Dialog>\n                </div>\n            );\n        } else {\n            return (\n                <Progress />\n            );\n        }\n    }\n}\nSubscriptions.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            applicationId: PropTypes.string,\n        }).isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Subscriptions));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport Grid from '@material-ui/core/Grid';\nimport API from 'AppData/api';\nimport Application from 'AppData/Application';\nimport Alert from 'AppComponents/Shared/Alert';\nimport AuthManager from 'AppData/AuthManager';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport DeleteConfirmation from '../Listing/DeleteConfirmation';\n\n/**\n * @param {*} theme theme details\n * @returns {Object}\n */\nconst styles = (theme) => {\n    const mainBack = theme.custom.infoBar.background || '#ffffff';\n    const infoBarHeight = theme.custom.infoBar.height || 70;\n    const starColor = theme.custom.infoBar.starColor || theme.palette.getContrastText(mainBack);\n\n    return {\n        root: {\n            height: infoBarHeight,\n            background: mainBack,\n            color: theme.palette.getContrastText(mainBack),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            display: 'flex',\n            alignItems: 'center',\n            paddingLeft: theme.spacing(2),\n        },\n        backIcon: {\n            color: theme.palette.primary.main,\n            fontSize: 56,\n            cursor: 'pointer',\n        },\n        backText: {\n            color: theme.palette.primary.main,\n            cursor: 'pointer',\n            fontFamily: theme.typography.fontFamily,\n        },\n        starRate: {\n            fontSize: 40,\n            color: starColor,\n        },\n        starRateMy: {\n            fontSize: 70,\n            color: theme.palette.primary.main,\n        },\n        rateLink: {\n            cursor: 'pointer',\n            lineHeight: '70px',\n        },\n        topBar: {\n            display: 'flex',\n            paddingBottom: theme.spacing(2),\n        },\n        infoContent: {\n            color: theme.palette.getContrastText(mainBack),\n            background: mainBack,\n            padding: theme.spacing(3),\n            '& td, & th': {\n                color: theme.palette.getContrastText(mainBack),\n            },\n        },\n        infoContentBottom: {\n            background: theme.custom.infoBar.sliderBackground,\n            color: theme.palette.getContrastText(theme.custom.infoBar.sliderBackground),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        },\n        bootstrapRoot: {\n            padding: 0,\n            'label + &': {\n                marginTop: theme.spacing(3),\n            },\n        },\n        bootstrapInput: {\n            borderRadius: 4,\n            backgroundColor: theme.palette.common.white,\n            border: '1px solid #ced4da',\n            padding: '5px 12px',\n            width: 350,\n            transition: theme.transitions.create(['border-color', 'box-shadow']),\n            fontFamily: [\n                '-apple-system',\n                'BlinkMacSystemFont',\n                '\"Segoe UI\"',\n                'Roboto',\n                '\"Helvetica Neue\"',\n                'Arial',\n                'sans-serif',\n                '\"Apple Color Emoji\"',\n                '\"Segoe UI Emoji\"',\n                '\"Segoe UI Symbol\"',\n            ].join(','),\n            '&:focus': {\n                borderColor: '#80bdff',\n                boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n            },\n        },\n        epWrapper: {\n            display: 'flex',\n        },\n        prodLabel: {\n            lineHeight: '30px',\n            marginRight: 10,\n            width: 100,\n        },\n        contentWrapper: {\n            maxWidth: theme.custom.contentAreaWidth - theme.custom.leftMenu.width,\n            alignItems: 'center',\n        },\n        ratingBoxWrapper: {\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n        },\n        ratingBox: {\n            backgroundColor: theme.custom.leftMenu.background,\n            border: '1px solid rgb(71, 211, 244)',\n            borderRadius: '5px',\n            display: 'flex',\n            position: 'absolute',\n            top: 14,\n            height: '40px',\n            color: theme.palette.getContrastText(theme.custom.leftMenu.background),\n            alignItems: 'center',\n            left: '0',\n            paddingLeft: '5px',\n            paddingRight: '5px',\n        },\n        userRating: {\n            display: 'flex',\n            alignItems: 'flex-end',\n        },\n        verticalDividerStar: {\n            borderLeft: 'solid 1px ' + theme.palette.grey.A200,\n            height: 40,\n            marginRight: theme.spacing(1),\n            marginLeft: theme.spacing(1),\n        },\n        backLink: {\n            alignItems: 'center',\n            textDecoration: 'none',\n            display: 'flex',\n        },\n        ratingSummery: {\n            alignItems: 'center',\n            flexDirection: 'column',\n            display: 'flex',\n        },\n        infoBarMain: {\n            width: '100%',\n        },\n        buttonView: {\n            textAlign: 'left',\n            justifyContent: 'left',\n            display: 'flex',\n            paddingLeft: theme.spacing(2),\n            cursor: 'pointer',\n        },\n        buttonOverviewText: {\n            display: 'inline-block',\n            paddingTop: 3,\n        },\n        button: {\n            display: 'inline-grid',\n            cursor: 'pointer',\n            '& .material-icons, & span': {\n                color: theme.palette.getContrastText(theme.custom.infoBar.background),\n            },\n        },\n        editButton: {\n            display: 'inline-grid',\n            cursor: 'pointer',\n            '& .material-icons, & span': {\n                color: theme.palette.getContrastText(theme.custom.infoBar.background),\n            },\n        },\n        iconButton: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'column',\n        },\n        appNameXSmall: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 200,\n            lineHeight: 1.3,\n        },\n        appNameSmall: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 310,\n            lineHeight: 1.3,\n        },\n        appNameMid: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 640,\n            lineHeight: 1.3,\n        },\n        appNameBig: {\n            whiteSpace: 'nowrap',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            maxWidth: 980,\n            lineHeight: 1.3,\n        },\n        linkTitle: {\n            color: theme.palette.getContrastText(theme.custom.infoBar.background),\n        },\n    };\n};\n/**\n *\n *\n * @class InfoBar\n * @extends {React.Component}\n */\nclass InfoBar extends React.Component {\n    /**\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            notFound: false,\n            showOverview: true,\n            isDeleteOpen: false,\n            applicationOwner: '',\n        };\n        this.toggleOverview = this.toggleOverview.bind(this);\n        this.handleAppDelete = this.handleAppDelete.bind(this);\n        this.handleDeleteConfimation = this.handleDeleteConfimation.bind(this);\n        this.toggleDeleteConfirmation = this.toggleDeleteConfirmation.bind(this);\n    }\n\n    /**\n     * @memberof InfoBar\n     */\n    componentDidMount() {\n        const client = new API();\n        const { applicationId } = this.props;\n        // Get application\n        const promisedApplication = client.getApplication(applicationId);\n\n        promisedApplication\n            .then((response) => {\n                this.setState({ applicationOwner: response.obj.owner });\n                const promisedPolicy = client.getTierByName(response.obj.throttlingPolicy, 'application');\n                return Promise.all([response, promisedPolicy]);\n            })\n            .then((response) => {\n                const [application] = response.map((data) => data.obj);\n                this.setState({ application });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n\n    toggleDeleteConfirmation = () => {\n        this.setState(({ isDeleteOpen }) => ({ isDeleteOpen: !isDeleteOpen }));\n    }\n\n    /**\n     * Handles application deletion\n     * @memberof InfoBar\n     */\n    handleAppDelete() {\n        const { applicationId, intl } = this.props;\n        const { application } = this.state;\n        const promisedDelete = Application.deleteApp(applicationId);\n        let message = intl.formatMessage({\n            defaultMessage: 'Application {name} deleted successfully!',\n            id: 'Applications.Details.InfoBar.application.deleted.successfully',\n        }, { name: application.name });\n        promisedDelete.then((ok) => {\n            if (ok) {\n                Alert.info(message);\n                this.toggleDeleteConfirmation();\n            }\n            this.props.history.push('/applications');\n        }).catch((error) => {\n            console.log(error);\n            message = intl.formatMessage({\n                defaultMessage: 'Error while deleting application {name}',\n                id: 'Applications.Details.InfoBar.application.deleting.error',\n            }, { name: application.name });\n            Alert.error(message);\n        });\n    }\n\n    /**\n     * Handles delete confimation\n     * @memberof InfoBar\n     */\n    handleDeleteConfimation() {\n        const { isDeleteOpen } = this.state;\n        this.setState({ isDeleteOpen: !isDeleteOpen });\n    }\n\n    /**\n     * Toggles the showOverview state\n     * @param {boolean} todo toggle state\n     * @memberof InfoBar\n     */\n    toggleOverview(todo) {\n        if (typeof todo === 'boolean') {\n            this.setState({ showOverview: todo });\n        } else {\n            this.setState((prevState) => ({ showOverview: !prevState.showOverview }));\n        }\n    }\n\n    /**\n     * @returns {div}\n     * @memberof InfoBar\n     */\n    render() {\n        const {\n            classes, theme, applicationId,\n        } = this.props;\n        const {\n            application, notFound, isDeleteOpen, applicationOwner,\n        } = this.state;\n\n        if (notFound) {\n            return (\n                <ResourceNotFound\n                    message={(\n                        <FormattedMessage\n                            id='Applications.Details.InfoBar.listing.resource.not.found'\n                            defaultMessage='Resource Not Fount'\n                        />\n                    )}\n                />\n            );\n        }\n\n        if (!application) {\n            return <Loading />;\n        }\n        const isUserOwner = AuthManager.getUser().name === applicationOwner;\n\n        return (\n            <div className={classes.infoBarMain}>\n                <div className={classes.root}>\n                    <Grid item xs={10}>\n                        <div style={{ marginLeft: theme.spacing(1) }}>\n                            <Link to={'/applications/' + applicationId + '/overview'} className={classes.linkTitle}>\n                                <Typography id='itest-info-bar-application-name' variant='h4'>{application.name}</Typography>\n                            </Link>\n                        </div>\n                        <div style={{ marginLeft: theme.spacing(1) }}>\n                            <Typography variant='caption' gutterBottom align='left'>\n                                {application.subscriptionCount}\n                                {' '}\n                                <FormattedMessage\n                                    id='Applications.Details.InfoBar.subscriptions'\n                                    defaultMessage='Subscriptions'\n                                />\n                            </Typography>\n                        </div>\n                    </Grid>\n                    {isUserOwner && (\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_APPLICATION}\n                            resourceMethod={resourceMethods.PUT}\n                        >\n                            <VerticalDivider height={70} />\n                            <Grid item xs={1} m={1} className={classes.editButton}>\n                                <Link to={`/applications/${applicationId}/edit/fromView`} className={classes.editButton}>\n                                    <Button\n                                        id='edit-application'\n                                        style={{ padding: '4px' }}\n                                        color='default'\n                                        className='application-info-bar-edit-button'\n                                        classes={{ label: classes.iconButton }}\n                                        aria-label={(\n                                            <FormattedMessage\n                                                id='Applications.Details.InfoBar.edit'\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                    >\n                                        <Icon>edit</Icon>\n                                        <Typography variant='caption' style={{ marginTop: '2px' }}>\n                                            <FormattedMessage\n                                                id='Applications.Details.InfoBar.edit.text'\n                                                defaultMessage='Edit'\n                                            />\n                                        </Typography>\n                                    </Button>\n                                </Link>\n                            </Grid>\n                            <VerticalDivider height={70} />\n                            <Grid item xs={1} m={1} className={classes.button}>\n                                <Button\n                                    onClick={this.handleDeleteConfimation}\n                                    disabled={AuthManager.getUser().name !== applicationOwner}\n                                    color='default'\n                                    classes={{ label: classes.iconButton }}\n                                    className='application-info-bar-delete-button'\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.delete'\n                                            defaultMessage='Delete'\n                                        />\n                                    )}\n                                >\n                                    <Icon>delete</Icon>\n                                    <Typography variant='caption' style={{ marginTop: '2px' }}>\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.text'\n                                            defaultMessage='Delete'\n                                        />\n                                    </Typography>\n                                </Button>\n                                <DeleteConfirmation\n                                    handleAppDelete={this.handleAppDelete}\n                                    isDeleteOpen={isDeleteOpen}\n                                    toggleDeleteConfirmation={this.toggleDeleteConfirmation}\n                                />\n                            </Grid>\n                        </ScopeValidation>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\nInfoBar.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    applicationId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles, { withTheme: true })(InfoBar)));\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n        '& td, & th': {\n            color: theme.palette.getContrastText(theme.custom.infoBar.background),\n        },\n        background: theme.custom.infoBar.background,\n    },\n    table: {\n        minWidth: '100%',\n    },\n    leftCol: {\n        width: 200,\n    },\n    iconAligner: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconTextWrapper: {\n        display: 'inline-block',\n        paddingLeft: 20,\n    },\n    iconEven: {\n        color: theme.custom.infoBar.iconOddColor,\n        width: theme.spacing(3),\n    },\n    iconOdd: {\n        color: theme.custom.infoBar.iconOddColor,\n        width: theme.spacing(3),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    heading: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        paddingLeft: theme.spacing(1),\n    },\n    emptyBox: {\n        background: '#ffffff55',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px #fff',\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    summaryRoot: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    actionPanel: {\n        justifyContent: 'flex-start',\n    },\n}));\n\n/**\n * Render application overview page.\n * @param {JSON} props Props passed down from parent.\n * @returns {JSX} jsx output from render.\n */\nfunction Overview(props) {\n    const classes = useStyles();\n    const [application, setApplication] = useState(null);\n    const [tierDescription, setTierDescription] = useState(null);\n    const [notFound, setNotFound] = useState(false);\n    const { match: { params: { applicationId } } } = props;\n    useEffect(() => {\n        const client = new API();\n        // Get application\n        const promisedApplication = client.getApplication(applicationId);\n        promisedApplication\n            .then((response) => {\n                const promisedTier = client.getTierByName(response.obj.throttlingPolicy, 'application');\n                const appInner = response.obj;\n                promisedTier.then((tierResponse) => {\n                    setTierDescription(tierResponse.obj.description);\n                    setApplication(appInner);\n                });\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else {\n                    setNotFound(false);\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    if (!application) {\n        return <Loading />;\n    }\n    return (\n        <>\n            <div className={classes.root}>\n                <Table className={classes.table}>\n                    <TableBody>\n                        <TableRow className='app-description-row'>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>description</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.description'\n                                                defaultMessage='Description'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.description}\n                            </TableCell>\n                        </TableRow>\n                        {tierDescription\n                            && (\n                                <TableRow className='app-business-plan-row'>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <div className={classes.iconAligner}>\n                                            <Icon className={classes.iconOdd}>settings_input_component</Icon>\n                                            <span className={classes.iconTextWrapper}>\n                                                <Typography variant='caption' gutterBottom align='left'>\n                                                    <FormattedMessage\n                                                        id='Applications.Details.InfoBar.business.plan'\n                                                        defaultMessage='Business Plan'\n                                                    />\n                                                </Typography>\n                                            </span>\n                                        </div>\n                                    </TableCell>\n                                    {application\n                                        && (\n                                            <TableCell>\n                                                {application.throttlingPolicy}\n                                                {' '}\n                                                {`(${tierDescription})`}\n                                            </TableCell>\n                                        )}\n                                </TableRow>\n                            )}\n                        <TableRow className='app-workflow-status-row'>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconOdd}>assignment_turned_in</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.workflow.status'\n                                                defaultMessage='Workflow Status'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.status}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow className='app-owner-row'>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>account_box</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.application.owner'\n                                                defaultMessage='Application Owner'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.owner}\n                            </TableCell>\n                        </TableRow>\n                        {application.attributes\n                            && (\n                                Object.keys(application.attributes).map((attr, index) => {\n                                    const attrValue = application.attributes[attr];\n                                    return (\n                                        <TableRow key={attr} className='app-web-asset-row'>\n                                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                <div className={classes.iconAligner}>\n                                                    <Icon className={classNames(\n                                                        { [classes.iconEven]: index % 2 !== 0 },\n                                                        { [classes.iconOdd]: index % 2 === 0 },\n                                                    )}\n                                                    >\n                                                        web_asset\n                                                    </Icon>\n                                                    <span className={classes.iconTextWrapper}>\n                                                        <Typography variant='caption' gutterBottom align='left'>\n                                                            {attr}\n                                                        </Typography>\n                                                    </span>\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                {attrValue}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                }))}\n\n                    </TableBody>\n                </Table>\n            </div>\n        </>\n    );\n}\nexport default injectIntl(Overview);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles/index';\nimport { matchPath } from 'react-router';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport _ from 'lodash';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\n\ndayjs.extend(relativeTime);\n\nconst useStyles = makeStyles((theme) => (\n    {\n        buttonIcon: {\n            marginRight: 10,\n        },\n        paper: {\n            margin: theme.spacing(1),\n            padding: theme.spacing(1),\n        },\n        grid: {\n            marginTop: theme.spacing(4),\n            marginBottom: theme.spacing(4),\n            paddingRight: theme.spacing(2),\n            justifyContent: 'center',\n        },\n        userNotificationPaper: {\n            padding: theme.spacing(2),\n        },\n        titleSub: {\n            marginLeft: theme.spacing(2),\n            paddingTop: theme.spacing(2),\n            paddingBottom: theme.spacing(2),\n        },\n        root: {\n            padding: theme.spacing(3),\n            '& h5': {\n                color: theme.palette.getContrastText(theme.palette.background.default),\n            },\n        },\n        titleWrapper: {\n            display: 'flex',\n            alignItems: 'center',\n            paddingBottom: theme.spacing(2),\n            '& h5': {\n                marginRight: theme.spacing(1),\n            },\n        },\n        listWrapper: {\n            width: '50%',\n        },\n        subscriptionRow: {\n            paddingLeft: '16px',\n        },\n        callbackurl: {\n            fontSize: '12px',\n        },\n        subscriptionTimestamp: {\n            float: 'right',\n        },\n        SubscriptionHeader: {\n            paddingBottom: '0px',\n            paddingLeft: '0px',\n            paddingTop: '0px',\n        },\n    }\n));\n\n/**\n * @param {JSON} props props passed from parent\n * @returns {JSX} jsx output\n */\nexport default function WebHookDetails(props) {\n    const classes = useStyles();\n    const { location: { pathname } } = props;\n    const intl = useIntl();\n    const match = matchPath(pathname, {\n        path: '/applications/:applicationId/webhooks/:apiId',\n        exact: true,\n        strict: false,\n    });\n    const { applicationId } = props.match.params;\n    const { apiId } = match.params;\n\n    const [subscribedTopics, setSubscribedTopics] = useState('');\n\n    const getLogoForDeliveryStatus = (subscription) => {\n        switch (subscription.deliveryStatus) {\n            case 1:\n                return <CheckCircleIcon style={{ color: 'green', fontSize: '14px', paddingTop: '3px' }} />;\n            case 2:\n                return <CancelIcon style={{ color: 'red', fontSize: '14px', paddingTop: '3px' }} />;\n            default:\n                return <RemoveCircleIcon style={{ color: 'black', fontSize: '14px', paddingTop: '3px' }} />;\n        }\n    };\n\n    useEffect(() => {\n        const apiClient = new Api();\n        const promisedSubscriptions = apiClient.getWebhookubScriptions(apiId, applicationId);\n        promisedSubscriptions.then((response) => {\n            const sortedSubscriptions = _.groupBy(response.obj.list, 'topic');\n            setSubscribedTopics(sortedSubscriptions);\n        }).catch((error) => {\n            console.log(error);\n            Alert.error(intl.formatMessage({\n                id: 'Applications.Details.Subscriptions.error.occurred.webhook.subscription',\n                defaultMessage: 'Error while retrieving webhook subscriptions',\n            }));\n        });\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.titleWrapper}>\n                <Typography variant='h5' className={classes.keyTitle}>\n                    <FormattedMessage\n                        id='Applications.Details.Subscriptions.api.webhooks'\n                        defaultMessage='Web Hooks'\n                    />\n                </Typography>\n            </div>\n            <List className={classes.listWrapper}>\n                {Object.keys(subscribedTopics).length < 1\n                && (\n                    <Typography color='textPrimary' display='block'>\n                        <FormattedMessage\n                            id='Applications.Details.Subscriptions.api.webhooks.subscriptions.unavailable'\n                            defaultMessage='No Webhook subscriptions available at this time.'\n                        />\n                    </Typography>\n                )}\n                {Object.keys(subscribedTopics).map((key) => (\n                    <>\n                        <ListItem className={classes.SubscriptionHeader}>\n                            <ListItemText primary={key} />\n                        </ListItem>\n                        {subscribedTopics[key].map((subscription) => (\n                            <Grid container direction='row'>\n                                <Grid item xs={1}>\n                                    {getLogoForDeliveryStatus(subscription)}\n                                </Grid>\n                                <Grid item xs={8}>\n                                    <Typography\n                                        color='textPrimary'\n                                        display='block'\n                                        className={classes.callbackurl}\n                                    >\n                                        {subscription.callBackUrl}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    {subscription.deliveryTime ? (\n                                        <Typography\n                                            color='textSecondary'\n                                            display='block'\n                                            variant='caption'\n                                            className={classes.subscriptionTimestamp}\n                                        >\n                                            {subscription.deliveryTime}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            color='textSecondary'\n                                            display='block'\n                                            variant='caption'\n                                            className={classes.subscriptionTimestamp}\n                                        >\n                                            <FormattedMessage\n                                                id='Applications.Details.Subscriptions.api.webhooks.delivery.time.unavailable'\n                                                defaultMessage='Delivery data unavailable'\n                                            />\n                                        </Typography>\n                                    )}\n                                </Grid>\n                                <Divider component='li' />\n                            </Grid>\n                        ))}\n                        <Divider component='li' />\n                    </>\n                ))}\n            </List>\n        </div>\n    );\n}\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Route, Switch, Redirect, Link,\n} from 'react-router-dom';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport ScreenLockLandscapeIcon from '@material-ui/icons/ScreenLockLandscape';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport { app } from 'Settings';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport ApiKeyManager from 'AppComponents/Shared/AppsAndKeys/ApiKeyManager';\nimport classNames from 'classnames';\nimport Paper from '@material-ui/core/Paper';\nimport { Helmet } from 'react-helmet';\nimport Subscriptions from './Subscriptions';\nimport InfoBar from './InfoBar';\nimport Overview from './Overview';\nimport WebHookDetails from './WebHookDetails';\n\n/**\n *\n *\n * @param {*} theme theme details\n * @returns {Object}\n */\nconst styles = (theme) => {\n    const {\n        custom: {\n            leftMenu: { width, position },\n        },\n    } = theme;\n    const shiftToLeft = position === 'vertical-left' ? (width - 4) : 0;\n    const shiftToRight = position === 'vertical-right' ? width : 0;\n    const leftMenuPaddingLeft = position === 'horizontal' ? theme.spacing(3) : 0;\n\n    return {\n        LeftMenu: {\n            backgroundColor: theme.custom.leftMenu.background,\n            backgroundImage: `url(${app.context}${theme.custom.leftMenu.backgroundImage})`,\n            textAlign: 'left',\n            fontFamily: theme.typography.fontFamily,\n            position: 'absolute',\n            bottom: 0,\n            paddingLeft: leftMenuPaddingLeft,\n        },\n        leftMenuHorizontal: {\n            top: theme.custom.infoBar.height,\n            width: '100%',\n            overflowX: 'auto',\n            height: 60,\n            display: 'flex',\n            left: 0,\n        },\n        leftMenuVerticalLeft: {\n            width: theme.custom.leftMenu.width,\n            top: 0,\n            left: 0,\n            overflowY: 'auto',\n            [theme.breakpoints.down('sm')]: {\n                width: 50,\n            },\n        },\n        leftMenuVerticalRight: {\n            width: theme.custom.leftMenu.width,\n            top: 0,\n            right: 0,\n            overflowY: 'auto',\n        },\n        leftLInkMain: {\n            borderRight: 'solid 1px ' + theme.custom.leftMenu.background,\n            cursor: 'pointer',\n            background: theme.custom.leftMenu.rootBackground,\n            color: theme.palette.getContrastText(theme.custom.leftMenu.rootBackground),\n            textDecoration: 'none',\n            alignItems: 'center',\n            justifyContent: 'center',\n            display: 'flex',\n            height: theme.custom.infoBar.height,\n        },\n        leftLInkMainText: {\n            fontSize: 18,\n            color: theme.palette.grey[500],\n            textDecoration: 'none',\n            paddingLeft: theme.spacing(2),\n        },\n        detailsContent: {\n            display: 'flex',\n            flex: 1,\n        },\n        content: {\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column',\n            marginLeft: shiftToLeft,\n            marginRight: shiftToRight,\n            paddingBottom: theme.spacing(3),\n            overflowX: 'hidden',\n            [theme.breakpoints.down('sm')]: {\n                marginLeft: shiftToLeft !== 0 && 50,\n                marginRight: shiftToRight !== 0 && 50,\n            },\n        },\n        contentLoader: {\n            paddingTop: theme.spacing(3),\n        },\n        contentLoaderRightMenu: {\n            paddingRight: theme.custom.leftMenu.width,\n        },\n        titleWrapper: {\n            paddingLeft: 25,\n            paddingTop: 28,\n            textTransform: 'capitalize',\n        },\n        contentWrapper: {\n            paddingLeft: 25,\n        },\n        keyTitle: {\n            textTransform: 'capitalize',\n        },\n    };\n};\n/**\n *\n *\n * @class Details\n * @extends {Component}\n */\nclass Details extends Component {\n    /**\n     *\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            application: null,\n        };\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    componentDidMount() {\n        const { match } = this.props;\n        const client = new API();\n        const promisedApplication = client.getApplication(match.params.application_uuid);\n        promisedApplication\n            .then((response) => {\n                this.setState({ application: response.obj });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * @param {String} menuLink selected menu name\n     * @memberof Details\n     */\n    handleMenuSelect = (menuLink) => {\n        const { history, match } = this.props;\n        history.push({ pathname: '/applications/' + match.params.application_uuid + '/' + menuLink });\n    };\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    renderManager = (application, keyType, secScheme) => {\n        const { classes } = this.props;\n        return (\n            <Paper>\n                {secScheme === 'oauth' && (\n                    <TokenManager\n                        keyType={keyType}\n                        selectedApp={{\n                            appId: application.applicationId,\n                            label: application.name,\n                            tokenType: application.tokenType,\n                            owner: application.owner,\n                            hashEnabled: application.hashEnabled,\n                        }}\n                    />\n\n                )}\n                {secScheme === 'apikey' && (\n                    <div className={classes.root}>\n                        <div className={classes.titleWrapper}>\n                            <Typography variant='h5' className={classes.keyTitle}>\n                                {this.toTitleCase(keyType)}\n                                <FormattedMessage\n                                    id='Applications.Details.api.keys.title'\n                                    defaultMessage=' API Key'\n                                />\n                            </Typography>\n                        </div>\n                        <div className={classes.contentWrapper}>\n                            <ApiKeyManager\n                                keyType={keyType}\n                                selectedApp={{\n                                    appId: application.applicationId,\n                                    label: application.name,\n                                    tokenType: application.tokenType,\n                                    owner: application.owner,\n                                }}\n                            />\n                        </div>\n                    </div>\n                )}\n            </Paper>\n        );\n    }\n\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof Details\n     */\n    render() {\n        const {\n            classes, match, theme, intl,\n        } = this.props;\n        const { notFound, application } = this.state;\n        const pathPrefix = '/applications/' + match.params.application_uuid;\n        const redirectUrl = pathPrefix + '/overview';\n        const {\n            custom: {\n                leftMenu: {\n                    rootIconSize, rootIconTextVisible, rootIconVisible, position,\n                },\n                title: {\n                    prefix, suffix,\n                },\n            },\n        } = theme;\n        if (notFound) {\n            return <ResourceNotFound />;\n        } else if (!application) {\n            return <Loading />;\n        }\n        return (\n            <>\n                <Helmet>\n                    <title>{`${prefix} ${application.name}${suffix}`}</title>\n                </Helmet>\n                <nav\n                    role='navigation'\n                    aria-label={intl.formatMessage({\n                        id: 'Applications.Details.index.secondary.navigation',\n                        defaultMessage: 'Secondary Navigation',\n                    })}\n                    className={classNames(\n                        classes.LeftMenu,\n                        {\n                            [classes.leftMenuHorizontal]: position === 'horizontal',\n                        },\n                        {\n                            [classes.leftMenuVerticalLeft]: position === 'vertical-left',\n                        },\n                        {\n                            [classes.leftMenuVerticalRight]: position === 'vertical-right',\n                        },\n                        'left-menu',\n                    )}\n                >\n                    {rootIconVisible && (\n                        <Link to='/applications' className={classes.leftLInkMain} aria-label='All applications'>\n                            <span className='applications-icon-wrapper'>\n                                <CustomIcon width={rootIconSize} height={rootIconSize} icon='applications' />\n                            </span>\n                            {rootIconTextVisible && (\n                                <Typography className={classes.leftLInkMainText}>\n                                    <FormattedMessage\n                                        id='Applications.Details.applications.all'\n                                        defaultMessage='ALL APPs'\n                                    />\n                                </Typography>\n                            )}\n                        </Link>\n                    )}\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.overview'\n                                defaultMessage='Overview'\n                            />\n                        )}\n                        iconText='overview'\n                        route='overview'\n                        to={pathPrefix + '/overview'}\n                        open\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.prod.keys'\n                                defaultMessage='Production Keys'\n                            />\n                        )}\n                        iconText='productionkeys'\n                        route='productionkeys'\n                        to={pathPrefix + '/productionkeys/oauth'}\n                        open\n                        id='production-keys'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.oauth.tokens'\n                                defaultMessage='OAuth2 Tokens'\n                            />\n                        )}\n                        route='productionkeys/oauth'\n                        to={pathPrefix + '/productionkeys/oauth'}\n                        submenu\n                        Icon={<ScreenLockLandscapeIcon />}\n                        open\n                        id='production-keys-oauth'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.api.key'\n                                defaultMessage='API Key'\n                            />\n                        )}\n                        route='productionkeys/apikey'\n                        to={pathPrefix + '/productionkeys/apikey'}\n                        submenu\n                        Icon={<VpnKeyIcon />}\n                        open\n                        id='production-keys-apikey'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.sandbox.keys'\n                                defaultMessage='Sandbox Keys'\n                            />\n                        )}\n                        iconText='productionkeys'\n                        route='sandboxkeys'\n                        to={pathPrefix + '/sandboxkeys/oauth'}\n                        open\n                        id='sandbox-keys'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.oauth.tokens'\n                                defaultMessage='OAuth2 Tokens'\n                            />\n                        )}\n                        route='sandboxkeys/oauth'\n                        to={pathPrefix + '/sandboxkeys/oauth'}\n                        submenu\n                        Icon={<ScreenLockLandscapeIcon />}\n                        open\n                        id='sandbox-keys-oauth'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.api.key'\n                                defaultMessage='API Key'\n                            />\n                        )}\n                        route='sandboxkeys/apikey'\n                        to={pathPrefix + '/sandboxkeys/apikey'}\n                        submenu\n                        Icon={<VpnKeyIcon />}\n                        open\n                        id='sandbox-keys-apikey'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.subscriptions'\n                                defaultMessage='Subscriptions'\n                            />\n                        )}\n                        iconText='subscriptions'\n                        route='subscriptions'\n                        to={pathPrefix + '/subscriptions'}\n                        open\n                        id='left-menu-subscriptions'\n                    />\n                </nav>\n                <div className={classes.content}>\n                    <InfoBar\n                        applicationId={match.params.application_uuid}\n                        innerRef={(node) => { this.infoBar = node; }}\n                    />\n                    <div\n                        className={classNames(\n                            { [classes.contentLoader]: position === 'horizontal' },\n                            { [classes.contentLoaderRightMenu]: position === 'vertical-right' },\n                        )}\n                    >\n                        <Switch>\n                            <Redirect exact from='/applications/:applicationId' to={redirectUrl} />\n                            <Route\n                                path='/applications/:applicationId/overview'\n                                component={Overview}\n                            />\n                            <Route\n                                path='/applications/:applicationId/webhooks/:apiId'\n                                component={WebHookDetails}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/oauth'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/apikey'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'apikey'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/oauth'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/apikey'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'apikey'))}\n                            />\n                            <Route path='/applications/:applicationId/subscriptions' component={Subscriptions} />\n                            <Route component={ResourceNotFound} />\n                        </Switch>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nDetails.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            application_uuid: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(injectIntl(Details));\n"],"sourceRoot":""}