{"version":3,"sources":["webpack:///./source/src/app/components/Shared/RevisionContext.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/endpointUtils.js","webpack:///./source/src/app/components/Apis/Details/Resources/components/APIRateLimiting.jsx","webpack:///./source/src/app/data/Comments.js","webpack:///./source/src/app/components/Shared/LeftMenuItem.jsx","webpack:///./source/src/app/components/Apis/Listing/components/ImageGenerator/ThumbnailView.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/KeyManager.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/Certificates.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/AddOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/SaveOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Create.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/CreateEditForm.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/MarkdownEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Edit.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/Resources.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/parameterUtils.js","webpack:///./source/src/app/components/Apis/Details/Endpoints/GenericEndpoint.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentAdd.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/ImportDefinition.jsx","webpack:///./source/src/app/components/Apis/Details/index.jsx","webpack:///./source/src/app/components/Base/Errors/AuthorizedError.jsx","webpack:///./source/src/app/components/Apis/Details/components/LastUpdatedTime.jsx","webpack:///./source/src/app/components/Apis/Details/components/leftMenu/DevelopSectionMenu.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Overview.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Resources.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Operations.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/ProductResources.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Configuration.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Policies.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/CustomizedStepper.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/MetaData.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/BusinessInformation.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Topics.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/DesignConfigurations.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/DefaultVersion.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/DescriptionEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/AccessControl.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/StoreVisibility.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Tags.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Social.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APICategories.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/RuntimeConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/ResponseCaching.jsx","webpack:///./source/src/app/data/UserStateUtils.js","webpack:///./source/src/app/components/Apis/Details/Configuration/components/CORSConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/SchemaValidation.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/MaxBackendTps.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Flow.jsx","webpack:///./source/src/app/components/Apis/Details/MediationPolicies/EditMediationPolicy.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/APISecurity.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/ApplicationLevel.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/AuthorizationHeader.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/TransportLevel.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/UploadCertificate.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/SelectEndpoint.jsx","webpack:///./source/src/app/components/Apis/Create/Components/SelectPolicies.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Transports.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/QueryAnalysis.jsx","webpack:///./source/src/app/components/Apis/Details/QueryAnalysis/UpdateComplexity.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/Topics.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/AsyncOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/DescriptionAndSummary.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/OperationGovernance.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/Parameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/ListParameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/EditParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/PayloadProperties.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/AddPayloadProperty.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/ListPayloadProperties.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/EditPayloadProperty.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/Runtime.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/GroupOfOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/SubscriptionConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/RuntimeConfigurationWebSocket.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APILevelRateLimitingPolicies.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycle.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleUpdate.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/Components/PublishWithoutDeploy.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleImage.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/CheckboxLabels.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifecyclePending.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleHistory.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/index.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Listing.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/GoToEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Delete.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/DeleteMultiple.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Download.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/View.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/EditContent.jsx","webpack:///./source/src/app/components/Apis/Details/Operations/Operations.jsx","webpack:///./source/src/app/components/Apis/Details/Operations/Operation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/APIOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/Operation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/DescriptionAndSummary.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/OperationGovernance.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/AWSLambdaSettings.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/Parameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/AddParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/ListParameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/RequestBody.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/EditParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/SOAPToRESTListing.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/PolicyEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/CloseConfirmation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/GroupOfOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/SpecErrors.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/GoToDefinitionLink.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/OperationsSelector.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/APIProductOperations.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/ProductResourcesEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/NewEndpointCreate.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/EndpointOverview.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Prototype/InlineEndpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Prototype/GenericResource.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/LoadbalanceFailoverConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/EndpointListing.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GenericEndpointAdd.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/LoadBalanceConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/AdvancedConfig/AdvanceEndpointConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/EndpointSecurity.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/EditableParameterRow.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/AWSLambda/Credentials.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/Environments.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/DisplayDevportal.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/DeploymentOnbording.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/Subscriptions.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionsTable.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/Invoice.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriberDetailsPopup.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionPoliciesManage.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionAvailability.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/TenantAutocomplete.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/Comments.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/Comment.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentOptions.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/index.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/CreateScope.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/EditScope.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/Scopes.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/Delete.jsx","webpack:///./source/src/app/components/Apis/Details/Security/index.jsx","webpack:///./source/src/app/components/Apis/Details/Security/SecurityOverview.jsx","webpack:///./source/src/app/components/Apis/Details/Security/AddPolicy.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/APIDefinition.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/APISecurityAudit.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/DefinitionOutdated.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/WSDL.jsx","webpack:///./source/src/app/components/Apis/Details/components/APIDetailsTopMenu.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/GoTo.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/Components/GoToSuggestions.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/RouteMappings.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/Components/GoToSuggestion.jsx","webpack:///./source/src/app/components/Apis/Details/components/CreateNewVersionButton.jsx","webpack:///./source/src/app/components/Apis/Details/BusinessInformation/BusinessInformation.jsx","webpack:///./source/src/app/components/Apis/Details/Properties/Properties.jsx","webpack:///./source/src/app/components/Apis/Details/Properties/EditableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Monetization/index.jsx","webpack:///./source/src/app/components/Apis/Details/Monetization/BusinessPlans.jsx","webpack:///./source/src/app/components/Apis/Details/ExternalStores/ExternalStores.jsx","webpack:///./source/src/app/components/Apis/Details/NewVersion/NewVersion.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/TryOutConsole.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/SwaggerUI.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/swagger-ui-overrides.css?d85a","webpack:///./source/src/app/components/Apis/Details/TryOut/swagger-ui-overrides.css","webpack:///./source/src/app/components/Shared/InlineMessage.jsx","webpack:///./source/src/app/components/Shared/CustomSplitButton.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/operationUtils.js","webpack:///./source/src/app/components/Shared/WrappedExpansionPanel.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/apiSecurityConstants.js"],"names":["RevisionContext","React","createContext","useRevisionContext","useContext","RevisionContextProvider","Provider","getEndpointTypeProperty","type","category","mergeEndpoints","endpointConfig","endpoint_type","production","production_endpoints","sandbox","sandbox_endpoints","concat","production_failovers","sandbox_failovers","getEndpointTemplateByType","endpointType","isAddressEndpoint","currentEndpointConfig","tmpEndpointConfig","Array","isArray","failOver","algoClassName","algoCombo","sessionManagement","sessionTimeOut","endpointsToList","config","cloneDeep","endpoints","push","getEndpointConfigByImpl","implementationType","implementation_status","url","createEndpointConfig","access_method","amznAccessKey","amznSecretKey","amznRegion","getEndpointTemplate","template_not_supported","RateLimitingLevels","API","RESOURCE","useStyles","makeStyles","theme","focusLabel","boxShadow","paddingRight","spacing","APIRateLimiting","props","updateAPI","operationRateLimits","onChange","currentApiThrottlingPolicy","value","isAPIProduct","setFocusOperationLevel","focusOperationLevel","classes","useState","apiThrottlingPolicy","setApiThrottlingPolicy","isSaving","setIsSaving","isResourceLevel","rateLimitingLevel","apiFromContext","useAPI","useEffect","operationRateLimitMessage","variant","gutterBottom","display","container","direction","justify","alignItems","item","md","xs","ml","fontSize","title","aria-label","placement","interactive","light","component","event","userSelection","target","row","control","color","disabled","isRestricted","label","labelPlacement","id","className","minHeight","borderLeft","pl","select","helperText","margin","map","rateLimit","key","name","displayName","onClick","finally","size","defaultProps","propTypes","PropTypes","func","isRequired","oneOf","arrayOf","shape","disabledAction","string","bool","memo","Comments","parentId","content","kwargs","properties","Object","Utils","deepFreeze","_data","prototype","hasOwnProperty","call","replies","Resource","_requestMetaData","apiId","commentId","callback","promise","this","client","then","apis","deleteComment","catch","error","console","commentInfo","put_apis__apiId__comments__commentId_","body","comment","replyTo","APIClientFactory","getAPIClient","getCurrentEnvironment","CONST","API_CLIENT","addCommentToAPI","requestBody","limit","offset","getAllCommentsOfAPI","CONSTS","freeze","leftLInkText","palette","getContrastText","background","leftMenu","textTransform","custom","leftMenuTextStyle","width","textAlign","overflow","textOverflow","typography","body1","fontWeight","whiteSpace","leftLInkTextHead","leftLInkText_IconLeft","paddingLeft","LeftMenu","backgroundColor","leftMenuWidth","fontFamily","position","bottom","left","top","leftLInk","paddingTop","paddingBottom","height","caption","cursor","textDecoration","leftLInkOverview","leftLink_Icon","leftMenuIconSize","leftLink_IconLeft","noIcon","leftLInkText_NoText","diplay","selectedMenu","appBarSelected","LeftMenuItem","Icon","to","text","route","head","useTheme","strokeColor","iconSize","pathname","useLocation","menuPathPattern","RegExp","isSelected","match","classNames","cloneElement","icon","iconText","divider","number","appBar","element","history","listen","location","windowURL","window","URL","webkitURL","dropzoneStyles","border","borderRadius","padding","styles","acceptDrop","green","dropzone","primary","main","dropZoneWrapper","justifyContent","preview","rejectDrop","red","group","flexDirection","popupHeader","iconView","subtitle","marginRight","subtitleWrapper","marginTop","marginBottom","imageGenWrapper","backgroundSelection","actionBox","imageContainer","FindCategoryKeys","i","MaterialIcons","categories","length","icons","Transition","ThumbnailView","selectedIconUpdate","setState","backgroundIndexUpdate","action","intl","open","fileObj","api","state","selectedTab","colorUpdate","file","Alert","formatMessage","File","newIconJson","backgroundIndex","blob","Blob","JSON","stringify","uploadThumbnail","hex","thumbnail","selectedIcon","uploading","handleClick","bind","handleClose","revokeObjectURL","acceptedFile","cState","apiType","setImageUpdate","Api","APIProduct","addAPIProductThumbnail","addAPIThumbnail","info","createObjectURL","isEditable","imageUpdate","colorPairs","backgrounds","TransitionComponent","aria-labelledby","disableBackdropClick","onClose","fullWidth","maxWidth","fullScreen","square","handleChange","defaultMessage","src","Configurations","app","context","alt","multiple","accept","maxSize","activeClassName","rejectClassName","onDrop","dropFile","getRootProps","getInputProps","rejectedFiles","isFileTooLarge","style","dropIcon","fixedIcon","native","handleSelectionChange","cat","maxHeight","selectIcon","onChangeComplete","handleChangeComplete","thumbnailTemplates","active","colorPair","index","selectBackground","onKeyDown","saveDisableEnable","Component","injectIntl","withAPI","withStyles","withTheme","showEndpoint","getProductionEndpoint","getSandboxEndpoint","expansionPanel","expansionPanelDetails","notConfigured","subHeading","lineHeight","textTrim","Endpoints","isPrototypedAvailable","defaultExpanded","expandIcon","pb","m","marginLeft","iconSpace","actionSpace","keyManagerSelect","minWidth","KeyManager","keyManagersConfigured","setKeyManagersConfigured","configDispatcher","keyManagers","securityScheme","newKeyManagers","checked","indexOf","splice","response","list","includes","required","formControl","enabled","mb","fileinput","uploadedFile","certificatesHeader","addCertificateBtn","borderColor","borderStyle","borderWidth","certificateList","certDetailsHeader","uploadCertDialogHeader","alertWrapper","warningIcon","warningColor","deleteIcon","dark","deleteIconDisable","Certificates","certificates","uploadCertificate","deleteCertificate","isMutualSSLEnabled","aliasList","setCertificateList","anchor","details","openCertificateDetails","setOpenCertificateDetails","alias","certificateToDelete","setCertificateToDelete","isDeleting","setDeleting","uploadCertificateOpen","setUploadCertificateOpen","button","cert","secondary","tier","endpoint","edge","certAlias","getClientCertificateStatus","currentTarget","getCertificateStatus","err","showCertificateDetails","certificateAlias","autoFocus","status","subject","paper","VerbElement","verb","isButton","resourceChipColors","toLowerCase","customMenu","customButton","useMenuStyles","disableFocusRipple","inputProps","SUPPORTED_VERBS","REST","WEBSUB","SSE","WS","AddOperation","operationsDispatcher","isAsyncAPI","inputLabel","useRef","labelWidth","setLabelWidth","useIntl","isWebSub","getSupportedVerbs","useReducer","verbs","newOperations","newOperationsDispatcher","current","offsetWidth","clearInputs","addOperation","APIValidation","operationTarget","validate","operationVerbs","warning","websubOperationTarget","data","ref","htmlFor","renderValue","remaining","verbElements","toUpperCase","allSelected","join","MenuProps","getContentAnchorEl","anchorOrigin","vertical","horizontal","Boolean","startsWith","placeholder","InputLabelProps","shrink","onKeyPress","preventDefault","SaveOperations","updateOpenAPI","updateAsyncAPI","isUpdating","useHistory","isOpen","setIsOpen","isRevision","handleSave","handleSaveAndDeploy","aria-describedby","onBackdropClick","undefined","root","flexGrow","titleWrapper","titleLink","contentWrapper","contentAreaWidth","addNewWrapper","grey","addNewHeader","h6","addNewOther","Create","APIContext","newDoc","setNewDoc","saveDisabled","setSaveDisabled","listingPath","restAPI","createEditForm","Fragment","sm","lg","align","mainTitle","elevation","innerRef","node","data-testid","promiseWrapper","addDocument","docPromise","doc","documentId","addFileToDocument","withRouter","radioGroup","formControlFirst","formControlLabel","typeTextWrapper","FormControlOdd","CreateEditForm","e","sourceType","summary","sourceUrl","otherTypeName","visibility","test","inlineContent","docId","updateDocument","disableName","nameNotDuplicate","nameMaxLengthExceeds","invalidUrl","nameEmpty","summeryEmpty","urlEmpty","invalidDocName","getDocument","apiNotFound","field","nameValidity","documentName","abortEarly","apiDocument","isDocumentPresent","settingsContext","settings","InputProps","onBlur","showNameHelper","multiline","onKeyUp","docVisibilityEnabled","changeType","changeSource","setDisable","getUrlHelperText","supportedDocTypes","contextType","AppContext","MonacoEditor","lazy","ReactMarkdown","flex","splitWrapper","docName","markdownViewWrapper","overflowY","MarkdownEditor","showAtOnce","setIsUpdating","setOpen","code","setCode","toggleOpen","updateDoc","getInlineContentOfDocument","addInlineContentToDocument","obj","fallback","language","options","selectOnLineNumbers","newCode","editorDidMount","editor","monaco","focus","escapeHtml","source","editMetaButton","Edit","getDocumentsList","process","Resources","operationProps","disableRateLimiting","hideAPIDefinitionLink","disableMultiSelect","disableUpdate","disableAddOperation","pageError","setPageError","setOperationRateLimits","markedOperations","setSelectedOperation","sharedScopes","setSharedScopes","sharedScopesByName","setSharedScopesByName","openAPISpec","setOpenAPISpec","securityDefScopes","setSecurityDefScopes","arns","setArns","spec","errors","resolvedSpec","setResolvedSpec","currentPolicies","policyAction","nextResourcePolicies","resourcePath","httpVerb","resourcePolicies","resourcePoliciesDispatcher","currentOperations","operationAction","updatedOperation","addedOperations","paths","parameters","findIndex","in","bodyIndex","parameter","filter","security","find","default","defValue","selectedScope","scopeDescription","scope","description","extractPathParameters","alreadyExistCount","currentVerb","message","warn","responses","200","operations","onMarkAsDelete","useCallback","operation","currentSelections","nextSelectedOperations","isEmpty","localAPI","useMemo","scopes","mapAPIOperations","resolveAndUpdateSpec","rawSpec","specCopy","swaggerValidationBehaviour","validateOpenAPIByInlineDefinition","SwaggerParser","result","openAPIVersion","getVersion","VERSIONS","V3","components","securitySchemes","flows","implicit","V2","securityDefinitions","setSecurityDefScopesFromSpec","updateSwagger","getAmznResourceNames","apitype","getAllScopes","sharedScopesList","sharedScopesByNameList","modifiedScope","shared","getSwagger","isSOAPToREST","promisedInPolicies","getResourcePolicies","promisedOutPolicies","Promise","all","inPolicies","outPolicies","mappedPolicies","policy","out","throttlingPolicyLimit","policies","disableShrink","disableActions","specErrors","selectedOperations","entries","verbObject","openAPI","tag","HTTP_METHODS","highlight","resourcePolicy","slice","markAsDelete","apiOperations","copyOfOperations","isSelectAll","reject","Error","keys","verbInfo","forEach","isScopeExistsInOperation","secDef","disableDelete","supportedDataTypes","formData","query","path","header","cookie","iff","condition","matched","otherwise","getSupportedDataTypes","specVersion","paramType","getDataFormats","dataType","getParameter","schema","getParameterTypes","endpointInputWrapper","textField","input","iconButton","iconButtonValid","endpointValidChip","endpointInvalidChip","endpointErrorChip","GenericEndpoint","endpointURL","editEndpoint","setAdvancedConfigOpen","esCategory","setESConfigOpen","deleteEndpoint","readOnly","serviceUrl","setServiceUrl","isEndpointValid","setIsEndpointValid","statusCode","setStatusCode","setUpdating","isErrorCode","setIsErrorCode","endAdornment","isWebSocket","apiID","testEndpoint","statusMessage","commentIcon","commentAddWrapper","flexFlow","commentAddButton","CommentAdd","currentLength","inputChange","handleClickAddComment","handleClickCancel","filterCommentToAddReply","handleShowReply","commentToFilter","addComment","addReply","trim","replace","CommentsAPI","add","newComment","cancelButton","zeroMinWidth","maxLength","maxCommentLength","instanceOf","importDefinitionDialogHeader","buttonIcon","ImportDefinition","setSchemaDefinition","openAPIDefinitionImport","setOpenAPIDefinitionImport","isImporting","setIsImporting","isGraphQL","isGraphql","isSOAP","asyncAPIDefinitionImport","setAsyncAPIDefinitionImport","currentState","inputAction","inputType","inputValue","formValidity","mode","apiInputs","inputsDispatcher","updateGraphQLSchema","validateGraphQLFile","graphQLSchema","isValid","graphQLInfo","schemaDefinition","updateGraphQLAPIDefinition","success","log","handleOnValidate","isFormValid","dialogTitle","dialogContent","onValidate","btnText","isFileInput","updateWSDLByFileOrArchive","updateWSDLByUrl","reader","FileReader","contentType","onloadend","readAsText","newAPI","updateAsyncAPIDefinitionByFile","updateAsyncAPIDefinitionByUrl","updateAsyncAPIDefinition","updateAPIDefinitionByFile","updateAPIDefinitionByUrl","updateOASDefinition","footer","leftLInkMain","leftMenuActive","topMenu","contentInside","footeremaillink","heading","pxToRem","fontWeightRegular","expanded","expandIconColor","headingText","customIcon","leftMenuIconMainSize","Details","allRevisions","allEnvRevision","authorizedAPI","setAPI","setAPIProduct","getRevision","getDeployedEnv","handleAccordionState","getLeftMenuItemForResourcesByType","getLeftMenuItemForDefinitionByType","isValidURL","getTenantsByState","tenantList","apiUUID","params","apiProdUUID","previousState","get","doRedirectToLogin","pathPrefix","api_uuid","apiDefinitionMenuItem","promisedUpdate","restApi","restApiProduct","revisionedApiProductId","getProductRevisions","revisionedApiId","getRevisions","getProductRevisionsWithEnv","getRevisionsWithEnv","isExpanded","user","setProperty","UserProperties","PORTAL_CONFIG_OPEN","API_CONFIG_OPEN","_updatedProperties","updatedProperties","toJson","update","updatedAPI","pageLocation","redirectUrl","resourceNotFoundMessageText","defineMessages","titleMessage","bodyMessage","resourceNotFountMessage","environmentLabel","per","advertiseInfo","advertised","externalStoresEnabled","lastUpdatedTime","exact","from","subPaths","BASE","OVERVIEW_PRODUCT","OVERVIEW","API_DEFINITION","WSDL","API_DEFINITION_PRODUCT","SCHEMA_DEFINITION","ASYNCAPI_DEFINITION","LIFE_CYCLE","CONFIGURATION","RUNTIME_CONFIGURATION","RUNTIME_CONFIGURATION_WEBSOCKET","TOPICS","CONFIGURATION_PRODUCT","RUNTIME_CONFIGURATION_PRODUCT","ENDPOINTS","ENVIRONMENTS","ENVIRONMENTS_PRODUCT","OPERATIONS","RESOURCES_PRODUCT","APIProductOperations","RESOURCES_PRODUCT_EDIT","ProductResourcesEdit","RESOURCES","APIOperations","SCOPES","DOCUMENTS","DOCUMENTS_PRODUCT","SUBSCRIPTIONS","SUBSCRIPTIONS_PRODUCT","SECURITY","COMMENTS","BUSINESS_INFO","BUSINESS_INFO_PRODUCT","PROPERTIES","PROPERTIES_PRODUCT","NEW_VERSION","MONETIZATION","MONETIZATION_PRODUCT","TRYOUT","apiObj","EXTERNAL_STORES","ExternalStores","subPathKey","subPath","matchPath","BASE_PRODUCT","QUERYANALYSIS","AuthorizedError","statusText","more","py","fill","oneOfType","FormattedMessage","LastUpdatedTime","float","moment","calendar","fromNow","AccordianSummary","borderBottom","MuiAccordionSummary","AccordionDetails","MuiAccordionDetails","DevelopSectionMenu","useUser","getProperty","portalConfigsExpanded","setPortalConfigsExpanded","apiConfigsExpanded","setApiConfigsExpanded","section","mixins","gutters","buttonSuccess","checkItem","chip","imageWrapper","specialGap","resourceTitle","ListRoot","helpButton","helpIcon","htmlTooltip","fontWeightMedium","lifecycleWrapper","lifecycleIcon","leftSideWrapper","Overview","loadEndpoints","newApi","ApiContext","getResourcesClassForAPIs","parentClasses","s","RenderMethodBase","method","chipColor","chipTextColor","RenderMethod","notFound","p","innerKey","methodLower","operationChipColor","Operations","Consumer","resourceRow","ProductResources","apiResources","resource","version","PureComponent","HUMAN_READABLE_SCHEMES","oauth2","basic_auth","mutualssl","api_key","Configuration","tabIndex","tooltip","transport","upperCaseString","filteredItem","accessControl","capitalizeFirstLetter","lowerCaseString","accessControlRoles","workflowStatus","visibleRoles","tags","Policies","ColorlibConnector","completedColor","overview","stepper","completed","activeColor","alternativeLabel","backgroundImage","line","StepConnector","useColorlibStepIconStyles","zIndex","ColorlibStepIcon","forceComplete","step","clsx","instructions","iconTrue","iconFalse","pageLinks","disabledLink","pointerEvents","textLink","CustomizedStepper","deploymentsAvailable","setDeploymentsAvailable","isEndpointAvailable","isTierAvailable","isPublished","lifeCycleStatus","useAppContext","userNameSplit","split","tenantDomain","devportalUrl","steps","activeStep","updateLCStateOfAPI","updateLcState","errorResponse","count","isTestLinkDisabled","isDeployLinkDisabled","connector","StepIconComponent","underline","RouterLink","mt","rel","href","AuthManager","isNotPublisher","finalLifecycleState","MetaData","provider","createdTime","BusinessInformation","businessInformation","businessOwner","technicalOwner","endpointSecurity","Topics","topics","getAsyncAPIDefinition","channels","topic","subscribe","publish","substr","paperCenter","itemPadding","arrowForwardIcon","right","arrowBackIcon","btnSpacing","copyAPIConfig","authorizationHeader","responseCachingEnabled","cacheTimeout","isDefaultVersion","enableSchemaValidation","maxTps","wsdlUrl","corsConfiguration","corsConfigurationEnabled","accessControlAllowCredentials","accessControlAllowOrigins","accessControlAllowHeaders","accessControlAllowMethods","additionalProperties","configReducer","configAction","nextState","targetProperty","property","updatedProperty","DesignConfigurations","apiConfig","descriptionType","setDescriptionType","setOverview","overviewDocument","setOverviewDocument","prop","slackURLProperty","githubURLProperty","invalidTagsExist","DESCRIPTION_TYPES","addDocumentContent","document","deleteOverviewDocument","deleteDocument","DESCRIPTION","getDocuments","overviewDoc","fieldName","regex","isDisabled","px","updateContent","slackURL","githubURL","pt","DefaultVersion","editorHeader","DescriptionEditor","setContent","mx","rows","newContent","AccessControl","roleValidity","setRoleValidity","userRoleValidity","setUserRoleValidity","isNone","invalidRoles","setInvalidRoles","otherValidSystemRoles","setOtherValidSystemRoles","every","val","SelectProps","menu","alwaysShowPlaceholder","blurBehavior","onAdd","role","systemRolePromise","base64url","encode","userRolePromise","userRole","chipRenderer","onDelete","existingRole","StoreVisibility","roleExists","setRoleExists","isRestrictedByRoles","tenants","setTenants","TENANT_STATE_ACTIVE","Tags","isTagValid","setIsTagValid","invalidTags","setInvalidTags","regexPattern","substring","currentInvalidTags","existingTag","oldTag","Social","listItemText","APICategories","setCategories","apiCategories","dense","disableGutters","selected","keepMounted","PaperProps","RuntimeConfiguration","saveButtonDisabled","setSaveButtonDisabled","isNonWebSubAsyncAPI","updateComplexityList","setUpdateComplexityList","API_SECURITY_MUTUAL_SSL_MANDATORY","API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY","newState","DEFAULT_API_SECURITY_OAUTH2","API_SECURITY_BASIC_AUTH","API_SECURITY_API_KEY","noMandatoryOAuthBasicAuth","API_SECURITY_MUTUAL_SSL","noMandatoryMutualSSL","mediationPolicies","seq","inPolicy","setInPolicy","outPolicy","setOutPolicy","faultPolicy","setFaultPolicy","kmNameList","km","getMediationPoliciesToSave","newMediationPolicies","updateInMediationPolicy","updateComplexity","updateGraphqlPoliciesComplexity","updateMediationPolicy","selectedMediationPolicy","ResponseCaching","isEnabled","isResponseCachingEnabled","environmentName","userStorageKey","User","LOCAL_STORAGE_USER","updateUserLocalStorage","newValue","userData","parse","localStorage","getItem","setItem","getUserLocalStorage","CORSConfiguration","isCorsEnabled","isAllowAllOrigins","accessControlAllowOrigin","oldOrigin","accessControlAllowHeader","oldHeader","accessControlAllowMethod","oldMethod","SchemaValidation","prevProps","MaxBackendTps","itemWrapper","FormControl","subTitle","subTitleDescription","flowWrapper","wordBreak","InFlow","editing","setEditing","radioWrapper","EditMediationPolicy","globalMediationPolicies","setGlobalMediationPolicies","seqCustom","setSeqCustom","provideBy","setProvideBy","localSelectedPolicyFile","setLocalSelectedPolicyFile","updatePoliciesFromBE","globalPromise","getGlobalMediationPolicies","customPromise","getMediationPolicies","values","setActivePolicy","assign","newPolicy","policyFile","addMediationPolicy","policyType","getAttribute","handleDownload","policyToDownload","getGlobalMediationPolicyContent","forceDownload","downloadGlobalMediationPolicyContent","getMediationPolicyContent","done","downloadCustomMediationPolicyContent","handleDelete","policyToDelete","deleteMediationPolicy","deleteCustomMediationPolicy","disableEscapeKeyDown","dividers","seq_id","seq_name","seq_type","mr","bottomSpace","APISecurity","isPrototyped","apiContext","haveMultiLevelSecurity","Validate","resourcesWithSecurity","apiList","apiInProduct","op","authType","ApplicationLevel","hasResourceWithSecurity","mandatoryValue","AuthorizationHeader","isHeaderNameValid","setIsHeaderNameValid","validateHeader","TransportLevel","clientCertificates","setClientCertificates","getAllClientCertificates","resp","certificate","addClientCertificate","tmpCertificates","deleteClientCertificate","UploadCertificate","setAlias","setPolicy","setEndpoint","setSaving","setCertificate","isEndpointEmpty","setIsEndpointEmpty","isPoliciesEmpty","setPoliciesEmpty","aliasValidity","setAliasValidity","isRejected","setIsRejected","closeCertificateUpload","aliasValidation","certificateFile","extension","SelectEndpoint","ep","mandatoryStar","SelectPolicies","selectedPolicies","setPolicies","Transports","editIcon","dialogPaper","GraphQLQueryAnalysis","setList","typelist","setTypeList","findSummation","List","Set","respond","array","ob","summation","complexityValue","getGraphqlPoliciesComplexity","res","getGraphqlPoliciesComplexityTypes","typeList","fieldList","setInitialComplexity","fixed","saveButton","searchWrapper","UpdateComplexity","filterKeyWord","setFilter","stickyHeader","typename","aria-controls","newArr","verbMap","sub","pub","asyncAPISpec","setAsyncAPISpec","initialWebsubSubscriptionConfig","websubSubscriptionConfiguration","enable","signingAlgorithm","signatureHeader","secret","websubSubscriptionConfigDispatcher","extractAsyncAPIPathParameters","payload","verifySecurityScheme","resolvedChannels","resolveSpec","o","k","v","resolvedRef","arr","j","getRefTarget","AsyncOperation","trimmedVerb","setIsExpanded","toggleDelete","stopPropagation","paperStyles","customDivider","linearProgress","highlightSelected","hexToRGBA","contentNoMargin","overlayUnmarkDelete","operationDeleteUndo","disableRipple","disableTouchRipple","invisible","DescriptionAndSummary","OperationGovernance","operationScopes","getAsyncAPIOperationScopes","filteredApiScopes","sharedScope","apiScope","Parameters","haveParameters","overflowX","table","ListParameters","editingParameter","setEditingParameter","form","EditParameter","currentParameter","paramAction","nextParameter","parameterActionDispatcher","isEditing","disableTypography","PayloadProperties","parameterContainer","checkBox","AddPayloadProperty","newPropertyDispatcher","addNewProperty","ListPayloadProperties","editingProperty","setEditingProperty","EditPayloadProperty","currentProperty","nextProperty","propertyActionDispatcher","Runtime","allEnvDeployments","getAllEnvironmentDeployments","environment","buildCallbackURL","protocol","host","port","getUriMappingHelperText","fqPath","uriMappingHelperText","setUriMappingHelperText","env","vhost","websubHttpPort","websubHttpsPort","GroupOfOperations","children","SubscriptionConfig","setEnabled","c","r","Math","random","toString","boxFlex","flexWrap","pr","APILevelRateLimitingPolicies","apiRateLimits","setApiRateLimits","historyHead","LifeCycle","checkList","lcHistory","certList","updateData","handleChangeCheckList","promisedClientCerts","clientCerts","promisedAPI","promisedLcState","getLcState","promisedLcHistory","getLcHistory","lcState","checkItems","handleUpdate","buttonsWrapper","stateButton","LifeCycleUpdate","updateLifeCycleState","WORKFLOW_STATUS","CREATED","APPROVED","lifecycleChecklist","lifecycleState","lifecycleStates","availableTransitions","isWorkflowPending","lcMap","Map","set","isPrototype","isAppLayerSecurityMandatory","isCertAvailable","isBusinessPlanAvailable","lifecycleButtons","lifeCycleImage","API_CHANGE_LC","resourceMethod","POST","transitionState","data-value","paperProps","closeButton","DialogTitle","other","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","PublishWithoutDeploy","my","LifeCycleImage","opacity","xmlns","viewBox","transform","d","isolation","mixBlendMode","strokeWidth","strokeLinejoin","highLightMe","y","x","letterSpacing","wordSpacing","clipRule","fillRule","stroke","strokeLinecap","iconWarn","yellow","grid","labelsGrid","CheckboxLabels","endpointImplementationType","lifecyclePending","transition","Slide","cleanupPendingTask","firstCol","personIcon","avatar","LifeCycleHistory","reverse","entry","postState","previous","post","updatedTime","Documents","urlPrefix","Listing","View","EditContent","DocCreate","ResourceNotFound","TextEditor","actionTable","messageBox","actions","LinkGenerator","docs","showAddDocs","docsToDelete","toggleAddDocs","getSortOrder","a","b","documentList","sort","errorData","messageTxt","oldState","showActionsColumn","print","download","viewColumns","customToolbar","search","onRowsDelete","rowData","rowMeta","that","columns","customBodyRender","tableMeta","GoToEdit","displayAddContent","docContentEditPath","Delete","runAction","deleteDoc","apiName","DeleteMultiple","deleteDocs","docPromises","docIndexObj","Download","isFileAvailable","setIsFileAvailable","isSuccessful","setIsSuccessful","getFileForDocument","docTitle","docBadge","displayURL","displayURLLink","leftCell","summaryView","setDoc","loadContentForDoc","html","buttonMain","addResource","operationCopy","apiPolicies","apiScopesByName","handleUpdateList","handleApiThrottlePolicy","updateOperations","apiScopesByNameList","scopeObject","getAllSharedScopes","newOperation","updatedList","updateApiScopes","resourceNotFoundMessage","setFilterByKeyWord","isOperationRateLimiting","dropDown","chipActive","link","listItem","resourceRoot","deleteButton","pathDisplay","descriptionWrapper","scopeSelect","descriptionWrapperUp","addParamRow","propsForm","deleteLink","verticalAlign","Operation","isSecurity","handleScopeChange","handlePolicyChange","newoperation","throttlingPolicy","dropdownScopes","auth","hideParameters","apiOperation","isUsedInAPIProduct","usedProductIds","getOperationScopes","autoWidth","IconComponent","ArrowDropDownIcon","querySelector","scrollTop","renderInput","inputRef","inputRoot","inputInput","renderSuggestion","suggestionProps","suggestion","itemProps","isHighlighted","highlightedIndex","selectedItem","getSuggestions","showEmpty","deburr","inputLength","keep","IntegrationDownshift","timeout","setTimeout","onSelect","changes","clearSelection","getItemProps","getLabelProps","getMenuProps","openMenu","onFocus","min","max","floor","milliSeconds","parseInt","newTimeout","handleTimeoutMin","handleTimeoutSec","AddParameter","initParameter","newParameter","newParameterDispatcher","isParameterExist","isParameterExistValue","paramIn","addNewParameter","hideParameterEdit","isRefParam","isRef","paramCopy","RequestBody","subtleText","format","SOAPToRESTListing","resourcePolicyIn","setResourcePolicyIn","resourcePolicyOut","setResourcePolicyOut","prefersDarkMode","useMediaQuery","openEditor","setOpenEditor","setTabIndex","selectedPolicy","editorProps","smoothScrolling","wordWrap","indicatorColor","textColor","tab","setPolicyContent","originalResourcePolicy","forwardRef","PolicyEditor","openConfirmation","setOpenConfirmation","saving","editorOptions","updateResourcePolicy","closeEditor","CloseConfirmation","currentTagInfo","tagInfo","SpecErrors","primaryTypographyProps","inset","GoToDefinitionLink","OperationsSelector","isIndeterminate","buttonWrapper","apiCopy","setApiResources","endpointTypesWrapper","buttonSection","endpointValidityMessage","errorMessageContainer","implSelectRadio","defaultSwagger","swagger","setSwagger","endpointValidity","setAPIEndpointsValid","initState","generateMockScripts","tmpSecurityInfo","endpoint_security","toJSON","apiObject","apiDispatcher","isRedirect","grantType","tokenUrl","clientId","clientSecret","username","password","isValidEndpoint","generateEndpointConfig","endpointsContainer","swaggerDef","swaggerObj","onChangeAPI","endpointsDispatcher","saveAndRedirect","inlineMessageContainer","endpointTypeCard","cardContent","cardActions","borderTop","NewEndpointCreate","endpointImplType","setImplType","eligibleTypes","types","option","listing","endpointContainer","endpointName","sandboxHeading","endpointsWrapperLeft","borderRight","borderRightStyle","borderRightWidth","endpointsWrapperRight","endpointsTypeSelectWrapper","endpointTypesSelectWrapper","defaultEndpointWrapper","configDialogHeader","addLabel","endpointTypes","EndpointOverview","setEndpointType","supportedEnpointTypes","setSupportedEndpointType","epConfig","setEpConfig","endpointSecurityInfo","setEndpointSecurityInfo","advanceConfigOptions","setAdvancedConfigOptions","endpointSecurityConfig","setEndpointSecurityConfig","prod","endpointCategory","setEndpointCategory","openDialog","typeChangeConfirmation","setTypeChangeConfirmation","supportedTypeLists","epType","availableEndpoints","getEndpointType","getEndpoints","handleOnChangeEndpointCategoryChange","endpointConfigCopy","endpointProp","modifiedEndpoint","endpointTypeProperty","changeEndpointType","selectedKey","tmpConfig","generatedEndpointConfig","handleEndpointTypeSelect","toggleAdvanceConfig","advanceEPConfig","advanceConfig","endpointInfo","getAdvanceConfig","toggleEndpointSecurityConfig","customParameters","handleEndpointSecurityChange","saveEndpointSecurityConfig","endpointSecurityObj","enType","closeEndpointSecurityConfig","updatePaths","overviewWrapper","handleEndpointCategorySelect","toggleESConfig","globalEpType","isSOAPEndpoint","onSaveAdvanceConfig","endpointConfigProperty","selectedEndpoints","onCancel","securityInfo","onChangeEndpointAuth","isProduction","defaultScript","InlineEndpoints","mockValueDetails","setMockValueDetails","onScriptChange","tmpPaths","mockScripts","setMockScripts","getGeneratedMockScriptsOfAPI","mediationScript","script","originalScript","getGeneratedMockScriptOfAPI","scriptContent","GenericResource","showReset","setShowReset","resourcePathContainer","prototypeResourceHeader","chipExpansionPanel","scriptResetButton","genericResourceContent","configHeaderContainer","generalConfigContent","secondaryHeading","flexBasis","flexShrink","endpointConfigSection","generalConfigPanel","securityHeading","sandboxEndpointSwitch","GeneralConfiguration","isConfigExpanded","setConfigExpand","endpointCertificates","setEndpointCertificates","setAliasList","endpointCertificatesList","aliases","filteredEndpoints","epLookup","getEndpointCertificates","hidden","addCertificate","deleteEndpointCertificate","endpointTypeSelect","lbConfigBtn","wrapper","LoadbalanceFailoverConfig","isLBConfigOpen","setLBConfigOpen","addEndpoint","newURL","endpointTemplate","epConfigProperty","endpointList","removeEndpoint","indexToRemove","tmpEndpoints","getEndpointTypeHeading","lpConfigWrapper","apiEndpoints","failOvers","addNewEndpoint","handleLBConfigChange","lbConfig","closeLBConfigDialog","epInput","epTypeWrapper","epTypeName","leftArrow","leftArrowLight","dialogHeader","listItemOdd","EndpointListing","setEndpoints","selectedRef","listingWrapper","GenericEndpointAdd","algorithms","sessionManagementOps","defaultTemplateObj","configButtonContainer","LoadBalanceConfig","setLbConfigObject","algoClassNameError","setAlgoClassNameError","tmpLBConfig","handleFieldChange","algo","handleFailoverFieldChange","itemHeight","configContainer","configSubContainer","advanceDialogActions","AdvanceEndpointConfig","optimize","actionDuration","actionSelect","factor","retryDelay","retryErroCode","retryTimeOut","suspendDuration","suspendErrorCode","suspendMaxDuration","advanceConfigObj","setAdvanceConfig","errorCodes","actionItems","messageTypes","optimizeOptions","handleConfigFieldChange","di","messageType","addParameter","eye","EndpointSecurity","securityValidity","setSecurityValidity","showAddParameter","setShowAddParameter","clientSecretIsMasked","setClientSecretIsMasked","parameterName","setParameterName","parameterValue","setParameterValue","authTypes","grantTypes","tmpSecurity","validateAndUpdateSecurityInfo","validity","toggleAddParameter","handleParameterChange","validateEmpty","itemValue","handleAddToList","customParametersCopy","oldRow","newRow","oldName","oldValue","newName","handleKeyDown","autoComplete","items","renderCustomParameters","EditableParameterRow","setName","setValue","editMode","setEditMode","saveRow","addProperty","selectField","banner","Credentials","regions","aws","newEndpointConfig","labelId","shapeRec","alignSelf","shapeCircaleBack","shapeInnerComplete","placeSelf","shapeInnerInactive","shapeDottedEnd","shapeDottedStart","plusIconStyle","shapeDottedStart1","textShape","textShape2","textPadding","textDelete","textShape3","textShape7","primaryEndpoint","secondaryEndpoint","textShape4","textShape8","textShape5","textShape6","button1","button2","shapeRecBack","shapeCircle","shapeCircleBlack","changeCard","noChangeCard","cardHeight","cardContentHeight","cardActionHeight","textOverlay","gridOverflow","createRevisionDialogStyle","sectionTitle","deployNewRevButtonStyle","popover","timePaddingStyle","labelSpace","labelSpacingDown","warningText","tableCellVhostSelect","vhostSelect","textCount","containerInline","containerOverflow","gridGap","gridTemplateColumns","gridAutoFlow","gridAutoColumns","Environments","revisionCount","restProductApi","selectedRevision","setRevision","defaultVhosts","vhosts","selectedVhosts","setVhosts","selectedVhostDeploy","setVhostsDeploy","extraRevisionToDelete","setExtraRevisionToDelete","setDescription","SelectedEnvironment","setSelectedEnvironment","confirmDeleteOpen","setConfirmDeleteOpen","revisionToDelete","setRevisionToDelete","confirmRestoreOpen","setConfirmRestoreOpen","revisionToRestore","setRevisionToRestore","setCurrentLength","openDeployPopup","setOpenDeployPopup","toggleOpenConfirmDelete","revisionName","revisionId","toggleOpenConfirmRestore","handleCloseDeployPopup","handleClickOpen","handleDeleteSelect","handleSelect","revisions","oldRevision","displayOnDevPortal","revision","handleVhostSelect","handleVhostDeploySelect","deleteRevision","deleteProductRevision","createRevision","createProductRevision","runActionRestore","confirm","restoreRevision","restoreProductRevision","createDeployRevision","envList","vhostList","displayOnDevportal","deployRevision","deployProductRevision","item1","confirmDeleteDialog","labelCancel","labelOk","confirmRestoreDialog","ReturnItem1","revDescription","revName","revCreatedTime","anchorEl","setAnchorEl","handlePopoverClose","openPopover","onMouseEnter","onMouseLeave","transformOrigin","disableRestoreFocus","item6","item2","item3","item4","item5","ReturnItem6","anchorEl1","setAnchorEl1","startIcon","o1","unassignRevision","getGatewayAccessUrl","combined","wsPort","wssPort","httpContext","httpPort","httpsPort","getVhostHelperText","selectionList","shorten","maxTextLen","maxtLen","gatewayUrls","deploymentInfo","rowsMax","defaultValue","checkedIcon","subheader","o2","o3","Paper","envName","undeployRevision","undeployProductRevision","some","EnvDeployments","DisplayDevportal","restAPIProduct","disPlayDevportal","check","setCheck","revisionUuid","displayInDevportalProduct","displayInDevportalAPI","textOptional","textRevision","textDeploy","textDescription","descriptionWidth","DeploymentOnboarding","classes1","environments","hasOnlyOneEnvironment","descriptionOpen","setDescriptionOpen","selectedEnvironment","emptyBox","Subscriptions","setPolices","subscriptionAvailability","availability","setAvailability","subscriptionAvailableTenants","setTenantList","updateInProgress","setUpdateInProgress","crossTenantSubscriptionEnabled","saveAPI","headline","popupHeadline","searchDiv","searchRoot","searchInput","searchIconButton","noDataMessage","tableColumnSize","tableColumnSize2","dialogColumnSize","dialog","invoiceTable","uniqueCell","InfoToolTip","disableColor","subscriberHeader","subscriptionStatus","BLOCKED","PROD_BLOCKED","SubscriptionTablePagination","page","rowsPerPage","onChangePage","ceil","SubscriptionsTable","subscriptions","totalSubscription","searchQuery","rowsPerPageOptions","emptyColumnHeight","subscriberClaims","formatSubscriptionStateString","blockSubscription","blockProductionOnly","unblockSubscription","handleChangePage","handleChangeRowsPerPage","filterSubscriptions","isMonetizedPolicy","isNotCreator","fetchSubscriptionData","subscriptionId","blockSubscriptions","messages","errorMessage","unblockSubscriptions","applicationInfo","subscriber","pagination","total","getMonetization","monetizationStatus","getSubscriptionPolicies","filteredPolicies","tierPlan","policyName","monetizationAttributes","pricePerRequest","BLOCK_SUBSCRIPTION","getSubscriptionBlockingButtons","isNotAuthorized","isMonetizedUsagePolicy","selectableRows","customFooter","colSpan","onChangeRowsPerPage","ActionsComponent","subMails","emails","email","claims","claim","uri","reduce","names","Tip","Tooltip","filterType","selectableRowsHeader","Invoice","showPopup","setShowPopup","showErrorPopup","setShowErrorPopup","invoice","setInvoice","handleAlertClose","getMonetizationInvoice","invoiceData","invoiceItem","insideArray","PopoverContent","setSubscriberClaims","getSubscriberInfo","alignContent","hover","SubscriberDetailsPopup","subscriptionPoliciesPaper","gridLabel","SubscriptionPoliciesManage","subscriptionPolicies","asyncAPIPolicies","newSelectedPolicies","preMigrationPolicies","migratedCase","apiPolicy","subPolicy","migrateMessage","textControl","selectEmpty","subscriptionAvailabilityPaper","tenantsList","SimpleSelect","currentAvailability","setValues","isSpecificTenants","isUIElementDisabled","onSubmit","availabilityValue","displayEmpty","suggestions","DownshiftMultiple","setInputValue","newSelectedItem","inputValue2","tenantList2","startAdornment","handleInputChange","setsuggestions","newSuggestions","tenant","domain","contentWrapperOverview","titleSub","verticalSpace","loadMoreLink","genericMessageWrapper","paperProgress","dialogContainer","allComments","comments","totalComments","loading","handleExpandClick","handleLoadMoreComments","updateComment","onDeleteComment","commentsLimit","commentList","commentIdOfCommentToDelete","remainingComments","newTotal","newComments","acc","cur","temp","newAllCommentList","commentsUpdate","dayjs","extend","relativeTime","commentText","overflowWrap","cleanBack","Comment","replyId","editIndex","handleClickDeleteComment","handleShowEdit","showAddComment","showEditComment","handleConfirmDialog","filterRemainingComments","filterCommentToDelete","handleLoadMoreReplies","handleAddReply","handleDeleteReply","keyCount","parentCommentId","getAllCommentReplies","replyList","replyCount","existingComment","newRepliesList","newCount","newLimit","updatedComment","apiClient","parentCommentIdOfCommentToDelete","replyCommentId","updatedRepliesList","reply","isOverview","noWrap","commenterInfo","firstName","lastName","createdBy","commentIndex","fullName","toggleShowEdit","zvariant","CommentEdit","handleCategoryChange","handleClickUpdateComment","filterCommentToUpdate","filterCommentToUpdateReply","commentToEdit","replyIndex","time","disable","unig","CommentOptions","timestamp","localDate","Date","toLocaleDateString","day","month","year","toLocaleTimeString","hour","minute","getUser","getUserNameWithoutDomain","canDelete","isAdmin","Scope","Scopes","FormControlLabel","helpText","hint","extraPadding","titleGrid","descriptionForm","progress","CreateScope","validRoles","invalidRolesArray","valid","invalid","apiScopes","scopeAddDisabled","addScope","validateScopeName","handleScopeNameInput","validateScopeDescription","validateScopeDisplayName","handleRoleAddition","handleRoleDeletion","exist","bindings","aScope","promisedApiUpdate","redirectURL","EditScope","thisScope","scopeName","updateScope","handleInputs","originalScope","scopeObj","buttonProgress","api_data","editUrl","scopesList","resources","ops","setOpenLocal","deleteScope","Security","SecurityOverview","tableLayout","addJsonContent","showAddPolicy","formattedPolicy","toggleShowAddPolicy","updatePolicyData","policyIds","threatProtectionPolicies","policyId","getThreatProtectionPolicy","updatedPolicies","associatedApi","deleteThreatProtectionPolicyFromApi","n","uuid","formatPolicy","deletePolicy","AddPolicy","getThreatProtectionPolicies","currentApi","addThreatProtectionPolicyToApi","handlePolicyAdd","EditorDialog","AsyncAPIEditor","swaggerEditorWrapper","buttonWarningColor","topBar","converterWrapper","downloadLink","progressLoader","updateApiWarning","serviceCatalog","onboarding","buttonText","warningIconStyle","APIDefinition","schemaContent","graphQL","asyncAPI","asyncAPIModified","convertTo","getConvertToFormat","swaggerModified","isAuditApiClicked","securityAuditProperties","isSwaggerValid","isAsyncAPIValid","errorDetails","noOfErrors","handleNo","hasJsonStructure","onAuditApiClick","onChangeFormatClick","openUpdateConfirmation","updateSwaggerDefinition","updateAsyncAPIDefinitionAndDeploy","updateSwaggerDefinitionAndDeploy","onChangeSwaggerContent","onChangeAsyncAPIContent","promisedApi","getSchema","YAML","safeDump","safeLoad","modifiedContent","load","formattedString","definition","swaggerContent","specFormat","toFormat","parsedContent","isValidFile","newParams","errorMsg","asyncAPIContent","fileName","encodeURIComponent","serviceInfo","outdated","apiToken","collectionId","onEditContent","rootPaper","inlineDecoration","contentLine","htmlToolTip","tableRow","referenceErrorTypography","referenceTypography","subheadingTypography","paperDiv","sectionHeadingTypography","auditSummaryDiv","auditSummarySubDiv","circularProgressBarScore","circularProgressBarScoreFooter","auditSummaryDivRight","columnOne","columnTwo","linkText","APISecurityAudit","createMuiTheme","useNextVariants","overrides","MUIDataTableBodyCell","MUIDataTableSelectCell","MUIDataTableToolbarSelect","searchTerm","lastTerms","termObject","regexPatterns","appendedString","getModel","findNextMatch","lineNumber","range","endLineNumber","column","finalMatchIndex","revealLineInCenter","startLineNumber","deltaDecorations","Range","startColumn","endColumn","isWholeLine","glyphMarginClassName","report","overallScore","numErrors","externalApiId","apiDefinition","criticalityObject","1","2","3","4","5","getSecurityAuditReport","grade","issues","rowType","dataObject","rowObject","specificDescription","pointer","criticality","roundScore","score","tooManyImpacted","pointersAffected","tooManyError","baseUrl","round","reportObject","linkToDetailedReport","errorColumns","glyphMargin","responsive","expandableRows","expandableRowsOnClick","renderExpandableRow","getMoreDetailUrl","linkToDetailedReportText","afterLinkText","overallScoreText","totalNumOfErrorsText","totalNumOfErrors","overallCriticalityText","overallCriticality","securitySummary","percent","dataValidationSummary","getMuiTheme","getRowData","semanticErrors","getErrorMuiTheme","validationErrors","warnings","securityNumOfIssuesText","securityNumOfIssues","issueCounter","securityScoreText","securityScore","securityCriticalityText","securityCriticality","dataNumOfIssuesText","dataNumOfIssues","dataScoreText","dataScore","dataCriticalityText","dataCriticality","DefinitionOutdated","openImport","setOpenImport","showDiff","setShowDiff","newDefinition","setNewDefinition","oldDefinition","setOldDefinition","isRendering","setIsRendering","splitView","disableWordDiff","leftTitle","rightTitle","promisedNewServiceDef","ServiceCatalog","searchServiceByKey","promisedOldServiceDef","newServiceDef","oldServiceDef","getServiceDefinition","reimportService","isArchive","wsdl","loadWSDLInEditor","handleDownloadWSDLZip","getWSDLInfo","getWSDL","downloadWidget","downloadButtonContent","cursorStyle","A200","alertMessage","backLink","backIcon","backText","viewInStoreLauncher","dateWrapper","lastUpdatedTypography","downloadApi","downloadApiFlex","revisionWrapper","topRevisionStyle","readOnlyStyle","activeRevision","APIDetailsTopMenu","lastIndex","setRevisionId","isVisibleInStore","isDownloadable","getDeployments","revisionKey","infoItem","severity","Link","buttonClass","export","zipFile","goToSearch","linkButton","goToWrapper","downshiftWrapper","backdrop","drawer","backdropFilter","GoTo","showSearch","setShowSearch","handleClickAway","common","productOnly","graphqlOnly","apiOnly","GoToSuggestions","currentSuggestions","RenderSuggestion","aria-haspopup","createNewVersionWrapper","createNewVersion","createNewVersionButtonColor","CreateNewVersionButton","API_COPY","paperRoot","emailStatus","isValidBusinessOwnerEmail","isValidTechnicalOwnerEmail","isFormUpdated","businessOwnerEmail","technicalOwnerEmail","noValidate","handleSubmit","checkBoxStyles","tableHead","Properties","additionalPropertiesTemp","github_repo","slack_url","setAdditionalProperties","showAddProperty","setShowAddProperty","propertyKey","setPropertyKey","propertyValue","setPropertyValue","isAdditionalPropertiesStale","setIsAdditionalPropertiesStale","setIsVisibleInStore","keywords","toggleAddProperty","isKeyword","oldKey","additionalPropertiesCopy","validateBeforeAdd","fieldKey","fieldValue","isDisplayInStore","newKey","newProperty","newPropertiesList","apiAdditionalProperties","colorPrimary","EditableRow","setKey","resetText","updateEditMode","Monetization","monStatus","getMonetizationData","apiProduct","getSettings","configureMonetizationToApiProduct","configureMonetizationToApi","monetizationAttribute","rightDataColumn","box","tableCel","tableHeadCell","stateWrapper","tableHeadTitle","BusinessPlans","monetizedPolices","monetizationQuery","policiesList","viewInExStoreLink","black","allExternalStores","setAllExternalStores","publishedExternalStores","setPublishedExternalStores","getPublishedExternalStores","publishedStoreIds","store","reason","getAllExternalStores","publishAPIToExternalStores","successfulStores","FormLabel","CreateNewVersion","serviceVersion","newVersion","empty","alreadyExists","hasSpecialChars","MaxLengthExceeds","isMaxLengthExceeds","versionList","getServiceByName","isDefaultVersionBool","createNewAPIVersion","redirectToReferrer","handleVersionChange","handleServiceVersionChange","handleDefaultVersionChange","tasksReducer","TryOutConsole","apiKey","setAPIKey","deployments","setDeployments","selectedDeployment","setSelectedDeployment","oasDefinition","setOasDefinition","publisherSettings","usePublisherSettings","generateKey","inProgress","getOAS","tasksStatus","tasksStatusDispatcher","generateInternalKey","keyResponse","apikey","getDeployedRevisions","deploymentsResponse","currentDeploymentsWithDisplayName","deploy","gwEnvironment","initialDeploymentSelection","swaggerResponse","updatedOasDefinition","oasCopy","selectedDeploymentVhost","DEFAULT_VHOST","pathSeparator","openapi","servers","transportPort","baseURL","replaceAll","basePath","schemes","decodedJWT","decodeJWT","isAPIRetired","unix","exp","artifactType","selectedGWEnvironment","currentSelection","deployment","accessTokenProvider","userNotificationPaper","disableAuthorizeAndInfoPlugin","wrapComponents","authorizeBtn","errSelectors","SwaggerUI","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","patternToCheck","accessToken","headers","endsWith","splitTokens","defaultModelExpandDepth","plugins","locals","___CSS_LOADER_EXPORT___","module","amber","InlineMessage","iconItem","CustomSplitButton","anchorRef","selectedIndex","setSelectedIndex","contains","aria-expanded","prevOpen","disablePortal","TransitionProps","onClickAway","getAPIProductTaggedOperations","taggedOperations","Default","openAPIOperation","operationInfo","getTaggedOperations","para","paraObj","param","rest","isReference","WrappedExpansionPanel","setExpanded","expandedState","muiName"],"mappings":"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","file":"DeferredDetails.02addd0f2f83c0cb6d37.bundle.js","sourcesContent":["import React, { useContext } from 'react';\n\nconst RevisionContext = React.createContext({ });\nexport const useRevisionContext = () => useContext(RevisionContext);\nexport const RevisionContextProvider = RevisionContext.Provider;\nexport default RevisionContext;\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * Utility method to get the endpoint property name based on the given endpoint type and category.\n *\n * @param {string} type The type of the endpoint (load_balance/ failover)\n * @param {string} category The endpoint category (production/ sandbox)\n * @return {string} The property name of the endpoints.\n */\nfunction getEndpointTypeProperty(type, category) {\n    if (type !== 'failover') {\n        return category;\n    } else {\n        return category === 'sandbox_endpoints' ? 'sandbox_failovers' : 'production_failovers';\n    }\n}\n\n/**\n * Merge the loadbalance/ failover endpoints to single object.\n *\n * @param {object} endpointConfig The endpoint config object\n * @return {object} {production: [], sandbox: []}\n * */\nfunction mergeEndpoints(endpointConfig) {\n    const type = endpointConfig.endpoint_type;\n    if (type === 'load_balance') {\n        return { production: endpointConfig.production_endpoints, sandbox: endpointConfig.sandbox_endpoints };\n    } else if (type === 'failover') {\n        const prodEps = [endpointConfig.production_endpoints].concat(endpointConfig.production_failovers);\n        const sandboxEps = [endpointConfig.sandbox_endpoints].concat(endpointConfig.sandbox_failovers);\n        return { production: prodEps, sandbox: sandboxEps };\n    }\n    return { production: [endpointConfig.production_endpoints], sandbox: [endpointConfig.sandbox_endpoints] };\n}\n\n/**\n * Method to get the endpoints templates based on the selected endpoint type (loadbalance/ failover) and whether is\n * http or address endpoint.\n *\n * @param {string} endpointType The endpoint type\n * @param {bool} isAddressEndpoint Whether the endpoint is soap or not.\n * @param {object} currentEndpointConfig The existing endpoint information.\n * @return {object} A endpoint template object.\n * */\nfunction getEndpointTemplateByType(endpointType, isAddressEndpoint, currentEndpointConfig) {\n    const tmpEndpointConfig = {};\n    if (endpointType === 'failover') {\n        tmpEndpointConfig.endpoint_type = endpointType;\n        tmpEndpointConfig.production_failovers = currentEndpointConfig.production_failovers\n            ? currentEndpointConfig.production_failovers : [];\n        tmpEndpointConfig.sandbox_failovers = currentEndpointConfig.sandbox_failovers\n            ? currentEndpointConfig.sandbox_failovers : [];\n        tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n            ? currentEndpointConfig.production_endpoints[0] : currentEndpointConfig.production_endpoints;\n        tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n            ? currentEndpointConfig.sandbox_endpoints[0] : currentEndpointConfig.sandbox_endpoints;\n        tmpEndpointConfig.failOver = true;\n    } else if (endpointType === 'load_balance') {\n        tmpEndpointConfig.endpoint_type = endpointType;\n        tmpEndpointConfig.algoClassName = 'org.apache.synapse.endpoints.algorithms.RoundRobin';\n        tmpEndpointConfig.algoCombo = 'org.apache.synapse.endpoints.algorithms.RoundRobin';\n        tmpEndpointConfig.sessionManagement = '';\n        tmpEndpointConfig.sessionTimeOut = '';\n        if (currentEndpointConfig.production_endpoints) {\n            tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n                ? currentEndpointConfig.production_endpoints : [currentEndpointConfig.production_endpoints];\n        }\n        if (currentEndpointConfig.sandbox_endpoints) {\n            tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n                ? currentEndpointConfig.sandbox_endpoints : [currentEndpointConfig.sandbox_endpoints];\n        }\n        tmpEndpointConfig.failOver = false;\n    } else {\n        tmpEndpointConfig.endpoint_type = isAddressEndpoint === true ? 'address' : 'http';\n        tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n            ? currentEndpointConfig.production_endpoints[0] : currentEndpointConfig.production_endpoints;\n        tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n            ? currentEndpointConfig.sandbox_endpoints[0] : currentEndpointConfig.sandbox_endpoints;\n        tmpEndpointConfig.failOver = false;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Returns all the endpoints as a list.\n *\n * @param {object} endpointConfig The endpoint config object from the api.\n * @return {array} The list of endpoints.\n * */\nfunction endpointsToList(endpointConfig) {\n    const config = cloneDeep(endpointConfig);\n    const endpoints = [];\n    if (Array.isArray(config.production_endpoints)) {\n        endpoints.push(...config.production_endpoints);\n    } else {\n        endpoints.push(config.production_endpoints);\n    }\n\n    if (Array.isArray(config.sandbox_endpoints)) {\n        endpoints.push(...config.sandbox_endpoints);\n    } else {\n        endpoints.push(config.sandbox_endpoints);\n    }\n\n    if (config.endpoint_type === 'failover') {\n        if (config.sandbox_failovers) {\n            endpoints.push(...config.sandbox_failovers);\n        }\n        if (config.production_failovers) {\n            endpoints.push(...config.production_failovers);\n        }\n    }\n    return endpoints;\n}\n\n/**\n * Returns an endpoint config object template based on the implementation method.\n * Eg: Managed, Prototyped.\n *\n * @param {string} implementationType The endpoint implementation type.\n * @return {object} The endpoint template.\n * */\nfunction getEndpointConfigByImpl(implementationType) {\n    const tmpEndpointConfig = {};\n    if (implementationType === 'PROTOTYPED') {\n        tmpEndpointConfig.endpoint_type = 'http';\n        tmpEndpointConfig.implementation_status = 'prototyped';\n        tmpEndpointConfig.production_endpoints = { config: null, url: 'http://localhost' };\n        tmpEndpointConfig.sandbox_endpoints = { config: null, url: 'http://localhost' };\n    } else {\n        tmpEndpointConfig.endpoint_type = 'http';\n        tmpEndpointConfig.production_endpoints = { url: '' };\n        tmpEndpointConfig.sandbox_endpoints = { url: '' };\n        tmpEndpointConfig.failOver = false;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Get the endpoint config based on the selected endpoint type.\n * Supported endpoint types:\n * 1. http\n * 2. address\n * 3. prototyped\n * 4. awslambda\n * 5. default (Dynamic)\n *\n * @param {string} endpointType The selected endpoint type.\n * @return {endpointConfig} Endpoint config object.\n * */\nfunction createEndpointConfig(endpointType) {\n    const tmpEndpointConfig = {};\n    switch (endpointType) {\n        case 'http':\n            tmpEndpointConfig.endpoint_type = 'http';\n            tmpEndpointConfig.failOver = false;\n            break;\n        case 'address':\n            tmpEndpointConfig.endpoint_type = 'address';\n            tmpEndpointConfig.failOver = false;\n            break;\n        case 'prototyped':\n            tmpEndpointConfig.implementation_status = 'prototyped';\n            tmpEndpointConfig.endpoint_type = 'http';\n            tmpEndpointConfig.production_endpoints = { config: null, url: 'http://localhost' };\n            tmpEndpointConfig.sandbox_endpoints = { config: null, url: 'http://localhost' };\n            break;\n        case 'awslambda':\n            tmpEndpointConfig.endpoint_type = 'awslambda';\n            tmpEndpointConfig.access_method = 'role-supplied';\n            tmpEndpointConfig.amznAccessKey = '';\n            tmpEndpointConfig.amznSecretKey = '';\n            tmpEndpointConfig.amznRegion = '';\n            break;\n        default:\n            tmpEndpointConfig.endpoint_type = 'default';\n            tmpEndpointConfig.production_endpoints = { url: 'default' };\n            tmpEndpointConfig.sandbox_endpoints = { url: 'default' };\n            tmpEndpointConfig.failOver = false;\n            break;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Get the endpoint template based on endpoint type.\n *\n * @param {string} type: Endpoint type (HTTP/ Address)\n * @return {object} Endpoint Template\n * */\nfunction getEndpointTemplate(type) {\n    if (type === 'address') {\n        return { url: '', endpoint_type: 'address', template_not_supported: false };\n    }\n    return { url: '', template_not_supported: false };\n}\n\nexport {\n    getEndpointTypeProperty,\n    mergeEndpoints,\n    getEndpointTemplateByType,\n    endpointsToList,\n    getEndpointConfigByImpl,\n    createEndpointConfig,\n    getEndpointTemplate,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst RateLimitingLevels = {\n    API: 'api',\n    RESOURCE: 'resource',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    focusLabel: {\n        boxShadow: '1px 1px 1px 1px #efefef',\n        paddingRight: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * Handles the resource level and API level throttling UI switch\n * @export\n * @param {*} props\n * @returns\n */\nfunction APIRateLimiting(props) {\n    const {\n        updateAPI, operationRateLimits, onChange, value: currentApiThrottlingPolicy, isAPIProduct,\n        setFocusOperationLevel, focusOperationLevel,\n    } = props;\n    const classes = useStyles();\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(currentApiThrottlingPolicy);\n    const [isSaving, setIsSaving] = useState(false);\n\n    const isResourceLevel = apiThrottlingPolicy === null;\n    const rateLimitingLevel = isResourceLevel ? RateLimitingLevels.RESOURCE : RateLimitingLevels.API;\n    const [apiFromContext] = useAPI();\n\n    // Following effect is used to handle the controlled component case, If user provide onChange handler to\n    // control this component, Then we accept the props as the valid input and update the current state value from props\n    useEffect(() => {\n        if (onChange) {\n            if (currentApiThrottlingPolicy === '' && apiFromContext.apiThrottlingPolicy) {\n                setApiThrottlingPolicy(apiFromContext.apiThrottlingPolicy);\n            } else {\n                setApiThrottlingPolicy(currentApiThrottlingPolicy);\n            }\n        }\n    }, [onChange, currentApiThrottlingPolicy]); // Do not expect to change the onChange during the runtime\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function updateRateLimitingPolicy(event) {\n        // If the selected option is resource, we set the api level rate limiting to null\n        const userSelection = event.target.value === RateLimitingLevels.RESOURCE\n            ? null : '';\n        if (onChange) {\n            // Assumed controlled component\n            onChange(userSelection);\n        } else {\n            setApiThrottlingPolicy(userSelection);\n        }\n        if (event.target.value === RateLimitingLevels.RESOURCE) {\n            setFocusOperationLevel(false);\n        }\n    }\n    /**\n     *\n     *\n     */\n    function saveChanges() {\n        setIsSaving(true);\n        updateAPI({ apiThrottlingPolicy }).finally(() => setIsSaving(false));\n    }\n\n    /**\n     *\n     *\n     */\n    function resetChanges() {\n        setApiThrottlingPolicy(currentApiThrottlingPolicy);\n    }\n\n    let operationRateLimitMessage = (\n        <Typography variant='body1' gutterBottom>\n            You may change the rate limiting policies per operation\n            <Typography variant='caption' display='block' gutterBottom>\n                Expand an operation below to select a rate limiting policy for an operation\n            </Typography>\n        </Typography>\n    );\n    if (isAPIProduct) {\n        operationRateLimitMessage = (\n            <Typography variant='body1' gutterBottom>\n                Rate limiting polices of the source operation will be applied\n                <Typography variant='caption' display='block' gutterBottom>\n                    Rate limiting policy of an individual operation will be govern by the policy specified in the source\n                    operation\n                </Typography>\n            </Typography>\n        );\n    }\n    return (\n        <Paper>\n            <Grid container direction='row' spacing={3} justify='flex-start' alignItems='flex-start'>\n                <Grid item md={12} xs={12}>\n                    <Box ml={1}>\n                        <Typography variant='subtitle1' gutterBottom>\n                            Operations Configuration\n                            <Tooltip\n                                fontSize='small'\n                                title='Configurations that affects on all the resources'\n                                aria-label='common configurations'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline />\n                            </Tooltip>\n                        </Typography>\n                    </Box>\n                    <Divider light variant='middle' />\n                </Grid>\n                <Grid item md={1} xs={1} />\n                <Grid item md={5} xs={11}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>Rate limiting level</FormLabel>\n                        <RadioGroup\n                            aria-label='Apply rate limiting in'\n                            value={rateLimitingLevel}\n                            onChange={updateRateLimitingPolicy}\n                            row\n                        >\n                            <FormControlLabel\n                                value={RateLimitingLevels.API}\n                                control={(\n                                    <Radio\n                                        color='primary'\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    />\n                                )}\n                                label='API Level'\n                                labelPlacement='end'\n                                id='api-rate-limiting-api-level'\n                            />\n                            <FormControlLabel\n                                value={RateLimitingLevels.RESOURCE}\n                                control={(\n                                    <Radio\n                                        color='primary'\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    />\n                                )}\n                                className={focusOperationLevel && classes.focusLabel}\n                                label='Operation Level'\n                                labelPlacement='end'\n                                id='api-rate-limiting-operation-level'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12}>\n                    <Box minHeight={70} borderLeft={1} pl={10}>\n                        {isResourceLevel ? (\n                            operationRateLimitMessage\n                        ) : (\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                id='operation_throttling_policy'\n                                select\n                                label='Rate limiting policies'\n                                value={apiThrottlingPolicy}\n                                onChange={({ target: { value } }) => (\n                                    onChange ? onChange(value) : setApiThrottlingPolicy(value))}\n                                helperText='Selected rate limiting policy will be applied to whole API'\n                                margin='dense'\n                                variant='outlined'\n                            >\n                                {operationRateLimits.map((rateLimit) => (\n                                    <MenuItem\n                                        key={rateLimit.name}\n                                        value={rateLimit.name}\n                                        id={'api-rate-limiting-api-level-' + rateLimit.name}\n                                    >\n                                        {rateLimit.displayName}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        )}\n                    </Box>\n                </Grid>\n                {/* If onChange handler is provided we assume that component is getting controlled by its parent\n                so that, hide the save cancel action */}\n                {!onChange && (\n                    <>\n                        <Grid item md={12}>\n                            <Divider />\n                        </Grid>\n                        <Grid item>\n                            <Box ml={1}>\n                                <Button\n                                    onClick={saveChanges}\n                                    disabled={false}\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                >\n                                    Save\n                                    {isSaving && <CircularProgress size={24} />}\n                                </Button>\n                                <Box display='inline' ml={1}>\n                                    <Button size='small' onClick={resetChanges}>\n                                        Reset\n                                    </Button>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </Paper>\n    );\n}\nAPIRateLimiting.defaultProps = {\n    onChange: null,\n    isAPIProduct: false,\n};\nAPIRateLimiting.propTypes = {\n    updateAPI: PropTypes.func.isRequired,\n    onChange: PropTypes.oneOf([null, PropTypes.func]),\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    disabledAction: PropTypes.shape({}).isRequired,\n    value: PropTypes.string.isRequired,\n    isAPIProduct: PropTypes.bool,\n};\n\nexport default React.memo(APIRateLimiting);\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable */\nimport APIClientFactory from './APIClientFactory';\nimport Utils from './Utils';\nimport Resource from './Resource';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * An abstract representation of an Comments\n */\nclass Comments extends Resource {\n    constructor(parentId, content, category, kwargs) {\n        super();\n        let properties = kwargs;\n        if (parentId instanceof Object) {\n            properties = parentId;\n            Utils.deepFreeze(properties);\n            this._data = properties;\n            for (const key in properties) {\n                if (Object.prototype.hasOwnProperty.call(properties, key)) {\n                    this[key] = properties[key];\n                }\n            }\n        } else {\n            this.parentId = parentId;\n            this.content = content;\n            this.category = category;\n            this.id = null;\n            this.replies = [];\n        }\n\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {object} Metadata for API request\n     * @private\n     */\n    _requestMetaData() {\n        Resource._requestMetaData();\n    }\n\n    /**\n     * Add new comment to an existing API\n     * @param apiId apiId of the api to which the comment is added\n     * @param commentInfo comment text\n     * * TODO: remove\n     */\n    static add(apiId, comment, replyTo) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(),\n            Utils.CONST.API_CLIENT).client;\n        return apiClient.then(client => {\n            return client.apis.Comments.addCommentToAPI(\n                { apiId, replyTo },\n                { requestBody: comment }, Resource._requestMetaData()\n            );\n        })\n    }\n\n    /**\n     * Get all comments for a particular API\n     * @param apiId api id of the api to which the comment is added\n     * * TODO: remove\n     */\n     static all(apiId, limit, offset) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(),\n            Utils.CONST.API_CLIENT).client;\n        return apiClient.then(client => {\n            return client.apis.Comments.getAllCommentsOfAPI({ apiId , limit, offset });\n        })\n    }\n\n    /**\n     * Delete a comment belongs to a particular API\n     * @param apiId api id of the api to which the comment belongs to\n     * @param commentId comment id of the comment which has to be deleted\n     * * TODO: remove\n     */\n    deleteComment(apiId, commentId, callback = null) {\n        let promise = this.client\n            .then(client => {\n                return client.apis.Comments.deleteComment(\n                    { apiId: apiId, commentId: commentId },\n                    this._requestMetaData(),\n                );\n            })\n            .catch(error => {\n                console.error(error);\n            });\n        if (callback) {\n            return promise.then(callback);\n        } else {\n            return promise;\n        }\n    }\n\n    /**\n     * Update a comment belongs to a particular API\n     * @param apiId apiId of the api to which the comment is added\n     * @param commentId comment id of the comment which has to be updated\n     * @param commentInfo comment text\n     * TODO: remove\n     */\n    updateComment(apiId, commentId, commentInfo, callback = null) {\n        let promise = this.client\n            .then(client => {\n                return client.apis['Comment (Individual)'].put_apis__apiId__comments__commentId_(\n                    { apiId: apiId, commentId: commentId, body: commentInfo },\n                    this._requestMetaData(),\n                );\n            })\n            .catch(error => {\n                console.error(error);\n            });\n        if (callback) {\n            return promise.then(callback);\n        } else {\n            return promise;\n        }\n    }\n\n}\n\n\nComments.CONSTS = {\n\n};\n\nObject.freeze(Comments.CONSTS);\n\nexport default Comments;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTheme } from '@material-ui/styles';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\n\nconst useStyles = makeStyles((theme) => ({\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    leftLInkTextHead: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: 800,\n        whiteSpace: 'nowrap',\n    },\n    leftLInkText_IconLeft: {\n        paddingLeft: 10,\n    },\n    LeftMenu: {\n        backgroundColor: theme.palette.background.leftMenu,\n        width: theme.custom.leftMenuWidth,\n        textAlign: 'center',\n        fontFamily: theme.typography.fontFamily,\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        top: 0,\n    },\n    leftLInk: {\n        paddingTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        height: '18px',\n        fontSize: theme.typography.caption.fontSize,\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n    leftLInkOverview: {\n        paddingTop: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        height: '18px',\n        fontSize: theme.typography.caption.fontSize,\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n    leftLink_Icon: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        fontSize: theme.custom.leftMenuIconSize + 'px',\n    },\n    leftLink_IconLeft: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    noIcon: {\n        display: 'none',\n    },\n    leftLInkText_NoText: {\n        diplay: 'none',\n    },\n    selectedMenu: {\n        backgroundColor: theme.palette.background.appBarSelected,\n    },\n\n}));\n\n/**\n * NOTE: Incase displaying menu text is not equal to associated path segment should use `route` prop\n *\n * @param {*} props\n * @returns\n */\nfunction LeftMenuItem(props) {\n    const {\n        Icon, to, text, route, head, id,\n    } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const { leftMenu } = theme.custom;\n    const strokeColor = theme.palette.getContrastText(theme.palette.background.leftMenu);\n    const iconSize = theme.custom.leftMenuIconSize;\n    const { pathname } = useLocation();\n    // Incase displaying menu text is not equal to associated path segment should use `route` prop\n    const routeToCheck = route || text;\n    const menuPathPattern = new RegExp('/' + routeToCheck + '($|/)', 'g');\n    const isSelected = pathname.match(menuPathPattern);\n    return (\n        <Link\n            className={classNames(\n                head !== 'valueOnly' ? (\n                    classes.leftLInk) : (classes.leftLInkOverview),\n                {\n                    [classes.leftLink_IconLeft]: leftMenu === 'icon left',\n                },\n                'leftLInk',\n                isSelected && classes.selectedMenu,\n            )}\n            to={to}\n            id={id}\n        >\n            {// If the icon pro ( which is coming from the React Material library )\n                // is coming we add css class and render.\n                // If leftMenu='no icon' at the theme object we hide the icon. Also we add static classes to\n                // allow customers theme\n                // the product without compiling.\n                Icon ? (\n                    React.cloneElement(Icon, {\n                        className: classNames(\n                            classes.leftLink_Icon,\n                            {\n                                [classes.noIcon]: leftMenu === 'no icon',\n                            },\n                            'leftLink_Icon',\n                        ),\n                    })\n                ) : (\n                // We can also add custom icons\n                    <CustomIcon\n                        strokeColor={strokeColor}\n                        width={iconSize}\n                        height={iconSize}\n                        icon={props.iconText}\n                        className={classNames(\n                            classes.leftLInk,\n                            {\n                                [classes.noIcon]: leftMenu === 'no icon',\n                            },\n                            'leftLink_Icon',\n                        )}\n                    />\n                )\n            }\n            {head === 'valueOnly' ? (\n                <Typography\n                    className={classNames(\n                        classes.leftLInkTextHead,\n                    )}\n                >\n                    {text}\n                </Typography>\n            )\n                : (\n                    <Typography\n                        className={classNames(\n                            classes.leftLInkText,\n                            {\n                                [classes.leftLInkText_IconLeft]: leftMenu === 'icon left',\n                                [classes.leftLInkText_NoText]: leftMenu === 'no text',\n                            },\n                            'leftLInkText',\n                        )}\n                    >\n                        {text}\n                    </Typography>\n                )}\n        </Link>\n    );\n}\nLeftMenuItem.defaultProps = {\n    route: null,\n    iconText: null,\n};\nLeftMenuItem.propTypes = {\n    classes: PropTypes.shape({\n        divider: PropTypes.string,\n        leftLInk: PropTypes.string,\n        leftLink_IconLeft: PropTypes.string,\n        noIcon: PropTypes.string,\n        leftLink_Icon: PropTypes.string,\n        leftLInkText: PropTypes.string,\n        leftLInkTextHead: PropTypes.string,\n        leftLInkText_IconLeft: PropTypes.string,\n        leftLInkText_NoText: PropTypes.string,\n    }).isRequired,\n    theme: PropTypes.shape({\n        custom: PropTypes.shape({\n            leftMenu: PropTypes.string,\n            leftMenuIconSize: PropTypes.number,\n        }),\n        palette: PropTypes.shape({\n            getContrastText: PropTypes.func,\n            background: PropTypes.shape({\n                leftMenu: PropTypes.string,\n                appBar: PropTypes.string,\n            }),\n            leftMenu: PropTypes.string,\n        }),\n    }).isRequired,\n    Icon: PropTypes.element.isRequired,\n    text: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    head: PropTypes.string.isRequired,\n    route: PropTypes.string,\n    history: PropTypes.shape({\n        listen: PropTypes.func.isRequired,\n        location: PropTypes.string.isRequired,\n    }).isRequired,\n    iconText: PropTypes.string,\n};\nexport default LeftMenuItem;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Slide from '@material-ui/core/Slide';\nimport Select from '@material-ui/core/Select';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport { SketchPicker } from 'react-color';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport MaterialIcons from 'MaterialIcons';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Configurations from 'Config';\n\nimport ImageGenerator from './ImageGenerator';\nimport Background from './Background';\nimport BaseThumbnail from './BaseThumbnail';\n\nconst windowURL = window.URL || window.webkitURL;\nconst dropzoneStyles = {\n    border: '1px dashed ',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\nconst styles = (theme) => ({\n    acceptDrop: {\n        backgroundColor: green[50],\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 'calc(100vh - 10em)',\n        padding: `${theme.spacing(2)}px 0px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span': {\n            fontSize: 100,\n            color: theme.palette.primary.main,\n        },\n    },\n    preview: {\n        height: theme.spacing(25),\n    },\n    rejectDrop: {\n        backgroundColor: red[50],\n    },\n    group: {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: '0 0 0 20px',\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    iconView: {\n        width: 30,\n        margin: 10,\n        cursor: 'pointer',\n    },\n    subtitle: {\n        marginRight: 20,\n    },\n    subtitleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: 20,\n        marginBottom: 10,\n    },\n    body: {\n        marginBottom: 10,\n    },\n    imageGenWrapper: {\n        '& > div': {\n            position: 'fixed',\n            marginTop: 20,\n        },\n    },\n    backgroundSelection: {\n        cursor: 'pointer',\n        marginRight: 10,\n        display: 'inline-block',\n        border: 'solid 1px #ccc',\n    },\n    actionBox: {\n        boxShadow:\n            '0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12)',\n        justifyContent: 'flex-start',\n        padding: '10px 0 10px 10px',\n    },\n    imageContainer: {\n        paddingTop: 10,\n    },\n});\n\n/**\n * Give the icons array from category name\n *\n * @param {*} category\n * @param {*} allKeys\n * @returns\n */\nfunction FindCategoryKeys(category) {\n    for (let i = 0; i < MaterialIcons.categories.length; i++) {\n        if (MaterialIcons.categories[i].name === category) {\n            return MaterialIcons.categories[i].icons;\n        }\n    }\n}\n/**\n * Slide up transition for modal\n *\n * @param {any} props Properties\n * @returns {Slide} Slide up transition\n */\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n/**\n * Provides a view for the API Thumbnail image.\n * This can be either user defined image uploaded earlier or a generated Image.\n */\nclass ThumbnailView extends Component {\n    /**\n     * Initializes the ThumbnailView Component\n     *\n     * @param {any} props Component properties\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            file: null,\n            thumbnail: null,\n            selectedTab: 'upload',\n            category: MaterialIcons.categories[0].name,\n            selectedIcon: null,\n            selectedIconUpdate: null,\n            color: null,\n            colorUpdate: null,\n            backgroundIndex: null,\n            backgroundIndexUpdate: null,\n            uploading: false,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    /**\n     * Clean up resource\n     */\n    componentWillUnmount() {\n        if (this.state.thumbnail) {\n            windowURL.revokeObjectURL(this.state.thumbnail);\n        }\n    }\n\n    /**\n     * Event listener for file drop on the dropzone\n     *\n     * @param {File} acceptedFile dropped file\n     */\n    onDrop(acceptedFile) {\n        this.setState({ file: acceptedFile });\n    }\n\n    selectIcon = (selectedIconUpdate) => {\n        this.setState({ selectedIconUpdate });\n    };\n\n    selectBackground = (backgroundIndexUpdate) => {\n        this.setState({ backgroundIndexUpdate });\n    };\n\n    /**\n     * @param {SyntheticEvent} e React event object\n     */\n    handleClick = (action, intl) => () => {\n        if (action === 'btnEditAPIThumb') {\n            this.setState({ open: true });\n        } else if (action === 'btnUploadAPIThumb') {\n            const { api } = this.props;\n            const {\n                selectedTab, selectedIconUpdate, category, colorUpdate, backgroundIndexUpdate, file,\n            } = this.state;\n            let fileObj;\n            if (selectedTab === 'upload') {\n                if (!api.id && !file) {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.validation.error',\n                        defaultMessage: 'Invalid file or API information is not set correctly.',\n                    }));\n                    return;\n                }\n                /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n                fileObj = file[0];\n            } else if (selectedTab === 'remove') {\n                fileObj = new File([], 'FileName.jpg', { type: 'application/json' });\n            } else {\n                if (!selectedIconUpdate && !colorUpdate && !backgroundIndexUpdate) {\n                    Alert.error(intl.formatMessage({\n                        id: 'the.icon.is.not.modified',\n                        defaultMessage: 'The icon is not modified',\n                    }));\n                    return;\n                }\n                const newIconJson = {\n                    key: selectedIconUpdate,\n                    category,\n                    color: colorUpdate,\n                    backgroundIndex: backgroundIndexUpdate,\n                };\n                const blob = new Blob([JSON.stringify(newIconJson)], { type: 'application/json' });\n                fileObj = new File([blob], 'FileName.json', { type: 'application/json' });\n            }\n\n            this.uploadThumbnail(selectedTab, api.id, fileObj, intl);\n        }\n    };\n\n    handleChange = (event, selectedTab) => {\n        this.setState({ selectedTab });\n    };\n\n    handleSelectionChange = (name) => (event) => {\n        this.setState({ [name]: event.target.value });\n    };\n\n    handleChangeComplete = (colorUpdate) => {\n        this.setState({ colorUpdate: colorUpdate.hex });\n    };\n\n    /**\n     * Handle modal close event\n     */\n    handleClose() {\n        const { file, preview } = this.state;\n        if (file) {\n            windowURL.revokeObjectURL(preview);\n        }\n        this.setState((cState) => ({\n            open: false,\n            file: null,\n            colorUpdate: cState.color,\n            backgroundIndexUpdate: cState.background,\n            selectedIconUpdate: cState.selectedIcon,\n        }));\n    }\n\n    /**\n     * Add new thumbnail image to an API\n     *\n     * @param {String} apiId ID of the API to be updated\n     * @param {File} file new thumbnail image file\n     */\n    uploadThumbnail(selectedTab, apiId, file, intl) {\n        this.setState({ uploading: true });\n        const {\n            api: { apiType, id },\n            setImageUpdate,\n        } = this.props;\n        const promisedThumbnail = apiType === Api.CONSTS.APIProduct\n            ? new APIProduct().addAPIProductThumbnail(id, file)\n            : new Api().addAPIThumbnail(id, file);\n\n        promisedThumbnail\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.upload.success',\n                    defaultMessage: 'Thumbnail uploaded successfully',\n                }));\n                if (selectedTab === 'upload') {\n                    this.setState({ open: false, thumbnail: windowURL.createObjectURL(file) });\n                } else {\n                    this.setState((cState) => ({\n                        open: false,\n                        thumbnail: file.preview,\n                        selectedIcon: cState.selectedIconUpdate,\n                        color: cState.colorUpdate,\n                        backgroundIndex: cState.backgroundIndexUpdate,\n                    }));\n                }\n                setImageUpdate();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.upload.error',\n                    defaultMessage: 'Error occurred while uploading new thumbnail. Please try again.',\n                }));\n            })\n            .finally(() => {\n                this.setState({ uploading: false });\n            });\n    }\n\n    saveDisableEnable() {\n        const {\n            file, selectedTab, selectedIconUpdate, colorUpdate, backgroundIndexUpdate, uploading,\n        } = this.state;\n        if (selectedTab === 'upload') {\n            return !(file && file[0]) || uploading; // If no files is uploaded retrun true\n        } else if (selectedTab === 'remove') {\n            return false;\n        } else {\n            // If one of them is selected we return false\n            return !(selectedIconUpdate || backgroundIndexUpdate || colorUpdate) || uploading;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            api, classes, width, height, isEditable, theme, intl, imageUpdate,\n        } = this.props;\n        const colorPairs = theme.custom.thumbnail.backgrounds;\n        const maxSize = 1000000;\n        const {\n            file,\n            thumbnail,\n            selectedTab,\n            selectedIcon,\n            selectedIconUpdate,\n            color,\n            colorUpdate,\n            backgroundIndex,\n            backgroundIndexUpdate,\n            uploading,\n        } = this.state;\n        let { category } = this.state;\n        if (!category) category = MaterialIcons.categories[0].name;\n\n        return (\n            <>\n                <BaseThumbnail\n                    isEditable={isEditable}\n                    onClick={this.handleClick('btnEditAPIThumb', intl)}\n                    thumbnail={thumbnail}\n                    selectedIcon={selectedIcon}\n                    color={color}\n                    backgroundIndex={backgroundIndex}\n                    category={category}\n                    api={api}\n                    width={width}\n                    height={height}\n                    imageUpdate={imageUpdate}\n                />\n\n                <Dialog\n                    TransitionComponent={Transition}\n                    aria-labelledby='thumb-dialog-title'\n                    disableBackdropClick\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    fullWidth='true'\n                    maxWidth='lg'\n                    fullScreen\n                >\n                    <Paper square className={classes.popupHeader}>\n                        <IconButton color='inherit' onClick={this.handleClose} aria-label='Close'>\n                            <Icon>close</Icon>\n                        </IconButton>\n                        <RadioGroup\n                            aria-label='APIThumbnail'\n                            name='apiThumbnail'\n                            className={classes.group}\n                            value={this.state.selectedTab}\n                            onChange={this.handleChange}\n                        >\n                            <FormControlLabel\n                                value='upload'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.upload'\n                                        defaultMessage='Upload'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='remove'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.remove'\n                                        defaultMessage='Remove'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </Paper>\n\n                    <DialogContent>\n                        {selectedTab === 'upload' && (\n                            <Grid container spacing={4}>\n                                <Grid item xs={3}>\n                                    <div className={classes.imageContainer}>\n                                        <img\n                                            className={classes.preview}\n                                            src={\n                                                file && file.length > 0\n                                                    ? windowURL.createObjectURL(file[0])\n                                                    : Configurations.app.context\n                                                      + '/site/public/images/api/api-default.png'\n                                            }\n                                            alt='Thumbnail Preview'\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item xs={9} id='edit-api-thumbnail-upload'>\n                                    <Dropzone\n                                        multiple={false}\n                                        accept='image/*'\n                                        maxSize={maxSize}\n                                        className={classes.dropzone}\n                                        activeClassName={classes.acceptDrop}\n                                        rejectClassName={classes.rejectDrop}\n                                        onDrop={(dropFile) => {\n                                            this.onDrop(dropFile);\n                                        }}\n                                    >\n                                        {({ getRootProps, getInputProps, rejectedFiles }) => {\n                                            const isFileTooLarge = rejectedFiles.length > 0\n                                                && rejectedFiles[0].size > maxSize;\n                                            return (\n                                                <div {...getRootProps({ style: dropzoneStyles })}>\n                                                    <input {...getInputProps()} />\n                                                    {isFileTooLarge && (\n                                                        <Typography color='error'>\n                                                            <FormattedMessage\n                                                                id='upload.image.size.error'\n                                                                defaultMessage='Uploaded File is too large.\n                                                                Maximum file size limit to 1MB'\n                                                            />\n                                                        </Typography>\n                                                    )}\n                                                    <div className={classes.dropZoneWrapper}>\n                                                        <Icon className={classes.dropIcon}>cloud_upload</Icon>\n                                                        <Typography>\n                                                            <FormattedMessage\n                                                                id='upload.image'\n                                                                defaultMessage='Click or drag the image to upload.'\n                                                            />\n                                                        </Typography>\n                                                    </div>\n                                                </div>\n                                            );\n                                        }}\n                                    </Dropzone>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='upload.image.size.info'\n                                            defaultMessage='Maximum file size limit to 1MB'\n                                        />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        )}\n                        {selectedTab === 'design' && (\n                            <Grid container spacing={4}>\n                                <Grid item xs={3} className={classes.imageGenWrapper}>\n                                    <ImageGenerator\n                                        width={width}\n                                        height={height}\n                                        api={api}\n                                        fixedIcon={{\n                                            key: selectedIconUpdate,\n                                            color: colorUpdate,\n                                            backgroundIndex: backgroundIndexUpdate,\n                                            category,\n                                            api,\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={9}>\n                                    <div className={classes.subtitleWrapper}>\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Listing.components'\n                                                    + '.ImageGenerator.ThumbnailView.select.category'\n                                                }\n                                                defaultMessage='Select Category'\n                                            />\n                                        </Typography>\n                                        <Select\n                                            native\n                                            value={this.state.category}\n                                            onChange={this.handleSelectionChange('category')}\n                                        >\n                                            {MaterialIcons.categories.map((cat) => (\n                                                <option value={cat.name}>{cat.name}</option>\n                                            ))}\n                                        </Select>\n                                    </div>\n                                    <Typography component='p' variant='body1' className={classes.body}>\n                                        <FormattedMessage\n                                            id='Apis.Listing.components.ImageGenerator.ThumbnailView.select.an.icon'\n                                            defaultMessage='Select an icon from the Material Icons for your API.'\n                                        />\n                                    </Typography>\n                                    <div style={{ background: '#efefef', maxHeight: 180, overflow: 'scroll' }}>\n                                        {FindCategoryKeys(category).map((icon) => (\n                                            <Icon className={classes.iconView} onClick={() => this.selectIcon(icon.id)}>\n                                                {icon.id}\n                                            </Icon>\n                                        ))}\n                                    </div>\n                                    <div className={classes.subtitleWrapper}>\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Listing.components.ImageGenerator.ThumbnailView.select.'\n                                                    + 'color.for.the.icon'\n                                                }\n                                                defaultMessage='Select a color for the icon'\n                                            />\n                                        </Typography>\n                                    </div>\n                                    <SketchPicker\n                                        color={this.state.color || '#ffffff'}\n                                        onChangeComplete={this.handleChangeComplete}\n                                    />\n                                    {(!theme.custom.thumbnailTemplates || !theme.custom.thumbnailTemplates.active) && (\n                                        <>\n                                            <div className={classes.subtitleWrapper}>\n                                                <Typography\n                                                    component='p'\n                                                    variant='subtitle2'\n                                                    className={classes.subtitle}\n                                                >\n                                                    <FormattedMessage\n                                                        id={\n                                                            'Apis.Listing.components.ImageGenerator.'\n                                                        + 'ThumbnailView.select.background'\n                                                        }\n                                                        defaultMessage='Select a Background'\n                                                    />\n                                                </Typography>\n                                            </div>\n                                            {colorPairs.map((colorPair, index) => (\n                                                <div\n                                                    className={classes.backgroundSelection}\n                                                    onClick={() => this.selectBackground(index)}\n                                                    onKeyDown={() => { }}\n                                                >\n                                                    <Background width={100} height={100} colorPair={colorPair} />\n                                                </div>\n                                            ))}\n                                        </>\n                                    )}\n                                </Grid>\n                            </Grid>\n                        )}\n                    </DialogContent>\n                    <DialogActions className={classes.actionBox}>\n                        <Button\n                            disabled={this.saveDisableEnable()}\n                            variant='contained'\n                            color='primary'\n                            size='small'\n                            onClick={this.handleClick('btnUploadAPIThumb', intl)}\n                            id='edit-api-thumbnail-upload-btn'\n                        >\n                            {selectedTab === 'design' && uploading && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.saving.btn'\n                                        defaultMessage='Saving'\n                                    />\n                                    <CircularProgress size={16} />\n                                </>\n                            )}\n                            {selectedTab === 'design' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.save.btn'\n                                    defaultMessage='Save'\n                                />\n                            )}\n\n                            {selectedTab !== 'design' && uploading && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.uploading.btn'\n                                        defaultMessage='Uploading'\n                                    />\n                                    <CircularProgress size={16} />\n                                </>\n                            )}\n                            {selectedTab === 'upload' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.upload.btn'\n                                    defaultMessage='Upload'\n                                />\n                            )}\n                            {selectedTab === 'remove' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.remove.btn'\n                                    defaultMessage='Remove'\n                                />\n                            )}\n                        </Button>\n\n                        <Button variant='contained' size='small' onClick={this.handleClose}>\n                            <FormattedMessage\n                                id='Apis.Listing.components.ImageGenerator.ThumbnailView.cancel.btn'\n                                defaultMessage='CANCEL'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nThumbnailView.defaultProps = {\n    height: 190,\n    width: 250,\n    isEditable: false,\n    setImageUpdate: () => {},\n};\n\nThumbnailView.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    setImageUpdate: PropTypes.shape({}),\n    imageUpdate: PropTypes.number.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    isEditable: PropTypes.bool,\n    intl: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles, { withTheme: true })(ThumbnailView)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst showEndpoint = function (api, type) {\n    if (api.endpointConfig) {\n        if (type === 'prod') {\n            return api.getProductionEndpoint();\n        }\n        if (type === 'sand') {\n            return api.getSandboxEndpoint();\n        }\n    }\n    return null;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    subtitle: {\n        marginTop: theme.spacing(0),\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    notConfigured: {\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    textTrim: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n}));\n\n/**\n *\n *X\n * @param {*} props\n * @returns\n */\nfunction Endpoints(props) {\n    const { api } = props;\n    const classes = useStyles();\n    const isPrototypedAvailable = api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped';\n\n    /**\n     * Check whether the endpoint configuration is dynamic\n     *\n     * @param {object} endpointConfig The endpoint configuration of the api.\n     * @return {boolean} True if the endpoint config is dynamic.\n     * */\n    const isDynamicEndpoints = (endpointConfig) => {\n        if (!endpointConfig) {\n            return false;\n        }\n        if (endpointConfig.production_endpoints && !Array.isArray(endpointConfig.production_endpoints)) {\n            return endpointConfig.production_endpoints.url === 'default';\n        }\n        return false;\n    };\n\n    return (\n        <>\n            <WrappedExpansionPanel className={classes.expansionPanel} defaultExpanded id='endpoints'>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography className={classes.subHeading} variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.Endpoints.endpoints'\n                            defaultMessage='Endpoints'\n                        />\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                    {isDynamicEndpoints(api.endpointConfig)\n                        ? (\n                            <Box pb={2}>\n                                <Typography component='p' variant='body1' className={classes.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Endpoints.dynamic'\n                                        defaultMessage='Dynamic'\n                                    />\n                                </Typography>\n                            </Box>\n                        )\n                        : (\n                            <>\n                                <Box pb={2}>\n                                    {/* Production Endpoint (TODO) fix the endpoint\n                                                    info when it's available with the api object */}\n\n                                    { !isPrototypedAvailable ? (\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.production'\n                                                defaultMessage='Production'\n                                            />\n                                        </Typography>\n                                    ) : (\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.prototype'\n                                                defaultMessage='Prototype'\n                                            />\n                                        </Typography>\n                                    )}\n                                    {showEndpoint(api, 'prod')\n                                && (\n                                    <Tooltip\n                                        title={showEndpoint(api, 'prod')}\n                                        interactive\n                                    >\n                                        <Typography component='p' variant='body1' className={classes.textTrim}>\n                                            <>\n                                                {showEndpoint(api, 'prod')}\n                                            </>\n                                        </Typography>\n                                    </Tooltip>\n                                )}\n                                    <Typography component='p' variant='body1' className={classes.notConfigured}>\n                                        {!showEndpoint(api, 'prod') && (\n                                            <>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Configuration.'\n                                                    + 'components.Endpoints.not.set'}\n                                                    defaultMessage='-'\n                                                />\n                                            </>\n                                        )}\n                                    </Typography>\n                                </Box>\n                                {!isPrototypedAvailable && (\n                                    <Box pb={2}>\n                                        {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                                it's available with the api object */}\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.sandbox'\n                                                defaultMessage='Sandbox'\n                                            />\n                                        </Typography>\n                                        {showEndpoint(api, 'sand')\n                                    && (\n                                        <Tooltip\n                                            title={showEndpoint(api, 'sand')}\n                                            interactive\n                                        >\n                                            <Typography component='p' variant='body1' className={classes.textTrim}>\n                                                <>\n                                                    {showEndpoint(api, 'sand')}\n                                                </>\n                                            </Typography>\n                                        </Tooltip>\n                                    )}\n                                        <Typography component='p' variant='body1' className={classes.notConfigured}>\n                                            {!showEndpoint(api, 'sand') && (\n                                                <>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Configuration.components.Endpoints.sandbox.'\n                                                        + 'not.set'}\n                                                        defaultMessage='-'\n                                                    />\n                                                </>\n                                            )}\n                                        </Typography>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    <Box width='100%' textAlign='right' m={1}>\n                        <Link to={'/apis/' + api.id + '/endpoints'}>\n                            <Typography style={{ marginLeft: '10px' }} color='primary' variant='caption'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Configuration.Endpoints.edit.api.endpoints'\n                                    defaultMessage='Edit API Endpoints'\n                                />\n                                <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                            </Typography>\n                        </Link>\n                    </Box>\n                </ExpansionPanelDetails>\n            </WrappedExpansionPanel>\n        </>\n    );\n}\n\nEndpoints.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Endpoints);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport API from 'AppData/api';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    keyManagerSelect: {\n        minWidth: 180,\n    },\n}));\n\n/**\n *\n * KeyManager configuration\n * @param {*} props\n * @returns\n */\nexport default function KeyManager(props) {\n    const [keyManagersConfigured, setKeyManagersConfigured] = useState([]);\n    const {\n        configDispatcher,\n        api: { keyManagers, securityScheme },\n    } = props;\n    const classes = useStyles();\n    const handleChange = (event) => {\n        const newKeyManagers = [...keyManagers];\n        const { target: { checked, name } } = event;\n        if (newKeyManagers.indexOf(name) === -1 && checked) {\n            newKeyManagers.push(name);\n        } else if (newKeyManagers.indexOf(name) !== -1 && !checked) {\n            newKeyManagers.splice(newKeyManagers.indexOf(name), 1);\n        }\n        configDispatcher({\n            action: 'keymanagers',\n            value: newKeyManagers,\n        });\n    };\n    useEffect(() => {\n        API.keyManagers().then((response) => setKeyManagersConfigured(response.body.list));\n    }, []);\n    if (!securityScheme.includes('oauth2')) {\n        return (\n            <>\n                <Typography className={classes.subHeading} variant='subtitle2'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.KeyManager.configuration'\n                        defaultMessage='Key Manager Configuration'\n                    />\n                </Typography>\n                <Box ml={1} mb={2}>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.oauth.disabled'\n                            defaultMessage='Key Manager configuration only valid when OAuth2 security is enabled.'\n                        />\n                    </Typography>\n                </Box>\n            </>\n        );\n    }\n    return (\n        <>\n            <Typography className={classes.subHeading} variant='subtitle2'>\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.KeyManager.configuration'\n                    defaultMessage='Key Manager Configuration'\n                />\n            </Typography>\n            <Box ml={1}>\n                <RadioGroup\n                    value={keyManagers.includes('all') ? 'all' : 'selected'}\n                    onChange={({ target: { value } }) => configDispatcher({\n                        action: 'allKeyManagersEnabled',\n                        value: value === 'all',\n                    })}\n                    style={{ flexDirection: 'row' }}\n                >\n                    <FormControlLabel\n                        value='all'\n                        control={<Radio />}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.KeyManager.allow.all'\n                                defaultMessage='Allow all'\n                            />\n                        )}\n                    />\n                    <FormControlLabel\n                        value='selected'\n                        control={<Radio />}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.KeyManager.allow.selected'\n                                defaultMessage='Allow selected'\n                            />\n                        )}\n                    />\n                </RadioGroup>\n                {!keyManagers.includes('all') && (\n                    <Box display='flex' flexDirection='column' m={2}>\n                        <FormControl\n                            required\n                            error={!keyManagers || (keyManagers && keyManagers.length === 0)}\n                            component='fieldset'\n                            className={classes.formControl}\n                        >\n                            <FormLabel component='legend'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.KeyManager.more.than.one.info'\n                                    defaultMessage='Select one or more Key Managers'\n                                />\n                            </FormLabel>\n                            <FormGroup\n                                style={{ flexDirection: 'row' }}\n\n                            >\n                                {keyManagersConfigured.map((key) => (\n                                    <FormControlLabel\n                                        control={(\n                                            <Checkbox\n                                                color='primary'\n                                                checked={keyManagers.includes(key.name)}\n                                                disabled={!key.enabled}\n                                                onChange={handleChange}\n                                                name={key.name}\n                                            />\n                                        )}\n                                        label={key.displayName || key.name}\n                                    />\n                                ))}\n                            </FormGroup>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.KeyManager.more.than.one.error'\n                                    defaultMessage='Select at least one Key Manager'\n                                />\n                            </FormHelperText>\n\n                        </FormControl>\n                    </Box>\n                )}\n            </Box>\n        </>\n    );\n}\n\nKeyManager.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UploadCertificate from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/UploadCertificate';\nimport API from '../../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    fileinput: {\n        display: 'none',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n    certificatesHeader: {\n        fontWeight: 600,\n        marginTop: theme.spacing(1),\n    },\n    addCertificateBtn: {\n        borderColor: '#c4c4c4',\n        borderRadius: '8px',\n        borderStyle: 'dashed',\n        borderWidth: 'thin',\n    },\n    certificateList: {\n        maxHeight: '250px',\n        overflow: 'auto',\n    },\n    certDetailsHeader: {\n        fontWeight: '600',\n    },\n    uploadCertDialogHeader: {\n        fontWeight: '600',\n    },\n    alertWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    warningIcon: {\n        marginRight: 13,\n        color: theme.custom.warningColor,\n        '& .material-icons': {\n            fontSize: 30,\n        },\n    },\n    deleteIcon: {\n        color: theme.palette.error.dark,\n        cursor: 'pointer',\n    },\n    deleteIconDisable: {\n        color: theme.palette.disabled,\n    },\n}));\n/**\n * TODO: Generalize this component to work in Configuration page , upload mutual SSL certificates action\n * in source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/TransportLevel.jsx ~tmkb\n * The base component for advanced endpoint configurations.\n * @param {any} props The input props.\n * @returns {any} The HTML representation of the Certificates.\n */\nfunction Certificates(props) {\n    const {\n        certificates, uploadCertificate, deleteCertificate, isMutualSSLEnabled, apiId, endpoints, aliasList,\n    } = props;\n    const [certificateList, setCertificateList] = useState([]);\n    const [openCertificateDetails, setOpenCertificateDetails] = useState({ open: false, anchor: null, details: {} });\n    const [certificateToDelete, setCertificateToDelete] = useState({ open: false, alias: '' });\n    const [isDeleting, setDeleting] = useState(false);\n    const [uploadCertificateOpen, setUploadCertificateOpen] = useState(false);\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    /**\n     * Show the selected certificate details in a popover.\n     *\n     * @param {any} event The button click event.\n     * @param {string} certAlias  The alias of the certificate which information is required.\n     * */\n    const showCertificateDetails = (event, certAlias) => {\n        if (!isMutualSSLEnabled) {\n            API.getCertificateStatus(certAlias)\n                .then((response) => {\n                    setOpenCertificateDetails({\n                        details: response.body,\n                        open: true,\n                        alias: certAlias,\n                        anchor: event.currentTarget,\n                    });\n                })\n                .catch((err) => {\n                    console.error(err);\n                });\n        } else {\n            API.getClientCertificateStatus(certAlias, apiId)\n                .then((response) => {\n                    setOpenCertificateDetails({\n                        details: response.body,\n                        open: true,\n                        alias: certAlias,\n                        anchor: event.currentTarget,\n                    });\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n        }\n    };\n\n    /**\n     * Delete certificate represented by the alias.\n     *\n     * @param {string} certificateAlias The alias of the certificate that is needed to be deleted.\n     * */\n    const deleteCertificateByAlias = (certificateAlias) => {\n        setDeleting(true);\n        deleteCertificate(certificateAlias)\n            .then(() => setCertificateToDelete({ open: false, alias: '' }))\n            .finally(() => setDeleting(false));\n    };\n\n    useEffect(() => {\n        setCertificateList(certificates);\n    }, [certificates]);\n\n    return (\n        <Grid container direction='column'>\n            {/* TODO: Add list of existing certificates */}\n            <Grid>\n                <Typography className={classes.certificatesHeader}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificates'\n                        defaultMessage='Certificates'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item>\n                <List>\n                    <ListItem\n                        button\n                        disabled={(isRestricted(['apim:api_create'], apiFromContext))}\n                        className={classes.addCertificateBtn}\n                        onClick={() => setUploadCertificateOpen(true)}\n                        id='certs-add-btn'\n                    >\n                        <ListItemAvatar>\n                            <IconButton>\n                                <Icon>add</Icon>\n                            </IconButton>\n                        </ListItemAvatar>\n                        <ListItemText primary='Add Certificate' />\n                    </ListItem>\n                </List>\n                <List className={classes.certificateList}>\n                    {certificateList.length > 0 ? (\n                        certificateList.map((cert) => {\n                            return (\n                                <ListItem id='endpoint-cert-list'>\n                                    <ListItemAvatar>\n                                        <Icon>lock</Icon>\n                                    </ListItemAvatar>\n                                    {isMutualSSLEnabled\n                                        ? (<ListItemText primary={cert.alias} secondary={cert.tier} />)\n                                        : <ListItemText primary={cert.alias} secondary={cert.endpoint} />}\n\n                                    <ListItemSecondaryAction>\n                                        <IconButton\n                                            edge='end'\n                                            onClick={(event) => showCertificateDetails(event, cert.alias)}\n                                        >\n                                            <Icon>info</Icon>\n                                        </IconButton>\n                                        <IconButton\n                                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                            onClick={() => setCertificateToDelete({ open: true, alias: cert.alias })}\n                                            id='delete-cert-btn'\n                                        >\n                                            <Icon className={isRestricted(['apim:api_create'], apiFromContext)\n                                                ? classes.deleteIconDisable : classes.deleteIcon}\n                                            >\n                                                {' '}\n                                                delete\n                                            </Icon>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            );\n                        })\n                    ) : (\n                        <ListItem>\n                            <ListItemAvatar>\n                                <Icon color='primary'>info</Icon>\n                            </ListItemAvatar>\n                            <ListItemText>You do not have any certificates uploaded</ListItemText>\n                        </ListItem>\n                    )}\n                </List>\n            </Grid>\n            <Dialog open={certificateToDelete.open}>\n                <DialogTitle>\n                    <Typography className={classes.uploadCertDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.deleteCertificate'\n                            defaultMessage='Delete Certificate'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent className={classes.alertWrapper}>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.confirm.certificate.delete'\n                            defaultMessage='Do you want to delete '\n                        />\n                        {' '}\n                        { certificateToDelete.alias + '?'}\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => deleteCertificateByAlias(certificateToDelete.alias)}\n                        variant='contained'\n                        color='primary'\n                        disabled={isDeleting}\n                        autoFocus\n                        id='delete-cert-confirm-btn'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.delete.ok.button'\n                            defaultMessage='OK'\n                        />\n                        {isDeleting && <CircularProgress size={24} />}\n\n                    </Button>\n                    <Button onClick={() => setCertificateToDelete({ open: false, alias: '' })}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.delete.cancel.button'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog open={openCertificateDetails.open}>\n                <DialogTitle>\n                    <Typography className={classes.certDetailsHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.details.of'\n                            defaultMessage='Details of'\n                        />\n                        {' ' + openCertificateDetails.alias}\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.status'\n                            defaultMessage='Status'\n                        />\n                        {' : ' + openCertificateDetails.details.status}\n                    </Typography>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.subject'\n                            defaultMessage='Subject'\n                        />\n                        {' : ' + openCertificateDetails.details.subject}\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => setOpenCertificateDetails({ open: false, anchor: null, details: {} })}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.details.close.button'\n                            defaultMessage='Close'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <UploadCertificate\n                endpoints={endpoints}\n                certificates={certificates}\n                uploadCertificate={uploadCertificate}\n                isMutualSSLEnabled={isMutualSSLEnabled}\n                setUploadCertificateOpen={setUploadCertificateOpen}\n                uploadCertificateOpen={uploadCertificateOpen}\n                aliasList={aliasList}\n            />\n        </Grid>\n    );\n}\n\nCertificates.defaultProps = {\n    isMutualSSLEnabled: false,\n    apiId: '',\n};\n\nCertificates.propTypes = {\n    classes: PropTypes.shape({\n        fileinput: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n    }).isRequired,\n    certificates: PropTypes.shape({}).isRequired,\n    uploadCertificate: PropTypes.func.isRequired,\n    deleteCertificate: PropTypes.func.isRequired,\n    apiId: PropTypes.string,\n    isMutualSSLEnabled: PropTypes.bool,\n    endpoints: PropTypes.shape([]).isRequired,\n    aliasList: PropTypes.shape([]).isRequired,\n};\nexport default injectIntl((Certificates));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n    useState, useRef, useReducer,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport AddIcon from '@material-ui/icons/Add';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Chip from '@material-ui/core/Chip';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Fab from '@material-ui/core/Fab';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Badge from '@material-ui/core/Badge';\nimport APIValidation from 'AppData/APIValidation';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        minWidth: 120,\n    },\n    paper: {\n        paddingLeft: theme.spacing(4),\n        paddingTop: theme.spacing(1.5),\n        paddingBottom: theme.spacing(0.5),\n        marginTop: '12px',\n    },\n}));\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction VerbElement(props) {\n    const {\n        verb, onClick, isButton, checked,\n    } = props;\n\n    const useMenuStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb.toLowerCase()];\n        return {\n            customMenu: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                color: theme.palette.getContrastText(backgroundColor),\n                minWidth: theme.spacing(9),\n            },\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n                marginLeft: theme.spacing(1),\n                color: theme.palette.getContrastText(backgroundColor),\n            },\n        };\n    });\n    const classes = useMenuStyles();\n    if (isButton) {\n        return (\n            <Button disableFocusRipple variant='contained' className={classes.customButton} size='small'>\n                {verb}\n            </Button>\n        );\n    } else {\n        return (\n            <ListItem onClick={onClick} key={verb} button>\n                <Chip className={classes.customMenu} size='small' label={verb} />\n                <ListItemSecondaryAction>\n                    <Checkbox\n                        onClick={onClick}\n                        edge='end'\n                        checked={checked}\n                        inputProps={{\n                            'aria-labelledby': verb,\n                            id: `add-operation-${verb.toLowerCase()}`,\n                        }}\n                    />\n                </ListItemSecondaryAction>\n            </ListItem>\n        );\n    }\n}\n\nconst SUPPORTED_VERBS = {\n    REST: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],\n    WEBSUB: ['SUB'],\n    SSE: ['SUB'],\n    WS: ['PUB', 'SUB'],\n};\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddOperation(props) {\n    const { operationsDispatcher, isAsyncAPI, api } = props;\n    const inputLabel = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    const intl = useIntl();\n    const isWebSub = api && api.type === 'WEBSUB';\n\n    function getSupportedVerbs() {\n        return isAsyncAPI ? SUPPORTED_VERBS[api.type] : SUPPORTED_VERBS.REST;\n    }\n\n    /**\n     *\n     *\n     * @param {*} state\n     * @param {*} action\n     * @returns\n     */\n    function newOperationsReducer(state, action) {\n        const { type, value } = action;\n        switch (type) {\n            case 'target':\n            case 'verbs':\n                return { ...state, [type]: value };\n            case 'clear':\n                return { verbs: [], target: '' };\n            case 'error':\n                return { ...state, error: value };\n            default:\n                return state;\n        }\n    }\n    const [newOperations, newOperationsDispatcher] = useReducer(newOperationsReducer, { verbs: [] });\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n    const classes = useStyles();\n\n    /**\n     *\n     *\n     */\n    function clearInputs() {\n        newOperationsDispatcher({ type: 'clear' });\n    }\n    /**\n     *\n     *\n     */\n    function addOperation() {\n        if (\n            APIValidation.operationTarget.validate(newOperations.target).error !== null\n            || APIValidation.operationVerbs.validate(newOperations.verbs).error !== null\n        ) {\n            if (isAsyncAPI) {\n                Alert.warning(intl.formatMessage({\n                    id: 'Apis.Details.Topics.components.AddOperation.operation.topic.or.type.cannot.be.empty.warning',\n                    defaultMessage: \"Topic name or topic type(s) can't be empty\",\n                }));\n                return;\n            }\n            Alert.warning(intl.formatMessage({\n                id: 'Apis.Details.Resources.components.AddOperation.operation.target.or.verb.cannot.be.empty.warning',\n                defaultMessage: \"Operation target or operation verb(s) can't be empty\",\n            }));\n            return;\n        }\n        if (api && api.type && api.type.toLowerCase() === 'websub'\n            && APIValidation.websubOperationTarget.validate(newOperations.target).error !== null) {\n            Alert.warning(intl.formatMessage({\n                id: 'Apis.Details.Resources.components.AddOperation.operation.topic.cannot.have.path.params.warning',\n                defaultMessage: \"WebSub topic can't have path parameters\",\n            }));\n            return;\n        }\n        operationsDispatcher({ action: 'add', data: newOperations });\n        clearInputs();\n    }\n    return (\n        <Paper className={classes.paper}>\n            <Grid container direction='row' spacing={0} justify='center' alignItems='center'>\n                <Grid item md={5} xs={12}>\n                    <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                        <InputLabel ref={inputLabel} htmlFor='outlined-age-simple'>\n                            {isAsyncAPI && (\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.AddOperation.op.type'\n                                    defaultMessage='Type'\n                                />\n                            )}\n                            {!isAsyncAPI && (\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.AddOperation.http.verb'\n                                    defaultMessage='HTTP Verb'\n                                />\n                            )}\n                        </InputLabel>\n\n                        <Select\n                            id='add-operation-selection-dropdown'\n                            multiple\n                            renderValue={(verbs) => {\n                                const remaining = [];\n                                const verbElements = verbs.map((verb, index) => {\n                                    if (index < 2) {\n                                        return <VerbElement isButton verb={verb} />;\n                                    }\n                                    remaining.push(verb.toUpperCase());\n                                    return null;\n                                });\n                                const allSelected = getSupportedVerbs().length === newOperations.verbs.length;\n                                return (\n                                    <>\n                                        {verbElements}\n                                        {remaining.length > 0 && (\n                                            <Tooltip title={remaining.join(', ')} placement='top'>\n                                                <Box display='inline' color='text.hint' m={1} fontSize='subtitle1'>\n                                                    {allSelected ? 'All selected' : `${verbs.length - 2} more`}\n                                                </Box>\n                                            </Tooltip>\n                                        )}\n                                    </>\n                                );\n                            }}\n                            value={newOperations.verbs}\n                            onChange={({ target: { name, value } }) => newOperationsDispatcher({ type: name, value })}\n                            labelWidth={labelWidth}\n                            inputProps={{\n                                name: 'verbs',\n                                id: 'operation-verb',\n                            }}\n                            MenuProps={{\n                                getContentAnchorEl: null,\n                                anchorOrigin: {\n                                    vertical: 'bottom',\n                                    horizontal: 'left',\n                                },\n                            }}\n                        >\n                            {getSupportedVerbs().map((verb) => (\n                                <VerbElement\n                                    checked={newOperations.verbs.includes(verb.toLowerCase())}\n                                    value={verb.toLowerCase()}\n                                    verb={verb}\n                                />\n                            ))}\n                        </Select>\n\n                        <FormHelperText id='my-helper-text'>\n                            {newOperations.verbs.includes('options') && (\n                                // TODO: Add i18n to tooltip text ~tmkb\n                                <Tooltip\n                                    title={\n                                        'Select the OPTIONS method to send OPTIONS calls to the backend.'\n                                        + ' If the OPTIONS method is not selected, OPTIONS calls will be returned '\n                                        + 'from the Gateway with allowed methods.'\n                                    }\n                                    placement='bottom'\n                                >\n                                    <Badge color='error' variant='dot'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.AddOperation.option'\n                                            defaultMessage='OPTIONS'\n                                        />\n                                    </Badge>\n                                </Tooltip>\n                            )}\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item md={5} xs={8}>\n                    <TextField\n                        id='operation-target'\n                        label={isAsyncAPI ? 'Topic Name' : 'URI Pattern'}\n                        error={Boolean(newOperations.error)}\n                        autoFocus\n                        name='target'\n                        value={newOperations.target}\n                        onChange={({ target: { name, value } }) => newOperationsDispatcher({\n                            type: name,\n                            value: !isWebSub && !value.startsWith('/') ? `/${value}` : value,\n                        })}\n                        placeholder={isAsyncAPI ? 'Enter topic name' : 'Enter URI pattern'}\n                        helperText={newOperations.error || (isAsyncAPI ? 'Enter topic name' : 'Enter URI pattern')}\n                        fullWidth\n                        margin='dense'\n                        variant='outlined'\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onKeyPress={(event) => {\n                            if (event.key === 'Enter') {\n                                // key code 13 is for `Enter` key\n                                event.preventDefault(); // To prevent form submissions\n                                addOperation();\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid item md={2} xs={4}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddOperation.add.tooltip'\n                                defaultMessage='Add new operation'\n                            />\n                        )}\n                        aria-label='AddOperation'\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <Fab\n                                style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                                size='small'\n                                color='primary'\n                                aria-label='Add new operation'\n                                onClick={addOperation}\n                                id='add-operation-button'\n                            >\n                                <AddIcon />\n                            </Fab>\n                        </span>\n                    </Tooltip>\n                    <sup>\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.AddOperation.clear.inputs.tooltip'\n                                    defaultMessage='Clear inputs'\n                                />\n                            )}\n                            aria-label='clear-inputs'\n                            placement='bottom'\n                            interactive\n                        >\n                            <span>\n                                <IconButton onClick={clearInputs} size='small'>\n                                    <ClearIcon />\n                                </IconButton>\n                            </span>\n                        </Tooltip>\n                    </sup>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nAddOperation.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n};\n\nexport default React.memo(AddOperation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SaveOperations(props) {\n    const {\n        updateOpenAPI, updateAsyncAPI, operationsDispatcher, api,\n    } = props;\n    const [isUpdating, setIsSaving] = useState(false);\n    const history = useHistory();\n    const [isOpen, setIsOpen] = useState(false);\n    function handleSaveAndDeploy() {\n        setIsSaving(true);\n        if (updateAsyncAPI) {\n            updateAsyncAPI('save')\n                .finally(() => history.push({\n                    pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                        : `/apis/${api.id}/deployments`,\n                    state: 'deploy',\n                }));\n        } else {\n            updateOpenAPI('save')\n                .finally(() => history.push({\n                    pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                        : `/apis/${api.id}/deployments`,\n                    state: 'deploy',\n                }));\n        }\n    }\n\n    /**\n     * Handle the Save button event,\n     *\n     */\n    function handleSave() {\n        setIsSaving(true);\n        if (updateAsyncAPI) {\n            updateAsyncAPI('save').finally(() => setIsSaving(false));\n        } else {\n            updateOpenAPI('save').finally(() => setIsSaving(false));\n        }\n    }\n\n    return (\n        <>\n            <Grid container direction='row' spacing={1} style={{ marginTop: 20 }}>\n                <Grid item>\n                    {api.isRevision\n                        || isRestricted(['apim:api_create'], api) ? (\n                            <Button\n                                disabled\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Resources.save'\n                                    defaultMessage='Save'\n                                />\n                            </Button>\n                        ) : (\n                            <CustomSplitButton\n                                handleSave={handleSave}\n                                handleSaveAndDeploy={handleSaveAndDeploy}\n                                isUpdating={isUpdating}\n                                id='resources-save-operations'\n                            />\n                        )}\n                </Grid>\n                <Grid item>\n                    <Button onClick={() => setIsOpen(true)}>Reset</Button>\n                </Grid>\n            </Grid>\n            <Dialog\n                open={isOpen}\n                aria-labelledby='bulk-delete-dialog-title'\n                aria-describedby='bulk-delete-dialog-description'\n                onBackdropClick={() => setIsOpen(false)}\n            >\n                <DialogTitle id='bulk-delete-dialog-title'>Discard changes</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='bulk-delete-dialog-description'>\n                        Please confirm the discard all changes action\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setIsOpen(false)}>CLOSE</Button>\n                    <Box ml={1}>\n                        <Button\n                            onClick={() => {\n                                operationsDispatcher({ action: 'init' });\n                                setIsOpen(false);\n                            }}\n                            color='error'\n                        >\n                            RESET\n                        </Button>\n                    </Box>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nSaveOperations.propTypes = {\n    updateOpenAPI: PropTypes.func,\n    updateAsyncAPI: PropTypes.func,\n    operationsDispatcher: PropTypes.func.isRequired,\n};\n\nSaveOperations.defaultProps = {\n    updateOpenAPI: undefined,\n    updateAsyncAPI: undefined,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useRef, useContext, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport CreateEditForm from './CreateEditForm';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport GoToEdit from './GoToEdit';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(3),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n});\n\nfunction Create(props) {\n    const { api, isAPIProduct } = useContext(APIContext);\n    const [newDoc, setNewDoc] = useState(null);\n    const [saveDisabled, setSaveDisabled] = useState(true);\n    const { classes, intl, history } = props;\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    const restAPI = api.apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n    let createEditForm = useRef(null);\n\n    const addDocument = (apiId) => {\n        const promiseWrapper = createEditForm.addDocument(apiId);\n        promiseWrapper.docPromise\n            .then((doc) => {\n                const { documentId, name } = doc.body;\n                if (promiseWrapper.file && documentId) {\n                    const filePromise = restAPI.addFileToDocument(apiId, documentId, promiseWrapper.file[0]);\n                    filePromise\n                        .then((doc) => {\n                            Alert.info(`${name} ${intl.formatMessage({\n                                id: 'Apis.Details.Documents.Create.successful.file.upload.message',\n                                defaultMessage: 'File uploaded successfully.',\n                            })}`);\n                            history.push(listingPath);\n                        })\n                        .catch((error) => {\n                            if (process.env.NODE_ENV !== 'production') {\n                                console.log(error);\n                                Alert.error(intl.formatMessage({\n                                    id: 'Apis.Details.Documents.Create.markdown.editor.upload.error',\n                                    defaultMessage: 'Error uploading the file',\n                                }));\n                            }\n                        });\n                } else {\n                    Alert.info(`${doc.body.name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Create.markdown.editor.success',\n                        defaultMessage: ' added successfully.',\n                    })}`);\n                    setNewDoc(doc);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Documents.Create.markdown.editor.add.error',\n                        defaultMessage: 'Error adding the document',\n                    }));\n                }\n            });\n    };\n    return (\n        <React.Fragment>\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={listingPath} className={classes.titleLink}>\n                                    <Typography variant='h5' align='left' className={classes.mainTitle}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.heading'\n                                            defaultMessage='Documents'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h5'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Create.title'\n                                        defaultMessage='Add New Document'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0}>\n                                <CreateEditForm\n                                    innerRef={(node) => {\n                                        createEditForm = node;\n                                    }}\n                                    apiType={api.apiType}\n                                    apiId={api.id}\n                                    saveDisabled={saveDisabled}\n                                    setSaveDisabled={setSaveDisabled}\n                                />\n                                <Divider />\n\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        id='add-document-btn'\n                                        data-testid='add-document-btn'\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={() => addDocument(api.id)}\n                                        disabled={saveDisabled}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.markdown.editor.add.document.button'\n                                            defaultMessage='Add Document'\n                                        />\n                                    </Button>\n                                    <Button className={classes.button} onClick={() => history.push(listingPath)}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.markdown.editor.add.document.cancel.button'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </Button>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            {newDoc && <GoToEdit doc={newDoc} />}\n        </React.Fragment>\n    );\n}\n\nCreate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.func.isRequired,\n    apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(Create)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport green from '@material-ui/core/colors/green';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Icon from '@material-ui/core/Icon';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dropzone from 'react-dropzone';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport APIValidation from 'AppData/APIValidation';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Configurations from 'Config';\n\nconst styles = theme => ({\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: 300,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    group: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    formControlFirst: {\n        display: 'block',\n    },\n    formControl: {\n        display: 'block',\n        marginTop: 20,\n    },\n    formControlLabel: {\n        background: '#efefef',\n        borderRadius: 5,\n        paddingRight: 10,\n        marginLeft: 0,\n        marginTop: 10,\n    },\n    typeTextWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    acceptDrop: {\n        backgroundColor: green[50],\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 75,\n        padding: `${theme.spacing(2)}px 0px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        cursor: 'pointer',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n});\n\nclass CreateEditForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'HOWTO',\n            sourceType: 'INLINE',\n            name: '',\n            summary: '',\n            sourceUrl: '',\n            file: null,\n            disableName: false,\n            otherTypeName: null,\n            nameNotDuplicate: true,\n            nameMaxLengthExceeds: false,\n            invalidUrl: false,\n            nameEmpty: false,\n            summeryEmpty: false,\n            urlEmpty: false,\n            invalidDocName: false,\n            visibility: 'API_LEVEL'\n        };\n    }\n\n    changeType = (e) => {\n        const { value } = e.target;\n        if (value === 'PUBLIC_FORUM' || value === 'SUPPORT_FORUM') {\n            this.setState({ sourceType: 'URL' });\n        }\n        this.setState({ type: value });\n    };\n    changeSource = (e) => {\n        const { value } = e.target;\n        this.validate();\n        this.setState({ sourceType: value });\n    };\n    setDisable = (item) => {\n        const { type } = this.state;\n        if (item === 'INLINE' || item === 'MARKDOWN' || item === 'FILE') {\n            if (type === 'PUBLIC_FORUM' || type === 'SUPPORT_FORUM') {\n                return true;\n            }\n        }\n    };\n    handleChange = name => (e) => {\n        const { value } = e.target;\n        if (name === 'name') {\n            this.setState({ name: value });\n        } else if (name === 'summary') {\n            this.setState({ summary: value });\n        } else if (name === 'sourceUrl') {\n            this.setState({ sourceUrl: value });\n        } else if (name === 'otherTypeName') {\n            this.setState({ otherTypeName: value });\n        }else if (name === 'visibility') {\n            this.setState({ visibility: value });\n        }\n    };\n\n    onDrop = (acceptedFile) => {\n        const { intl } = this.props;\n        var specialChars = /[`!@#%^*()+\\={};'\"\\\\|,<>\\/~]/;\n        if (specialChars.test(acceptedFile[0].name)) {\n            this.setState({ file: null });\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.Documents.CreateEditForm.source.file.name.error.invalid',\n                defaultMessage: 'Document source file name cannot contain spaces or special characters',\n            }));\n        } else {\n            this.setState({ file: acceptedFile });\n        }\n    };\n\n    addDocument = (apiId) => {\n        const { apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        const {\n            name, type, summary, sourceType, sourceUrl, file, otherTypeName, visibility,\n        } = this.state;\n        const docPromise = restAPI.addDocument(apiId, {\n            name,\n            type,\n            summary,\n            sourceType,\n            visibility,\n            sourceUrl,\n            otherTypeName,\n            inlineContent: '',\n        });\n        return { docPromise, file };\n    };\n    updateDocument = (apiId) => {\n        const { apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        const {\n            name, type, summary, sourceType, sourceUrl, file, otherTypeName, visibility,\n        } = this.state;\n        const { docId } = this.props;\n        const docPromise = restAPI.updateDocument(apiId, docId, {\n            name,\n            type,\n            summary,\n            sourceType,\n            visibility,\n            sourceUrl,\n            otherTypeName,\n            inlineContent: '',\n        });\n        return { docPromise, file };\n    };\n    getDocument() {\n        const { apiId, docId, apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        if (docId && apiId) {\n            const docPromise = restAPI.getDocument(apiId, docId);\n            docPromise\n                .then((doc) => {\n                    const {\n                        name, type, summary, sourceType, sourceUrl, otherTypeName, visibility,\n                    } = doc.body;\n                    this.setState({\n                        name,\n                        type,\n                        summary,\n                        sourceType,\n                        sourceUrl,\n                        otherTypeName,\n                        visibility,\n                    });\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        this.setState({ apiNotFound: true });\n                    }\n                });\n        }\n    }\n    validate(field=null, value=null) {\n        let invalidUrl = false;\n        if (field === 'url') {\n            invalidUrl = value ? APIValidation.url.validate(value).error : false;\n            this.setState({ invalidUrl });\n            if (value === '') {\n                this.setState({ urlEmpty: true });\n            } else {\n                this.setState({ urlEmpty: false });\n            }\n        } else if (field === 'name') {\n            if (value) {\n                const nameValidity = APIValidation.documentName.required().validate(value, { abortEarly: false }).error;\n                if (nameValidity === null) {\n                    this.setState({ invalidDocName: false });\n                    const promise = APIValidation.apiDocument.validate({ id: this.props.apiId, name: value });\n                        promise\n                            .then((isDocumentPresent) => {\n                                this.setState({ nameNotDuplicate: !isDocumentPresent });\n                            })\n                            .catch((error) => {\n                                if (error.status === 404) {\n                                    this.setState({ nameNotDuplicate: true });\n                                } else {\n                                    Alert.error('Error when validating document name');\n                                }\n                            });\n                } else {\n                    this.setState({ invalidDocName: true });\n                }\n            } else {\n                this.setState({ nameNotDuplicate: true });\n            }\n\n            if (value === '') {\n                this.setState({ nameEmpty: true, nameMaxLengthExceeds: false });\n            } else if (value && value.length > 60) {\n                this.setState({ nameEmpty: false, nameMaxLengthExceeds: true });\n            } else {\n                this.setState({ nameEmpty: false, nameMaxLengthExceeds: false });\n            }\n        } else if (field === 'summary') {\n            if (value === '') {\n                this.setState({ summeryEmpty: true });\n            } else {\n                this.setState({ summeryEmpty: false });\n            }\n        }\n    }\n    componentDidMount() {\n        this.getDocument();\n        const { apiId, docId } = this.props;\n        if (apiId && docId) {\n            this.setState({ disableName: true });\n        }\n    }\n    showNameHelper() {\n        const { nameEmpty, nameNotDuplicate, nameMaxLengthExceeds, invalidDocName } = this.state;\n        if (nameMaxLengthExceeds) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.exceeds.document.name.length.helper.text'\n                    defaultMessage='Document name exceeds the maximum length of 60 characters'\n                />\n            );\n        } else if (nameNotDuplicate && !nameEmpty && !invalidDocName) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.document.name.helper.text'\n                    defaultMessage='Provide the name for the document'\n                />\n            );\n        } else if (nameEmpty) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.empty.document.name.helper.text'\n                    defaultMessage='Document name cannot be empty'\n                />\n            );\n        } else if (invalidDocName) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.invalid.document.name.helper.text'\n                    defaultMessage='Document name cannot contain spaces or special characters'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.duplicate.document.name.helper.text'\n                    defaultMessage='Duplicate document name'\n                />\n            );\n        }\n    }\n    getUrlHelperText() {\n        const { invalidUrl, urlEmpty} = this.state;\n\n        if (invalidUrl) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text.error.invalid'\n                    defaultMessage='Enter a valid URL to the source'\n                />\n            );\n        } else if (urlEmpty) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text.error.empty'\n                    defaultMessage='URL Field cannot be empty'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text'\n                    defaultMessage='Provide the URL to the source'\n                />\n            );\n        }\n    }\n    render() {\n        const {\n            name,\n            type,\n            summary,\n            sourceType,\n            sourceUrl,\n            file,\n            disableName,\n            otherTypeName,\n            invalidUrl,\n            nameNotDuplicate,\n            nameMaxLengthExceeds,\n            nameEmpty,\n            invalidDocName,\n            summeryEmpty,\n            urlEmpty,\n            visibility\n        } = this.state;\n        const { classes, setSaveDisabled } = this.props;\n        const { settings: settingsContext } = this.context;\n        if (\n            name !== '' &&\n            summary !== '' &&\n            nameNotDuplicate &&\n            !nameMaxLengthExceeds &&\n            !invalidDocName &&\n            ((!invalidUrl && sourceUrl !== '') || sourceType !== 'URL')\n        ) {\n            setSaveDisabled(false);\n        } else {\n            setSaveDisabled(true);\n        }\n        return (\n            <div className={classes.addNewOther}>\n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                    <TextField\n                        fullWidth\n                        InputProps={{\n                            onBlur: ({ target: { value } }) => {\n                                this.validate('name', value);\n                            },\n                        }}\n                        label={\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.name'\n                                defaultMessage='Name *'\n                            />\n                        }\n                        helperText={this.showNameHelper()}\n                        type='text'\n                        id='doc-name'\n                        variant='outlined'\n                        name='name'\n                        margin='normal'\n                        value={name}\n                        onChange={this.handleChange('name')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        autoFocus\n                        disabled={disableName}\n                        error={!nameNotDuplicate || nameEmpty || nameMaxLengthExceeds || invalidDocName}\n                    />\n                </FormControl>\n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        InputProps={{\n                            onBlur: ({ target: { value } }) => {\n                                this.validate('summary', value);\n                            },\n                            onKeyUp: ({ target: { value } }) => {\n                                this.validate('summary', value);\n                            },\n                        }}\n                        id='doc-summary'\n                        margin='normal'\n                        variant='outlined'\n                        label={\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary'\n                                defaultMessage='Summary *'\n                            />\n                        }\n                        helperText={\n                            summeryEmpty ? (\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.summary.error.empty'\n                                    defaultMessage='Document summary can not be empty'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.summary.helper.text'\n                                    defaultMessage='Provide a brief description for the document'\n                                />\n                            )\n                        }\n                        type='text'\n                        name='summary'\n                        margin='normal'\n                        value={summary}\n                        onChange={this.handleChange('summary')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        error={summeryEmpty}\n                    />\n                </FormControl>\n                {settingsContext.docVisibilityEnabled && \n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                <TextField\n                    fullWidth\n                    id='docVisibility-selector'\n                    select\n                    variant='outlined'\n                    label={\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility'\n                            defaultMessage='Document Visibility'\n                        />\n                    }\n                    helperText={\n                        summeryEmpty ? (\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary.error.empty'\n                                defaultMessage='Document summary can not be empty'\n                            />\n                        ) : (\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary.helper.text'\n                                defaultMessage='Provide a brief description for the document'\n                            />\n                        )\n                    }\n                    type='text'\n                    name='visibility'\n                    margin='normal'\n                    value={visibility}\n                    onChange={this.handleChange('visibility')}\n                    error={summeryEmpty}\n                >\n                    <MenuItem value='API_LEVEL'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.public'\n                            defaultMessage='Same as API Visibility'\n                        />\n                    </MenuItem>\n                    <MenuItem value='PRIVATE'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.private'\n                            defaultMessage='Private'\n                        />\n                    </MenuItem>\n                    <MenuItem value='OWNER_ONLY'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.ownerOnly'\n                            defaultMessage='Owner Only'\n                        />\n                    </MenuItem>\n                </TextField>\n            </FormControl>}\n                <FormControl component='fieldset' className={classes.formControlFirst}>\n                    <FormLabel component='legend'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.create.type'\n                            defaultMessage='Type'\n                        />\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label='Type'\n                        name='type'\n                        className={classes.group}\n                        value={type}\n                        onChange={this.changeType}\n                    >\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='HOWTO'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>help_outline</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.how.to'\n                                            defaultMessage='How To'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='SAMPLES'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>code</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.sample'\n                                            defaultMessage='Sample and SDK'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='PUBLIC_FORUM'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>forum</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.public.forum'\n                                            defaultMessage='Public Forum'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='SUPPORT_FORUM'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>forum</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.Documents.CreateEditForm.document.create.type.support.' +\n                                                'forum'\n                                            }\n                                            defaultMessage='Support Forum'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='OTHER'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>video_label</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.other'\n                                            defaultMessage='Other'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n                {type === 'OTHER' && (\n                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                        <TextField\n                            fullWidth\n                            label={\n                                <FormattedMessage\n                                    id={\n                                        'Apis.Details.Documents.CreateEditForm.document.create.type.other.document.' +\n                                        'category'\n                                    }\n                                    defaultMessage='Other Document Type *'\n                                />\n                            }\n                            helperText={\n                                <FormattedMessage\n                                    id={\n                                        'Apis.Details.Documents.CreateEditForm.document.create.type.other.document.' +\n                                        'category.helper.text'\n                                    }\n                                    defaultMessage='Provide the document type'\n                                />\n                            }\n                            type='text'\n                            id='other-doc-type'\n                            name='otherTypeName'\n                            margin='normal'\n                            value={otherTypeName}\n                            variant='outlined'\n                            onChange={this.handleChange('otherTypeName')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </FormControl>\n                )}\n                <FormControl component='fieldset' className={classes.formControl}>\n                    <FormLabel component='legend'>\n                        <FormattedMessage id='Apis.Details.Documents.CreateEditForm.source' defaultMessage='Source' />\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label='Source'\n                        name='sourceType'\n                        className={classes.group}\n                        value={sourceType}\n                        onChange={this.changeSource}\n                    >\n                        <FormControlLabel\n                            disabled={this.setDisable('INLINE')}\n                            value='INLINE'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.inline'\n                                    defaultMessage='Inline'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('MARKDOWN')}\n                            value='MARKDOWN'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.markdown'\n                                    defaultMessage='Markdown'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('URL')}\n                            value='URL'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.url'\n                                    defaultMessage='URL'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('FILE')}\n                            value='FILE'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.file'\n                                    defaultMessage='File'\n                                />\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n                {sourceType === 'URL' && (\n                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                        <TextField\n                            fullWidth\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    this.validate('url', value);\n                                },\n                                onKeyUp: ({ target: { value } }) => {\n                                    this.validate('url', value);\n                                },\n                            }}\n                            id='url'\n                            margin='normal'\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.url.url'\n                                    defaultMessage='URL'\n                                />\n                            }\n                            helperText={this.getUrlHelperText()}\n                            type='text'\n                            name='sourceUrl'\n                            margin='normal'\n                            value={sourceUrl}\n                            onChange={this.handleChange('sourceUrl')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            error={invalidUrl || urlEmpty}\n                            variant='outlined'\n                        />\n                    </FormControl>\n                )}\n                {sourceType === 'FILE' && (\n                    <Dropzone\n                        multiple={false}\n                        accept={Configurations.app.supportedDocTypes}\n                        className={classes.dropzone}\n                        activeClassName={classes.acceptDrop}\n                        rejectClassName={classes.rejectDrop}\n                        onDrop={(dropFile) => {\n                            this.onDrop(dropFile);\n                        }}\n                    >\n                        {({ getRootProps, getInputProps }) => (\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <div className={classes.dropZoneWrapper}>\n                                    <Icon className={classes.dropIcon} style={{ fontSize: 56 }}>\n                                        cloud_upload\n                                    </Icon>\n                                    {file && file.length > 0 && (\n                                        <div className={classes.uploadedFile}>\n                                            <Icon>file</Icon> {file[0].name}\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </Dropzone>\n                )}\n                {(sourceType === 'INLINE' || sourceType === 'MARKDOWN') && (\n                    <InlineMessage type='info' height={60}>\n                        <div className={classes.contentWrapper}>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.content.info'\n                                    defaultMessage={\n                                        'Please save the document. The content can be edited in the next ' + 'step.'\n                                    }\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>\n                )}\n            </div>\n        );\n    }\n}\nCreateEditForm.contextType = AppContext;\nCreateEditForm.defaultProps = {\n    apiId: null,\n    docId: null,\n};\nCreateEditForm.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}),\n    apiId: PropTypes.shape({}),\n    saveDisabled: PropTypes.bool.isRequired,\n    setSaveDisabled: PropTypes.func.isRequired,\n    apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(CreateEditForm));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"MDMonacoEditor\" */));\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"MDReactMarkdown\" */));\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    markdownViewWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n};\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\nfunction MarkdownEditor(props) {\n    const { intl, showAtOnce, history } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [open, setOpen] = useState(showAtOnce);\n    const [code, setCode] = useState(\n        intl.formatMessage({\n            id: 'documents.markdown.editor.default',\n            defaultMessage: '#Enter your markdown content',\n        }),\n    );\n    const toggleOpen = () => {\n        if (!open) updateDoc();\n        if (open && showAtOnce) {\n            const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n            const listingPath = `/${urlPrefix}/${api.id}/documents`;\n            history.push(listingPath);\n        }\n        setOpen(!open);\n    };\n    const updateCode = newCode => {\n        setCode(newCode);\n    };\n    const editorDidMount = (editor, monaco) => {\n        editor.focus();\n    };\n    const addContentToDoc = () => {\n        const restAPI = new Api();\n        setIsUpdating(true);\n        const docPromise = restAPI.addInlineContentToDocument(api.id, props.docId, 'MARKDOWN', code);\n        docPromise\n            .then(doc => {\n                Alert.info(\n                    `${doc.obj.name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.MarkdownEditor.update.success.message',\n                        defaultMessage: 'updated successfully.',\n                    })}`,\n                );\n                toggleOpen();\n                setIsUpdating(false);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n                setIsUpdating(false);\n            });\n    };\n    const updateDoc = () => {\n        const restAPI = new Api();\n\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, props.docId);\n        docPromise\n            .then(doc => {\n                setCode(doc.text);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const { classes } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={api.isRevision}>\n                <Icon>code</Icon>\n                <FormattedMessage\n                    id=\"Apis.Details.Documents.MarkdownEditor.edit.content\"\n                    defaultMessage=\"Edit Content\"\n                />\n            </Button>\n            <Dialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color=\"inherit\" onClick={toggleOpen} aria-label=\"Close\">\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant=\"h4\" className={classes.docName}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.edit.content.of\"\n                            defaultMessage=\"Edit Content of\"\n                        />{' '}\n                        \"{props.docName}\"\n                    </Typography>\n                    <Button className={classes.button} variant=\"contained\" disabled={isUpdating} color=\"primary\" onClick={addContentToDoc}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.update.content.button\"\n                            defaultMessage=\"Update Content\"\n                        />\n                        {isUpdating && <CircularProgress size={24} />}\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.cancel.button\"\n                            defaultMessage=\"Cancel\"\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <Grid container spacing={7}>\n                        <Grid item xs={6}>\n                            <Suspense fallback={<CircularProgress />}>\n                                <MonacoEditor\n                                    width=\"100%\"\n                                    height=\"100vh\"\n                                    language=\"markdown\"\n                                    theme=\"vs-dark\"\n                                    value={code}\n                                    options={{ selectOnLineNumbers: true }}\n                                    onChange={updateCode}\n                                    editorDidMount={editorDidMount}\n                                />\n                            </Suspense>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <div className={classes.markdownViewWrapper}>\n                                <Suspense fallback={<CircularProgress />}>\n                                    <ReactMarkdown escapeHtml source={code} />\n                                </Suspense>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Dialog>\n        </div>\n    );\n}\n\nMarkdownEditor.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(MarkdownEditor)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {useState, useRef, useContext} from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from 'AppComponents/Shared/Alert';\nimport CreateEditForm from './CreateEditForm';\nimport Api from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n    editMetaButton: {\n        whiteSpace: 'nowrap',\n    },\n};\n\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\nfunction Edit(props) {\n    const restAPI = new Api();\n\n    const { intl, apiType } = props;\n    const [open, setOpen] = useState(false);\n    const [saveDisabled, setSaveDisabled] = useState(false);\n    let createEditForm = useRef(null);\n    const { api } = useContext(APIContext);\n\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n\n    const updateDoc = () => {\n        const { apiId } = props;\n        const promiseWrapper = createEditForm.updateDocument(apiId);\n        promiseWrapper.docPromise\n            .then((doc) => {\n                const { documentId, name } = doc.body;\n                if (promiseWrapper.file && documentId) {\n                    const filePromise = restAPI.addFileToDocument(apiId, documentId, promiseWrapper.file[0]);\n                    filePromise\n                        .then((doc) => {\n                            Alert.info(`${name} ${intl.formatMessage({\n                                id: 'Apis.Details.Documents.Edit.markdown.editor.upload.success.message',\n                                defaultMessage: 'File uploaded successfully.',\n                            })}`);\n                            props.getDocumentsList();\n                            toggleOpen();\n                        })\n                        .catch((error) => {\n                            if (process.env.NODE_ENV !== 'production') {\n                                console.log(error);\n                                Alert.error(intl.formatMessage({\n                                    id: 'Apis.Details.Documents.Edit.markdown.editor.upload.error.message',\n                                    defaultMessage: 'Error uploading the file.',\n                                }));\n                            }\n                        });\n                } else {\n                    Alert.info(`${name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Edit.markdown.editor.update.success.message',\n                        defaultMessage: 'Updated successfully.',\n                    })}`);\n                    props.getDocumentsList();\n                    toggleOpen();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Documents.Edit.markdown.editor.update.error.message',\n                        defaultMessage: 'Error adding the document',\n                    }));\n                }\n            });\n    };\n\n    const { classes, docId, apiId } = props;\n    return (\n        <div>\n            <Button\n                onClick={toggleOpen}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                className={classes.editMetaButton}\n            >\n                <Icon>edit</Icon>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Edit.documents.text.editor.edit'\n                    defaultMessage='Edit Meta Data'\n                />\n            </Button>\n            <Dialog open={open} onClose={toggleOpen} TransitionComponent={Transition} fullScreen>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color='inherit' onClick={toggleOpen} aria-label='Close'>\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant='h4' className={classes.docName}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.edit.content'\n                            defaultMessage='Edit '\n                        />\n                        {` ${props.docName}`}\n                    </Typography>\n                    <Button className={classes.button} variant='contained' color='primary' onClick={updateDoc} disabled={saveDisabled}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.update.content'\n                            defaultMessage='Save'\n                        />\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <CreateEditForm\n                        innerRef={(node) => {\n                            createEditForm = node;\n                        }}\n                        docId={docId}\n                        apiId={apiId}\n                        apiType={apiType}\n                        saveDisabled={saveDisabled}\n                        setSaveDisabled={setSaveDisabled}\n                    />\n                </div>\n            </Dialog>\n        </div>\n    );\n}\nEdit.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    getDocumentsList: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Edit));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useEffect, useState, useCallback, useMemo,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash/isEmpty';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport API from 'AppData/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport SwaggerParser from '@apidevtools/swagger-parser';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CONSTS from 'AppData/Constants';\nimport Configurations from 'Config';\nimport Operation from './components/Operation';\nimport GroupOfOperations from './components/GroupOfOperations';\nimport SpecErrors from './components/SpecErrors';\nimport AddOperation from './components/AddOperation';\nimport GoToDefinitionLink from './components/GoToDefinitionLink';\nimport APIRateLimiting from './components/APIRateLimiting';\nimport {\n    extractPathParameters, isSelectAll, mapAPIOperations, getVersion, VERSIONS,\n} from './operationUtils';\nimport OperationsSelector from './components/OperationsSelector';\nimport SaveOperations from './components/SaveOperations';\n\n/**\n * This component handles the Resource page in API details though it's written in a sharable way\n * that anyone could use this to render resources in anywhere else if needed.\n *\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function Resources(props) {\n    const {\n        operationProps,\n        disableRateLimiting,\n        hideAPIDefinitionLink,\n        disableMultiSelect,\n        disableUpdate,\n        disableAddOperation,\n    } = props;\n\n    const [api, updateAPI] = useAPI();\n    const [pageError, setPageError] = useState(false);\n    const [operationRateLimits, setOperationRateLimits] = useState([]);\n    const [markedOperations, setSelectedOperation] = useState({});\n    const [sharedScopes, setSharedScopes] = useState();\n    const [sharedScopesByName, setSharedScopesByName] = useState();\n    const [openAPISpec, setOpenAPISpec] = useState({});\n    const [securityDefScopes, setSecurityDefScopes] = useState({});\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(api.apiThrottlingPolicy);\n    const [arns, setArns] = useState([]);\n    const [resolvedSpec, setResolvedSpec] = useState({ spec: {}, errors: [] });\n    const [focusOperationLevel, setFocusOperationLevel] = useState(false);\n\n    /**\n     *\n     *\n     * @param {*} currentPolicies\n     * @param {*} policyAction\n     * @returns\n     */\n    function resourcePoliciesReducer(currentPolicies, policyAction) {\n        const { action, data } = policyAction;\n        const { value } = data || {}; // target, verb,\n        let nextResourcePolicies = { ...currentPolicies };\n        switch (action) {\n            case 'init':\n                nextResourcePolicies = value;\n                break;\n            case 'update':\n                nextResourcePolicies[value.resourcePath][value.httpVerb][data.direction] = value;\n                break;\n            default:\n                break;\n        }\n        return nextResourcePolicies;\n    }\n    const [resourcePolicies, resourcePoliciesDispatcher] = useReducer(resourcePoliciesReducer, null);\n\n    /**\n     *\n     * **** NOTE: This reducer function needs to be a pure JS function, Mean we cant refer to external states, or\n     * variables within the `operationsReducer` function. Please avoid making external references.\n     * We need to remove already used `openAPISpec`,`setSecurityDefScopes` etc.\n     * Source : https://github.com/facebook/react/issues/16295#issuecomment-610098654\n     * @param {Object} currentOperations Current state\n     * @param {Object} operationAction action and payload\n     * @return {Object} next next state\n     */\n    function operationsReducer(currentOperations, operationAction) {\n        // Please read the note above before updating the reducer\n        const { action, data } = operationAction;\n        const { target, verb, value } = data || {};\n        let updatedOperation;\n        let addedOperations;\n        if (target && verb) {\n            updatedOperation = cloneDeep(currentOperations[target][verb]);\n        } else {\n            addedOperations = cloneDeep(currentOperations);\n        }\n\n        switch (action) {\n            case 'init':\n                setSelectedOperation({});\n                return data || openAPISpec.paths;\n            case 'description':\n            case 'summary':\n                updatedOperation[action] = value;\n                break;\n            case 'authType':\n                updatedOperation['x-auth-type'] = value ? 'Any' : 'None';\n                break;\n            case 'parameter':\n                if (updatedOperation.parameters) {\n                    // Get the index to check whether the same parameter exists.\n                    const index = updatedOperation.parameters.findIndex(\n                        (e) => e.in === value.in && e.name === value.name,\n                    );\n                    if (index === -1) { // Parameter with name and in does not exists.\n                        if (value.in === 'body') {\n                            // Get the index of existing body param.\n                            // This replaces if a new body parameter is added when another one exists.\n                            const bodyIndex = updatedOperation.parameters.findIndex((parameter) => {\n                                return parameter.in === 'body';\n                            });\n                            if (bodyIndex !== -1) {\n                                updatedOperation.parameters[bodyIndex] = value;\n                            } else {\n                                updatedOperation.parameters.push(value);\n                            }\n                        } else {\n                            updatedOperation.parameters.push(value);\n                        }\n                    } else {\n                        updatedOperation.parameters[index] = value;\n                    }\n                } else {\n                    updatedOperation.parameters = [value];\n                }\n                break;\n            case 'requestBody':\n                updatedOperation[action] = value;\n                break;\n            case 'deleteParameter':\n                updatedOperation.parameters = updatedOperation.parameters.filter((parameter) => {\n                    return !(parameter.in === value.in && parameter.name === value.name);\n                });\n                break;\n            case 'throttlingPolicy':\n                updatedOperation['x-throttling-tier'] = value;\n                break;\n            case 'amznResourceName':\n                updatedOperation['x-amzn-resource-name'] = value;\n                break;\n            case 'amznResourceTimeout':\n                updatedOperation['x-amzn-resource-timeout'] = value;\n                break;\n            case 'scopes': {\n                if (!updatedOperation.security) {\n                    updatedOperation.security = [{ default: [] }];\n                } else if (!updatedOperation.security.find((item) => item.default)) {\n                    updatedOperation.security.push({ default: [] });\n                }\n                const defValue = value[0];\n                updatedOperation.security.find((item) => item.default).default = defValue;\n                for (const selectedScope of defValue) {\n                    if (selectedScope\n                        && !securityDefScopes[selectedScope]\n                        && securityDefScopes[selectedScope] !== '') {\n                        let scopeDescription = '';\n                        if (selectedScope in sharedScopesByName) {\n                            if (sharedScopesByName[selectedScope].scope.description !== null) {\n                                scopeDescription = sharedScopesByName[selectedScope].scope.description;\n                            }\n                            securityDefScopes[selectedScope] = scopeDescription;\n                        }\n                        setSecurityDefScopes(securityDefScopes);\n                    }\n                }\n                break;\n            }\n            case 'add': {\n                const parameters = extractPathParameters(data.target, openAPISpec);\n                if (!addedOperations[data.target]) {\n                    // If target is not there add an empty object\n                    addedOperations[data.target] = {};\n                }\n                let alreadyExistCount = 0;\n                for (const currentVerb of data.verbs) {\n                    if (addedOperations[data.target][currentVerb]) {\n                        const message = `Operation already exist with ${data.target} and ${currentVerb}`;\n                        Alert.warning(message);\n                        console.warn(message);\n                        alreadyExistCount++;\n                    } else {\n                        // use else condition because continue is not allowed by es-lint rules\n                        addedOperations[data.target][currentVerb] = {\n                            'x-wso2-new': true, // This is to identify unsaved newly added operations, Remove when PUT\n                            'x-auth-type': 'Application & Application User', // By default security is enabled\n                            responses: { 200: { description: 'ok' } },\n                            parameters,\n                        };\n                    }\n                }\n                if (alreadyExistCount === data.verbs.length) {\n                    Alert.error('Operation(s) already exist!');\n                    return currentOperations;\n                }\n                return addedOperations;\n            }\n            default:\n                return currentOperations;\n        }\n        return { ...currentOperations, [target]: { ...currentOperations[target], [verb]: updatedOperation } };\n    }\n    const [operations, operationsDispatcher] = useReducer(operationsReducer, {});\n    /**\n     *\n     *\n     * @param {*} operation\n     * @param {*} checked\n     */\n    function onOperationSelectM(operation, checked) {\n        const { target, verb } = operation;\n        setSelectedOperation((currentSelections) => {\n            const nextSelectedOperations = cloneDeep(currentSelections);\n            if (!nextSelectedOperations[target]) {\n                nextSelectedOperations[target] = {};\n            }\n            if (checked) {\n                nextSelectedOperations[target][verb] = checked;\n            } else {\n                delete nextSelectedOperations[target][verb];\n            }\n            if (isEmpty(nextSelectedOperations[target])) {\n                delete nextSelectedOperations[target];\n            }\n            return nextSelectedOperations;\n        });\n    }\n    const onMarkAsDelete = useCallback(onOperationSelectM, [setSelectedOperation]);\n\n    // can't depends on API id because we need to consider the changes in operations in api object\n    // memoized (https://reactjs.org/docs/hooks-reference.html#usememo) to improve pref,\n    // localized to inject local apiThrottlingPolicy data\n    const localAPI = useMemo(\n        () => ({\n            id: api.id,\n            apiThrottlingPolicy,\n            scopes: api.scopes,\n            operations: api.isAPIProduct() ? {} : mapAPIOperations(api.operations),\n            endpointConfig: api.endpointConfig,\n        }),\n        [api, apiThrottlingPolicy],\n    );\n\n    /**\n     * This method sets the securityDefinitionScopes from the spec\n     * @param {Object} spec The original swagger content.\n     */\n    function setSecurityDefScopesFromSpec(spec) {\n        const openAPIVersion = getVersion(spec);\n        if (VERSIONS.V3.test(openAPIVersion)) {\n            if (spec.components && spec.components.securitySchemes && spec.components.securitySchemes.default) {\n                const { flows } = spec.components.securitySchemes.default;\n                if (flows.implicit.scopes) {\n                    setSecurityDefScopes(cloneDeep(flows.implicit.scopes));\n                }\n            }\n        } else if (VERSIONS.V2.test(openAPIVersion)) {\n            if (spec.securityDefinitions && spec.securityDefinitions.default) {\n                if (spec.securityDefinitions.default.scopes) {\n                    setSecurityDefScopes(cloneDeep(spec.securityDefinitions.default.scopes));\n                }\n            }\n        }\n    }\n\n    /**\n     * This method sets the scopes of the spec from the securityDefinitionScopes\n     */\n    function setSpecScopesFromSecurityDefScopes() {\n        const openAPIVersion = getVersion(openAPISpec);\n        if (VERSIONS.V3.test(openAPIVersion)) {\n            if (openAPISpec.components\n                && openAPISpec.components.securitySchemes\n                && openAPISpec.components.securitySchemes.default) {\n                openAPISpec.components.securitySchemes.default.flows.implicit.scopes = securityDefScopes;\n            }\n        } else if (VERSIONS.V2.test(openAPIVersion)) {\n            if (openAPISpec.securityDefinitions && openAPISpec.securityDefinitions.default) {\n                openAPISpec.securityDefinitions.default.scopes = securityDefScopes;\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {*} rawSpec The original swagger content.\n     * @returns {null}\n     */\n    function resolveAndUpdateSpec(rawSpec) {\n        /*\n         * Deep copying the spec.\n         * Otherwise it will resolved to the original parameter passed (rawSpec) to the validate method.\n         * We will not alter the provided spec.\n         */\n        const specCopy = cloneDeep(rawSpec);\n        /*\n        * Used SwaggerParser.validate() because we can get the errors as well.\n        */\n        if (Configurations.swaggerValidationBehaviour === 'default'\n            || !Configurations.swaggerValidationBehaviour) {\n            SwaggerParser.validate(specCopy, (err, result) => {\n                setResolvedSpec(() => {\n                    const errors = err ? [err] : [];\n                    return {\n                        spec: result,\n                        errors,\n                    };\n                });\n            });\n        } else {\n            /*\n            * Used OpenAPI validate Rest endpoint because we can get the errors as well.\n            */\n            API.validateOpenAPIByInlineDefinition(specCopy)\n                .then((response) => {\n                    // use spec returned by swagger parser to get a consistent spec in both scenarios\n                    SwaggerParser.validate(specCopy, (err, result) => {\n                        let spec = result;\n                        setResolvedSpec(() => {\n                            const errors = response.body.errors ? response.body.errors : [];\n                            // use response.body.info only if spec from swagger parser is undefined\n                            spec = !spec ? response.body.info : spec;\n                            return {\n                                spec,\n                                errors,\n                            };\n                        });\n                    });\n                });\n        }\n        operationsDispatcher({ action: 'init', data: rawSpec.paths });\n        setOpenAPISpec(rawSpec);\n        setSecurityDefScopesFromSpec(rawSpec);\n    }\n\n    /**\n     *\n     * Update the swagger using /swagger PUT operation and then fetch the updated API Object doing a apis/{api-uuid} GET\n     * @param {JSON} spec Updated full OpenAPI spec ready to PUT\n     * @returns {Promise} Promise resolving to updated API object\n     */\n    function updateSwagger(spec) {\n        return api\n            .updateSwagger(spec)\n            .then((response) => resolveAndUpdateSpec(response.body))\n            .then(updateAPI)\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    setPageError(error.response.body);\n                } else {\n                    Alert.error('Error while updating the definition');\n                }\n            });\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    function updateSecurityDefinition(apiOperations) {\n        Object.keys(securityDefScopes).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const [, verbs] of Object.entries(apiOperations)) {\n                for (const [, verbInfo] of Object.entries(verbs)) {\n                    // Checking if the scope resides in the operation\n                    for (const secDef of verbInfo.security || []) {\n                        if (secDef\n                            && secDef.default\n                            && secDef.default.includes(key)) {\n                            isScopeExistsInOperation = true;\n                            break;\n                        }\n                    }\n\n                    if (isScopeExistsInOperation) {\n                        break;\n                    }\n                }\n                if (isScopeExistsInOperation) {\n                    break;\n                }\n            }\n            // Checking if the scope exists in operation and is a shared scope\n            if (!isScopeExistsInOperation && (key in sharedScopesByName)) {\n                delete securityDefScopes[key];\n            }\n        });\n        setSecurityDefScopes(securityDefScopes);\n    }\n\n    /**\n     *\n     * Save the OpenAPI changes using REST API, type parameter is required to\n     * identify the locally created data structured, i:e type `operation` will assume that `data` contains the\n     * object structure of locally created operation object which is a combination of REST API\n     * response `operations` field and OpenAPI spec operation information\n     * @param {String} type Type of data object\n     * @param {Object} data Data object\n     * @returns {Promise|null} A promise object which resolve to Swagger PUT response body.\n     */\n    function updateOpenAPI(type) {\n        const copyOfOperations = cloneDeep(operations);\n        switch (type) {\n            case 'save':\n                if (isSelectAll(markedOperations, copyOfOperations)) {\n                    const message = 'At least one operation is required for the API';\n                    Alert.warning(message);\n                    return Promise.reject(new Error(message));\n                }\n                for (const [target, verbs] of Object.entries(markedOperations)) {\n                    for (const verb of Object.keys(verbs)) {\n                        delete copyOfOperations[target][verb];\n                        if (isEmpty(copyOfOperations[target])) {\n                            delete copyOfOperations[target];\n                        }\n                    }\n                }\n                // TODO: use better alternative (optimize performance) to identify newly added operations ~tmkb\n                for (const [, verbs] of Object.entries(copyOfOperations)) {\n                    for (const [, verbInfo] of Object.entries(verbs)) {\n                        if (verbInfo['x-wso2-new']) {\n                            delete verbInfo['x-wso2-new'];\n                        }\n                    }\n                }\n                break;\n            default:\n                return Promise.reject(new Error('Unsupported resource operation!'));\n        }\n        updateSecurityDefinition(copyOfOperations);\n        setSpecScopesFromSecurityDefScopes();\n        if (apiThrottlingPolicy !== api.apiThrottlingPolicy) {\n            return updateAPI({ apiThrottlingPolicy })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error('Error while updating the API');\n                })\n                .then(() => updateSwagger({ ...openAPISpec, paths: copyOfOperations }));\n        } else {\n            return updateSwagger({ ...openAPISpec, paths: copyOfOperations });\n        }\n    }\n\n    useEffect(() => {\n        API.getAmznResourceNames(api.id)\n            .then((response) => {\n                if (response.body && response.body.list) {\n                    setArns(response.body.list);\n                }\n            });\n    }, []);\n\n    useEffect(() => {\n        setApiThrottlingPolicy(api.apiThrottlingPolicy);\n    }, [api.apiThrottlingPolicy]);\n\n    useEffect(() => {\n        if (api.apitype !== 'APIProduct') {\n            API.getAllScopes()\n                .then((response) => {\n                    if (response.body && response.body.list) {\n                        const sharedScopesList = [];\n                        const sharedScopesByNameList = {};\n                        const shared = true;\n                        for (const scope of response.body.list) {\n                            const modifiedScope = {};\n                            modifiedScope.scope = scope;\n                            modifiedScope.shared = shared;\n                            sharedScopesList.push(modifiedScope);\n                            sharedScopesByNameList[scope.name] = modifiedScope;\n                        }\n                        setSharedScopes(sharedScopesList);\n                        setSharedScopesByName(sharedScopesByNameList);\n                    }\n                });\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update the Swagger spec object when API object gets changed\n        api.getSwagger()\n            .then((response) => {\n                resolveAndUpdateSpec(response.body);\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                }\n                console.error(error);\n            });\n        if (api.isSOAPToREST()) {\n            const promisedInPolicies = api.getResourcePolicies('in');\n            const promisedOutPolicies = api.getResourcePolicies('out');\n            Promise.all([promisedInPolicies, promisedOutPolicies])\n                .then(([inPolicies, outPolicies]) => {\n                    const mappedPolicies = {};\n                    for (const policy of inPolicies.body.list) {\n                        const { resourcePath, httpVerb } = policy;\n                        if (!mappedPolicies[resourcePath]) {\n                            mappedPolicies[resourcePath] = {\n                                [httpVerb]: { in: policy },\n                            };\n                        } else {\n                            mappedPolicies[resourcePath][httpVerb] = { in: policy };\n                        }\n                    }\n                    for (const policy of outPolicies.body.list) {\n                        const { resourcePath, httpVerb } = policy;\n                        if (!mappedPolicies[resourcePath]) {\n                            mappedPolicies[resourcePath] = {\n                                [httpVerb]: { out: policy },\n                            };\n                        } else {\n                            mappedPolicies[resourcePath][httpVerb].out = policy;\n                        }\n                    }\n                    resourcePoliciesDispatcher({ action: 'init', data: { value: mappedPolicies } });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                        setPageError(error.response.body);\n                    }\n                    setPageError(error.message);\n                    console.error(error);\n                });\n        }\n        // Fetch API level throttling policies only when the page get mounted for the first time `componentDidMount`\n        const limit = Configurations.app.throttlingPolicyLimit;\n        API.policies('api', limit).then((response) => {\n            setOperationRateLimits(response.body.list);\n        });\n        // TODO: need to handle the error cases through catch ~tmkb\n    }, [api.id]);\n\n    // Note: Make sure not to use any hooks after/within this condition , because it returns conditionally\n    // If you do so, You will probably get `Rendered more hooks than during the previous render.` exception\n    if ((!pageError && isEmpty(openAPISpec)) || (resolvedSpec.errors.length === 0 && isEmpty(resolvedSpec.spec))) {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress disableShrink />\n                </Grid>\n            </Grid>\n        );\n    }\n    return (\n        <Grid container direction='row' justify='flex-start' spacing={2} alignItems='stretch'>\n            {pageError && (\n                <Grid item md={12}>\n                    <Banner onClose={() => setPageError(null)} disableActions type='error' message={pageError} />\n                </Grid>\n            )}\n            {!disableRateLimiting && (\n                <Grid item md={12}>\n                    <APIRateLimiting\n                        operationRateLimits={operationRateLimits}\n                        value={apiThrottlingPolicy}\n                        onChange={setApiThrottlingPolicy}\n                        isAPIProduct={api.isAPIProduct()}\n                        focusOperationLevel={focusOperationLevel}\n                        setFocusOperationLevel={setFocusOperationLevel}\n                    />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation && (\n                <Grid item md={12} xs={12}>\n                    <AddOperation operationsDispatcher={operationsDispatcher} />\n                </Grid>\n            )}\n            {resolvedSpec.errors.length > 0 && <SpecErrors specErrors={resolvedSpec.errors} />}\n            <Grid item md={12}>\n                <Paper>\n                    {!disableMultiSelect && (\n                        <OperationsSelector\n                            operations={operations}\n                            selectedOperations={markedOperations}\n                            setSelectedOperation={setSelectedOperation}\n                        />\n                    )}\n                    {Object.entries(operations).map(([target, verbObject]) => (\n                        <Grid key={target} item md={12}>\n                            <GroupOfOperations openAPI={openAPISpec} tag={target}>\n                                <Grid\n                                    container\n                                    direction='column'\n                                    justify='flex-start'\n                                    spacing={1}\n                                    alignItems='stretch'\n                                >\n                                    {Object.entries(verbObject).map(([verb, operation]) => {\n                                        return CONSTS.HTTP_METHODS.includes(verb) ? (\n                                            <Grid key={`${target}/${verb}`} item>\n                                                <Operation\n                                                    target={target}\n                                                    verb={verb}\n                                                    highlight\n                                                    resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                                                    resourcePolicy={\n                                                        resourcePolicies\n                                                        && resourcePolicies[target.slice(1)]\n                                                        && resourcePolicies[target.slice(1)][verb]\n                                                    }\n                                                    operationsDispatcher={operationsDispatcher}\n                                                    spec={openAPISpec}\n                                                    operation={operation}\n                                                    operationRateLimits={operationRateLimits}\n                                                    api={localAPI}\n                                                    markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target][verb])}\n                                                    onMarkAsDelete={onMarkAsDelete}\n                                                    disableUpdate={\n                                                        disableUpdate || isRestricted(['apim:api_create'], api)\n                                                    }\n                                                    disableMultiSelect={disableMultiSelect}\n                                                    arns={arns}\n                                                    {...operationProps}\n                                                    resolvedSpec={resolvedSpec.spec}\n                                                    sharedScopes={sharedScopes}\n                                                    setFocusOperationLevel={setFocusOperationLevel}\n                                                />\n                                            </Grid>\n                                        ) : null;\n                                    })}\n                                </Grid>\n                            </GroupOfOperations>\n                        </Grid>\n                    ))}\n                </Paper>\n                <Grid\n                    style={{ marginTop: '25px' }}\n                    container\n                    direction='row'\n                    justify='space-between'\n                    alignItems='center'\n                >\n                    <Grid item>\n                        {!disableUpdate && (\n                            <SaveOperations\n                                operationsDispatcher={operationsDispatcher}\n                                updateOpenAPI={updateOpenAPI}\n                                api={api}\n                            />\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {!hideAPIDefinitionLink && <GoToDefinitionLink api={api} />}\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nResources.defaultProps = {\n    operationProps: { disableDelete: false },\n    disableUpdate: false,\n    disableRateLimiting: false,\n    disableMultiSelect: false,\n    hideAPIDefinitionLink: false,\n    disableAddOperation: false,\n};\n\nResources.propTypes = {\n    disableRateLimiting: PropTypes.bool,\n    hideAPIDefinitionLink: PropTypes.bool,\n    disableMultiSelect: PropTypes.bool,\n    disableAddOperation: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    operationProps: PropTypes.shape({\n        disableDelete: PropTypes.bool,\n    }),\n};\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\n/**\n * Defining the supported data types by the OAS spec versions.\n *\n * 2.0 : https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#dataTypeFormat\n * 3.x :https://swagger.io/docs/specification/data-models/data-types/\n * */\nconst supportedDataTypes = {\n    '2.0': {\n        body: ['integer', 'number', 'string', 'boolean', 'object'],\n        formData: ['integer', 'number', 'string', 'boolean', 'file'],\n        query: ['integer', 'number', 'string', 'boolean'],\n        path: ['integer', 'number', 'string', 'boolean'],\n        header: ['integer', 'number', 'string', 'boolean'],\n    },\n    '3.x': {\n        body: ['integer', 'number', 'string', 'boolean', 'object'],\n        query: ['integer', 'number', 'string', 'boolean'],\n        path: ['integer', 'number', 'string', 'boolean'],\n        header: ['integer', 'number', 'string', 'boolean'],\n        cookie: ['integer', 'number', 'string', 'boolean'],\n    },\n};\n\n/**\n * Util method for checking conditions.\n *\n * @param {boolean} condition : The condition to be checked\n * @param {any} matched : The value to be returned if the condition is true\n * @param {any} otherwise : The value to be returned if the condition is false.\n * @return {object} If true -> matched, false -> otherwise\n * */\nexport function iff(condition, matched, otherwise) {\n    return condition ? matched : otherwise;\n}\n\n/**\n * Method to get the supported data types for the given parameter type.\n *\n * @param {string} specVersion : The OAS version\n * @param {string} paramType : The parameter type.\n * @return {array} The list of supported parameters.\n * */\nexport function getSupportedDataTypes(specVersion, paramType) {\n    return paramType ? supportedDataTypes[specVersion === '2.0' ? '2.0' : '3.x'][paramType] : [];\n}\n\n/**\n * Get the supported data formats by each data type.\n *\n * @param {string} dataType: THe data type.\n * @return {array} The list of supported data formats.\n * */\nexport function getDataFormats(dataType) {\n    switch (dataType) {\n        case 'integer':\n            return ['int64', 'int32'];\n        case 'number':\n            return ['float', 'double'];\n        case 'string':\n            return ['date', 'date-time', 'byte', 'binary', 'password'];\n        default:\n            return [];\n    }\n}\n\n/**\n * Method to get the parameter schema based on the spec version.\n * For more info about Data Models (Schemas) refer https://swagger.io/docs/specification/data-models/\n * @param {string} specVersion : The OAS version\n * @return {object} The default schema\n * */\nexport function getParameter(specVersion) {\n    return specVersion === '2.0'\n        ? {\n            in: '', name: '', type: '', required: '',\n        }\n        : {\n            in: '', name: '', schema: { type: '' }, required: '',\n        };\n}\n\n/**\n * Get parameter types supported by spec version.\n *\n * @param {string} specVersion : The OAS version\n * @return {array} The list of supported parameter types.\n * */\nexport function getParameterTypes(specVersion) {\n    return specVersion === '2.0' ? ['query', 'header', 'body', 'formData'] : ['query', 'header', 'cookie', 'body'];\n}\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport {\n    Divider,\n    Icon,\n    IconButton,\n    InputAdornment,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport green from '@material-ui/core/colors/green';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Chip from '@material-ui/core/Chip';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\n\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    textField: {\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: theme.spacing(1),\n    },\n    iconButtonValid: {\n        padding: theme.spacing(1),\n        color: green[500],\n    },\n    divider: {\n        width: 1,\n        height: 28,\n        margin: 4,\n    },\n    endpointValidChip: {\n        color: 'green',\n        border: '1px solid green',\n    },\n    endpointInvalidChip: {\n        color: '#ffd53a',\n        border: '1px solid #ffd53a',\n    },\n    endpointErrorChip: {\n        color: 'red',\n        border: '1px solid red',\n    },\n});\n/**\n * This component represents a single endpoint view of the endpoints listing. This component holds the actions that\n * affect the endpont. Eg: Delete, advance configuration.\n *\n * @param {any} props The input props\n * @returns {any} The HTML representation of the component.\n * */\nfunction GenericEndpoint(props) {\n    const {\n        category,\n        endpointURL,\n        editEndpoint,\n        classes,\n        type,\n        setAdvancedConfigOpen,\n        esCategory,\n        setESConfigOpen,\n        deleteEndpoint,\n        index,\n        readOnly,\n        autoFocus,\n        name,\n        id,\n        apiId,\n    } = props;\n    const [serviceUrl, setServiceUrl] = useState(endpointURL);\n    const { api } = useContext(APIContext);\n    const [isEndpointValid, setIsEndpointValid] = useState();\n    const [statusCode, setStatusCode] = useState('');\n    const [isUpdating, setUpdating] = useState(false);\n    const [isErrorCode, setIsErrorCode] = useState(false);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    useEffect(() => {\n        setServiceUrl(endpointURL);\n    }, [endpointURL]);\n\n    function testEndpoint(endpoint, apiID) {\n        setUpdating(true);\n        const restApi = new API();\n        restApi.testEndpoint(endpoint, apiID)\n            .then((result) => {\n                if (result.body.error !== null) {\n                    setStatusCode(result.body.error);\n                    setIsErrorCode(true);\n                } else {\n                    setStatusCode(result.body.statusCode + ' ' + result.body.statusMessage);\n                    setIsErrorCode(false);\n                }\n                if (result.body.statusCode >= 200 && result.body.statusCode < 300) {\n                    setIsEndpointValid(true);\n                    setIsErrorCode(false);\n                } else {\n                    setIsEndpointValid(false);\n                }\n            }).finally(() => {\n                setUpdating(false);\n            });\n    }\n\n    return (\n        <div className={classes.endpointInputWrapper}>\n            <TextField\n                disabled={isRestricted(['apim:api_create'], api)}\n                label={name}\n                id={id}\n                className={classes.textField}\n                value={serviceUrl}\n                placeholder={!serviceUrl ? 'http://appserver/resource' : ''}\n                onChange={(event) => setServiceUrl(event.target.value)}\n                onBlur={() => {\n                    editEndpoint(index, category, serviceUrl);\n                }}\n                error={!serviceUrl}\n                helperText={!serviceUrl\n                    ? (\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GenericEndpoint.no.ep.error'\n                            defaultMessage='Endpoint URL should not be empty'\n                        />\n                    ) : ''}\n                variant='outlined'\n                margin='normal'\n                required\n                InputProps={{\n                    readOnly,\n                    autoFocus,\n                    id: category,\n                    endAdornment: (\n                        <InputAdornment position='end'>\n                            {statusCode && (\n                                <Chip\n                                    id={category + '-endpoint-test-status'}\n                                    label={statusCode}\n                                    className={isEndpointValid ? classes.endpointValidChip : iff(\n                                        isErrorCode,\n                                        classes.endpointErrorChip, classes.endpointInvalidChip,\n                                    )}\n                                    variant='outlined'\n                                />\n                            )}\n                            {!api.isWebSocket() && (\n                                <IconButton\n                                    className={isEndpointValid ? classes.iconButtonValid : classes.iconButton}\n                                    aria-label='TestEndpoint'\n                                    onClick={() => testEndpoint(serviceUrl, apiId)}\n                                    disabled={(isRestricted(['apim:api_create'], api)) || isUpdating}\n                                    id={category + '-endpoint-test-icon-btn'}\n                                >\n                                    {isUpdating\n                                        ? <CircularProgress size={20} />\n                                        : (\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.check.endpoint'\n                                                        defaultMessage='Check endpoint status'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    check_circle\n                                                </Icon>\n                                            </Tooltip>\n\n                                        )}\n                                </IconButton>\n                            )}\n                            {type === 'prototyped'\n                                ? <div />\n                                : (\n                                    <>\n                                        <IconButton\n                                            className={classes.iconButton}\n                                            aria-label='Settings'\n                                            onClick={() => setAdvancedConfigOpen(index, type, category)}\n                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                        >\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.config.endpoint'\n                                                        defaultMessage='Endpoint configurations'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    settings\n                                                </Icon>\n                                            </Tooltip>\n                                        </IconButton>\n                                        <IconButton\n                                            className={classes.iconButton}\n                                            aria-label='Security'\n                                            onClick={() => setESConfigOpen(type, esCategory)}\n                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                            id={category + '-endpoint-security-icon-btn'}\n                                        >\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.security.endpoint'\n                                                        defaultMessage='Endpoint security'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    security\n                                                </Icon>\n                                            </Tooltip>\n                                        </IconButton>\n                                    </>\n                                )}\n                            {(index > 0) ? <Divider className={classes.divider} /> : <div />}\n                            {(type === 'load_balance' || type === 'failover') ? (\n                                <IconButton\n                                    className={classes.iconButton}\n                                    aria-label='Delete'\n                                    color='secondary'\n                                    onClick={() => deleteEndpoint(index, type, category)}\n                                    disabled={(isRestricted(['apim:api_create'], api))}\n                                >\n                                    <Icon>\n                                        delete\n                                    </Icon>\n                                </IconButton>\n                            ) : (<div />)}\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        </div>\n    );\n}\n\nGenericEndpoint.defaultProps = {\n    readOnly: false,\n    autoFocus: false,\n    name: 'Service URL',\n    id: '',\n};\n\nGenericEndpoint.propTypes = {\n    endpointURL: PropTypes.string.isRequired,\n    deleteEndpoint: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n    setAdvancedConfigOpen: PropTypes.func.isRequired,\n    setESConfigOpen: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n    editEndpoint: PropTypes.func.isRequired,\n    category: PropTypes.string.isRequired,\n    readOnly: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    name: PropTypes.string,\n    apiId: PropTypes.string.isRequired,\n    id: PropTypes.string,\n};\n\nexport default withStyles(styles)(GenericEndpoint);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n    TextField, Button, Typography, InputLabel,\n} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport CommentsAPI from 'AppData/Comments';\n\nconst styles = (theme) => ({\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    content: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        marginTop: theme.spacing(2),\n    },\n    textField: {\n        marginTop: 0,\n        marginRight: 5,\n        width: '100%',\n    },\n    commentAddWrapper: {\n        display: 'flex',\n        alignItems: 'top',\n        flexFlow: 'column',\n        '& label': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    commentAddButton: {\n        '& > span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main) + '! important',\n        },\n    },\n});\n\n/**\n   * Display a component to add a new comment\n   * @class CommmentAdd\n   * @extends {React.Component}\n   */\nclass CommentAdd extends React.Component {\n    /**\n     * Creates an instance of CommentAdd\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentAdd\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: '',\n            currentLength: 0,\n        };\n        this.inputChange = this.inputChange.bind(this);\n        this.handleClickAddComment = this.handleClickAddComment.bind(this);\n        this.handleClickCancel = this.handleClickCancel.bind(this);\n        this.filterCommentToAddReply = this.filterCommentToAddReply.bind(this);\n    }\n\n    /**\n     * Handles the comment text when input changes\n     * @param {Object} {target} target element\n     * @memberof CommentAdd\n     */\n    inputChange({ target }) {\n        this.setState({ content: target.value, currentLength: target.value.length });\n    }\n\n    /**\n     * Hides the component to add a new comment when cancelled\n     * @memberof CommentAdd\n     */\n    handleClickCancel() {\n        this.setState({ content: '', currentLength: 0 });\n        const { handleShowReply } = this.props;\n        handleShowReply();\n    }\n\n    /**\n     * Filters the comment to add the reply\n     * @memberof CommentAdd\n     */\n    filterCommentToAddReply(commentToFilter) {\n        const { replyTo } = this.props;\n        return commentToFilter.id === replyTo;\n    }\n\n    /**\n     * Handles adding a new comment\n     * @memberof CommentAdd\n     * * */\n    handleClickAddComment() {\n        const {\n            api: { id: apiId }, replyTo, handleShowReply, addComment, addReply,\n        } = this.props;\n        const { content } = this.state;\n        const comment = {\n            content: content.trim(), category: 'general',\n        };\n\n        // to check whether a string does not contain only white spaces\n        if (comment.content.replace(/\\s/g, '').length) {\n            CommentsAPI.add(apiId, comment, replyTo)\n                .then((newComment) => {\n                    this.setState({ content: '' });\n                    if (replyTo === null) {\n                        if (addComment) {\n                            addComment(newComment.body);\n                        }\n                    } else if (addReply) {\n                        addReply(newComment.body);\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.message);\n                    } else {\n                        Alert.error('Something went wrong while adding the comment');\n                    }\n                });\n        } else {\n            Alert.error('You cannot enter a blank comment');\n        }\n        this.setState({ currentLength: 0 });\n        if (replyTo !== null) {\n            handleShowReply();\n        }\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentAdd\n     */\n    render() {\n        const {\n            classes, cancelButton, theme, intl, api,\n        } = this.props;\n        const { content, currentLength } = this.state;\n        return (\n            <Grid container spacing={2} className={classes.contentWrapper}>\n                <Grid item xs zeroMinWidth>\n                    <div className={classes.commentAddWrapper}>\n                        <InputLabel htmlFor='standard-multiline-flexible'>\n                            <FormattedMessage\n                                id='Apis.Details.Comments.CommentAdd.write.comment.label'\n                                defaultMessage='Write a comment'\n                            />\n                        </InputLabel>\n                        <TextField\n                            id='standard-multiline-flexible'\n                            data-testid='new-comment-field'\n                            autoFocus\n                            multiline\n                            disabled={api.isRevision}\n                            className={classes.textField}\n                            margin='normal'\n                            placeholder={intl.formatMessage({\n                                defaultMessage: 'Write a comment',\n                                id: 'Apis.Details.Comments.CommentAdd.write.comment.help',\n                            })}\n                            inputProps={{ maxLength: theme.custom.maxCommentLength }}\n                            value={content}\n                            onChange={this.inputChange}\n                            variant='outlined'\n                        />\n                        <Typography className={classes.content} align='right'>\n                            {currentLength + '/' + theme.custom.maxCommentLength}\n                        </Typography>\n                    </div>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                disabled={currentLength === 0}\n                                onClick={() => this.handleClickAddComment()}\n                                className={classes.commentAddButton}\n                                id='add-comment-btn'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Comments.CommentAdd.btn.add.comment'\n                                    defaultMessage='Comment'\n                                />\n                            </Button>\n                        </Grid>\n                        {cancelButton && (\n                            <Grid item>\n                                <Button onClick={() => this.handleClickCancel(-1)} className={classes.button}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.CommentAdd.btn.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCommentAdd.defaultProps = {\n    replyTo: null,\n    handleShowReply: null,\n};\n\nCommentAdd.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    cancelButton: PropTypes.bool.isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    replyTo: PropTypes.string,\n    handleShowReply: PropTypes.func,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(CommentAdd));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useReducer, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Typography } from '@material-ui/core';\nimport CloudUploadRounded from '@material-ui/icons/CloudUploadRounded';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api.js';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ProvideWSDL from 'AppComponents/Apis/Create/WSDL/Steps/ProvideWSDL';\nimport ProvideAsyncAPI from 'AppComponents/Apis/Create/AsyncAPI/Steps/ProvideAsyncAPI';\nimport ProvideOpenAPI from '../../Create/OpenAPI/Steps/ProvideOpenAPI';\nimport ProvideGraphQL from '../../Create/GraphQL/Steps/ProvideGraphQL';\n\nconst useStyles = makeStyles(() => ({\n    importDefinitionDialogHeader: {\n        fontWeight: '600',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ImportDefinition(props) {\n    const { setSchemaDefinition } = props;\n    const classes = useStyles();\n    const [openAPIDefinitionImport, setOpenAPIDefinitionImport] = useState(false);\n    const [isImporting, setIsImporting] = useState(false);\n    const [api] = useAPI();\n    const intl = useIntl();\n    const isGraphQL = api.isGraphql();\n    const isSOAP = api.isSOAP();\n    // const isWebSocket = api.isWebSocket();\n    // const isWebSub = api.isWebSub();\n    const isAsyncAPI = api && (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE');\n    const [asyncAPIDefinitionImport, setAsyncAPIDefinitionImport] = useState(false);\n\n    const handleAPIDefinitionImportOpen = () => {\n        // eslint-disable-next-line no-unused-expressions\n        isAsyncAPI ? setAsyncAPIDefinitionImport(true) : setOpenAPIDefinitionImport(true);\n        // isWebSocket || isWebSub ? setAsyncAPIDefinitionImport(true) : setOpenAPIDefinitionImport(true);\n    };\n\n    const handleAPIDefinitionImportCancel = () => {\n        // eslint-disable-next-line no-unused-expressions\n        isAsyncAPI ? setAsyncAPIDefinitionImport(false) : setOpenAPIDefinitionImport(false);\n        // isWebSocket || isWebSub ? setAsyncAPIDefinitionImport(false) : setOpenAPIDefinitionImport(false);\n    };\n\n    function apiInputsReducer(currentState, inputAction) {\n        const { action, value } = inputAction;\n        switch (action) {\n            case 'inputValue':\n            case 'isFormValid':\n                return { ...currentState, [action]: value };\n            case 'inputType':\n                return { ...currentState, [action]: value, inputValue: value === 'url' ? '' : null };\n            case 'preSetAPI':\n                return {\n                    ...currentState,\n                    content: value.content,\n                };\n            default:\n                return currentState;\n        }\n    }\n\n    const [apiInputs, inputsDispatcher] = useReducer(apiInputsReducer, {\n        type: '',\n        inputType: 'url',\n        inputValue: '',\n        formValidity: false,\n        mode: 'update',\n    });\n\n    /**\n     * Updates OpenAPI definition\n     */\n    function updateOASDefinition() {\n        setIsImporting(true);\n        const {\n            inputValue, inputType, content,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        if (isFileInput) {\n            const reader = new FileReader();\n            const contentType = inputValue.type.includes('yaml') ? 'yaml' : 'json';\n            reader.onloadend = (event) => {\n                setSchemaDefinition(event.currentTarget.result, contentType);\n            };\n            reader.readAsText(inputValue);\n        }\n        const newAPI = new API();\n        const promisedResponse = isFileInput ? newAPI.updateAPIDefinitionByFile(api.id, inputValue)\n            : newAPI.updateAPIDefinitionByUrl(api.id, inputValue);\n        promisedResponse\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.oas.updated.successfully',\n                    defaultMessage: 'API Definition Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                if (!isFileInput) {\n                    // Test to starting the content with'{' character ignoring white spaces\n                    const isJSONRegex = RegExp(/^\\s*{/); // TODO: not a solid test need to support from REST API ~tmkb\n                    const contentType = isJSONRegex.test(content) ? 'json' : 'yaml';\n                    setSchemaDefinition(content, contentType);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.import.api.definition',\n                    defaultMessage: 'Error while updating the API Definition',\n                }));\n            }).finally(() => setIsImporting(false));\n    }\n\n    /**\n     * Updates AsyncAPI definition\n     */\n    function updateAsyncAPIDefinition() {\n        setIsImporting(true);\n        const {\n            inputValue, inputType, content,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        if (isFileInput) {\n            const reader = new FileReader();\n            // eslint-disable-next-line no-nested-ternary\n            const contentType = inputValue.type.includes('yaml') ? 'yaml'\n                : inputValue.type.includes('yml') ? 'yml' : 'json';\n            reader.onloadend = (event) => {\n                setSchemaDefinition(event.currentTarget.result, contentType);\n            };\n            reader.readAsText(inputValue);\n        }\n        const newAPI = new API();\n        const promisedResponse = isFileInput ? newAPI.updateAsyncAPIDefinitionByFile(api.id, inputValue)\n            : newAPI.updateAsyncAPIDefinitionByUrl(api.id, inputValue);\n        promisedResponse\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.async.api.import.definition.updated.successfully',\n                    defaultMessage: 'API Definition Updated Successfully',\n                }));\n                setAsyncAPIDefinitionImport(false);\n                if (!isFileInput) {\n                    // Test to starting the content with'{' character ignoring white spaces\n                    const isJSONRegex = RegExp(/^\\s*{/); // TODO: not a solid test need to support from REST API ~tmkb\n                    const contentType = isJSONRegex.test(content) ? 'json' : 'yaml';\n                    setSchemaDefinition(content, contentType);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.import.async.api.definition',\n                    defaultMessage: 'Error while updating the API Definition',\n                }));\n            }).finally(() => setIsImporting(false));\n    }\n\n    /**\n     * Update the graphQL api with its operation\n     * @param {*}  api\n     * @param {*}  graphQLInfo\n     */\n    function updateGraphQLAPIDefinition(graphQLSchema) {\n        const promisedAPI = api.updateGraphQLAPIDefinition(api.id, graphQLSchema);\n        promisedAPI\n            .then((response) => {\n                api.operations = response.obj;\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.graphQLDefinition.updated.successfully',\n                    defaultMessage: 'Schema Definition Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                setSchemaDefinition(graphQLSchema);\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.updating.graphQL.schema',\n                    defaultMessage: 'Error while updating GraphQL schema',\n                }));\n            });\n    }\n\n    /**\n     * Updates GraphQL schema definition\n     */\n    function updateGraphQLSchema() {\n        const {\n            inputValue,\n        } = apiInputs;\n\n        const promisedValidation = API.validateGraphQLFile(inputValue);\n        promisedValidation\n            .then((response) => {\n                const { isValid, graphQLInfo } = response.obj;\n                if (isValid === true) {\n                    updateGraphQLAPIDefinition(graphQLInfo.graphQLSchema.schemaDefinition);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Error.while.validating.the.imported.graphQLSchema',\n                    defaultMessage: 'Error while validating the imported schema',\n                }));\n            });\n    }\n\n    /**\n     * Updates WSDL definition\n     */\n    function updateWSDL() {\n        const {\n            inputType, inputValue,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        let promisedAPI;\n        if (isFileInput) {\n            promisedAPI = api.updateWSDLByFileOrArchive(api.id, inputValue);\n        } else {\n            promisedAPI = api.updateWSDLByUrl(api.id, inputValue);\n        }\n        promisedAPI\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.ImportDefinition.WSDL.updated.successfully',\n                    defaultMessage: 'WSDL Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                setSchemaDefinition(isFileInput && inputValue.type === 'application/zip');\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.ImportDefinition.error.updating.WSDL',\n                    defaultMessage: 'Error while updating WSDL',\n                }));\n            });\n    }\n\n    /**\n     * Handles API definition import\n     */\n    function importDefinition() {\n        if (isGraphQL) {\n            updateGraphQLSchema();\n        } else if (isSOAP) {\n            updateWSDL();\n        // } else if (isWebSocket || isWebSub) {\n        } else if (isAsyncAPI) {\n            updateAsyncAPIDefinition();\n        } else {\n            updateOASDefinition();\n        }\n    }\n    /**\n     *\n     * Set the validity of the API definition imports\n     * @param {*} isValidForm\n     * @param {*} validationState\n     */\n    function handleOnValidate(isFormValid) {\n        inputsDispatcher({\n            action: 'isFormValid',\n            value: isFormValid,\n        });\n    }\n\n    let dialogTitle = (\n        <FormattedMessage\n            id='Apis.Details.APIDefinition.APIDefinition.import.definition.oas'\n            defaultMessage='Import OpenAPI Definition'\n        />\n    );\n    let dialogContent = (\n        <ProvideOpenAPI\n            onValidate={handleOnValidate}\n            apiInputs={apiInputs}\n            inputsDispatcher={inputsDispatcher}\n        />\n    );\n    let btnText = (\n        <FormattedMessage\n            id='Apis.Details.APIDefinition.APIDefinition.import.definition'\n            defaultMessage='Import Definition'\n        />\n    );\n    if (isGraphQL) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.graphql'\n                defaultMessage='Import GraphQL Schema Definition'\n            />\n        );\n        dialogContent = (\n            <ProvideGraphQL\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n                data-testid='import-graphql-schema-dialog-content-root'\n            />\n        );\n    }\n    if (isSOAP) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.wsdl'\n                defaultMessage='Import WSDL'\n            />\n        );\n        dialogContent = (\n            <ProvideWSDL\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n        btnText = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.wsdl'\n                defaultMessage='Import WSDL'\n            />\n        );\n    }\n    // if (isWebSocket || isWebSub) {\n    if (isAsyncAPI) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.asyncApi'\n                defaultMessage='Import AsyncAPI Definition'\n            />\n        );\n        dialogContent = (\n            <ProvideAsyncAPI\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n        btnText = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.import.asyncAPI'\n                defaultMessage='Import AsyncAPI'\n            />\n        );\n    }\n\n    return (\n        <>\n            {!isAsyncAPI && (\n                <Button\n                    size='small'\n                    className={classes.button}\n                    onClick={handleAPIDefinitionImportOpen}\n                    disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                    id='import-definition-btn'\n                >\n                    <CloudUploadRounded className={classes.buttonIcon} />\n                    {btnText}\n                </Button>\n            )}\n            <Dialog\n                onBackdropClick={isAsyncAPI ? setAsyncAPIDefinitionImport : setOpenAPIDefinitionImport}\n                open={isAsyncAPI ? asyncAPIDefinitionImport : openAPIDefinitionImport}\n            >\n                <DialogTitle>\n                    <Typography className={classes.importDefinitionDialogHeader}>\n                        {dialogTitle}\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    {dialogContent}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAPIDefinitionImportCancel}>\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.APIDefinition.import.definition.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={importDefinition}\n                        variant='contained'\n                        color='primary'\n                        disabled={!apiInputs.isFormValid || isImporting || api.isRevision}\n                        id='import-open-api-btn'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.APIDefinition.import.definition.import'\n                            defaultMessage='Import'\n                        />\n                        {isImporting && <CircularProgress size={20} />}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nImportDefinition.propTypes = {\n    setSchemaDefinition: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isRestricted } from 'AppData/AuthManager';\nimport LifeCycleIcon from '@material-ui/icons/Autorenew';\nimport StoreIcon from '@material-ui/icons/Store';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport CodeIcon from '@material-ui/icons/Code';\nimport PersonPinCircleOutlinedIcon from '@material-ui/icons/PersonPinCircleOutlined';\nimport ResourcesIcon from '@material-ui/icons/VerticalSplit';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport {\n    Redirect, Route, Switch, Link, matchPath,\n} from 'react-router-dom';\nimport isEmpty from 'lodash/isEmpty';\nimport Utils from 'AppData/Utils';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport AuthorizedError from 'AppComponents/Base/Errors/AuthorizedError';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Progress } from 'AppComponents/Shared';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport LastUpdatedTime from 'AppComponents/Apis/Details/components/LastUpdatedTime';\nimport Divider from '@material-ui/core/Divider';\nimport { RevisionContextProvider } from 'AppComponents/Shared/RevisionContext';\nimport DevelopSectionMenu from 'AppComponents/Apis/Details/components/leftMenu/DevelopSectionMenu';\nimport { PROPERTIES as UserProperties } from 'AppData/User';\nimport Overview from './NewOverview/Overview';\nimport DesignConfigurations from './Configuration/DesignConfigurations';\nimport RuntimeConfiguration from './Configuration/RuntimeConfiguration';\nimport Topics from './Configuration/Topics';\nimport RuntimeConfigurationWebSocket from './Configuration/RuntimeConfigurationWebSocket';\nimport LifeCycle from './LifeCycle/LifeCycle';\nimport Documents from './Documents';\nimport Operations from './Operations/Operations';\nimport APIOperations from './Resources/APIOperations';\nimport APIProductOperations from './ProductResources/APIProductOperations';\nimport ProductResourcesEdit from './ProductResources/ProductResourcesEdit';\nimport Endpoints from './Endpoints/Endpoints';\nimport Environments from './Environments/Environments';\nimport Subscriptions from './Subscriptions/Subscriptions';\nimport Comments from './Comments/Comments';\nimport Scope from './Scopes';\nimport Security from './Security';\nimport APIDefinition from './APIDefinition/APIDefinition';\nimport WSDL from './APIDefinition/WSDL';\nimport APIDetailsTopMenu from './components/APIDetailsTopMenu';\nimport BusinessInformation from './BusinessInformation/BusinessInformation';\nimport Properties from './Properties/Properties';\nimport Monetization from './Monetization';\nimport ExternalStores from './ExternalStores/ExternalStores';\nimport { APIProvider } from './components/ApiContext';\nimport CreateNewVersion from './NewVersion/NewVersion';\nimport TryOutConsole from './TryOut/TryOutConsole';\n\nconst styles = (theme) => ({\n    LeftMenu: {\n        backgroundColor: theme.palette.background.leftMenu,\n        width: theme.custom.leftMenuWidth,\n        minHeight: `calc(100vh - ${64 + theme.custom.footer.height}px)`,\n    },\n    leftLInkMain: {\n        cursor: 'pointer',\n        backgroundColor: theme.palette.background.leftMenuActive,\n        textAlign: 'center',\n        height: theme.custom.apis.topMenu.height,\n    },\n    content: {\n        display: 'flex',\n        flexGrow: 1,\n        flexDirection: 'column',\n        paddingBottom: theme.spacing(3),\n    },\n    contentInside: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n    },\n    footeremaillink: {\n        marginLeft: theme.custom.leftMenuWidth, /* 4px */\n    },\n    root: {\n        backgroundColor: theme.palette.background.leftMenu,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    expanded: {\n        '&$expanded': {\n            margin: 0,\n            backgroundColor: theme.palette.background.leftMenu,\n            minHeight: 40,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n        },\n    },\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    expandIconColor: {\n        color: '#ffffff',\n    },\n    headingText: {\n        marginTop: '10px',\n        fontWeight: 800,\n        color: '#ffffff',\n        textAlign: 'left',\n        marginLeft: '8px',\n    },\n    customIcon: {\n        marginTop: (theme.custom.apis.topMenu.height - theme.custom.leftMenuIconMainSize) / 2,\n    },\n});\n\n/**\n * Base component for API specific Details page,\n * What this component do is, Handle all the request coming under `/apis/:api_uuid` path, If the :api_uuid or\n *  the later part of the URL is not valid , This will return a `PageNotFound` component.\n * For valid API request , This component will fetch the API and pass the API response data to below components in `api`\n * prop name.\n * Note: If you want to add new route or new page under APIs detail, add the desired path to `PATHS` constant mapping.\n * This mapping will be used in parent component to directly return `PageNotFound` component, If user making a request\n * to an undefined path segment.\n */\nclass Details extends Component {\n    /**\n     * Return boolean , whether provided URL has a valid Route under the Details page.\n     * Check https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/NavLink.js\n     * code for the usage of public matchPath method\n     * @static\n     * @param {String} pathname location URL of an incoming request\n     * @memberof Details\n     * @returns {Boolean} whether URL matched with defined sub paths or not\n     */\n    static isValidURL(pathname) {\n        for (const [subPathKey, subPath] of Object.entries(Details.subPaths)) {\n            // Skip the BASE path , because it will match for any `/apis/:apiUUID/*` values\n            if ((subPathKey !== 'BASE') && (subPathKey !== 'BASE_PRODUCT')) {\n                const matched = matchPath(pathname, subPath);\n                if (matched) {\n                    return matched;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Creates an instance of Details.\n     * @param {any} props @inheritDoc\n     * @memberof Details\n     */\n    constructor(props) {\n        super(props);\n        const isAPIProduct = null;\n        this.state = {\n            api: null,\n            apiNotFound: false,\n            // updateAPI: this.updateAPI,\n            isAPIProduct,\n            imageUpdate: 0,\n            allRevisions: null,\n            allEnvRevision: null,\n            authorizedAPI: false,\n        };\n        this.setAPI = this.setAPI.bind(this);\n        this.setAPIProduct = this.setAPIProduct.bind(this);\n        this.updateAPI = this.updateAPI.bind(this);\n        this.setImageUpdate = this.setImageUpdate.bind(this);\n        this.getRevision = this.getRevision.bind(this);\n        this.getDeployedEnv = this.getDeployedEnv.bind(this);\n        this.handleAccordionState = this.handleAccordionState.bind(this);\n        this.getLeftMenuItemForResourcesByType = this.getLeftMenuItemForResourcesByType.bind(this);\n        this.getLeftMenuItemForDefinitionByType = this.getLeftMenuItemForDefinitionByType.bind(this);\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof Details\n     */\n    componentDidMount() {\n        const {\n            location: { pathname },\n            isAPIProduct,\n        } = this.props;\n        // Load API data iff request page is valid\n        if (Details.isValidURL(pathname)) {\n            if (isAPIProduct) {\n                this.setAPIProduct();\n            } else {\n                this.setAPI();\n            }\n            const api = new API();\n            api.getTenantsByState('active')\n                .then((response) => {\n                    const { list } = response.body;\n                    this.setState({ tenantList: list });\n                }).catch((error) => {\n                    console.error('error when getting tenants ' + error);\n                });\n        }\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof Details\n     */\n    componentDidUpdate() {\n        const { api } = this.state;\n        const { match, isAPIProduct } = this.props;\n        const { apiUUID } = match.params;\n        const { apiProdUUID } = match.params;\n        if (!api || (api.id === apiUUID || api.id === apiProdUUID)) {\n            return;\n        }\n        if (isAPIProduct) {\n            this.setAPIProduct();\n        } else {\n            this.setAPI();\n        }\n    }\n\n    /**\n     *\n     * This method is a hack to update the image in the toolbar when a new image is uploaded\n     * @memberof Details\n     */\n    setImageUpdate() {\n        this.setState((previousState) => ({\n            imageUpdate: previousState.imageUpdate + 1,\n        }));\n        console.info(this.state.imageUpdate);\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    setAPI(newAPI) {\n        if (newAPI) {\n            this.setState({ api: newAPI });\n        } else {\n            const { match } = this.props;\n            const { apiUUID } = match.params;\n            const promisedApi = API.get(apiUUID);\n            promisedApi\n                .then((api) => {\n                    this.setState({ api });\n                    this.getRevision();\n                    this.getDeployedEnv();\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        this.setState({ apiNotFound: true });\n                    } else if (status === 403) {\n                        this.setState({ authorizedAPI: true });\n                    } else if (status === 401) {\n                        doRedirectToLogin();\n                    }\n                });\n        }\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    setAPIProduct() {\n        const { match } = this.props;\n        const { apiProdUUID } = match.params;\n        const { isAPIProduct } = this.props;\n        const promisedApi = APIProduct.get(apiProdUUID);\n        promisedApi\n            .then((api) => {\n                this.setState({ isAPIProduct });\n                this.setState({ api });\n                this.getRevision();\n                this.getDeployedEnv();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                } else if (status === 403) {\n                    this.setState({ authorizedAPI: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * @returns\n     * @memberof Details\n     */\n    getLeftMenuItemForDefinitionByType(apiType) {\n        const { isAPIProduct } = this.state;\n        const { intl, match } = this.props;\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n        const apiDefinitionMenuItem = (\n            <LeftMenuItem\n                text={intl.formatMessage({\n                    id: 'Apis.Details.index.api.definition2',\n                    defaultMessage: 'API definition',\n                })}\n                route='api definition'\n                to={pathPrefix + 'api definition'}\n                Icon={<CodeIcon />}\n                id='left-menu-itemAPIdefinition'\n            />\n        );\n\n        switch (apiType) {\n            case 'GRAPHQL':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.schema.definition',\n                                defaultMessage: 'Schema Definition',\n                            })}\n                            route='schema definition'\n                            to={pathPrefix + 'schema definition'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.asyncApi.definition',\n                                defaultMessage: 'AsyncAPI Definition',\n                            })}\n                            route='asyncApi definition'\n                            to={pathPrefix + 'asyncApi definition'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            case 'SOAP':\n                return (\n                    <>\n                        {apiDefinitionMenuItem}\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.wsdl.definition',\n                                defaultMessage: 'WSDL Definition',\n                            })}\n                            route='wsdl'\n                            to={pathPrefix + 'wsdl'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            default:\n                return (\n                    <>\n                        {apiDefinitionMenuItem}\n                    </>\n                );\n        }\n    }\n\n    getLeftMenuItemForResourcesByType(apiType) {\n        const { isAPIProduct } = this.state;\n        const { intl, match } = this.props;\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n\n        switch (apiType) {\n            case 'GRAPHQL':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.operations',\n                                defaultMessage: 'operations',\n                            })}\n                            to={pathPrefix + 'operations'}\n                            Icon={<ResourcesIcon />}\n                            id='left-menu-operations'\n                        />\n                    </>\n                );\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.topics',\n                                defaultMessage: 'topics',\n                            })}\n                            to={pathPrefix + 'topics'}\n                            Icon={<ResourcesIcon />}\n                        />\n                    </>\n                );\n            default:\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.resources',\n                                defaultMessage: 'resources',\n                            })}\n                            to={pathPrefix + 'resources'}\n                            Icon={<ResourcesIcon />}\n                            id='left-menu-itemresources'\n                        />\n                    </>\n                );\n        }\n    }\n\n    /**\n     * Get Revisions\n     */\n    getRevision() {\n        const { api } = this.state;\n        const restApi = new API();\n        const restApiProduct = new APIProduct();\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        let promisedUpdate;\n        let apiId = null;\n        if (!isAPIProduct) {\n            apiId = api.isRevision ? api.revisionedApiId : api.id;\n            promisedUpdate = restApi.getRevisions(apiId);\n        } else if (isAPIProduct) {\n            apiId = api.isRevision ? api.revisionedApiProductId : api.id;\n            promisedUpdate = restApiProduct.getProductRevisions(apiId);\n        }\n        return promisedUpdate\n            .then((result) => {\n                this.setState({ allRevisions: result.body.list });\n            })\n            .catch(() => {\n                Alert.error('Something went wrong while getting the revisions!');\n            });\n    }\n\n    /**\n     * Get Depolyed environment\n     */\n    getDeployedEnv() {\n        const { api } = this.state;\n        const restApi = new API();\n        const restApiProduct = new APIProduct();\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        let promisedUpdate;\n        if (!isAPIProduct) {\n            promisedUpdate = restApi.getRevisionsWithEnv(api.isRevision ? api.revisionedApiId : api.id);\n        } else if (isAPIProduct) {\n            promisedUpdate = restApiProduct.getProductRevisionsWithEnv(api.isRevision\n                ? api.revisionedApiProductId : api.id);\n        }\n        return promisedUpdate\n            .then((result) => {\n                this.setState({ allEnvRevision: result.body.list });\n            })\n            .catch(() => {\n                Alert.error('Something went wrong while getting the revisions!');\n            });\n    }\n\n    /**\n     * update ls\n     * @param {String} name event triggered\n     * @param {Boolean} isExpanded state\n     */\n    handleAccordionState(name, isExpanded) {\n        const { user } = this.context;\n        this.setState({ [name]: isExpanded });\n        if (name === 'portalConfigsExpanded') {\n            user.setProperty(UserProperties.PORTAL_CONFIG_OPEN, isExpanded);\n        } else {\n            user.setProperty(UserProperties.API_CONFIG_OPEN, isExpanded);\n        }\n    }\n\n    /**\n     * This method is similar to ReactJS `setState` method, In this `updateAPI()` method, we accept partially updated\n     * API object or comple API object. When updating , the provided updatedAPI object will be merged with the existing\n     * API object in the state and use it as the payload in the /apis PUT operation.\n     *\n     * Partially updated API object means: {description: \"Here is my new description..\"} kind of object. It should have\n     * a key in API object and value contains the updated value of that property\n     * @param {Object} [_updatedProperties={}] Partially updated API object or complete API object\n     * (even an instance of API class is accepted here)\n     * @param {Boolean} isAPIProduct Whether the update operation should execute on an API or API Product\n     * @returns {Promise} promise object that resolve to update (/apis PUT operation) response\n     */\n    updateAPI(_updatedProperties = {}) {\n        const { api } = this.state;\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        const updatedProperties = _updatedProperties instanceof API ? _updatedProperties.toJson() : _updatedProperties;\n        let promisedUpdate;\n        // TODO: Ideally, The state should hold the corresponding API object\n        // which we could call it's `update` method safely ~tmkb\n        if (!isEmpty(updatedProperties)) {\n            // newApi object has to be provided as the updatedProperties. Then api will be updated.\n            promisedUpdate = api.update(updatedProperties);\n        } else if (!isAPIProduct) {\n            // Just like calling noArg `setState()` will just trigger a re-render without modifying the state,\n            // Calling `updateAPI()` without args wil return the API without any update.\n            // Just sync-up the api state with backend\n            promisedUpdate = API.get(api.id);\n        } else if (isAPIProduct) {\n            promisedUpdate = APIProduct.get(api.id);\n        }\n        return promisedUpdate\n            .then((updatedAPI) => {\n                if (isAPIProduct) {\n                    Alert.info(`${updatedAPI.name} API Product updated successfully`);\n                    this.setState({ api: updatedAPI });\n                    return updatedAPI;\n                } else {\n                    Alert.info(`${updatedAPI.name} API updated successfully`);\n                    this.setState({ api: updatedAPI });\n                    return updatedAPI;\n                }\n            })\n            .catch((error) => {\n                // TODO: Should log and handle the error case by the original callee ~tmkb\n                console.error(error);\n                Alert.error(`Something went wrong while updating the ${api.name} API!!`);\n                // Kinda force render,Resting API object to old one\n                this.setState({ api });\n                throw error;\n            });\n    }\n\n    /**\n     * Renders Grid container layout with NavBar place static in LHS, Components which coming as children for\n     * Details page\n     * should wrap it's content with <Grid item > element\n     * @returns {Component} Render API Details page\n     */\n    render() {\n        const {\n            api, apiNotFound, isAPIProduct, imageUpdate, tenantList, allRevisions, allEnvRevision, authorizedAPI,\n        } = this.state;\n        const {\n            classes,\n            theme,\n            match,\n            intl,\n            location: pageLocation,\n            location: { pathname }, // nested destructuring\n        } = this.props;\n\n        const { settings: settingsContext } = this.context;\n\n        // pageLocation renaming is to prevent es-lint errors saying can't use global name location\n        if (!Details.isValidURL(pathname)) {\n            return <ResourceNotFound location={pageLocation} />;\n        }\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n        const redirectUrl = pathPrefix;\n        const isAsyncAPI = api && (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE');\n        if (apiNotFound) {\n            const { apiUUID } = match.params;\n            const resourceNotFoundMessageText = defineMessages({\n                titleMessage: {\n                    id: 'Apis.Details.index.api.not.found.title',\n                    defaultMessage: 'API is not found in the {environmentLabel} Environment',\n                },\n                bodyMessage: {\n                    id: 'Apis.Details.index.api.not.found.body',\n                    defaultMessage: 'Cannot find the API with the given id',\n                },\n            });\n            const resourceNotFountMessage = {\n                title: intl.formatMessage(resourceNotFoundMessageText.titleMessage, {\n                    environmentLabel: `${Utils.getCurrentEnvironment().label}`,\n                }),\n                body: intl.formatMessage(resourceNotFoundMessageText.bodyMessage, { apiUUID: `${apiUUID}` }),\n            };\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n        if (authorizedAPI) {\n            return (\n                <>\n                    <AuthorizedError />\n                </>\n            );\n        }\n\n        if (!api) {\n            return <Progress per={70} message='Loading API data ...' />;\n        }\n        const { leftMenuIconMainSize } = theme.custom;\n        return (\n            <Box display='flex' alignItems='stretch' flexDirection='row'>\n                <APIProvider\n                    value={{\n                        api,\n                        updateAPI: this.updateAPI,\n                        isAPIProduct,\n                        setAPI: this.setAPI,\n                        setImageUpdate: this.setImageUpdate,\n                        imageUpdate,\n                        tenantList,\n                    }}\n                >\n                    <Box className={classes.LeftMenu}>\n                        <Link to={'/' + (isAPIProduct ? 'api-products' : 'apis') + '/'}>\n                            <div className={classes.leftLInkMain}>\n                                <CustomIcon\n                                    className={classes.customIcon}\n                                    width={leftMenuIconMainSize}\n                                    height={leftMenuIconMainSize}\n                                    icon={isAPIProduct ? 'api-product' : 'apis'}\n                                />\n                            </div>\n                        </Link>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.overview',\n                                defaultMessage: 'overview',\n                            })}\n                            to={pathPrefix + 'overview'}\n                            Icon={<DashboardIcon />}\n                            head='valueOnly'\n                            id='left-menu-overview'\n                        />\n                        <Typography className={classes.headingText}>\n                            Develop\n                        </Typography>\n                        <DevelopSectionMenu\n                            pathPrefix={pathPrefix}\n                            isAPIProduct={isAPIProduct}\n                            api={api}\n                            getLeftMenuItemForResourcesByType={this.getLeftMenuItemForResourcesByType}\n                            getLeftMenuItemForDefinitionByType={this.getLeftMenuItemForDefinitionByType}\n                        />\n                        <Divider />\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised && (\n                            <>\n                                <Typography className={classes.headingText}>Deploy</Typography>\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.environments',\n                                        defaultMessage: 'Deployments',\n                                    })}\n                                    route='deployments'\n                                    to={pathPrefix + 'deployments'}\n                                    Icon={<PersonPinCircleOutlinedIcon />}\n                                    id='left-menu-itemdeployments'\n                                />\n                            </>\n                        )}\n                        {isAPIProduct && (\n                            <>\n                                <Typography className={classes.headingText}>Deploy</Typography>\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.environments',\n                                        defaultMessage: 'Deployments',\n                                    })}\n                                    route='deployments'\n                                    to={pathPrefix + 'deployments'}\n                                    Icon={<PersonPinCircleOutlinedIcon />}\n                                    id='left-menu-itemdeployments'\n                                />\n                            </>\n                        )}\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised && !api.isWebSocket()\n                            && !api.isGraphql() && !isAsyncAPI && (\n                            <div>\n                                <Divider />\n                                <Typography className={classes.headingText}>Test</Typography>\n                                <LeftMenuItem\n                                    route='test-console'\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.Tryout.menu.name',\n                                        defaultMessage: 'Try Out',\n                                    })}\n                                    to={pathPrefix + 'test-console'}\n                                    iconText='test'\n                                    id='left-menu-itemTestConsole'\n                                />\n                            </div>\n                        )}\n                        {!isAPIProduct && !isRestricted(['apim:api_publish'], api) && (\n                            <div>\n                                <Divider />\n                                <Typography className={classes.headingText}>Publish</Typography>\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.lifecycle',\n                                        defaultMessage: 'lifecycle',\n                                    })}\n                                    to={pathPrefix + 'lifecycle'}\n                                    Icon={<LifeCycleIcon />}\n                                    id='left-menu-itemlifecycle'\n                                />\n                            </div>\n                        )}\n                        {!isAPIProduct && settingsContext.externalStoresEnabled && (\n                            <>\n                                <Divider />\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.external-stores',\n                                        defaultMessage: 'external dev portals',\n                                    })}\n                                    to={pathPrefix + 'external-devportals'}\n                                    Icon={<StoreIcon />}\n                                />\n                            </>\n                        )}\n                        <Divider />\n                    </Box>\n                    <Box className={classes.content}>\n                        <RevisionContextProvider\n                            value={{\n                                allRevisions,\n                                getRevision: this.getRevision,\n                                allEnvRevision,\n                                getDeployedEnv: this.getDeployedEnv,\n                            }}\n                        >\n                            <APIDetailsTopMenu api={api} isAPIProduct={isAPIProduct} imageUpdate={imageUpdate} />\n                            <div className={classes.contentInside}>\n                                <LastUpdatedTime lastUpdatedTime={api.lastUpdatedTime} />\n                                <Switch>\n                                    <Redirect exact from={Details.subPaths.BASE} to={redirectUrl} />\n                                    <Route\n                                        path={Details.subPaths.OVERVIEW_PRODUCT}\n                                        key={Details.subPaths.OVERVIEW_PRODUCT}\n                                        component={() => <Overview api={api} />}\n                                    />\n                                    <Route path={Details.subPaths.OVERVIEW} component={() => <Overview api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.API_DEFINITION}\n                                        component={() => <APIDefinition api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.WSDL}\n                                        component={() => <WSDL api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.API_DEFINITION_PRODUCT}\n                                        component={() => <APIDefinition api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SCHEMA_DEFINITION}\n                                        component={() => <APIDefinition api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ASYNCAPI_DEFINITION}\n                                        component={() => <APIDefinition api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.LIFE_CYCLE}\n                                        component={() => <LifeCycle api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.CONFIGURATION}\n                                        component={() => <DesignConfigurations api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION}\n                                        component={() => <RuntimeConfiguration api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION_WEBSOCKET}\n                                        component={() => <RuntimeConfigurationWebSocket api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.TOPICS}\n                                        component={() => <Topics api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.CONFIGURATION_PRODUCT}\n                                        component={() => <DesignConfigurations api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION_PRODUCT}\n                                        component={() => <RuntimeConfiguration api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENDPOINTS}\n                                        component={() => <Endpoints api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENVIRONMENTS}\n                                        component={() => <Environments api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENVIRONMENTS_PRODUCT}\n                                        component={() => <Environments api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.OPERATIONS}\n                                        component={() => <Operations api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        exact\n                                        path={Details.subPaths.RESOURCES_PRODUCT}\n                                        component={APIProductOperations}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RESOURCES_PRODUCT_EDIT}\n                                        component={ProductResourcesEdit}\n                                    />\n\n                                    <Route\n                                        path={Details.subPaths.RESOURCES}\n                                        key={Details.subPaths.RESOURCES}\n                                        component={APIOperations}\n                                    />\n\n                                    <Route path={Details.subPaths.SCOPES} component={() => <Scope api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.DOCUMENTS}\n                                        component={() => <Documents api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.DOCUMENTS_PRODUCT}\n                                        component={() => <Documents api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SUBSCRIPTIONS}\n                                        component={() => <Subscriptions api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SUBSCRIPTIONS_PRODUCT}\n                                        component={() => <Subscriptions api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route path={Details.subPaths.SECURITY} component={() => <Security api={api} />} />\n                                    <Route path={Details.subPaths.COMMENTS} component={() => <Comments api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.BUSINESS_INFO}\n                                        component={() => <BusinessInformation api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.BUSINESS_INFO_PRODUCT}\n                                        component={() => <BusinessInformation api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.PROPERTIES}\n                                        component={() => <Properties api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.PROPERTIES_PRODUCT}\n                                        component={() => <Properties api={api} />}\n                                    />\n                                    <Route path={Details.subPaths.NEW_VERSION} component={() => <CreateNewVersion />} />\n                                    <Route path={Details.subPaths.SUBSCRIPTIONS} component={() => <Subscriptions />} />\n                                    <Route\n                                        path={Details.subPaths.MONETIZATION}\n                                        component={() => <Monetization api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.MONETIZATION_PRODUCT}\n                                        component={() => <Monetization api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.TRYOUT}\n                                        component={() => <TryOutConsole apiObj={api} />}\n                                    />\n                                    <Route path={Details.subPaths.EXTERNAL_STORES} component={ExternalStores} />\n                                    <Route\n                                        path={Details.subPaths.COMMENTS}\n                                        component={() => <Comments apiObj={api} />}\n                                    />\n                                </Switch>\n                            </div>\n                        </RevisionContextProvider>\n                    </Box>\n                </APIProvider>\n            </Box>\n        );\n    }\n}\n\nDetails.contextType = AppContext;\n// Add your path here and refer it in above <Route /> component,\n// Paths that are not defined here will be returned with Not Found error\n// key name doesn't matter here, Use an appropriate name as the key\nDetails.subPaths = {\n    BASE: '/apis/:api_uuid',\n    BASE_PRODUCT: '/api-products/:apiprod_uuid',\n    OVERVIEW: '/apis/:api_uuid/overview',\n    OVERVIEW_PRODUCT: '/api-products/:apiprod_uuid/overview',\n    API_DEFINITION: '/apis/:api_uuid/api definition',\n    WSDL: '/apis/:api_uuid/wsdl',\n    API_DEFINITION_PRODUCT: '/api-products/:apiprod_uuid/api definition',\n    SCHEMA_DEFINITION: '/apis/:api_uuid/schema definition',\n    LIFE_CYCLE: '/apis/:api_uuid/lifecycle',\n    CONFIGURATION: '/apis/:api_uuid/configuration',\n    RUNTIME_CONFIGURATION: '/apis/:api_uuid/runtime-configuration',\n    CONFIGURATION_PRODUCT: '/api-products/:apiprod_uuid/configuration',\n    RUNTIME_CONFIGURATION_PRODUCT: '/api-products/:apiprod_uuid/runtime-configuration',\n    RUNTIME_CONFIGURATION_WEBSOCKET: '/apis/:api_uuid/runtime-configuration-websocket',\n    ENDPOINTS: '/apis/:api_uuid/endpoints',\n    ENVIRONMENTS: '/apis/:api_uuid/deployments',\n    ENVIRONMENTS_PRODUCT: '/api-products/:apiprod_uuid/deployments',\n    OPERATIONS: '/apis/:api_uuid/operations',\n    RESOURCES: '/apis/:api_uuid/resources',\n    RESOURCES_PRODUCT: '/api-products/:apiprod_uuid/resources',\n    RESOURCES_PRODUCT_EDIT: '/api-products/:apiprod_uuid/resources/edit',\n    SCOPES: '/apis/:api_uuid/scopes',\n    DOCUMENTS: '/apis/:api_uuid/documents',\n    DOCUMENTS_PRODUCT: '/api-products/:apiprod_uuid/documents',\n    SUBSCRIPTIONS_PRODUCT: '/api-products/:apiprod_uuid/subscriptions',\n    SUBSCRIPTIONS: '/apis/:api_uuid/subscriptions',\n    SECURITY: '/apis/:api_uuid/security',\n    COMMENTS: '/apis/:api_uuid/comments',\n    BUSINESS_INFO: '/apis/:api_uuid/business info',\n    BUSINESS_INFO_PRODUCT: '/api-products/:apiprod_uuid/business info',\n    PROPERTIES: '/apis/:api_uuid/properties',\n    PROPERTIES_PRODUCT: '/api-products/:apiprod_uuid/properties',\n    NEW_VERSION: '/apis/:api_uuid/new_version',\n    MONETIZATION: '/apis/:api_uuid/monetization',\n    MONETIZATION_PRODUCT: '/api-products/:apiprod_uuid/monetization',\n    EXTERNAL_STORES: '/apis/:api_uuid/external-devportals',\n    TRYOUT: '/apis/:api_uuid/test-console',\n    QUERYANALYSIS: '/apis/:api_uuid/queryanalysis',\n    TOPICS: '/apis/:api_uuid/topics',\n    ASYNCAPI_DEFINITION: '/apis/:api_uuid/asyncApi definition',\n};\n\n// To make sure that paths will not change by outsiders, Basically an enum\nObject.freeze(Details.paths);\n\nDetails.propTypes = {\n    classes: PropTypes.shape({\n        LeftMenu: PropTypes.string,\n        content: PropTypes.string,\n        leftLInkMain: PropTypes.string,\n        contentInside: PropTypes.string,\n        footeremaillink: PropTypes.string,\n    }).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n        custom: PropTypes.shape({\n            leftMenuIconMainSize: PropTypes.number,\n        }),\n    }).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Details));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Image404 from './Custom404Image';\n\nconst AuthorizedError = (props) => {\n    const { response } = props;\n    const { message = {} } = props;\n\n    return (\n        <>\n            <Container maxWidth='md'>\n                <Box padding={4}>\n                    <Paper elevation={0}>\n                        <Box padding={4}>\n                            <Grid container alignItems='center' justify='center' style={{ height: '100%' }}>\n                                <Grid item xs={12} md={6}>\n                                    <Typography variant='h5' gutterBottom>\n                                        {message.title}\n                                    </Typography>\n                                    <Typography variant='subtitle1' gutterBottom>\n                                        {message.body}\n                                        <span style={{ color: 'green' }}>\n                                            {' '}\n                                            {response ? response.statusText : ''}\n                                            {' '}\n                                        </span>\n                                    </Typography>\n                                    {message.more}\n                                    <Box py={5}>\n                                        <Box pb={2}>\n                                            <Typography variant='subtitle1'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.more.links'\n                                                    defaultMessage='You may check the links below'\n                                                />\n                                            </Typography>\n                                        </Box>\n                                        <Link to='/apis/' style={{ marginRight: 8 }}>\n                                            <Button variant='contained' color='primary'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.api.list'\n                                                    defaultMessage='API List'\n                                                />\n                                            </Button>\n                                        </Link>\n                                        <Link to='/api-products/'>\n                                            <Button variant='contained' color='primary'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.api.product.list'\n                                                    defaultMessage='API Product List'\n                                                />\n                                            </Button>\n                                        </Link>\n                                    </Box>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    {/* Image */}\n                                    <Image404 style={{ fontSize: 400, fill: '#ccc' }} />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Paper>\n                </Box>\n            </Container>\n        </>\n    );\n};\n\nAuthorizedError.defaultProps = {\n    message: {\n        title: <FormattedMessage\n            id='Base.Errors.AuthorizedError.default_tittle'\n            defaultMessage='Authorized Error'\n        />,\n        body: <FormattedMessage\n            id='Base.Errors.AuthorizedError.default_body'\n            defaultMessage='User is not authorized to access the API'\n        />,\n    },\n};\n\nAuthorizedError.propTypes = {\n    response: PropTypes.shape({\n        statusText: PropTypes.string,\n    }).isRequired,\n    message: PropTypes.shape({\n        title: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.instanceOf(FormattedMessage),\n        ]),\n        body: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.instanceOf(FormattedMessage),\n        ]),\n    }),\n};\n\nexport default AuthorizedError;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * API/Product last updated time.\n * @param {Parameter} props last updated time.\n * @returns {Property} The sum of the two numbers.\n */\nfunction LastUpdatedTime(props) {\n    const { lastUpdatedTime } = props;\n    return (\n        <div style={{ float: 'right' }}>\n            <Tooltip\n                title={moment(lastUpdatedTime).calendar()}\n                aria-label='add'\n            >\n                <Typography variant='caption' display='block'>\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.last.updated.time'\n                        defaultMessage='Last updated:'\n                    />\n                    {' '}\n                    {moment(lastUpdatedTime).fromNow()}\n                </Typography>\n            </Tooltip>\n        </div>\n    );\n}\n\nLastUpdatedTime.propTypes = {\n    lastUpdatedTime: PropTypes.shape({ content: PropTypes.string }).isRequired,\n};\n\nexport default (LastUpdatedTime);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport EndpointIcon from '@material-ui/icons/GamesOutlined';\nimport ScopesIcon from '@material-ui/icons/VpnKey';\nimport DocumentsIcon from '@material-ui/icons/LibraryBooks';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ConfigurationIcon from '@material-ui/icons/Build';\nimport PropertiesIcon from '@material-ui/icons/List';\nimport SubscriptionsIcon from '@material-ui/icons/RssFeed';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RuntimeConfigurationIcon from '@material-ui/icons/Settings';\nimport MonetizationIcon from '@material-ui/icons/LocalAtm';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { PROPERTIES as UserProperties } from 'AppData/User';\nimport { useUser } from 'AppComponents/Shared/AppContext';\nimport { useIntl } from 'react-intl';\n\n\nconst AccordianSummary = withStyles({\n    root: {\n        backgroundColor: '#1a1f2f',\n        paddingLeft: '8px',\n        borderBottom: '1px solid rgba(0, 0, 0, .125)',\n        minHeight: 40,\n        '&$expanded': {\n            minHeight: 40,\n        },\n    },\n    content: {\n        '&$expanded': {\n            margin: 0,\n        },\n    },\n    expanded: {\n        backgroundColor: '#1a1f2f',\n    },\n})(MuiAccordionSummary);\n\nconst AccordionDetails = withStyles((theme) => ({\n    root: {\n        backgroundColor: '#1a1f2f',\n        paddingLeft: theme.spacing(0),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n}))(MuiAccordionDetails);\n\n\nconst useStyles = makeStyles((theme) => ({\n    footeremaillink: {\n        marginLeft: theme.custom.leftMenuWidth, /* 4px */\n    },\n    root: {\n        backgroundColor: theme.palette.background.leftMenu,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n    expanded: {\n        '&$expanded': {\n            margin: 0,\n            backgroundColor: theme.palette.background.leftMenu,\n            minHeight: 40,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n        },\n    },\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    expandIconColor: {\n        color: '#ffffff',\n    },\n}));\n\n/**\n *\n * @param {*} props\n * @returns\n */\nexport default function DevelopSectionMenu(props) {\n    const {\n        pathPrefix, isAPIProduct, api, getLeftMenuItemForResourcesByType, getLeftMenuItemForDefinitionByType,\n    } = props;\n    const user = useUser();\n    const [portalConfigsExpanded, setPortalConfigsExpanded] = useState(user\n        .getProperty(UserProperties.PORTAL_CONFIG_OPEN));\n    const [apiConfigsExpanded, setApiConfigsExpanded] = useState(user.getProperty(UserProperties.API_CONFIG_OPEN));\n    const handleAccordionState = (section, isExpanded) => {\n        if (section === 'portalConfigsExpanded') {\n            setPortalConfigsExpanded(isExpanded);\n            user.setProperty(UserProperties.PORTAL_CONFIG_OPEN, isExpanded);\n        } else {\n            setApiConfigsExpanded(isExpanded);\n            user.setProperty(UserProperties.API_CONFIG_OPEN, isExpanded);\n        }\n    };\n    const classes = useStyles();\n    const intl = useIntl();\n\n    return (\n        <div className={classes.root}>\n            <Accordion\n                id='itest-api-details-portal-config-acc'\n                defaultExpanded={portalConfigsExpanded}\n                elevation={0}\n                onChange={(e, isExpanded) => handleAccordionState('portalConfigsExpanded',\n                    isExpanded)}\n                classes={{ expanded: classes.expanded }}\n            >\n                <AccordianSummary\n                    expandIcon={<ExpandMoreIcon className={classes.expandIconColor} />}\n                >\n                    <Typography className={classes.leftLInkText}>\n                        Portal Configurations\n                    </Typography>\n                </AccordianSummary>\n                <AccordionDetails>\n                    <div>\n                        <LeftMenuItem\n                            className={classes.footeremaillink}\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.design.configs',\n                                defaultMessage: 'Basic info',\n                            })}\n                            route='configuration'\n                            to={pathPrefix + 'configuration'}\n                            Icon={<ConfigurationIcon />}\n                            id='left-menu-itemDesignConfigurations'\n                        />\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.business.info',\n                                defaultMessage: 'business info',\n                            })}\n                            to={pathPrefix + 'business info'}\n                            Icon={<BusinessIcon />}\n                            id='left-menu-itembusinessinfo'\n                        />\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.subscriptions',\n                                    defaultMessage: 'subscriptions',\n                                })}\n                                to={pathPrefix + 'subscriptions'}\n                                Icon={<SubscriptionsIcon />}\n                                id='left-menu-itemsubscriptions'\n                            />\n                        )}\n                        {isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.subscriptions',\n                                    defaultMessage: 'subscriptions',\n                                })}\n                                to={pathPrefix + 'subscriptions'}\n                                Icon={<SubscriptionsIcon />}\n                                id='left-menu-itemsubscriptions'\n                            />\n                        )}\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.documents',\n                                defaultMessage: 'documents',\n                            })}\n                            to={pathPrefix + 'documents'}\n                            Icon={<DocumentsIcon />}\n                            id='left-menu-itemdocuments'\n                        />\n                        {!isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.comments',\n                                    defaultMessage: 'Comments',\n                                })}\n                                route='comments'\n                                to={pathPrefix + 'comments'}\n                                Icon={<CommentIcon />}\n                                id='left-menu-itemcomments'\n                            />\n                        )}\n                    </div>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion\n                id='itest-api-details-api-config-acc'\n                defaultExpanded={apiConfigsExpanded}\n                elevation={0}\n                onChange={(e, isExpanded) => handleAccordionState('apiConfigsExpanded',\n                    isExpanded)}\n                classes={{ expanded: classes.expanded }}\n            >\n                <AccordianSummary\n                    expandIcon={<ExpandMoreIcon className={classes.expandIconColor} />}\n                >\n                    <Typography className={classes.leftLInkText}>\n                        API Configurations\n                    </Typography>\n                    <Tooltip\n                        title={'If you make any changes to the API configuration, you need to redeploy'\n                            + ' the API to see updates in the API Gateway.'}\n                        placement='bottom'\n                    >\n                        <IconButton color='primary' size='small' aria-label='delete'>\n                            <InfoOutlinedIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                </AccordianSummary>\n                <AccordionDetails>\n                    <div>\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised\n                            && !api.isWebSocket() && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration'}\n                                Icon={<RuntimeConfigurationIcon />}\n                                id='left-menu-itemRuntimeConfigurations'\n                            />\n                        )}\n                        {isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration'}\n                                Icon={<RuntimeConfigurationIcon />}\n                                id='left-menu-itemRuntimeConfigurations'\n                            />\n                        )}\n                        {api.advertiseInfo && !api.advertiseInfo.advertised && api.isWebSocket() && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration-websocket'}\n                                Icon={<RuntimeConfigurationIcon />}\n                                id='left-menu-itemRuntimeConfigurations'\n                            />\n                        )}\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised\n                            && getLeftMenuItemForResourcesByType(api.type)}\n                        {isAPIProduct && getLeftMenuItemForResourcesByType(api.type)}\n                        {getLeftMenuItemForDefinitionByType(api.type)}\n                        {api.advertiseInfo && !api.advertiseInfo.advertised && !isAPIProduct\n                            && api.type !== 'WEBSUB' && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.endpoints',\n                                    defaultMessage: 'endpoints',\n                                })}\n                                to={pathPrefix + 'endpoints'}\n                                Icon={<EndpointIcon />}\n                                id='left-menu-itemendpoints'\n                            />\n                        )}\n                        {api.advertiseInfo && !api.advertiseInfo.advertised && !isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.left.menu.scope',\n                                    defaultMessage: 'Local Scopes',\n                                })}\n                                route='scopes'\n                                to={pathPrefix + 'scopes'}\n                                Icon={<ScopesIcon />}\n                                id='left-menu-itemLocalScopes'\n                            />\n                        )}\n\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.properties',\n                                defaultMessage: 'properties',\n                            })}\n                            to={pathPrefix + 'properties'}\n                            Icon={<PropertiesIcon />}\n                            id='left-menu-itemproperties'\n                        />\n\n                        {!api.isWebSocket() && !isRestricted(['apim:api_publish'], api) && (\n                            <>\n                                {!isAPIProduct && api.advertiseInfo\n                                    && !api.advertiseInfo.advertised && (\n                                    <LeftMenuItem\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.monetization',\n                                            defaultMessage: 'monetization',\n                                        })}\n                                        to={pathPrefix + 'monetization'}\n                                        Icon={<MonetizationIcon />}\n                                        id='left-menu-monetization-prod'\n                                    />\n                                )}\n                            </>\n                        )}\n                        {isAPIProduct && !api.isWebSocket()\n                            && !isRestricted(['apim:api_publish'], api) && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.monetization',\n                                    defaultMessage: 'monetization',\n                                })}\n                                to={pathPrefix + 'monetization'}\n                                Icon={<MonetizationIcon />}\n                                id='left-menu-monetization-prod'\n                            />\n                        )}\n                    </div>\n                </AccordionDetails>\n            </Accordion>\n        </div>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport green from '@material-ui/core/colors/green';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport API from 'AppData/api';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Resources from './Resources';\nimport Operations from './Operations';\nimport ProductResources from './ProductResources';\nimport Configuration from './Configuration';\nimport CustomizedStepper from './CustomizedStepper';\nimport MetaData from './MetaData';\nimport Endpoints from './Endpoints';\nimport Topics from './Topics';\n\nconst styles = (theme) => ({\n    root: {\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    contentWrapper: {\n        marginTop: theme.spacing(2),\n    },\n    buttonSuccess: {\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n    },\n    checkItem: {\n        textAlign: 'center',\n    },\n    divider: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    chip: {\n        margin: theme.spacing(0.5),\n        padding: 0,\n        height: 'auto',\n        '& span': {\n            padding: '0 5px',\n        },\n    },\n    imageContainer: {\n        display: 'flex',\n    },\n    imageWrapper: {\n        marginRight: theme.spacing(3),\n    },\n    subtitle: {\n        marginTop: theme.spacing(0),\n    },\n    specialGap: {\n        marginTop: theme.spacing(3),\n    },\n    resourceTitle: {\n        marginBottom: theme.spacing(3),\n    },\n    ListRoot: {\n        padding: 0,\n        margin: 0,\n    },\n    titleWrapper: {\n        display: 'flex',\n    },\n    title: {\n        flex: 1,\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    htmlTooltip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n    lifecycleWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    lifecycleIcon: {\n        fontSize: 36,\n        color: 'green',\n        marginRight: theme.spacing(1),\n    },\n    leftSideWrapper: {\n        paddingRight: theme.spacing(2),\n    },\n    notConfigured: {\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    url: {\n        maxWidth: '100%',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\n\n/**\n * API Overview page\n *\n * @param {*} props\n * @returns\n */\nfunction Overview(props) {\n    const { classes, api: newApi } = props;\n    const { api } = useContext(ApiContext);\n    let loadEndpoints;\n\n    if (api.apiType === API.CONSTS.API) {\n        loadEndpoints = <Endpoints parentClasses={classes} api={api} />;\n    }\n    function getResourcesClassForAPIs(apiType) {\n        switch (apiType) {\n            case 'GRAPHQL':\n                return <Operations parentClasses={classes} api={api} />;\n            case 'APIPRODUCT':\n                return <ProductResources parentClasses={classes} api={api} />;\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n                return <Topics parentClasses={classes} api={api} />;\n            default:\n                return <Resources parentClasses={classes} api={api} />;\n        }\n    }\n\n    if (newApi.apiType === API.CONSTS.APIProduct) {\n        api.type = API.CONSTS.APIProduct;\n    }\n    return (\n        <>\n            <Typography variant='h4' align='left' className={classes.mainTitle}>\n                <FormattedMessage\n                    id='Apis.Details.Overview.Overview.topic.header'\n                    defaultMessage='Overview'\n                />\n            </Typography>\n            {api.type !== API.CONSTS.APIProduct && (\n                <Grid container spacing={12}>\n                    <Grid item xs={12} s={12} md={12} lg={12}>\n                        <CustomizedStepper />\n                    </Grid>\n                </Grid>\n            )}\n            <div className={classes.contentWrapper}>\n                <Paper className={classes.root}>\n                    <Grid container spacing={24}>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <Grid container spacing={24}>\n                                <Grid item xs={12} md={6} lg={6}>\n                                    <MetaData parentClasses={classes} />\n                                </Grid>\n                                <Grid item xs={12} md={6} lg={6}>\n                                    <Configuration parentClasses={classes} />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <div className={classes.specialGap}>\n                                <Grid container spacing={24}>\n                                    {\n                                        api.type === 'WEBSUB' ? (\n                                            <Grid item xs={12} md={12} lg={12}>\n                                                <Grid item xs={12} md={12} lg={12}>\n                                                    {getResourcesClassForAPIs(api.type)}\n                                                </Grid>\n                                            </Grid>\n                                        ) : (\n                                            <>\n                                                <Grid item xs={12} md={6} lg={6}>\n                                                    <Grid item xs={12} md={8} lg={8}>\n                                                        {getResourcesClassForAPIs(api.type)}\n                                                    </Grid>\n                                                </Grid>\n                                                <Grid item xs={12} md={6} lg={6}>\n                                                    {loadEndpoints}\n                                                </Grid>\n                                            </>\n                                        )\n                                    }\n                                </Grid>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </div>\n        </>\n    );\n}\n\nOverview.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n};\n\nexport default withStyles(styles)(Overview);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nimport Typography from '@material-ui/core/Typography';\nimport Api from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\n\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method]);\n    }\n    return (\n        <Chip\n            label={method.toUpperCase()}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, marginRight: 5,\n            }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n    },\n    contentWrapper: {\n        maxHeight: '125px',\n        overflowY: 'auto',\n    },\n};\n\nclass Resources extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: null,\n        };\n        this.restApi = new Api();\n    }\n\n    componentDidMount() {\n        const { id } = this.props.api;\n        const promisedAPI = this.restApi.getSwagger(id);\n        promisedAPI\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    this.setState({ paths: response.obj.paths });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n    render() {\n        const { paths } = this.state;\n        if (this.state.notFound) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.resource.not.found'\n                        defaultMessage='resource not found...'\n                    />\n                </div>\n            );\n        }\n        if (!paths) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.loading'\n                        defaultMessage='loading...'\n                    />\n                </div>\n            );\n        }\n        const { classes, parentClasses, api } = this.props;\n        return (\n            <>\n                <div className={parentClasses.titleWrapper}>\n                    { api.type === 'GraphQL' ? (\n                        <Typography variant='h5' component='h3' className={parentClasses.title}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.operations'\n                                defaultMessage='Operation'\n                            />\n                        </Typography>\n                    )\n                        : (\n                            <Typography variant='h5' component='h3' className={parentClasses.title}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Resources.resources'\n                                    defaultMessage='Resources'\n                                />\n                            </Typography>\n                        )}\n                </div>\n                <Box p={1}>\n                    <div className={classes.contentWrapper}>\n                        {Object.keys(paths).map((key) => {\n                            const path = paths[key];\n                            return (\n                                <div className={classes.root}>\n                                    <Typography className={classes.heading} variant='body1'>\n                                        {key}\n                                    </Typography>\n                                    {Object.keys(path).map((innerKey) => {\n                                        return CONSTS.HTTP_METHODS.includes(innerKey)\n                                            ? <RenderMethod method={innerKey} /> : null;\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <Link to={'/apis/' + api.id + '/resources'}>\n                        <Typography\n                            className={classes.subHeading}\n                            color='primary'\n                            display='inline'\n                            variant='caption'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.ShowMore'\n                                defaultMessage='Show More'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                </Box>\n            </>\n        );\n    }\n}\nResources.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(Resources);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport ApiContext from '../components/ApiContext';\n\nconst styles = (theme) => ({\n    contentWrapper: {\n        marginTop: theme.spacing(2),\n        maxHeight: '250px',\n        overflowY: 'auto',\n    },\n});\n\n/**\n *\n * @param {*} props\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    const methodLower = method.toLowerCase();\n    let chipColor = theme.custom.operationChipColor\n        ? theme.custom.operationChipColor[methodLower]\n        : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.operationChipColor[methodLower]);\n    }\n    return (\n        <Chip\n            label={method}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, fontSize: 9, width: 95,\n            }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n/**\n *\n * @param {*} props\n */\nfunction Operations(props) {\n    const { classes, parentClasses } = props;\n    return (\n        <ApiContext.Consumer>\n            {({ api }) => (\n                <>\n                    <div className={parentClasses.titleWrapper}>\n                        <Typography variant='h5' component='h3' className={parentClasses.title}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.operation'\n                                defaultMessage='Operations'\n                            />\n                        </Typography>\n                    </div>\n                    <div>\n                        <div className={classes.contentWrapper}>\n                            <Table style={{ padding: 20 }}>\n                                {api.operations\n                            && api.operations.length !== 0\n                            && api.operations.map((item) => (\n                                <TableRow style={{ borderStyle: 'hidden' }}>\n                                    <TableCell style={{ padding: 8 }}>\n                                        <Typography className={parentClasses.heading} component='p' variant='body1'>\n                                            {item.target}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell style={{ padding: 8 }}>\n                                        <RenderMethod method={item.verb} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                            </Table>\n                        </div>\n                        <Box py={2}>\n                            <Link to={'/apis/' + api.id + '/operations'} data-testid='show-more-navigate-to-operation'>\n                                <Typography\n                                    className={classes.subHeading}\n                                    color='primary'\n                                    display='inline'\n                                    variant='caption'\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Operations.ShowMore'\n                                        defaultMessage='Show More'\n                                    />\n                                    <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                                </Typography>\n                            </Link>\n                        </Box>\n                    </div>\n                </>\n            )}\n        </ApiContext.Consumer>\n    );\n}\n\nOperations.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(Operations);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Render method base.\n * @param {*} props\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    const methodLower = method.toLowerCase();\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[methodLower] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[methodLower]);\n    }\n    return (\n        <Chip\n            label={method.toUpperCase()}\n            style={{ backgroundColor: chipColor, color: chipTextColor, height: 20 }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'left',\n        marginBottom: 10,\n        padding: 5,\n    },\n    heading: {\n        marginRight: 20,\n        paddingBottom: 10,\n    },\n    resourceRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginLeft: 10,\n    },\n};\n\n/**\n * Component to show api product resources in overview tab\n */\nclass ProductResources extends React.PureComponent {\n    /**\n     * @inheritDoc\n     */\n    render() {\n        const { classes, parentClasses, api } = this.props;\n        const apiResources = api.apis;\n        return (\n            <>\n                <div className={parentClasses.titleWrapper} style={{ margin: '20px 0 0' }}>\n                    <Typography variant='h5' component='h3' className={parentClasses.title}>\n                        <FormattedMessage\n                            id='Apis.Details.Overview.ProductResources.resources'\n                            defaultMessage='Resources'\n                        />\n                    </Typography>\n                </div>\n                <div className={classes.root}>\n                    <div className={classes.contentWrapper}>\n                        {Object.keys(apiResources).map((key) => {\n                            const resource = apiResources[key];\n                            return (\n                                <div className={classes.root}>\n                                    <Typography className={classes.heading} variant='body1'>\n                                        {resource.name + ' : ' + resource.version}\n                                    </Typography>\n                                    {Object.keys(resource.operations).map((innerKey) => {\n                                        const operation = (resource.operations)[innerKey];\n                                        return (\n                                            <div className={classes.resourceRow}>\n                                                <Typography className={classes.heading} variant='body1'>\n                                                    {operation.target}\n                                                </Typography>\n                                                <RenderMethod method={operation.verb} />\n\n                                            </div>\n                                        );\n                                    })}\n\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\nProductResources.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(ProductResources);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Box from '@material-ui/core/Box';\nimport API from 'AppData/api';\nimport { capitalizeFirstLetter, upperCaseString, lowerCaseString } from 'AppData/stringFormatter';\nimport APIContext from '../components/ApiContext';\nimport Policies from './Policies';\n\nconst HUMAN_READABLE_SCHEMES = {\n    oauth2: 'OAuth2',\n    basic_auth: 'Basic Auth',\n    mutualssl: 'Mutual TLS',\n    api_key: 'API Key',\n};\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Configuration(props) {\n    const { parentClasses } = props;\n    const { api } = useContext(APIContext);\n\n    return (\n        <>\n            <div>\n                <Typography variant='h5' component='h3' className={parentClasses.title}>\n                    <FormattedMessage id='Apis.Details.NewOverview.MetaData.config' defaultMessage='Configuration' />\n                </Typography>\n            </div>\n            <Box p={1}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Transports */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.transports'\n                                defaultMessage='Transports'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.transport.tooltip'\n                                            defaultMessage={\n                                                'HTTP is less secure than HTTPS and '\n                                                + 'makes your API vulnerable to security threats.'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.transport && api.transport.length !== 0 && (\n                                <>\n                                    {api.transport.map((item, index) => (\n                                        <span>\n                                            {upperCaseString(item)}\n                                            {api.transport.length !== index + 1 && ', '}\n                                        </span>\n                                    ))}\n                                </>\n                            )}\n                            {!api.transport && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.transports.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* API Security */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.securityScheme'\n                                defaultMessage='API Security'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.securityScheme.tooltip'\n                                            defaultMessage='OAuth2 is used as the default security schema.'\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.securityScheme && api.securityScheme.length !== 0 && (\n                                <>\n                                    {api.securityScheme\n                                        .filter((item) => !item.includes('mandatory'))\n                                        .map((filteredItem) => HUMAN_READABLE_SCHEMES[filteredItem])\n                                        .join(' , ')}\n                                </>\n                            )}\n                            {!api.securityScheme && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.securityScheme.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Access Control */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.access.control'\n                                defaultMessage='Access Control'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.access.control.all.tooltip'\n                                            defaultMessage={\n                                                'All : The API is viewable, '\n                                                + 'modifiable by all the publishers and creators.'\n                                            }\n                                        />\n                                        <br />\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.access.control.tooltip'\n                                            defaultMessage={\n                                                'Restricted by roles : The API can be viewable and'\n                                                + ' modifiable by only specific publishers and creators '\n                                                + 'with the roles that you specify'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.accessControl && (\n                                <>\n                                    {capitalizeFirstLetter(lowerCaseString(api.accessControl))}\n                                </>\n                            )}\n                            {api.accessControl === 'RESTRICTED' && ' ( Visible to '}\n                            {api.accessControl === 'RESTRICTED' && api.accessControlRoles.join()}\n                            {api.accessControl === 'RESTRICTED' && ' ) '}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* workflowStatus */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.workflow.status'\n                                defaultMessage='Workflow Status'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.workflowStatus && <>{api.workflowStatus}</>}\n                            {!api.workflowStatus && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.workflowStatus.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Visibility */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.visibility.store'\n                                defaultMessage='Visibility on Developer Portal'\n                            />\n                            <Tooltip\n                                placement='top'\n                                interactive\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.visibility.store.all.tooltip'\n                                            defaultMessage={\n                                                'Public: The API is accessible to everyone and can be advertised '\n                                                + 'in multiple developer portals - a central developer portal '\n                                                + 'and/or non-WSO2 developer portals.'\n                                            }\n                                        />\n                                        <br />\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.visibility.store.res.tooltip'\n                                            defaultMessage={\n                                                'Restricted by roles: The API is visible only to '\n                                                + 'specific user roles in the tenant Developer Portal that you specify.'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {(api.visibility && api.visibility === 'PRIVATE')\n                                ? (\n                                    <>\n                                        Visible to my domain\n                                    </>\n                                )\n                                : (\n                                    <>\n                                        {capitalizeFirstLetter(lowerCaseString(api.visibility))}\n                                    </>\n                                )}\n                            {api.visibility === 'RESTRICTED' && ' ( Visible to '}\n                            {api.visibility === 'RESTRICTED' && api.visibleRoles.join()}\n                            {api.visibility === 'RESTRICTED' && ' ) '}\n                        </Typography>\n                    </Grid>\n                    <Policies parentClasses={parentClasses} />\n                    {api.apiType === API.CONSTS.APIProduct ? null : (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.tags'\n                                        defaultMessage='Tags'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                {api.tags\n                                    && api.tags.map((tag) => (\n                                        <Chip\n                                            key={tag}\n                                            label={tag}\n                                            style={{\n                                                'font-size': 13,\n                                                height: 20,\n                                                marginRight: 5,\n                                            }}\n                                        />\n                                    ))}\n                                {api.tags.length === 0 && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.tags.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                            </Grid>\n                        </>\n                    )}\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nConfiguration.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n};\n\nexport default Configuration;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Policies(props) {\n    const { parentClasses, api } = props;\n    return (\n        <>\n            <Grid item xs={12} md={6} lg={4}>\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Policies.business.plans'\n                        defaultMessage='Business Plans:'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                {/* Throttling Policies */}\n                <Typography component='p' variant='body1'>\n                    {api.policies\n                    && api.policies.length !== 0\n                    && api.policies.map((item, index) => (\n                        <span>\n                            {item}\n                            {api.policies.length !== index + 1 && ', '}\n                            {' '}\n                        </span>\n                    ))}\n                </Typography>\n            </Grid>\n        </>\n    );\n}\n\nPolicies.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Policies);\n","import React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport ApiContext, { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport grey from '@material-ui/core/colors/grey';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AuthManager from 'AppData/AuthManager';\nimport Typography from '@material-ui/core/Typography';\nimport LinkIcon from '@material-ui/icons/Link';\n\nconst ColorlibConnector = withStyles((theme) => {\n    const completedColor = theme.custom.apis.overview.stepper.completed || theme.palette.success.main;\n    const activeColor = theme.custom.apis.overview.stepper.active || theme.palette.info.main;\n    return {\n        alternativeLabel: {\n            top: 22,\n        },\n        active: {\n            '& $line': {\n                backgroundImage:\n                    `linear-gradient(to left, ${activeColor} 50%, ${completedColor} 50%)`,\n            },\n        },\n        completed: {\n            '& $line': {\n                backgroundImage:\n                    `linear-gradient( ${completedColor}, ${completedColor})`,\n            },\n        },\n        line: {\n            height: 3,\n            border: 0,\n            backgroundColor: '#eaeaf0',\n            borderRadius: 1,\n        },\n    };\n})(StepConnector);\n\nconst useColorlibStepIconStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: '#ccc',\n        zIndex: 1,\n        color: '#fff',\n        width: 56,\n        height: 56,\n        display: 'flex',\n        borderRadius: '50%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border: '6px solid #E2E2E2',\n    },\n    active: {\n        backgroundColor: theme.custom.apis.overview.stepper.active || theme.palette.info.main,\n        border: '6px solid #E2E2E2',\n    },\n    completed: {\n        backgroundColor: theme.custom.apis.overview.stepper.completed || theme.palette.success.main,\n        border: '6px solid #E2E2E2',\n    },\n}));\n\n/**\n *\n * @param {*} props\n * @returns\n */\nfunction ColorlibStepIcon(props) {\n    const classes = useColorlibStepIconStyles();\n    const {\n        active, completed, forceComplete, icon: step,\n    } = props;\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active,\n                [classes.completed]: completed || forceComplete.includes(step),\n            })}\n        />\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    iconTrue: {\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        backgroundColor: theme.custom.apis.overview.stepper.completed || theme.palette.success.main,\n        zIndex: 1,\n        color: '#fff',\n        width: 15,\n        height: 15,\n        borderRadius: '50%',\n    },\n    iconFalse: {\n        color: '#fff',\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        backgroundColor: grey[500],\n        zIndex: 1,\n        width: 15,\n        height: 15,\n        borderRadius: '50%',\n    },\n    pageLinks: {\n        display: 'flex',\n    },\n    disabledLink: {\n        pointerEvents: 'none',\n        color: theme.palette.text.primary,\n    },\n    textLink: {\n        color: '#0060B6',\n        textDecoration: 'none',\n    },\n}));\n\n/**\n *\n * @returns\n */\nexport default function CustomizedStepper() {\n    const classes = useStyles();\n    const [api, updateAPI] = useAPI();\n    const [isUpdating, setUpdating] = useState(false);\n    const [deploymentsAvailable, setDeploymentsAvailable] = useState(false);\n    const isPrototypedAvailable = api.endpointConfig !== null\n    && api.endpointConfig.implementation_status === 'prototyped';\n    const isEndpointAvailable = api.endpointConfig !== null;\n    const isTierAvailable = api.policies.length !== 0;\n    const isPublished = api.lifeCycleStatus === 'PUBLISHED';\n    const { tenantList } = useContext(ApiContext);\n    const { settings, user } = useAppContext();\n    const userNameSplit = user.name.split('@');\n    const tenantDomain = userNameSplit[userNameSplit.length - 1];\n    let devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview`;\n    if (tenantList && tenantList.length > 0) {\n        devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview?tenant=${tenantDomain}`;\n    }\n    const steps = (api.isWebSocket() || api.isAPIProduct() || api.isGraphql() || api.isAsyncAPI())\n        ? ['Develop', 'Deploy', 'Publish'] : ['Develop', 'Deploy', 'Test', 'Publish'];\n    const forceComplete = [];\n    if (isPublished) {\n        forceComplete.push(steps.indexOf('Publish') + 1);\n    }\n    let activeStep = 0;\n    if (api && (api.type === 'WEBSUB' || isEndpointAvailable) && isTierAvailable && !deploymentsAvailable) {\n        activeStep = 1;\n    } else if ((api && !isEndpointAvailable && api.type !== 'WEBSUB') || (api && !isTierAvailable)) {\n        activeStep = 0;\n    } else if (api && (isEndpointAvailable || api.type === 'WEBSUB') && isTierAvailable\n        && deploymentsAvailable && (!isPublished && api.lifeCycleStatus !== 'PROTOTYPED')) {\n        activeStep = 3;\n    } else if ((isPublished || api.lifeCycleStatus === 'PROTOTYPED') && api\n        && (isEndpointAvailable || api.type === 'WEBSUB' || isPrototypedAvailable)\n        && isTierAvailable && deploymentsAvailable) {\n        activeStep = 4;\n    }\n\n    useEffect(() => {\n        api.getRevisionsWithEnv(api.isRevision ? api.revisionedApiId : api.id).then((result) => {\n            setDeploymentsAvailable(result.body.count > 0);\n        });\n    }, []);\n\n    /**\n * Update the LifeCycle state of the API\n *\n */\n    function updateLCStateOfAPI(apiId, state) {\n        setUpdating(true);\n        const promisedUpdate = api.updateLcState(apiId, state);\n        promisedUpdate\n            .then(() => {\n                updateAPI()\n                    .then()\n                    .catch((error) => {\n                        if (error.response) {\n                            Alert.error(error.response.body.description);\n                        } else {\n                            Alert.error('Something went wrong while updating the API');\n                        }\n                        console.error(error);\n                    });\n                Alert.info('Lifecycle state updated successfully');\n            })\n            .finally(() => setUpdating(false))\n            .catch((errorResponse) => {\n                console.log(errorResponse);\n                Alert.error(JSON.stringify(errorResponse.message));\n            });\n    }\n\n    /**\n     * This function renders the final lifecycle state\n     * @param {*} state\n     */\n    function finalLifecycleState(state) {\n        switch (state) {\n            case 'PUBLISHED':\n                return (\n                    <>\n                        <Grid\n                            container\n                            direction='row'\n                            alignItems='center'\n                            justify='center'\n                        >\n                            <Grid item>\n                                <CheckIcon className={classes.iconTrue} />\n                            </Grid>\n                            <Box ml={1}>\n                                <Grid item>\n                                    <Typography variant='h7'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Overview.CustomizedStepper.publish'\n                                            defaultMessage=' Published'\n                                        />\n                                        <Box display='inline' pl={0.4} color='text.secondary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.CustomizedStepper.publish.current.api'\n                                                defaultMessage=' (Current API)'\n                                            />\n                                        </Box>\n                                    </Typography>\n                                </Grid>\n                            </Box>\n                        </Grid>\n                        <Box mt={1} ml={2}>\n                            <a\n                                target='_blank'\n                                className={classes.textLink}\n                                rel='noopener noreferrer'\n                                href={devportalUrl}\n                            >\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='center'\n                                    justify='center'\n                                >\n                                    <Grid item>\n                                        <Typography variant='h7' display='inline'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.CustomizedStepper.view.devportal'\n                                                defaultMessage='View in devportal'\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Box ml={1}>\n                                            <LaunchIcon\n                                                color='primary'\n                                                fontSize='small'\n                                            />\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </a>\n                        </Box>\n                    </>\n                );\n            case 'PROTOTYPED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.prototyped'\n                                defaultMessage='Prototyped'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'BLOCKED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.blocked'\n                                defaultMessage='Blocked'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'DEPRECATED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.deprecated'\n                                defaultMessage='Deprecated'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'RETIRED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.retired'\n                                defaultMessage='Retired'\n                            />\n                        </b>\n                    </Typography>\n                );\n            default:\n                return (\n                    <>\n                        {isPrototypedAvailable ? (\n                            <Button\n                                size='small'\n                                variant='contained'\n                                color='primary'\n                                onClick={() => updateLCStateOfAPI(api.id, 'Deploy as a Prototype')}\n                                disabled={api.workflowStatus === 'CREATED'\n                                    || AuthManager.isNotPublisher()\n                                    || !deploymentsAvailable}\n                            >\n                                Prototype\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        ) : (\n                            <Button\n                                size='small'\n                                variant='contained'\n                                color='primary'\n                                data-testid='publish-state-button'\n                                onClick={() => updateLCStateOfAPI(api.id, 'Publish')}\n                                disabled={((api.type !== 'WEBSUB' && !isEndpointAvailable) || !isTierAvailable)\n                                    || !deploymentsAvailable\n                                    || api.isRevision || AuthManager.isNotPublisher()\n                                    || api.workflowStatus === 'CREATED'}\n                            >\n                                Publish\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        )}\n                        {api.workflowStatus === 'CREATED' && (\n                            <Typography variant='caption' color='error'>\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.CustomizedStepper.pending'\n                                    defaultMessage='The request is pending'\n                                />\n                            </Typography>\n                        )}\n                    </>\n                );\n        }\n    }\n    const isTestLinkDisabled = api.lifeCycleStatus === 'RETIERD' || !deploymentsAvailable\n    || !isEndpointAvailable\n    || !isTierAvailable\n    || (api.type !== 'HTTP' && api.type !== 'SOAP');\n    const isDeployLinkDisabled = (((api.type !== 'WEBSUB' && !isEndpointAvailable))\n    || !isTierAvailable\n    || api.workflowStatus === 'CREATED');\n    return (\n        <div id='itest-overview-api-flow' className={classes.root}>\n            <Stepper alternativeLabel activeStep={activeStep} connector={<ColorlibConnector />}>\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={(props) => (\n                            <ColorlibStepIcon\n                                {...props}\n                                forceComplete={forceComplete}\n                            />\n                        )}\n                        >\n                            {label === 'Develop' && (\n                                <div>\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        justify='center'\n                                    >\n                                        <Grid item>\n                                            {api ? (\n                                                <CheckIcon className={classes.iconTrue} />\n                                            ) : (\n                                                <CloseIcon className={classes.iconFalse} />\n                                            )}\n                                        </Grid>\n                                        <Box ml={1} mb={1}>\n                                            <Grid>\n                                                <Typography variant='h7'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Overview.CustomizedStepper.Develop'\n                                                        defaultMessage=' Develop'\n                                                    />\n                                                </Typography>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                    {api.type !== 'WEBSUB' && (\n                                        <Box ml={3}>\n                                            <Grid\n                                                container\n                                                direction='row'\n                                                justify='center'\n                                                style={{ marginLeft: '2px' }}\n                                            >\n                                                <Grid item>\n                                                    {isEndpointAvailable ? (\n                                                        <CheckIcon className={classes.iconTrue} />\n                                                    ) : (\n                                                        <CloseIcon className={classes.iconFalse} />\n                                                    )}\n                                                </Grid>\n                                                <Box ml={1} mb={1}>\n                                                    <Grid item>\n                                                        <Link\n                                                            underline='none'\n                                                            className={classes.pageLinks}\n                                                            component={RouterLink}\n                                                            to={'/apis/' + api.id + '/endpoints'}\n                                                        >\n                                                            <Typography variant='h7'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Overview.\n                                                                    CustomizedStepper.Endpoint'\n                                                                    defaultMessage=' Endpoint'\n                                                                />\n                                                            </Typography>\n                                                            <Box ml={1}>\n                                                                <LinkIcon\n                                                                    color='primary'\n                                                                    fontSize='small'\n                                                                />\n                                                            </Box>\n                                                        </Link>\n                                                    </Grid>\n                                                </Box>\n                                            </Grid>\n                                        </Box>\n                                    )}\n                                    <Box ml={6}>\n                                        <Grid\n                                            container\n                                            direction='row'\n                                            justify='center'\n                                            style={{ marginLeft: '2px' }}\n                                        >\n                                            <Grid item>\n                                                {isTierAvailable ? (\n                                                    <CheckIcon className={classes.iconTrue} />\n                                                ) : (\n                                                    <CloseIcon className={classes.iconFalse} />\n                                                )}\n                                            </Grid>\n                                            <Box ml={1}>\n                                                <Grid item>\n                                                    <Link\n                                                        underline='none'\n                                                        component={RouterLink}\n                                                        className={classes.pageLinks}\n                                                        to={'/apis/' + api.id + '/subscriptions'}\n                                                    >\n                                                        <Typography variant='h7'>\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Overview.CustomizedStepper.Tier'\n                                                                defaultMessage=' Business Plan'\n                                                            />\n                                                        </Typography>\n                                                        <Box ml={1}>\n                                                            <LinkIcon\n                                                                color='primary'\n                                                                fontSize='small'\n                                                            />\n                                                        </Box>\n                                                    </Link>\n                                                </Grid>\n                                            </Box>\n                                        </Grid>\n                                    </Box>\n                                </div>\n                            )}\n                            {label === 'Deploy' && (\n                                <Tooltip\n                                    title={deploymentsAvailable ? '' : 'Deploy a revision of this API to the Gateway'}\n                                    placement='bottom'\n                                >\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='center'\n                                        justify='center'\n                                    >\n                                        <Box mb={1}>\n                                            <Grid item>\n                                                {deploymentsAvailable ? (\n                                                    <CheckIcon className={classes.iconTrue} />\n                                                ) : (\n                                                    <CloseIcon className={classes.iconFalse} />\n                                                )}\n                                            </Grid>\n                                        </Box>\n                                        <Box ml={1} mb={1}>\n                                            <Grid item>\n                                                <Link\n                                                    underline='none'\n                                                    className={clsx(classes.pageLinks, {\n                                                        [classes.disabledLink]: isDeployLinkDisabled,\n                                                    })}\n                                                    component={RouterLink}\n                                                    to={'/apis/' + api.id + '/deployments'}\n                                                >\n                                                    <Typography variant='h7'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Overview.CustomizedStepper.Deploy'\n                                                            defaultMessage=' Deploy'\n                                                        />\n                                                    </Typography>\n                                                    <Box ml={1}>\n                                                        <LinkIcon\n                                                            color='default'\n                                                            fontSize='small'\n                                                        />\n                                                    </Box>\n                                                </Link>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                </Tooltip>\n                            )}\n                            {label === 'Test' && (\n                                <Tooltip\n                                    title={api.lifeCycleStatus === 'RETIERD' ? 'Cannot use test option while API'\n                                        + ' is in retired state' : ''}\n                                    placement='bottom'\n                                >\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='center'\n                                        justify='center'\n                                    >\n                                        <Box ml={1} mb={1}>\n                                            <Grid item>\n                                                <Link\n                                                    className={clsx(classes.pageLinks, {\n                                                        [classes.disabledLink]: isTestLinkDisabled,\n                                                    })}\n                                                    underline='none'\n                                                    component={RouterLink}\n                                                    to={'/apis/' + api.id + '/test-console'}\n                                                >\n                                                    <Typography variant='h7'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Overview.CustomizedStepper.Test'\n                                                            defaultMessage=' Test'\n                                                        />\n                                                    </Typography>\n                                                    <Box ml={1}>\n                                                        <LinkIcon\n                                                            color='default'\n                                                            fontSize='small'\n                                                        />\n                                                    </Box>\n                                                </Link>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                </Tooltip>\n                            )}\n                            {label === 'Publish' && (\n                                <>\n                                    {finalLifecycleState(api.lifeCycleStatus)}\n                                </>\n                            )}\n                        </StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    );\n}\n\nCustomizedStepper.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport API from 'AppData/api';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport BusinessInformation from './BusinessInformation';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction MetaData(props) {\n    const { parentClasses } = props;\n    const [api] = useAPI();\n\n    return (\n        <>\n            <Typography variant='h5' component='h3' className={parentClasses.title}>\n                <FormattedMessage\n                    id='Apis.Details.NewOverview.MetaData.metadata'\n                    defaultMessage='Metadata'\n                />\n            </Typography>\n            <Box p={1}>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} md={6} lg={4}>\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.description'\n                                defaultMessage='Description'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.description\n                            && (\n                                <ReactMarkdown source={capitalizeFirstLetter(api.description)} />\n                            )}\n                        </Typography>\n                        <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                            {!api.description\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.description.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Provider */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.provider'\n                                defaultMessage='Provider'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8} style={{ 'word-break': 'break-all' }}>\n                        <Typography component='p' variant='body1'>\n                            {api.provider && <>{api.provider}</>}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.context:'\n                                defaultMessage='Context:'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8} style={{ 'word-break': 'break-all' }}>\n                        <Typography component='p' variant='body1'>\n                            {api.context && <>{api.context}</>}\n                        </Typography>\n                    </Grid>\n                    {/* Version */}\n                    {api.apiType === API.CONSTS.API && (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.version'\n                                        defaultMessage='Version'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.version && <>{api.version}</>}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                    {/* Type */}\n                    {api.apiType === API.CONSTS.APIProduct ? null : (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <>\n                                    <Typography\n                                        component='p'\n                                        variant='subtitle2'\n                                        className={parentClasses.subtitle}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.type:'\n                                            defaultMessage='Type:'\n                                        />\n                                    </Typography>\n                                </>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.type && <>{api.type === 'WS' ? 'WebSocket' : api.type}</>}\n                                    {!api.type\n                                        && (\n                                            <>\n                                                <Typography\n                                                    component='p'\n                                                    variant='body1'\n                                                    className={parentClasses.notConfigured}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewOverview.MetaData.type.not.set'\n                                                        defaultMessage='-'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        )}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Created Time */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.created.time'\n                                defaultMessage='Created Time'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.createdTime\n                            && (\n                                <>\n                                    <Tooltip\n                                        title={moment(api.createdTime).calendar()}\n                                        aria-label='add'\n                                        interactive\n                                        placement='top-start'\n                                        tabIndex='-1'\n                                    >\n                                        <Typography variant='body1' display='block'>\n                                            {capitalizeFirstLetter(moment(api.createdTime).fromNow())}\n                                        </Typography>\n                                    </Tooltip>\n                                </>\n                            )}\n                            {!api.createdTime\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.createdTime.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Last Updated Time */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.last.updated.time'\n                                defaultMessage='Last Updated Time'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.lastUpdatedTime\n                            && (\n                                <>\n                                    <Tooltip\n                                        title={moment(api.lastUpdatedTime).calendar()}\n                                        aria-label='add'\n                                        interactive\n                                        placement='top-start'\n                                        tabIndex='-1'\n                                    >\n                                        <Typography variant='body1' display='block'>\n                                            {capitalizeFirstLetter(moment(api.lastUpdatedTime).fromNow())}\n                                        </Typography>\n                                    </Tooltip>\n                                </>\n                            )}\n                            {!api.lastUpdatedTime\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.lastUpdatedTime.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <BusinessInformation parentClasses={parentClasses} />\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nMetaData.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n};\n\nexport default MetaData;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction BusinessInformation(props) {\n    const { parentClasses, api } = props;\n    return (\n        <>\n            <Grid item xs={12} md={6} lg={4}>\n                {/* Business Owner */}\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.BusinessInformation.business.owner'\n                        defaultMessage='Business Owner'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                <Typography component='p' variant='body1'>\n                    {api.businessInformation.businessOwner && (\n                        <>{api.businessInformation.businessOwner}</>\n                    )}\n                </Typography>\n                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                    {!api.businessInformation.businessOwner && (\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.BusinessInformation.business.owner.not.set'\n                                defaultMessage='-'\n                            />\n                        </>\n                    )}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={4}>\n                {/* Technical Owner */}\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.BusinessInformation.technical.owner'\n                        defaultMessage='Technical Owner'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                <Typography component='p' variant='body1'>\n                    {api.businessInformation.technicalOwner\n                        && <>{api.businessInformation.technicalOwner}</>}\n                </Typography>\n                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                    {!api.businessInformation.technicalOwner && (\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.BusinessInformation.technical.owner.not.set'\n                                defaultMessage='-'\n                            />\n                        </>\n                    )}\n                </Typography>\n            </Grid>\n        </>\n    );\n}\n\nBusinessInformation.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(BusinessInformation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst showEndpoint = (api, type) => {\n    if (api.endpointConfig) {\n        if (type === 'prod') {\n            return api.getProductionEndpoint();\n        }\n        if (type === 'sand') {\n            return api.getSandboxEndpoint();\n        }\n    }\n    return null;\n};\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Endpoints(props) {\n    const { parentClasses, api } = props;\n    const isPrototypedAvailable = api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped';\n\n    return (\n        <>\n            <div>\n                <Typography variant='h5' component='h3' className={parentClasses.title}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Endpoints.endpoints'\n                        defaultMessage='Endpoints'\n                    />\n                </Typography>\n            </div>\n            <Box p={1}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Production Endpoint (TODO) fix the endpoint\n                                            info when it's available with the api object */}\n                        { !isPrototypedAvailable ? (\n                            <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Endpoints.production.endpoint'\n                                    defaultMessage='Production Endpoint'\n                                />\n                            </Typography>\n                        )\n                            : (\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.prototype.endpoint'\n                                        defaultMessage='Prototype Endpoint'\n                                    />\n                                </Typography>\n                            )}\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Tooltip\n                            placement='top'\n                            classes={{\n                                tooltip: parentClasses.htmlTooltip,\n                            }}\n                            title={\n                                showEndpoint(api, 'prod')\n                                && <>{showEndpoint(api, 'prod')}</>\n                            }\n                        >\n                            <Typography component='p' variant='body1' className={parentClasses.url}>\n                                {showEndpoint(api, 'prod')\n                                && <>{showEndpoint(api, 'prod')}</>}\n                            </Typography>\n                        </Tooltip>\n                        <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                            {!showEndpoint(api, 'prod') && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.not.set'\n                                        defaultMessage='-'\n                                    />\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    {!isPrototypedAvailable && (\n                        <Grid item xs={12} md={6} lg={4}>\n                            {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                                it's available with the api object */}\n                            <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Endpoints.sandbox.endpoint'\n                                    defaultMessage='Sandbox Endpoint'\n                                />\n                            </Typography>\n                        </Grid>\n                    )}\n\n                    {!isPrototypedAvailable && (\n                        <Grid item xs={12} md={6} lg={8}>\n                            <Tooltip\n                                placement='top'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={\n                                    showEndpoint(api, 'sand')\n                                    && <>{showEndpoint(api, 'sand')}</>\n                                }\n                            >\n                                <Typography component='p' variant='body1' className={parentClasses.url}>\n                                    {showEndpoint(api, 'sand')\n                                    && <>{showEndpoint(api, 'sand')}</>}\n                                </Typography>\n                            </Tooltip>\n                            <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                {!showEndpoint(api, 'sand') && (\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.Endpoints.sandbox.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    )}\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                            it's available with the api object */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Endpoints.endpoint.security'\n                                defaultMessage='Endpoint Security'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.endpointSecurity && <>{api.endpointSecurity.type}</>}\n                        </Typography>\n                        <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                            {!api.endpointSecurity\n                            && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.security.not.set'\n                                        defaultMessage='-'\n                                    />\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nEndpoints.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Endpoints);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport Typography from '@material-ui/core/Typography';\nimport Api from 'AppData/api';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n    },\n    contentWrapper: {\n        maxHeight: '125px',\n        overflowY: 'auto',\n    },\n};\n\nfunction VerbElement(props) {\n    const {\n        verb,\n    } = props;\n\n    const useMenuStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb.toLowerCase()];\n        return {\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n        };\n    });\n    const classes = useMenuStyles();\n    return (\n        <Button disableFocusRipple variant='outlined' className={classes.customButton} size='small'>\n            {verb.toUpperCase()}\n        </Button>\n    );\n}\n\n/**\n * Topics component\n */\nclass Topics extends React.Component {\n    /**\n     *\n     * @param {*} props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            topics: [],\n        };\n        this.restApi = new Api();\n    }\n\n    /**\n     *\n     */\n    componentDidMount() {\n        this.restApi.getAsyncAPIDefinition(this.props.api.id)\n            .then((response) => {\n                const topics = [];\n                Object.entries(response.body.channels).forEach(([name, topic]) => {\n                    if (topic.subscribe) {\n                        topics.push({ name, type: 'subscribe' });\n                    }\n\n                    if (topic.publish) {\n                        topics.push({ name, type: 'publish' });\n                    }\n                });\n                this.setState({ topics });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n    /**\n     *\n     */\n    render() {\n        if (this.state.notFound) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.resource.not.found'\n                        defaultMessage='resource not found...'\n                    />\n                </div>\n            );\n        }\n        const { classes, parentClasses, api } = this.props;\n\n        return (\n            <>\n                <div className={parentClasses.titleWrapper}>\n                    <Typography variant='h5' component='h3' className={parentClasses.title}>\n                        <FormattedMessage\n                            id='Apis.Details.NewOverview.async.api.topics'\n                            defaultMessage='Topics'\n                        />\n                    </Typography>\n                </div>\n                <Box p={1}>\n                    <div>\n                        {\n                            this.state.topics.map((topic) => {\n                                return (\n                                    <div className={classes.root}>\n                                        <Grid container spacing={1}>\n                                            <Grid item xs={12}>\n                                                <Grid container direction='row' spacing={1}>\n                                                    <Grid item>\n                                                        <VerbElement verb={topic.type.substr(0, 3)} />\n                                                    </Grid>\n                                                    <Grid item>\n                                                        <Typography className={classes.heading} variant='body1'>\n                                                            {topic.name}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </div>\n                                );\n                            })\n                        }\n                    </div>\n                    <Link to={'/apis/' + api.id + '/topics'}>\n                        <Typography\n                            className={classes.subHeading}\n                            color='primary'\n                            display='inline'\n                            variant='caption'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.ShowMore'\n                                defaultMessage='Show More'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                </Box>\n            </>\n        );\n    }\n}\nTopics.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(Topics);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer,\n    useContext,\n    useState,\n    useMemo,\n    useEffect,\n} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CONSTS from 'AppData/Constants';\nimport Alert from 'AppComponents/Shared/Alert';\n\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport ThumbnailView from 'AppComponents/Apis/Listing/components/ImageGenerator/ThumbnailView';\nimport { isRestricted } from 'AppData/AuthManager';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport DefaultVersion from './components/DefaultVersion';\nimport DescriptionEditor from './components/DescriptionEditor';\nimport AccessControl from './components/AccessControl';\nimport StoreVisibility from './components/StoreVisibility';\nimport Tags from './components/Tags';\nimport Social from './components/Social';\nimport APICategories from './components/APICategories';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(0),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 90,\n        right: -43,\n    },\n    arrowBackIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 30,\n        right: -71,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    btnSpacing: {\n        marginRight: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    return {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        transport: [...api.transport],\n        wsdlUrl: api.wsdlUrl,\n        securityScheme: [...api.securityScheme],\n        categories: [...api.categories],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n        additionalProperties: [...api.additionalProperties],\n    };\n}\n\n/**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\nfunction configReducer(state, configAction) {\n    const { action, value } = configAction;\n    const nextState = copyAPIConfig(state);\n    switch (action) {\n        case 'description':\n        case 'isDefaultVersion':\n        case 'authorizationHeader':\n        case 'responseCachingEnabled':\n        case 'cacheTimeout':\n        case 'enableSchemaValidation':\n        case 'visibility':\n        case 'maxTps':\n        case 'categories':\n        case 'tags':\n            nextState[action] = value;\n            return nextState;\n        case 'accessControl':\n            nextState[action] = value;\n            if (value === 'NONE') {\n                nextState.accessControlRoles = [];\n            }\n            return nextState;\n        case 'accessControlRoles':\n            return { ...copyAPIConfig(state), [action]: value };\n        case 'visibleRoles':\n            return { ...copyAPIConfig(state), [action]: value };\n        case 'github_repo':\n        case 'slack_url': {\n            const targetProperty = nextState.additionalProperties.find((property) => property.name === action);\n            const updatedProperty = {\n                name: action,\n                value,\n                display: true,\n            };\n            if (targetProperty) {\n                nextState.additionalProperties = [\n                    ...nextState.additionalProperties.filter((property) => property.name !== action), updatedProperty];\n            } else {\n                nextState.additionalProperties.push(updatedProperty);\n            }\n            return nextState;\n        }\n        default:\n            return state;\n    }\n}\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DesignConfigurations() {\n    const { api, updateAPI } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n    const [descriptionType, setDescriptionType] = useState('');\n    const [overview, setOverview] = useState('');\n    const [overviewDocument, setOverviewDocument] = useState(null);\n    const [slackURLProperty, githubURLProperty] = useMemo(() => [\n        apiConfig.additionalProperties.find((prop) => prop.name === 'slack_url'),\n        apiConfig.additionalProperties.find((prop) => prop.name === 'github_repo'),\n    ],\n    [apiConfig.additionalProperties]);\n    const invalidTagsExist = apiConfig.tags.find((tag) => {\n        return (/([~!@#;%^&*+=|\\\\<>\"'/,])/.test(tag));\n    });\n    const handleChange = (event) => {\n        const type = event.target.value;\n        if (type === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            if (apiConfig.description === null) {\n                configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: overview });\n            }\n        } else if (type === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            if (overviewDocument === null) {\n                setOverview(apiConfig.description);\n            }\n        }\n        setDescriptionType(type);\n    };\n    const updateContent = (content) => {\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: content });\n        } else if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: null });\n            setOverview(content);\n        }\n    };\n    const loadContentForDoc = (documentId) => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.getInlineContentOfDocument(api.id, documentId);\n        docPromise\n            .then((doc) => {\n                let { text } = doc;\n                Object.keys(api).forEach((fieldName) => {\n                    const regex = new RegExp('___' + fieldName + '___', 'g');\n                    text = text.replace(regex, api[fieldName]);\n                });\n                setOverview(text);\n            });\n    };\n    const addDocument = async () => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = await restApi.addDocument(api.id, {\n            name: 'overview',\n            type: 'OTHER',\n            summary: 'overview',\n            sourceType: 'MARKDOWN',\n            visibility: 'API_LEVEL',\n            sourceUrl: '',\n            otherTypeName: CONSTS.DESCRIPTION_TYPES.OVERVIEW,\n            inlineContent: '',\n        }).then((response) => {\n            return response.body;\n        }).catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n                console.log(error);\n            }\n        });\n        return docPromise;\n    };\n\n    const addDocumentContent = (document) => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.addInlineContentToDocument(api.id, document.documentId, 'MARKDOWN', overview);\n        docPromise\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    console.log(error);\n                }\n            });\n    };\n\n    const deleteOverviewDocument = () => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.deleteDocument(api.id, overviewDocument.documentId);\n        docPromise\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    };\n\n    useEffect(() => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const promisedApi = restApi.getDocuments(api.id);\n        promisedApi\n            .then((response) => {\n                const overviewDoc = response.body.list.filter((item) => item.otherTypeName === '_overview');\n                if (overviewDoc.length > 0) {\n                    const doc = overviewDoc[0];\n                    setOverviewDocument(doc);\n                    loadContentForDoc(doc.documentId);\n                    setDescriptionType(CONSTS.DESCRIPTION_TYPES.OVERVIEW); // Only one doc we can render\n                } else {\n                    setDescriptionType(CONSTS.DESCRIPTION_TYPES.DESCRIPTION);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    Alert.error('Error occurred');\n                }\n            });\n    }, []);\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    async function handleSave() {\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            });\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            if (overviewDocument) {\n                deleteOverviewDocument();\n            }\n        }\n\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            let document = overviewDocument;\n            if (document === null) {\n                document = await addDocument();\n            }\n            addDocumentContent(document);\n        }\n        setIsUpdating(false);\n    }\n    const isDisabled = isUpdating || api.isRevision || invalidTagsExist\n    || isRestricted(['apim:api_create', 'apim:api_publish'], api)\n    || (apiConfig.visibility === 'RESTRICTED'\n        && apiConfig.visibleRoles.length === 0);\n    return (\n        <>\n            <Container maxWidth='md'>\n                <Grid container spacing={2}>\n                    <Grid item md={12}>\n                        <Typography id='itest-api-details-design-config-head' variant='h5'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.Design.topic.header'\n                                defaultMessage='Design Configurations'\n                            />\n                        </Typography>\n                        <Box color='text.secondary'>\n                            {api.apiType === API.CONSTS.APIProduct\n                                ? (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.Design.APIProduct.sub.heading'\n                                            defaultMessage='Configure basic API Product meta information'\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.Design.sub.heading'\n                                            defaultMessage='Configure basic API meta information'\n                                        />\n                                    </Typography>\n                                )}\n                        </Box>\n                    </Grid>\n                    <Grid item md={12}>\n                        <Paper elevation={0}>\n                            <div>\n                                <Box px={8} py={5}>\n                                    <Box py={1}>\n                                        <Grid container spacing={0}>\n                                            <Grid item xs={12} md={2} id='edit-api-thumbnail-btn'>\n                                                <ThumbnailView\n                                                    api={api}\n                                                    width={100}\n                                                    height={100}\n                                                    isEditable={!isRestricted(['apim:api_publish',\n                                                        'apim:api_create'], api)}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={10}>\n                                                <DescriptionEditor\n                                                    api={apiConfig}\n                                                    disabled={isDisabled}\n                                                    updateContent={updateContent}\n                                                    descriptionType={descriptionType}\n                                                    handleChange={handleChange}\n                                                    overview={overview}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Box>\n                                    <Box py={1}>\n                                        <AccessControl api={apiConfig} configDispatcher={configDispatcher} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <StoreVisibility api={apiConfig} configDispatcher={configDispatcher} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <Tags api={apiConfig} configDispatcher={configDispatcher} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <APICategories\n                                            api={apiConfig}\n                                            configDispatcher={configDispatcher}\n                                            categories={api.categories}\n                                        />\n                                    </Box>\n                                    <Box py={1}>\n                                        <Social\n                                            slackURL={slackURLProperty && slackURLProperty.value}\n                                            githubURL={githubURLProperty && githubURLProperty.value}\n                                            configDispatcher={configDispatcher}\n                                        />\n                                    </Box>\n                                    <Box py={1}>\n                                        {api.apiType !== API.CONSTS.APIProduct && (\n                                            <DefaultVersion api={apiConfig} configDispatcher={configDispatcher} />\n                                        )}\n                                    </Box>\n                                    <Box pt={2}>\n                                        <Button\n                                            disabled={isDisabled}\n                                            type='submit'\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.btnSpacing}\n                                            onClick={handleSave}\n                                            id='design-config-save-btn'\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.save'\n                                                defaultMessage='Save'\n                                            />\n                                            {isUpdating && <CircularProgress size={15} />}\n                                        </Button>\n                                        <Link to={'/apis/' + api.id + '/overview'}>\n                                            <Button>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.cancel'\n                                                    defaultMessage='Cancel'\n                                                />\n                                            </Button>\n                                        </Link>\n                                    </Box>\n                                    {isRestricted(['apim:api_create'], api) && (\n                                        <Box py={1}>\n                                            <Typography variant='body2' color='primary'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.update.not.allowed'\n                                                    defaultMessage={\n                                                        '* You are not authorized to update particular fields of'\n                                                        + ' the API due to insufficient permissions'\n                                                    }\n                                                />\n                                            </Typography>\n                                        </Box>\n                                    )}\n                                </Box>\n                            </div>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport Box from '@material-ui/core/Box';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultVersion(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    return (\n        <Grid container spacing={1} alignItems='flex-start' xs={11}>\n            <Grid item>\n                <Box mt={4}>\n                    <FormControl component='fieldset' style={{ display: 'flex' }}>\n                        <FormLabel component='legend'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.isdefault.label'\n                                defaultMessage='Make this the default version'\n                            />\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Make this the default version'\n                            name='defaultVersion'\n                            value={api.isDefaultVersion}\n                            onChange={({\n                                target: { value },\n                            }) => configDispatcher({\n                                action: 'isDefaultVersion', value: value === 'true',\n                            })}\n                            style={{ display: 'flow-root' }}\n                        >\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                value\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.isdefault.yes'\n                                        defaultMessage='Yes'\n                                    />\n                                )}\n                                id='default-version-yes'\n                            />\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                value={false}\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.isdefault.no'\n                                        defaultMessage='No'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Box>\n            </Grid>\n            <Grid item xs={1}>\n                <Box mt={3}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.defaultversion.tooltip'\n                                defaultMessage={\n                                    'Indicates if this is the default version of the API. If an '\n                                    + 'API is invoked without specifying a version, the API Gateway will '\n                                    + 'route the request to the default version of the API.'\n                                }\n                            />\n                        )}\n                        aria-label='add'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n}\n\nDefaultVersion.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, Suspense, lazy } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CONSTS from 'AppData/Constants';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"MDMonacoEditor\" */));\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"MDReactMarkdown\" */));\n\nconst useStyles = makeStyles(() => ({\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    editorHeader: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    markdownViewWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    appBar: {\n        position: 'relative',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n}));\n\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\n/**\n * DescriptionEditor for API Description / Overview\n * @param {*} props properties\n * @returns {*} DescriptionEditor component\n */\nexport default function DescriptionEditor(props) {\n    const classes = useStyles();\n    const {\n        api,\n        updateContent,\n        descriptionType,\n        overview,\n        handleChange,\n    } = props;\n    const [open, setOpen] = useState(false);\n    const [content, setContent] = useState(null);\n    const [apiFromContext] = useAPI();\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const toggleOpen = () => {\n        if (!open) {\n            if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n                setContent(api.description);\n            } else if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n                setContent(overview);\n            }\n        }\n        setOpen(!open);\n    };\n    const setNewContent = (newContent) => {\n        setContent(newContent);\n    };\n    const handleTextChange = (event) => {\n        const { value } = event.currentTarget;\n        setContent(value);\n    };\n    const modifyContent = () => {\n        setIsUpdating(true);\n        updateContent(content);\n        toggleOpen();\n        setIsUpdating(false);\n    };\n    const editorDidMount = (editor) => {\n        editor.focus();\n    };\n\n    return (\n        <>\n            <Button\n                variant='outlined'\n                color='primary'\n                disabled={api.isRevision || isRestricted(['apim:api_create'], apiFromContext)}\n                onClick={toggleOpen}\n            >\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.DescriptionEditor.edit.content.button'\n                    defaultMessage='Edit description'\n                />\n            </Button>\n            <Dialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <AppBar color='inherit' className={classes.appBar}>\n                    <Toolbar variant='dense'>\n                        <Grid\n                            container\n                            direction='row'\n                            justify='space-between'\n                            alignItems='center'\n                        >\n                            <Grid item xs={6}>\n                                <Box display='flex'>\n                                    <IconButton edge='start' color='inherit' onClick={toggleOpen} aria-label='close'>\n                                        <CloseIcon />\n                                    </IconButton>\n                                    <Box\n                                        display='flex'\n                                        alignItems='center'\n                                        mx={1}\n                                        fontFamily='fontFamily'\n                                        fontSize='h4.fontSize'\n                                        color='primary.main'\n                                    >\n                                        {api.name}\n                                    </Box>\n                                    <Typography variant='h5' className={classes.editorHeader}>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Configuration.components.DescriptionEditor'\n                                                + '.edit.description.of'}\n                                            defaultMessage='Description :'\n                                        />\n                                    </Typography>\n                                    <Box ml={2}>\n                                        <FormControl component='fieldset'>\n                                            <RadioGroup\n                                                row\n                                                aria-label='description-type'\n                                                value={descriptionType}\n                                                onChange={handleChange}\n                                            >\n                                                <FormControlLabel\n                                                    value={CONSTS.DESCRIPTION_TYPES.DESCRIPTION}\n                                                    control={<Radio />}\n                                                    label='Text'\n                                                />\n                                                <FormControlLabel\n                                                    value={CONSTS.DESCRIPTION_TYPES.OVERVIEW}\n                                                    control={<Radio />}\n                                                    label='Markdown'\n                                                />\n                                            </RadioGroup>\n                                        </FormControl>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    className={classes.button}\n                                    variant='contained'\n                                    disabled={isUpdating}\n                                    color='primary'\n                                    onClick={modifyContent}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.DescriptionEditor.update.cont.button'\n                                        defaultMessage='Update Content'\n                                    />\n                                    {isUpdating && <CircularProgress size={24} />}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Toolbar>\n                </AppBar>\n                <div className={classes.splitWrapper}>\n                    <Grid container spacing={7}>\n                        { descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION\n                            ? (\n                                <Grid item xs={12}>\n                                    <Box display='flex' m={2}>\n                                        <TextField\n                                            id='itest-description-textfield'\n                                            multiline\n                                            fullWidth\n                                            rows={4}\n                                            variant='outlined'\n                                            onChange={handleTextChange}\n                                            value={content}\n                                        />\n                                    </Box>\n                                </Grid>\n                            ) : (\n                                <>\n                                    <Grid item xs={6}>\n                                        <Suspense fallback={<CircularProgress />}>\n                                            <MonacoEditor\n                                                width='100%'\n                                                language='markdown'\n                                                theme='vs-dark'\n                                                value={content}\n                                                options={{ selectOnLineNumbers: true }}\n                                                onChange={setNewContent}\n                                                editorDidMount={editorDidMount}\n                                            />\n                                        </Suspense>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <div className={classes.markdownViewWrapper}>\n                                            <Suspense fallback={<CircularProgress />}>\n                                                <ReactMarkdown escapeHtml source={content} />\n                                            </Suspense>\n                                        </div>\n                                    </Grid>\n                                </>\n                            )}\n                    </Grid>\n                </div>\n            </Dialog>\n        </>\n    );\n}\n\nDescriptionEditor.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    updateContent: PropTypes.func.isRequired,\n    descriptionType: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * api.accessControl possible values are `NONE` and `RESTRICTED`\n * @export\n * @param {*} props\n * @returns\n */\nexport default function AccessControl(props) {\n    const [roleValidity, setRoleValidity] = useState(true);\n    const [userRoleValidity, setUserRoleValidity] = useState(true);\n    const { api, configDispatcher } = props;\n    const isNone = api.accessControl === 'NONE';\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n\n    const [invalidRoles, setInvalidRoles] = useState([]);\n    const [otherValidSystemRoles, setOtherValidSystemRoles] = useState([]);\n    useEffect(() => {\n        if (invalidRoles.length === 0) {\n            setRoleValidity(true);\n        }\n    }, [invalidRoles]);\n    useEffect(() => {\n        if (otherValidSystemRoles.length === api.accessControlRoles.length && otherValidSystemRoles.length !== 0\n            && (otherValidSystemRoles.every((val) => api.accessControlRoles.includes(val)))) {\n            setUserRoleValidity(false);\n        } else {\n            setUserRoleValidity(true);\n        }\n    }, [otherValidSystemRoles]);\n    const handleRoleAddition = (role) => {\n        const systemRolePromise = APIValidation.role.validate(base64url.encode(role));\n        const userRolePromise = APIValidation.userRole.validate(base64url.encode(role));\n        systemRolePromise.then(() => {\n            setRoleValidity(true);\n            userRolePromise.then(() => {\n                setUserRoleValidity(true);\n                configDispatcher({\n                    action: 'accessControlRoles',\n                    value: [...api.accessControlRoles, role],\n                });\n            }).catch((error) => {\n                if (error.status === 404) {\n                    configDispatcher({\n                        action: 'accessControlRoles',\n                        value: [...api.accessControlRoles, role],\n                    });\n                    setOtherValidSystemRoles([...otherValidSystemRoles, role]);\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating user roles ' + error);\n                }\n            });\n        }).catch((error) => {\n            if (error.status === 404) {\n                setRoleValidity(false);\n                setInvalidRoles([...invalidRoles, role]);\n            } else {\n                Alert.error('Error when validating role: ' + role);\n                console.error('Error when validating roles ' + error);\n            }\n        });\n    };\n\n    const handleRoleDeletion = (role) => {\n        setOtherValidSystemRoles(otherValidSystemRoles.filter((existingRole) => existingRole !== role));\n        setInvalidRoles(invalidRoles.filter((existingRole) => existingRole !== role));\n        configDispatcher({\n            action: 'accessControlRoles',\n            value: api.accessControlRoles.filter((existingRole) => existingRole !== role),\n        });\n    };\n\n    const handleRoleValidationFailure = () => {\n        if (!roleValidity) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Scopes.Roles.Invalid'\n                    defaultMessage='Role is invalid'\n                />\n            );\n        } else if (!userRoleValidity) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Scopes.Roles.User.Invalid'\n                    defaultMessage='At least one role must be associated with the API creator'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.AccessControl.roles.help'\n                    defaultMessage='Enter valid role and press enter'\n                />\n            );\n        }\n    };\n\n    return (\n        <>\n            <Box style={{ position: 'relative', marginBottom: -12 }}>\n                <TextField\n                    fullWidth\n                    id='accessControl-selector'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.head.topic'\n                            defaultMessage='Publisher Access Control'\n                        />\n                    )}\n                    value={api.accessControl}\n                    name='accessControl'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'accessControl', value })}\n                    SelectProps={{\n                        MenuProps: {\n                            className: classes.menu,\n                        },\n                    }}\n                    helperText={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.form.helper.text'\n                            defaultMessage='There are no access restrictions by default'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                >\n                    <MenuItem value='NONE'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.dropdown.none'\n                            defaultMessage='All'\n                        />\n                    </MenuItem>\n                    <MenuItem value='RESTRICTED' id='access-control-restricted-by-roles'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.dropdown.restricted'\n                            defaultMessage='Restrict by role(s)'\n                        />\n                    </MenuItem>\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AccessControl.tooltip.all'\n                                        defaultMessage='All :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AccessControl.tooltip.all.desc'\n                                    defaultMessage='The API is viewable, modifiable by all the publishers and creators.'\n                                />\n                                <br />\n                                <br />\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AccessControl.tooltip.restrict'\n                                        defaultMessage='Restricted by roles :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AccessControl.tooltip.restrict.\n                                    desc'\n                                    defaultMessage={'The API can be viewed and modified only by specific'\n                                    + ' publishers and creators with the roles that you specify'}\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='Publisher Access Control'\n                    placement='right-end'\n                    interactive\n                    className={classes.tooltip}\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n            {!isNone && (\n                <Box py={1} style={{ marginTop: 10 }}>\n                    <ChipInput\n                        data-testid='access-control-select-role'\n                        fullWidth\n                        variant='outlined'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.AccessControl.roles'\n                                defaultMessage='Roles'\n                            />\n                        )}\n                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                        value={api.accessControlRoles.concat(invalidRoles)}\n                        alwaysShowPlaceholder={false}\n                        placeholder='Enter roles and press Enter'\n                        blurBehavior='clear'\n                        InputProps={{\n                            endAdornment: (!roleValidity || !userRoleValidity) && (\n                                <InputAdornment position='end'>\n                                    <Error color='error' style={{ paddingBottom: 8 }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onAdd={handleRoleAddition}\n                        error={!roleValidity || !userRoleValidity}\n                        helperText={handleRoleValidationFailure()}\n                        chipRenderer={({ value }, key) => (\n                            <Chip\n                                key={key}\n                                size='small'\n                                label={value}\n                                onDelete={() => {\n                                    handleRoleDeletion(value);\n                                }}\n                                style={{\n                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                    margin: '0 8px 12px 0',\n                                    float: 'left',\n                                }}\n                            />\n                        )}\n                    />\n                </Box>\n            )}\n        </>\n    );\n}\n\nAccessControl.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CONSTS from 'AppData/Constants';\nimport API from 'AppData/api';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * api.accessControl possible values are `NONE` and `RESTRICTED`\n * @export\n * @param {*} props\n * @returns\n */\nexport default function StoreVisibility(props) {\n    const [roleValidity, setRoleValidity] = useState(true);\n    const [roleExists, setRoleExists] = useState(true);\n    const { api, configDispatcher } = props;\n    const [invalidRoles, setInvalidRoles] = useState([]);\n    const isRestrictedByRoles = api.visibility === 'RESTRICTED';\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const restApi = new API();\n    const [tenants, setTenants] = useState([]);\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                setTenants(result.body.count);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (invalidRoles.length === 0) {\n            setRoleValidity(true);\n        }\n        if (api.visibility === 'RESTRICTED' && api.visibleRoles.length !== 0) {\n            setRoleExists(true);\n        }\n    }, [invalidRoles]);\n    const handleRoleAddition = (role) => {\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise.then(() => {\n            setRoleExists(true);\n            setRoleValidity(true);\n            configDispatcher({\n                action: 'visibleRoles',\n                value: [...api.visibleRoles, role],\n            });\n        }).catch((error) => {\n            if (error.status === 404) {\n                setRoleValidity(false);\n                setInvalidRoles([...invalidRoles, role]);\n            } else {\n                Alert.error('Error when validating role: ' + role);\n                console.error('Error when validating roles ' + error);\n            }\n        });\n    };\n\n    const handleRoleDeletion = (role) => {\n        if (invalidRoles.includes(role)) {\n            setInvalidRoles(invalidRoles.filter((existingRole) => existingRole !== role));\n        }\n        if (api.visibility === 'RESTRICTED' && api.visibleRoles.length > 1) {\n            setRoleExists(true);\n        } else {\n            setRoleExists(false);\n        }\n        configDispatcher({\n            action: 'visibleRoles',\n            value: api.visibleRoles.filter((existingRole) => existingRole !== role),\n        });\n    };\n\n    return (\n        <>\n            <Box style={{ position: 'relative' }}>\n                <TextField\n                    fullWidth\n                    id='storeVisibility-selector'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.head.topic'\n                            defaultMessage='Developer Portal Visibility'\n                        />\n                    )}\n                    value={api.visibility}\n                    name='storeVisibility'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'visibility', value })}\n                    SelectProps={{\n                        MenuProps: {\n                            className: classes.menu,\n                        },\n                    }}\n                    helperText={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.form.helper.text'\n                            defaultMessage='By default API is visible to all developer portal users'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                >\n                    <MenuItem value='PUBLIC'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.StoreVisibility.dropdown.public'\n                            defaultMessage='Public'\n                        />\n                    </MenuItem>\n                    <MenuItem value='RESTRICTED' id='visibility-restricted-by-roles'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.dropdown.restrict'\n                            defaultMessage='Restrict by role(s)'\n                        />\n                    </MenuItem>\n                    {tenants !== 0\n                        && (\n                            <MenuItem value='PRIVATE'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.dropdown.private'\n                                    defaultMessage='Visible to my domain'\n                                />\n                            </MenuItem>\n                        )}\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.storeVisibility.tooltip.public'\n                                        defaultMessage='Public :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.tooltip.public.desc'\n                                    defaultMessage={\n                                        'The API is accessible to everyone and can be advertised '\n                                        + 'in multiple developer portals - a central developer portal '\n                                        + 'and/or non-WSO2 developer portals.'\n                                    }\n                                />\n                                <br />\n                                <br />\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.storeVisibility.tooltip.restrict'\n                                        defaultMessage='Restricted by roles(s) :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.tooltip.restrict.desc'\n                                    defaultMessage={\n                                        'The API is visible only to specific user'\n                                        + ' roles in the tenant developer portal that you specify.'\n                                    }\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='Store Visibility'\n                    placement='right-end'\n                    className={classes.tooltip}\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n            {isRestrictedByRoles && (\n                <Box py={2} style={{ marginTop: -10, marginBottom: 10 }}>\n                    <ChipInput\n                        data-testid='visibility-select-role'\n                        fullWidth\n                        variant='outlined'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.storeVisibility.roles'\n                                defaultMessage='Roles'\n                            />\n                        )}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                        value={api.visibleRoles.concat(invalidRoles)}\n                        alwaysShowPlaceholder={false}\n                        placeholder='Enter roles and press Enter'\n                        blurBehavior='clear'\n                        InputProps={{\n                            endAdornment: !roleValidity && (\n                                <InputAdornment position='end'>\n                                    <Error color='error' style={{ paddingBottom: 8 }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onAdd={handleRoleAddition}\n                        error={!roleValidity || !roleExists}\n                        helperText={\n                            roleValidity ? (\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.visibility.CreateScope.roles.help'\n                                    defaultMessage='Enter valid role and press enter'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Roles.Invalid'\n                                    defaultMessage='Role is invalid'\n                                />\n                            )\n                        }\n                        chipRenderer={({ value }, key) => (\n                            <Chip\n                                key={key}\n                                size='small'\n                                label={value}\n                                onDelete={() => {\n                                    handleRoleDeletion(value);\n                                }}\n                                style={{\n                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                    margin: '0 8px 12px 0',\n                                    float: 'left',\n                                }}\n                            />\n                        )}\n                    />\n                </Box>\n            )}\n        </>\n    );\n}\n\nStoreVisibility.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ChipInput from 'material-ui-chip-input';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Tags(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    const [isTagValid, setIsTagValid] = useState(true);\n    const [invalidTags, setInvalidTags] = useState([]);\n    const regexPattern = /([~!@#;%^&*+=|\\\\<>\"'/,])/;\n    return (\n        <React.Fragment style={{ marginTop: 10 }}>\n            <ChipInput\n                fullWidth\n                variant='outlined'\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Tags.title'\n                        defaultMessage='Tags'\n                    />\n                )}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                value={api.tags}\n                error={!isTagValid}\n                helperText={isTagValid ? (\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Tags.helper'\n                        defaultMessage='Press `Enter` after typing the tag name to add a new tag'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Tags.validation.error'\n                        defaultMessage={\n                            'The tag contains one or more illegal characters '\n                            + '( ~ ! @ # ; % ^ & * + = } | < > , \\' \" \\\\\\\\ / ) .'\n                        }\n                    />\n                )}\n                onAdd={(tag) => {\n                    if (regexPattern.test(tag)) {\n                        setIsTagValid(false);\n                        setInvalidTags([...invalidTags, tag]);\n                    }\n                    configDispatcher({\n                        action: 'tags',\n                        value: [...api.tags, tag.length > 30 ? tag.substring(0, 30) : tag],\n                    });\n                }}\n                chipRenderer={({ value }, key) => (\n                    <Chip\n                        key={key}\n                        size='small'\n                        label={value}\n                        onDelete={() => {\n                            if (invalidTags.includes(value)) {\n                                const currentInvalidTags = invalidTags.filter((existingTag) => existingTag !== value);\n                                setInvalidTags(currentInvalidTags);\n                                if (currentInvalidTags.length === 0) {\n                                    setIsTagValid(true);\n                                }\n                            }\n                            configDispatcher({ action: 'tags', value: api.tags.filter((oldTag) => oldTag !== value) });\n                        }}\n                        style={{\n                            backgroundColor: regexPattern.test(value) ? red[300] : null,\n                            margin: '0 8px 12px 0',\n                            float: 'left',\n                        }}\n                    />\n                )}\n                style={{ display: 'flex' }}\n            />\n        </React.Fragment>\n    );\n}\n\nTags.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport TextField from '@material-ui/core/TextField';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nconst Social = (props) => {\n    const { slackURL, githubURL, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    return (\n        <>\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.giturl'\n                        defaultMessage='GitHub URL'\n                    />\n                )}\n                variant='outlined'\n                value={githubURL || ''}\n                fullWidth\n                margin='normal'\n                onChange={(e) => configDispatcher({ action: 'github_repo', value: e.target.value })}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                helperText={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.giturl.help'\n                        defaultMessage='This GitHub URL will be available in the API overview page in developer portal'\n                    />\n                )}\n                style={{ marginTop: 0 }}\n            />\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.slack'\n                        defaultMessage='Slack URL'\n                    />\n                )}\n                variant='outlined'\n                value={slackURL || ''}\n                fullWidth\n                margin='normal'\n                onChange={(e) => configDispatcher({ action: 'slack_url', value: e.target.value })}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                helperText={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.slack_url.help'\n                        defaultMessage={'This Slack Channel URL will be available in the'\n                        + ' API overview page in developer portal'}\n                    />\n                )}\n                style={{ marginTop: 0 }}\n            />\n        </>\n    );\n};\n\nSocial.propTypes = {\n    slackURL: PropTypes.string.isRequired,\n    githubURL: PropTypes.string.isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n\nexport default React.memo(Social);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport API from 'AppData/api';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n    listItemText: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n}));\n/**\n * Render the categories drop down.\n * @param {JSON} props props passed from it's parents.\n * @returns {JSX} Render the categories drop down.\n */\nfunction APICategories(props) {\n    const [categories, setCategories] = useState({});\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    useEffect(() => {\n        API.apiCategories().then((response) => setCategories(response.body));\n    }, []);\n\n    if (!categories.list) {\n        return null;\n    } else if (categories.list.length === 0) {\n        return (\n            <Box style={{ position: 'relative', marginTop: 10 }}>\n                <TextField\n                    fullWidth\n                    select\n                    name='Categories'\n                    id='APICategories'\n                    label={(\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories'\n                                defaultMessage='API Categories'\n                            />\n                        </>\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled\n                    value='emptyMessage'\n                >\n                    <MenuItem\n                        dense\n                        disableGutters\n                        value='emptyMessage'\n                    >\n                        <ListItemText primary={(\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories.empty'\n                                defaultMessage='No API Categories defined.'\n                            />\n                        )}\n                        />\n                    </MenuItem>\n                </TextField>\n            </Box>\n        );\n    } else {\n        return (\n            <Box style={{ position: 'relative', marginTop: 10 }}>\n                <TextField\n                    fullWidth\n                    select\n                    id='APICategories'\n                    label={(\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories'\n                                defaultMessage='API Categories'\n                            />\n                        </>\n                    )}\n                    name='categories'\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                    value={api.categories}\n                    SelectProps={{\n                        multiple: true,\n                        renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        MenuProps: {\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                            keepMounted: true,\n                            PaperProps: {\n                                style: {\n                                    maxHeight: 300,\n                                    maxWidth: 300,\n                                },\n                            },\n                        },\n                    }}\n                    onChange={(e) => configDispatcher({ action: 'categories', value: e.target.value })}\n                    InputProps={{\n                        id: 'itest-id-categories-input',\n                    }}\n                    helperText='Select API Categories for the API'\n                >\n                    { categories.list.map((category) => (\n                        <MenuItem\n                            dense\n                            disableGutters\n                            id={category.id}\n                            key={category.name}\n                            value={category.name}\n                        >\n                            <Checkbox color='primary' checked={api.categories.includes(category.name)} />\n                            <ListItemText\n                                primary={category.name}\n                                secondary={category.description}\n                                classes={{ primary: classes.listItemText }}\n                            />\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <FormattedMessage\n                                    id='Api.category.dropdown.tooltip'\n                                    defaultMessage={'Allow to group APIs that have similar attributes.'\n                                        + ' There has to be pre-defined API categories in the'\n                                        + ' environment in order to be attached to an API.'}\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='API Categories'\n                    placement='right-end'\n                    interactive\n                    className={classes.tooltip}\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n        );\n    }\n}\n\nAPICategories.defaultProps = {\n    categories: [],\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n\nexport default APICategories;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useContext, useState, useEffect,\n} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link, useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash.clonedeep';\nimport Api from 'AppData/api';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport ResponseCaching from './components/ResponseCaching';\nimport CORSConfiguration from './components/CORSConfiguration';\nimport SchemaValidation from './components/SchemaValidation';\nimport MaxBackendTps from './components/MaxBackendTps';\nimport Flow from './components/Flow';\nimport Endpoints from './components/Endpoints';\nimport APISecurity from './components/APISecurity/APISecurity';\nimport QueryAnalysis from './components/QueryAnalysis';\nimport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './components/APISecurity/components/apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(0),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 90,\n        right: -43,\n    },\n    arrowBackIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 30,\n        right: -71,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    info: {\n        display: 'flex',\n        height: '100%',\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    const apiConfigJson = {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        wsdlUrl: api.wsdlUrl,\n        transport: [...api.transport],\n        securityScheme: [...api.securityScheme],\n        keyManagers: [...(api.keyManagers || [])],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n    };\n    return apiConfigJson;\n}\n\n\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function RuntimeConfiguration() {\n    const [keyManagersConfigured, setKeyManagersConfigured] = useState([]);\n    const [saveButtonDisabled, setSaveButtonDisabled] = useState(false);\n    /**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\n    function configReducer(state, configAction) {\n        const { action, value, event } = configAction;\n        const nextState = { ...copyAPIConfig(state) };\n        switch (action) {\n            case 'description':\n            case 'isDefaultVersion':\n            case 'authorizationHeader':\n            case 'responseCachingEnabled':\n            case 'cacheTimeout':\n            case 'enableSchemaValidation':\n            case 'accessControl':\n            case 'visibility':\n            case 'maxTps':\n            case 'tags':\n                nextState[action] = value;\n                return nextState;\n            case 'accessControlRoles':\n                return { ...copyAPIConfig(state), [action]: value };\n            case 'visibleRoles':\n                return { ...copyAPIConfig(state), [action]: value };\n            case 'securityScheme':\n                // If event came from mandatory selector of either Application level or Transport level\n                if (\n                    [API_SECURITY_MUTUAL_SSL_MANDATORY, API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY]\n                        .includes(event.name)\n                ) {\n                    // If user select not mandatory (optional) , Remove the respective schema, else add it\n                    if (event.value === 'optional') {\n                        return {\n                            ...copyAPIConfig(state),\n                            [action]: state[action].filter((schema) => schema !== event.name),\n                        };\n                    } else if (state[action].includes(event.name)) {\n                        return state; // Add for completeness, Ideally there couldn't exist this state\n                    } else {\n                        return { ...copyAPIConfig(state), [action]: [...state[action], event.name] };\n                    }\n                }\n                // User checked on one of api security schemas (either OAuth, Basic, ApiKey or Mutual SSL)\n                if (event.checked) {\n                    if (state[action].includes(event.value)) {\n                        return state; // Add for completeness, Ideally there couldn't exist this state\n                    } else {\n                        return { ...copyAPIConfig(state), [action]: [...state[action], event.value] };\n                    }\n                } else if (state[action].includes(event.value)) {\n                    // User has unchecked a security schema type\n                    const newState = {\n                        ...copyAPIConfig(state),\n                        [action]: state[action].filter((schema) => schema !== event.value),\n                    };\n                    if (\n                        !(\n                            newState[action].includes(DEFAULT_API_SECURITY_OAUTH2)\n                            || newState[action].includes(API_SECURITY_BASIC_AUTH)\n                            || newState[action].includes(API_SECURITY_API_KEY)\n                        )\n                    ) {\n                        const noMandatoryOAuthBasicAuth = newState[action]\n                            .filter((schema) => schema !== API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY);\n                        return {\n                            ...newState,\n                            [action]: noMandatoryOAuthBasicAuth,\n                        };\n                    } else if (!newState[action].includes(API_SECURITY_MUTUAL_SSL)) {\n                        const noMandatoryMutualSSL = newState[action]\n                            .filter((schema) => schema !== API_SECURITY_MUTUAL_SSL_MANDATORY);\n                        return {\n                            ...newState,\n                            [action]: noMandatoryMutualSSL,\n                        };\n                    }\n\n                    return newState;\n                } else {\n                    return state; // Add for completeness, Ideally there couldn't exist this state\n                }\n            case 'transport':\n                if (event.checked) {\n                    return { ...copyAPIConfig(state), transport: [...state.transport, event.value] };\n                } else {\n                    return {\n                        ...copyAPIConfig(state),\n                        transport: state.transport.filter((transport) => transport !== event.value),\n                    };\n                }\n            case 'accessControlAllowHeaders':\n            case 'accessControlAllowMethods':\n            case 'accessControlAllowCredentials':\n            case 'corsConfigurationEnabled':\n                nextState.corsConfiguration[action] = value;\n                return nextState;\n            case 'accessControlAllowOrigins':\n                if (event.checked) {\n                    nextState.corsConfiguration[action] = [event.value];\n                } else {\n                    nextState.corsConfiguration[action] = event.checked === false ? [] : event.value;\n                }\n                return nextState;\n            case 'keymanagers':\n                nextState.keyManagers = value;\n                return nextState;\n            case 'allKeyManagersEnabled':\n                if (value) {\n                    nextState.keyManagers = ['all'];\n                } else {\n                    nextState.keyManagers = keyManagersConfigured;\n                }\n                return nextState;\n            case 'saveButtonDisabled':\n                setSaveButtonDisabled(value);\n                return state;\n            default:\n                return state;\n        }\n    }\n    const { api, updateAPI } = useContext(APIContext);\n    const history = useHistory();\n    const isAsyncAPI = api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE';\n    const isNonWebSubAsyncAPI = api.type === 'WS' || api.type === 'SSE';\n    const isWebSub = api.type === 'WEBSUB';\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [updateComplexityList, setUpdateComplexityList] = useState(null);\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n    const mediationPolicies = cloneDeep(api.mediationPolicies || []);\n    const [inPolicy, setInPolicy] = useState(mediationPolicies.filter((seq) => seq.type === 'IN')[0]);\n    const [outPolicy, setOutPolicy] = useState(mediationPolicies.filter((seq) => seq.type === 'OUT')[0]);\n    const [faultPolicy, setFaultPolicy] = useState(mediationPolicies.filter((seq) => seq.type === 'FAULT')[0]);\n    const intl = useIntl();\n    useEffect(() => {\n        Api.keyManagers().then((response) => {\n            const kmNameList = [];\n            if (response.body.list) {\n                response.body.list.forEach((km) => kmNameList.push(km.name));\n            }\n            setKeyManagersConfigured(kmNameList);\n        })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }, []);\n\n    const getMediationPoliciesToSave = () => {\n        const NONE = 'none';\n        const newMediationPolicies = [];\n        if (!(isEmpty(inPolicy) || inPolicy.name === NONE)) {\n            newMediationPolicies.push(inPolicy);\n        }\n        if (!(isEmpty(outPolicy) || outPolicy.name === NONE)) {\n            newMediationPolicies.push(outPolicy);\n        }\n        if (!(isEmpty(faultPolicy) || faultPolicy.name === NONE)) {\n            newMediationPolicies.push(faultPolicy);\n        }\n        return newMediationPolicies;\n    };\n    const updateInMediationPolicy = (policy) => {\n        setInPolicy({ id: policy.id, name: policy.name, type: policy.type });\n    };\n    const updateOutMediationPolicy = (policy) => {\n        setOutPolicy({ id: policy.id, name: policy.name, type: policy.type });\n    };\n    const updateFaultMediationPolicy = (policy) => {\n        setFaultPolicy({ id: policy.id, name: policy.name, type: policy.type });\n    };\n\n    /**\n     * Update the GraphQL Query Complexity Values\n     */\n    function updateComplexity() {\n        const apiId = apiConfig.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.updateGraphqlPoliciesComplexity(\n            apiId, {\n                list: updateComplexityList,\n            },\n        );\n        promisedComplexity\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSave() {\n        const newMediationPolicies = getMediationPoliciesToSave();\n        if (api.isAPIProduct()) {\n            delete apiConfig.keyManagers; // remove keyManagers property if API type is API Product\n        } else {\n            apiConfig.mediationPolicies = newMediationPolicies;\n        }\n        if (updateComplexityList !== null) {\n            updateComplexity();\n        }\n        // Validate the key managers\n        if (\n            !api.isAPIProduct()\n            && apiConfig.securityScheme.includes('oauth2')\n            && !apiConfig.keyManagers.includes('all')\n            && (apiConfig.keyManagers && apiConfig.keyManagers.length === 0)\n        ) {\n            Alert.error(\n                intl.formatMessage(\n                    {\n                        id: 'Apis.Details.Configuration.RuntimeConfiguration.no.km.error',\n                        defaultMessage: 'Select one or more Key Managers',\n                    },\n                ),\n            );\n            return;\n        }\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => setIsUpdating(false));\n    }\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSaveAndDeploy() {\n        const newMediationPolicies = getMediationPoliciesToSave();\n        if (api.isAPIProduct()) {\n            delete apiConfig.keyManagers; // remove keyManagers property if API type is API Product\n        } else {\n            apiConfig.mediationPolicies = newMediationPolicies;\n        }\n        if (updateComplexityList !== null) {\n            updateComplexity();\n        }\n        // Validate the key managers\n        if (\n            !api.isAPIProduct()\n            && apiConfig.securityScheme.includes('oauth2')\n            && !apiConfig.keyManagers.includes('all')\n            && (apiConfig.keyManagers && apiConfig.keyManagers.length === 0)\n        ) {\n            Alert.error(\n                intl.formatMessage(\n                    {\n                        id: 'Apis.Details.Configuration.RuntimeConfiguration.no.km.error',\n                        defaultMessage: 'Select one or more Key Managers',\n                    },\n                ),\n            );\n            return;\n        }\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    }\n\n    return (\n        <>\n            <Box pb={3}>\n                <Typography id='itest-api-details-runtime-config-head' variant='h5'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.RuntimeConfiguration.topic.header'\n                        defaultMessage='Runtime Configurations'\n                    />\n                </Typography>\n            </Box>\n            <div className={classes.contentWrapper}>\n                <Grid container direction='row' justify='space-around' alignItems='stretch' spacing={8}>\n                    <Grid item xs={12} md={7}>\n                        <Typography className={classes.heading} variant='h6'>\n                            { isAsyncAPI\n                                ? (\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.section.initial.request'\n                                        defaultMessage='Initial Request'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.section.request'\n                                        defaultMessage='Request'\n                                    />\n                                )}\n                        </Typography>\n                        <Grid\n                            direction=' column'\n                            justify='space-between'\n                            alignItems='stretch'\n                            spacing={6}\n                        >\n                            <Grid item xs={12} style={{ marginBottom: 30, position: 'relative' }}>\n                                <Paper className={classes.paper} elevation={0}>\n                                    <APISecurity api={apiConfig} configDispatcher={configDispatcher} />\n                                    { api.type !== 'WS' && (\n                                        <CORSConfiguration api={apiConfig} configDispatcher={configDispatcher} />\n                                    )}\n\n                                    {(api.type !== 'GRAPHQL' && !isAsyncAPI)\n                                        && <SchemaValidation api={apiConfig} configDispatcher={configDispatcher} />}\n                                    {!api.isAPIProduct() && !isAsyncAPI && (\n                                        <Flow\n                                            api={apiConfig}\n                                            type='IN'\n                                            updateMediationPolicy={updateInMediationPolicy}\n                                            selectedMediationPolicy={inPolicy}\n                                            isRestricted={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    {api.type === 'GRAPHQL' && (\n                                        <Box mt={3}>\n                                            <QueryAnalysis\n                                                api={apiConfig}\n                                                setUpdateComplexityList={setUpdateComplexityList}\n                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                            />\n                                        </Box>\n                                    )}\n                                </Paper>\n                                {!isWebSub && (\n                                    <ArrowForwardIcon className={classes.arrowForwardIcon} />\n                                )}\n                            </Grid>\n                            { !isNonWebSubAsyncAPI && (\n                                <>\n                                    <Typography className={classes.heading} variant='h6'>\n                                        {!isWebSub ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.section.response'\n                                                defaultMessage='Response'\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.section.events'\n                                                defaultMessage='Events'\n                                            />\n                                        )}\n\n                                    </Typography>\n                                    <Grid item xs={12} style={{ position: 'relative' }}>\n                                        <Box mb={3}>\n                                            <Paper className={classes.paper} elevation={0}>\n                                                {!api.isAPIProduct() && (\n                                                    <Box mb={3}>\n                                                        {isWebSub ? (\n                                                            <Flow\n                                                                api={apiConfig}\n                                                                type='IN'\n                                                                updateMediationPolicy={updateInMediationPolicy}\n                                                                selectedMediationPolicy={inPolicy}\n                                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                                            />\n                                                        ) : (\n                                                            <Flow\n                                                                api={apiConfig}\n                                                                type='OUT'\n                                                                updateMediationPolicy={updateOutMediationPolicy}\n                                                                selectedMediationPolicy={outPolicy}\n                                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                                            />\n                                                        )}\n                                                    </Box>\n                                                )}\n                                                {!isAsyncAPI && (\n                                                    <ResponseCaching\n                                                        api={apiConfig}\n                                                        configDispatcher={configDispatcher}\n                                                    />\n                                                )}\n                                            </Paper>\n                                            {!isWebSub && (\n                                                <ArrowBackIcon className={classes.arrowBackIcon} />\n                                            )}\n                                        </Box>\n                                    </Grid>\n                                </>\n                            )}\n                            {!api.isAPIProduct() && (\n                                <>\n                                    <Typography className={classes.heading} variant='h6'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.RuntimeConfiguration.section.fault'\n                                            defaultMessage='Fault'\n                                        />\n                                    </Typography>\n                                    <Grid item xs={12} style={{ position: 'relative' }}>\n                                        <Paper className={classes.paper} elevation={0}>\n                                            <Flow\n                                                api={apiConfig}\n                                                type='FAULT'\n                                                updateMediationPolicy={updateFaultMediationPolicy}\n                                                selectedMediationPolicy={faultPolicy}\n                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                </>\n                            )}\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} md={5}>\n                        {!isWebSub && (\n                            <>\n                                <Typography className={classes.heading} variant='h6'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.section.backend'\n                                        defaultMessage='Backend'\n                                    />\n                                </Typography>\n                                <Paper className={classes.paper} style={{ height: 'calc(100% - 75px)' }} elevation={0}>\n                                    {!api.isAPIProduct() && (\n                                        <>\n                                            {!isAsyncAPI && (\n                                                <MaxBackendTps api={apiConfig} configDispatcher={configDispatcher} />\n                                            )}\n                                            { !isWebSub && (\n                                                <Endpoints api={api} />\n                                            )}\n                                        </>\n                                    )}\n\n                                    {api.isAPIProduct() && (\n                                        <Box alignItems='center' justifyContent='center' className={classes.info}>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.RuntimeConfiguration.backend.api.\n                                                    product.endpoint'\n                                                    defaultMessage='Please refer respective APIs for endpoint\n                                                    information'\n                                                />\n                                            </Typography>\n                                        </Box>\n                                    )}\n                                </Paper>\n                            </>\n                        )}\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid container direction='row' alignItems='center' spacing={1} style={{ marginTop: 20 }}>\n                        <Grid item id='save-runtime-configurations'>\n                            {api.isRevision\n                                || ((apiConfig.visibility === 'RESTRICTED' && apiConfig.visibleRoles.length === 0)\n                                || isRestricted(['apim:api_create'], api)) || saveButtonDisabled ? (\n                                    <Button\n                                        disabled\n                                        type='submit'\n                                        variant='contained'\n                                        color='primary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.save'\n                                            defaultMessage='Save'\n                                        />\n                                    </Button>\n                                ) : (\n                                    <CustomSplitButton\n                                        handleSave={handleSave}\n                                        handleSaveAndDeploy={handleSaveAndDeploy}\n                                        isUpdating={isUpdating}\n                                        id='runtime-config-save-button'\n                                    />\n                                )}\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Grid item>\n                                <Typography variant='body2' color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.update.not.allowed'\n                                        defaultMessage={\n                                            '* You are not authorized to update particular fields of'\n                                            + ' the API due to insufficient permissions'\n                                        }\n                                    />\n                                </Typography>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FormattedMessage } from 'react-intl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { makeStyles } from '@material-ui/core';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    paper: {\n        padding: theme.spacing(0, 3),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ResponseCaching(props) {\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n    const isResponseCachingEnabled = api.responseCachingEnabled;\n\n    const generateElement = (isEnabled) => {\n        if (isEnabled) {\n            return (\n                <ExpandMoreIcon />\n            );\n        }\n        return (null);\n    };\n\n    return (\n        <>\n            <WrappedExpansionPanel className={classes.expansionPanel} id='responseCaching'>\n                <ExpansionPanelSummary expandIcon={generateElement(api.responseCachingEnabled)}>\n                    <Typography className={classes.subHeading} variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.response.caching'\n                            defaultMessage='Response Caching'\n                        />\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.ResponseCaching.tooltip'\n                                    defaultMessage={\n                                        'If enabled, the API response will be cached at the gateway level'\n                                        + ' to improve the response time and minimize the backend load'\n                                    }\n                                />\n                            )}\n                            aria-label='Response cache'\n                            placement='right-end'\n                            interactive\n                        >\n                            <HelpOutline className={classes.iconSpace} />\n                        </Tooltip>\n                    </Typography>\n                    <FormControlLabel\n                        className={classes.actionSpace}\n                        control={(\n                            <Switch\n                                id='response-caching-switch'\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                checked={api.responseCachingEnabled}\n                                onChange={({ target: { checked } }) => configDispatcher({\n                                    action: 'responseCachingEnabled',\n                                    value: checked,\n                                })}\n                                color='primary'\n                            />\n                        )}\n                    />\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                    <Grid container spacing={1} alignItems='flex-start'>\n                        <Grid item>\n                            {isResponseCachingEnabled && (\n                                <TextField\n                                    value={api.cacheTimeout}\n                                    onChange={({ target: { value } }) => configDispatcher({\n                                        action: 'cacheTimeout',\n                                        value,\n                                    })}\n                                    margin='normal'\n                                    helperText={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.cache.timeout'\n                                            defaultMessage='Cache Timeout (seconds)'\n                                        />\n                                    )}\n                                />\n                            )}\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </WrappedExpansionPanel>\n        </>\n    );\n}\n\nResponseCaching.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Move to `User` class , drawback is updating new property require JSON parse, Stringify cycle ~tmkb\nimport Utils from 'AppData/Utils';\nimport User from 'AppData/User';\n\nconst environmentName = Utils.getCurrentEnvironment().label;\nconst userStorageKey = `${User.CONST.LOCAL_STORAGE_USER}_${environmentName}`;\n\nexport const updateUserLocalStorage = (key, newValue) => {\n    const userData = JSON.parse(localStorage.getItem(userStorageKey));\n    userData[key] = newValue;\n    localStorage.setItem(userStorageKey, JSON.stringify(userData));\n};\n\nexport const getUserLocalStorage = (key) => {\n    const userData = JSON.parse(localStorage.getItem(userStorageKey));\n    return userData[key];\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChipInput from 'material-ui-chip-input';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n * api.corsConfiguration possible values true and false\n * @export\n * @param {*} props\n * @returns\n */\nexport default function CORSConfiguration(props) {\n    const [apiFromContext] = useAPI();\n    const {\n        configDispatcher,\n        api: { corsConfiguration },\n    } = props;\n    const isCorsEnabled = corsConfiguration.corsConfigurationEnabled;\n    const isAllowAllOrigins = corsConfiguration.accessControlAllowOrigins[0] === '*'\n        && corsConfiguration.accessControlAllowOrigins.length === 1;\n    const classes = useStyles();\n    const generateElement = (isEnabled) => {\n        if (isEnabled) {\n            return (\n                <ExpandMoreIcon />\n            );\n        }\n        return (null);\n    };\n    return (\n        <WrappedExpansionPanel className={classes.expansionPanel} id='corsConfiguration'>\n            <ExpansionPanelSummary expandIcon={generateElement(corsConfiguration.corsConfigurationEnabled)}>\n                <Typography className={classes.subHeading} variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.CORSConfiguration.cors.configuration'\n                        defaultMessage='CORS Configuration'\n                    />\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.CORSConfiguration.tooltip'\n                                defaultMessage='If enabled, the CORS configuration for the API will be enabled.'\n                            />\n                        )}\n                        aria-label='Response cache'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline className={classes.iconSpace} />\n                    </Tooltip>\n                </Typography>\n                <FormControlLabel\n                    className={classes.actionSpace}\n                    control={(\n                        <Switch\n                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                            checked={corsConfiguration.corsConfigurationEnabled}\n                            onChange={({ target: { checked } }) => configDispatcher({\n                                action: 'corsConfigurationEnabled',\n                                value: checked,\n                            })}\n                            color='primary'\n                        />\n                    )}\n                />\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                <Grid container>\n                    <Grid item md={12}>\n                        {isCorsEnabled && (\n                            <Grid container>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    origins'\n                                            defaultMessage='Access Control Allow Origins'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Grid container>\n                                        <Grid item md={12}>\n                                            <FormControlLabel\n                                                style={{ display: 'flex' }}\n                                                control={(\n                                                    <Checkbox\n                                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                                        checked={isAllowAllOrigins}\n                                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: { checked, value },\n                                                        })}\n                                                        value='*'\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label='Allow All Origins'\n                                            />\n                                        </Grid>\n                                        {!isAllowAllOrigins && (\n                                            <Grid item md={12}>\n                                                <ChipInput\n                                                    style={{ marginBottom: 40, display: 'flex' }}\n                                                    value={corsConfiguration.accessControlAllowOrigins}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            id={\n                                                                'Apis.Details.Configuration.components'\n                                                                + '.CORSConfigurations.origin.helper'\n                                                            }\n                                                            defaultMessage={\n                                                                'Press `Enter` after typing the origin name,'\n                                                                + 'to add a new origin'\n                                                            }\n                                                        />\n                                                    )}\n                                                    onAdd={(accessControlAllowOrigin) => {\n                                                        configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: {\n                                                                value: [\n                                                                    ...corsConfiguration.accessControlAllowOrigins,\n                                                                    accessControlAllowOrigin,\n                                                                ],\n                                                            },\n                                                        });\n                                                    }}\n                                                    onDelete={(accessControlAllowOrigin) => {\n                                                        configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: {\n                                                                value: corsConfiguration\n                                                                    .accessControlAllowOrigins\n                                                                    .filter(\n                                                                        (oldOrigin) => (\n                                                                            oldOrigin !== accessControlAllowOrigin),\n                                                                    ),\n                                                            },\n                                                        });\n                                                    }}\n                                                />\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    headers'\n                                            defaultMessage='Access Control Allow Headers'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <ChipInput\n                                        style={{ marginBottom: 40, display: 'flex' }}\n                                        value={corsConfiguration.accessControlAllowHeaders}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components.'\n                                                    + 'CORSConfigurations.header.helper'\n                                                }\n                                                defaultMessage={\n                                                    'Press `Enter` after typing the header name, '\n                                                    + 'to add a new header'\n                                                }\n                                            />\n                                        )}\n                                        onAdd={(accessControlAllowHeader) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowHeaders',\n                                                value: [\n                                                    ...corsConfiguration.accessControlAllowHeaders,\n                                                    accessControlAllowHeader,\n                                                ],\n                                            });\n                                        }}\n                                        onDelete={(accessControlAllowHeader) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowHeaders',\n                                                value: corsConfiguration.accessControlAllowHeaders\n                                                    .filter((oldHeader) => oldHeader !== accessControlAllowHeader),\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    methods'\n                                            defaultMessage='Access Control Allow Methods'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <ChipInput\n                                        style={{ marginBottom: 40, display: 'flex' }}\n                                        value={corsConfiguration.accessControlAllowMethods}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components'\n                                                    + '.CORSConfigurations.method.helper'\n                                                }\n                                                defaultMessage={\n                                                    'Press `Enter` after typing the method name,'\n                                                    + ' to add a new method'\n                                                }\n                                            />\n                                        )}\n                                        onAdd={(newValue) => {\n                                            let value = [...corsConfiguration.accessControlAllowMethods,\n                                                newValue.toUpperCase()];\n                                            if (\n                                                corsConfiguration\n                                                    .accessControlAllowMethods\n                                                    .find((method) => method === newValue.toUpperCase())\n                                            ) {\n                                                value = [...corsConfiguration.accessControlAllowMethods];\n                                            }\n                                            configDispatcher({\n                                                action: 'accessControlAllowMethods',\n                                                value,\n                                            });\n                                        }}\n                                        onDelete={(accessControlAllowMethod) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowMethods',\n                                                value: corsConfiguration\n                                                    .accessControlAllowMethods\n                                                    .filter((oldMethod) => oldMethod !== accessControlAllowMethod),\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <FormControlLabel\n                                        control={(\n                                            <Checkbox\n                                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                                checked={corsConfiguration.accessControlAllowCredentials}\n                                                onChange={({ target: { checked } }) => configDispatcher({\n                                                    action: 'accessControlAllowCredentials',\n                                                    value: checked,\n                                                })}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components'\n                                                    + '.CORSConfiguration.allow.credentials'\n                                                }\n                                                defaultMessage='Access Control Allow Credentials'\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n        </WrappedExpansionPanel>\n    );\n}\n\nCORSConfiguration.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = (theme) => ({\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 2.5,\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: theme.spacing(0, -1),\n        float: 'right',\n    },\n    paper: {\n        padding: theme.spacing(0, 3),\n        marginBottom: theme.spacing(3),\n    },\n});\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nclass SchemaValidation extends React.Component {\n    /**\n     *Creates an instance of SchemaValidation.\n     * @param {*} props\n     * @memberof SchemaValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = { isOpen: false };\n        this.setIsOpen = this.setIsOpen.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @param {Object} prevProps\n     * @param {Object} prevState\n     * @memberof SchemaValidation\n     */\n    componentDidUpdate(prevProps) {\n        const { api } = this.props;\n        /*\n        This could have been done using hooks too, But at the moment it requires `useRef` hook to get the previous props\n        Hence using class component and its `componentDidUpdate` life cycle method to open the caution dialog box\n        For more info: https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n         */\n        if (!prevProps.api.enableSchemaValidation && api.enableSchemaValidation) {\n            this.setIsOpen(true);\n        }\n    }\n\n    /**\n     *\n     * Set isOpen state of the dialog box which shows the caution message when enabling schema validation\n     * @param {Boolean} isOpen Should dialog box is open or not\n     * @memberof SchemaValidation\n     */\n    setIsOpen(isOpen) {\n        this.setState({ isOpen });\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @param {*} props\n     * @returns\n     * @memberof SchemaValidation\n     */\n    render() {\n        const { api, configDispatcher, classes } = this.props;\n        const { isOpen } = this.state;\n        const { api: apiFromContext } = this.context;\n\n        return (\n            <Paper className={classes.paper}>\n                <Grid container spacing={1} alignItems='flex-start'>\n                    <Grid item md={12}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.schema.validation'\n                                defaultMessage='Schema Validation'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.schema.validation.tooltip'\n                                        defaultMessage={'Enable the request and response '\n                                        + 'validation against the OpenAPI definition'}\n                                    />\n                                )}\n                                aria-label='Schema Validation'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                        <FormControlLabel\n                            className={classes.actionSpace}\n                            control={(\n                                <Switch\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={\n                                        api.enableSchemaValidation === undefined ? false : api.enableSchemaValidation\n                                    }\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'enableSchemaValidation',\n                                        value: checked,\n                                    })}\n                                    color='primary'\n                                    id='schema-validation-switch'\n                                />\n                            )}\n                        />\n                    </Grid>\n                </Grid>\n                <Dialog\n                    open={isOpen}\n                    onClose={() => this.setIsOpen(false)}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.SchemaValidation.title'\n                            defaultMessage='Caution!'\n                        />\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <Typography variant='subtitle1' display='block' gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.SchemaValidation.description'\n                                    defaultMessage={\n                                        'Enabling JSON schema validation will cause to build the'\n                                        + ' payload in every request and response. This will impact'\n                                        + ' the round trip time of an API request!'\n                                    }\n                                />\n                            </Typography>\n                            <Typography variant='subtitle2' display='block' gutterBottom>\n                                <b>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Configuration.components.SchemaValidation'\n                                        + '.description.question'}\n                                        defaultMessage='Do you want to enable schema validation?'\n                                    />\n                                </b>\n                            </Typography>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            color='primary'\n                            variant='contained'\n                            onClick={() => this.setIsOpen(false)}\n                            id='schema-validation-yes-btn'\n                        >\n                            Yes\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                this.setIsOpen(false);\n                                configDispatcher({\n                                    action: 'enableSchemaValidation',\n                                    value: false,\n                                });\n                            }}\n                            color='primary'\n                        >\n                            No\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Paper>\n        );\n    }\n}\n\nSchemaValidation.propTypes = {\n    api: PropTypes.shape({ enableSchemaValidation: PropTypes.bool }).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nSchemaValidation.contextType = ApiContext;\n\nexport default withStyles(styles)(SchemaValidation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Collapse } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1), // TODO: replace with <Box /> element `mb`\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function MaxBackendTps(props) {\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} defaultExpanded id='maxBackendTps'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.MaxBackendTps.maximum.backend.throughput'\n                                defaultMessage='Backend Throughput'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.MaxBackendTps.tooltip'\n                                        defaultMessage={'Limits the total number of calls the API Manager is allowed'\n                                        + ' to make to the backend'}\n                                    />\n                                )}\n                                aria-label='APISecurity'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>Maximum Throughput</FormLabel>\n                            <RadioGroup\n                                aria-label='change-max-TPS'\n                                value={api.maxTps === null ? 'unlimited' : 'specify'}\n                                onChange={(event) => {\n                                    configDispatcher({\n                                        action: 'maxTps',\n                                        value:\n                                            event.target.value === 'specify' ? { production: null, sandbox: null }\n                                                : null,\n                                    });\n                                }}\n                                row\n                            >\n                                <FormControlLabel\n                                    value='unlimited'\n                                    control={(\n                                        <Radio\n                                            color='primary'\n                                            disabled={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    label='Unlimited'\n                                    labelPlacement='end'\n\n                                />\n                                <FormControlLabel\n                                    value='specify'\n                                    control={(\n                                        <Radio\n                                            color='primary'\n                                            disabled={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    label='Specify'\n                                    labelPlacement='end'\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                        <Collapse in={api.maxTps !== null}>\n                            <Grid item xs={12} style={{ marginBottom: 10, position: 'relative' }}>\n                                <TextField\n                                    label='Max Production TPS'\n                                    margin='normal'\n                                    variant='outlined'\n                                    onChange={(event) => {\n                                        configDispatcher({\n                                            action: 'maxTps',\n                                            value: { ...api.maxTps, production: event.target.value },\n                                        });\n                                    }}\n                                    value={api.maxTps !== null ? api.maxTps.production : ''}\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position='end'>TPS</InputAdornment>,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} style={{ marginBottom: 10, position: 'relative' }}>\n                                <TextField\n                                    label='Max Sandbox TPS'\n                                    margin='normal'\n                                    variant='outlined'\n                                    onChange={(event) => {\n                                        configDispatcher({\n                                            action: 'maxTps',\n                                            value: { ...api.maxTps, sandbox: event.target.value },\n                                        });\n                                    }}\n                                    value={api.maxTps !== null ? api.maxTps.sandbox : ''}\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position='end'>TPS</InputAdornment>,\n                                    }}\n                                />\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.MaxBackendTps.formattedMessage'\n                                        defaultMessage='Maximum backend transactions per second in integers'\n                                    />\n                                </FormHelperText>\n                            </Grid>\n                        </Collapse>\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nMaxBackendTps.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Grid, withStyles } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport EditMediationPolicy from 'AppComponents/Apis/Details/MediationPolicies/EditMediationPolicy';\nimport EditRounded from '@material-ui/icons/EditRounded';\n\nconst styles = {\n    content: {\n        flexGrow: 1,\n    },\n    itemWrapper: {\n        width: 'auto',\n        display: 'flex',\n    },\n    FormControl: {\n        padding: 10,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    subTitle: {\n        marginTop: 20,\n    },\n    subTitleDescription: {\n        marginBottom: 10,\n    },\n    flowWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    heading: {\n        margin: 'auto',\n        color: 'rgba(0, 0, 0, 0.40)',\n        wordBreak: 'break-all',\n        whiteSpace: 'normal',\n    },\n    paper: {\n        padding: '10px 24px',\n        width: 'auto',\n    },\n};\n\n/**\n * The base component of the IN mediation policy.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nfunction InFlow(props) {\n    const {\n        classes, updateMediationPolicy, selectedMediationPolicy, type, isRestricted,\n    } = props;\n    const [editing, setEditing] = useState(false);\n\n    function startEditing() {\n        setEditing(true);\n    }\n    return (\n        <>\n            <Paper className={classes.paper}>\n                <Grid container spacing={2} alignItems='flex-start'>\n                    <Grid item md={12} style={{ position: 'relative', display: 'inline-flex' }}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.MediationPolicies.Mediation'\n                                defaultMessage='Message Mediation'\n                            />\n                        </Typography>\n                        <Typography className={classes.heading}>\n                            {selectedMediationPolicy && selectedMediationPolicy.name ? (\n                                <span>{selectedMediationPolicy.name}</span>\n                            ) : (\n                                <span>none</span>\n                            )}\n                        </Typography>\n                        <Button\n                            size='small'\n                            onClick={startEditing}\n                            disabled={isRestricted}\n                        >\n                            <EditRounded />\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            <EditMediationPolicy\n                setEditing={setEditing}\n                editing={editing}\n                updateMediationPolicy={updateMediationPolicy}\n                selectedMediationPolicy={selectedMediationPolicy}\n                type={type}\n            />\n        </>\n    );\n}\n\nInFlow.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    updateMediationPolicy: PropTypes.func.isRequired,\n    selectedMediationPolicy: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(InFlow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dropzone from 'react-dropzone';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Utils from 'AppData/Utils';\nimport API from 'AppData/api.js';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst dropzoneStyles = {\n    border: '1px dashed ',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\nconst styles = (theme) => ({\n    formControl: {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: `${theme.spacing(2)}px 2px`,\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 'calc(100vh - 50em)',\n        padding: `${theme.spacing(2)}px ${theme.spacing(2)}px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        '& span': {\n            fontSize: 64,\n            color: theme.palette.primary.main,\n        },\n    },\n    radioWrapper: {\n        flexDirection: 'row',\n    },\n});\n/**\n * The component to manage IN mediation policies.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nfunction EditMediationPolicy(props) {\n    const {\n        classes, updateMediationPolicy, selectedMediationPolicy, setEditing, editing, type, intl,\n    } = props;\n    const { api } = useContext(ApiContext);\n\n    const [globalMediationPolicies, setGlobalMediationPolicies] = useState(null);\n    // user uploaded api specific mediation policies\n    const [seqCustom, setSeqCustom] = useState(null);\n    const [provideBy, setProvideBy] = useState();\n    const { id: apiId } = api;\n    const NONE = 'none';\n    const [localSelectedPolicyFile, setLocalSelectedPolicyFile] = useState(selectedMediationPolicy);\n    function updatePoliciesFromBE() {\n        const globalPromise = API.getGlobalMediationPolicies();\n        const customPromise = API.getMediationPolicies(apiId);\n        Promise.all([globalPromise, customPromise])\n            .then((values) => {\n                setGlobalMediationPolicies([...values[0].obj.list.filter((seq) => seq.type === type)]);\n                setSeqCustom([...values[1].obj.list.filter((seq) => seq.type === type)]);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.MediationPolicies.Edit.EditMediationPolicy.error',\n                        defaultMessage: 'Error retrieving mediation policies',\n                    }));\n                }\n            });\n    }\n    function setActivePolicy(policy) {\n        if (policy.name !== NONE) {\n            Object.assign(policy, { content: '' });\n            setLocalSelectedPolicyFile(policy);\n            // updateMediationPolicy(policy);\n        } else {\n            Object.assign(policy, { content: '', id: NONE });\n            setLocalSelectedPolicyFile(policy);\n            // updateMediationPolicy(policy);\n        }\n    }\n    useEffect(() => {\n        if (selectedMediationPolicy) {\n            const { shared } = selectedMediationPolicy;\n            if (shared) {\n                setProvideBy('global');\n            } else if (selectedMediationPolicy.name === NONE) {\n                setProvideBy('none');\n            } else {\n                setProvideBy('custom');\n            }\n        } else {\n            setProvideBy('none');\n        }\n    }, [selectedMediationPolicy]);\n    useEffect(() => {\n        updatePoliciesFromBE();\n    }, []);\n\n    useEffect(() => {\n        if (provideBy === 'custom' && seqCustom && seqCustom.length > 0) {\n            setActivePolicy(seqCustom[0]);\n        } else if (provideBy === 'global' && globalMediationPolicies && globalMediationPolicies.length > 0) {\n            setActivePolicy(globalMediationPolicies[0]);\n        }\n    }, [provideBy]);\n\n    // useEffect(() => {\n    //     if (globalInMediationPolicies && globalInMediationPolicies.length > 0) {\n    //         setProvideBy('global');\n    //     } else if (inSeqCustom && inSeqCustom.length > 0) {\n    //         setProvideBy('custom');\n    //     } else {\n    //         setProvideBy('none');\n    //     }\n    // }, [globalInMediationPolicies, inSeqCustom]);\n    const saveMediationPolicy = (newPolicy) => {\n        const promisedApi = API.addMediationPolicy(newPolicy, apiId, type);\n        promisedApi\n            .then((response) => {\n                const {\n                    body: { id, type: policyType, name },\n                } = response;\n                updatePoliciesFromBE();\n                setLocalSelectedPolicyFile({\n                    id,\n                    type: policyType,\n                    name,\n                    shared: false,\n                    content: '',\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.MediationPolicies.Edit.EditMediationPolicy.success',\n                    defaultMessage: 'Mediation policy added successfully',\n                }));\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                if (errorResponse.response.body.description !== null) {\n                    Alert.error(errorResponse.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.MediationPolicies.Edit.AddMediationPolicy.error',\n                        defaultMessage: 'Error while adding mediation policy',\n                    }));\n                }\n            });\n    };\n    /**\n     * Handled the file upload action of the dropzone.\n     * @param {file} policy The accepted file list by the dropzone.\n     * */\n    const onDrop = (policy) => {\n        const policyFile = policy[0];\n        if (policyFile) {\n            saveMediationPolicy(policyFile);\n        }\n    };\n    /**\n     * Handles the mediation policy select event.\n     * @param {any} event The event pass to the layout\n     */\n    function handleChange(event) {\n        const policy = {\n            name: event.target.getAttribute('seq_name'),\n            id: event.target.getAttribute('seq_id'),\n            type: event.target.getAttribute('seq_type'),\n        };\n        setActivePolicy(policy);\n    }\n    /**\n     * Handles the Global mediation policy download.\n     * @param {any} policyToDownload policy file id that is to be downloaded.\n     */\n    function downloadGlobalMediationPolicyContent(policyToDownload) {\n        const promisedGetContent = API.getGlobalMediationPolicyContent(policyToDownload);\n        promisedGetContent\n            .then((response) => {\n                Utils.forceDownload(response);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                    Alert.error(<FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.download.error'\n                        defaultMessage='Error downloading the file'\n                    />);\n                }\n            });\n    }\n\n    /**\n     * Handles the custom mediation policy download.\n     * @param {any} policyToDownload policy file id that is to be downloaded.\n     */\n    function downloadCustomMediationPolicyContent(policyToDownload) {\n        const promisedGetContent = API.getMediationPolicyContent(policyToDownload, apiId);\n        promisedGetContent\n            .then((done) => {\n                Utils.forceDownload(done, document);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(<FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.download.error'\n                        defaultMessage='Error downloading the file'\n                    />);\n                }\n            });\n    }\n    /**\n     * Handles the custom mediation policy delete.\n     * @param {any} policyToDelete policy file id that is to be deleted.\n     */\n    function deleteCustomMediationPolicy(policyToDelete) {\n        const promisedGetContent = API.deleteMediationPolicy(policyToDelete, api.id);\n        promisedGetContent\n            .then(() => {\n                setSeqCustom(seqCustom.filter((seq) => seq.id !== policyToDelete));\n                Alert.info(<FormattedMessage\n                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.delete.success'\n                    defaultMessage='Mediation policy deleted successfully.'\n                />);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(<FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.delete.error'\n                        defaultMessage='Error deleting the file'\n                    />);\n                }\n            });\n    }\n    const handleDownload = (policyToDownload) => {\n        const isGlobalMediationPolicy = globalMediationPolicies.filter(\n            (policy) => policy.id === policyToDownload,\n        ).length > 0;\n        if (isGlobalMediationPolicy) {\n            downloadGlobalMediationPolicyContent(policyToDownload);\n        } else {\n            downloadCustomMediationPolicyContent(policyToDownload);\n        }\n    };\n    const handleDelete = (policyToDelete) => {\n        const isGlobalMediationPolicy = globalMediationPolicies.filter(\n            (policy) => policy.id === policyToDelete,\n        ).length > 0;\n        if (isGlobalMediationPolicy) {\n            Alert.error(<FormattedMessage\n                id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.global.delete'\n                defaultMessage='Cannot delete Global mediation policies.'\n            />);\n        } else {\n            deleteCustomMediationPolicy(policyToDelete);\n        }\n    };\n    function cancelEditing() {\n        setEditing(false);\n    }\n    function doneEditing() {\n        updateMediationPolicy(localSelectedPolicyFile);\n        setEditing(false);\n    }\n    function handleChangeProvideBy(event) {\n        const inputValue = event.target.value;\n        setProvideBy(inputValue);\n        if (inputValue === NONE) {\n            setActivePolicy({ name: NONE, type: NONE });\n        } else {\n            setActivePolicy({});\n        }\n    }\n    return (\n        <Dialog\n            disableBackdropClick\n            disableEscapeKeyDown\n            maxWidth='sm'\n            fullWidth\n            aria-labelledby='confirmation-dialog-title'\n            open={editing}\n        >\n            <DialogTitle id='confirmation-dialog-title'>\n                <FormattedMessage\n                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.select.policy'\n                    defaultMessage='Select a Mediation Policy'\n                />\n            </DialogTitle>\n            {globalMediationPolicies && seqCustom && (\n                <DialogContent dividers>\n                    <RadioGroup value={provideBy} onChange={handleChangeProvideBy} className={classes.radioWrapper}>\n                        <FormControlLabel\n                            value='none'\n                            control={<Radio color='primary' />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.none'\n                                    defaultMessage='None'\n                                />\n                            )}\n                        />\n                        <FormControlLabel\n                            value='global'\n                            control={<Radio color='primary' />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.common.policies'\n                                    defaultMessage='Common Policies'\n                                />\n                            )}\n                        />\n                        <FormControlLabel\n                            value='custom'\n                            control={<Radio color='primary' />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.custom.policies'\n                                    defaultMessage='Custom Policies'\n                                />\n                            )}\n                        />\n                    </RadioGroup>\n                    {provideBy === 'custom' && (\n                        <>\n                            <Dropzone\n                                multiple={false}\n                                className={classes.dropzone}\n                                activeClassName={classes.acceptDrop}\n                                rejectClassName={classes.rejectDrop}\n                                onDrop={(dropFile) => {\n                                    onDrop(dropFile);\n                                }}\n                            >\n                                {({ getRootProps, getInputProps }) => (\n                                    <div {...getRootProps({ style: dropzoneStyles })}>\n                                        <input {...getInputProps()} accept='application/xml,text/xml' />\n                                        <div className={classes.dropZoneWrapper}>\n                                            <Icon className={classes.dropIcon}>cloud_upload</Icon>\n                                            <Typography>\n                                                <FormattedMessage\n                                                    id={\n                                                        'Apis.Details.MediationPolicies.Edit.EditMediationPolicy.'\n                                                        + 'click.or.drop.to.upload.file'\n                                                    }\n                                                    defaultMessage='Click or drag the mediation file to upload.'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    </div>\n                                )}\n                            </Dropzone>\n                            <RadioGroup\n                                aria-label='inflow'\n                                name='inflow'\n                                className={classes.radioGroup}\n                                value={localSelectedPolicyFile.name}\n                                onChange={handleChange}\n                            >\n                                <FormLabel component='customPolicies'>\n                                    <FormattedMessage\n                                        id={\n                                            'Apis.Details.Edit.MediationPolicies.'\n                                            + 'EditMediationPolicies.custom.mediation.policies'\n                                        }\n                                        defaultMessage='Custom Mediation Policies'\n                                    />\n                                </FormLabel>\n                                {seqCustom.map((seq) => (\n                                    <div>\n                                        <IconButton onClick={() => handleDelete(seq.id)}>\n                                            <Icon>delete</Icon>\n                                        </IconButton>\n                                        <Button onClick={() => handleDownload(seq.id)}>\n                                            <Icon>arrow_downward</Icon>\n                                        </Button>\n                                        <FormControlLabel\n                                            control={(\n                                                <Radio\n                                                    inputProps={{\n                                                        seq_id: seq.id,\n                                                        seq_name: seq.name,\n                                                        seq_type: seq.type,\n                                                    }}\n                                                    color='primary'\n                                                />\n                                            )}\n                                            label={seq.name}\n                                            value={seq.name}\n                                            checked={localSelectedPolicyFile.name === seq.name}\n                                        />\n                                    </div>\n                                ))}\n                            </RadioGroup>\n                        </>\n                    )}\n                    {provideBy === 'global' && (\n                        <RadioGroup\n                            aria-label='inflow'\n                            name='inflow'\n                            className={classes.radioGroup}\n                            value={localSelectedPolicyFile.name}\n                            onChange={handleChange}\n                        >\n                            {globalMediationPolicies.map((seq) => (\n                                <Box display='flex' justifyContent='space-between'>\n                                    <FormControlLabel\n                                        control={(\n                                            <Radio\n                                                inputProps={{\n                                                    seq_id: seq.id,\n                                                    seq_name: seq.name,\n                                                    seq_type: seq.type,\n                                                }}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label={seq.name}\n                                        value={seq.name}\n                                        checked={localSelectedPolicyFile.name === seq.name}\n                                    />\n                                    <Box mr={22}>\n                                        <Tooltip\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.MediationPolicies.EditMediationPolicy.download'\n                                                    defaultMessage='Download'\n                                                />\n                                            )}\n                                            aria-label='Download policy'\n                                            placement='right-end'\n                                            interactive\n                                        >\n                                            <Button onClick={() => handleDownload(seq.id)}>\n                                                <Icon>vertical_align_bottom</Icon>\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                </Box>\n                            ))}\n                        </RadioGroup>\n                    )}\n                </DialogContent>\n            )}\n            <DialogActions>\n                <Button onClick={cancelEditing} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.cancel.btn'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button\n                    onClick={doneEditing}\n                    color='primary'\n                    variant='contained'\n                    disabled={provideBy === 'custom' && seqCustom && seqCustom.length === 0}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.select.btn'\n                        defaultMessage='Select'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\nEditMediationPolicy.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    selectedMediationPolicy: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n    updateMediationPolicy: PropTypes.func.isRequired,\n    setEditing: PropTypes.func.isRequired,\n    editing: PropTypes.bool.isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EditMediationPolicy));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ApiContext, { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport {\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './components/apiSecurityConstants';\nimport ApplicationLevel from './components/ApplicationLevel';\nimport TransportLevel from './components/TransportLevel';\n\nconst useStyles = makeStyles((theme) => ({\n    error: {\n        color: theme.palette.error.main,\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APISecurity(props) {\n    const {\n        api: { securityScheme, id },\n        configDispatcher,\n        api,\n    } = props;\n    const apiContext = useContext(ApiContext);\n    const isAPIProduct = apiContext.api.apiType === API.CONSTS.APIProduct;\n    let isEndpointAvailable;\n    let isPrototyped;\n    if (isAPIProduct) {\n        isEndpointAvailable = false;\n        isPrototyped = false;\n    } else {\n        isEndpointAvailable = apiContext.api.endpointConfig !== null;\n        isPrototyped = apiContext.api.endpointConfig !== null\n             && apiContext.api.endpointConfig.implementation_status === 'prototyped';\n    }\n\n    const haveMultiLevelSecurity = securityScheme.includes(API_SECURITY_MUTUAL_SSL)\n        && (securityScheme.includes(API_SECURITY_BASIC_AUTH)\n        || securityScheme.includes(\n            DEFAULT_API_SECURITY_OAUTH2,\n        ) || securityScheme.includes(API_SECURITY_API_KEY));\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    // Check the validation conditions and return an error message\n    const Validate = () => {\n        let resourcesWithSecurity;\n        if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n            const apiList = apiFromContext.apis;\n            for (const apiInProduct in apiList) {\n                if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                    resourcesWithSecurity = apiList[apiInProduct].operations.findIndex(\n                        (op) => op.authType !== 'None',\n                    ) > -1;\n                    if (resourcesWithSecurity) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            resourcesWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n        }\n\n        if (\n            !securityScheme.includes(API_SECURITY_MUTUAL_SSL)\n            && !securityScheme.includes(API_SECURITY_BASIC_AUTH)\n            && !securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2)\n            && !securityScheme.includes(API_SECURITY_API_KEY)\n            && resourcesWithSecurity\n        ) {\n            return (\n                <Typography className={classes.bottomSpace}>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APISecurity.emptySchemas'\n                        defaultMessage='Please select at least one API security method!'\n                    />\n                </Typography>\n            );\n        } else if (\n            // User has enabled both security levels and set both levels as optional\n            haveMultiLevelSecurity\n            && !(\n                securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY)\n                || securityScheme.includes(API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY)\n            )\n        ) {\n            return (\n                <Typography className={classes.bottomSpace}>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APISecurity.allOptional'\n                        defaultMessage=\"Please select at least one API security level as 'Mandatory'!\"\n                    />\n                </Typography>\n            );\n        }\n        return null; // No errors :-)\n    };\n    return (\n        <>\n            <Grid container spacing={2} alignItems='flex-start'>\n                {(isAPIProduct || (!isEndpointAvailable || (isEndpointAvailable && !isPrototyped)))\n                && (\n                    <>\n                        <TransportLevel\n                            haveMultiLevelSecurity={haveMultiLevelSecurity}\n                            securityScheme={securityScheme}\n                            configDispatcher={configDispatcher}\n                            api={api}\n                            id={id}\n                        />\n                        <ApplicationLevel\n                            haveMultiLevelSecurity={haveMultiLevelSecurity}\n                            securityScheme={securityScheme}\n                            api={api}\n                            configDispatcher={configDispatcher}\n                            id={id}\n                        />\n                        <Grid item>\n                            <span className={classes.error}>\n                                <Validate />\n                            </span>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </>\n    );\n}\n\nAPISecurity.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AuthorizationHeader from 'AppComponents/Apis/Details/Configuration/components/AuthorizationHeader.jsx';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport KeyManager from 'AppComponents/Apis/Details/Configuration/components/KeyManager';\nimport API from 'AppData/api';\n\nimport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ApplicationLevel(props) {\n    const {\n        haveMultiLevelSecurity, securityScheme, configDispatcher, api,\n    } = props;\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    let mandatoryValue = null;\n    let hasResourceWithSecurity;\n    if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n        const apiList = apiFromContext.apis;\n        for (const apiInProduct in apiList) {\n            if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                hasResourceWithSecurity = apiList[apiInProduct].operations.findIndex(\n                    (op) => op.authType !== 'None',\n                ) > -1;\n                if (hasResourceWithSecurity) {\n                    break;\n                }\n            }\n        }\n    } else {\n        hasResourceWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n    }\n\n    mandatoryValue = 'optional';\n    // If not Oauth2, Basic auth or ApiKey security is selected, no mandatory values should be pre-selected\n    if (!(securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2) || securityScheme.includes(API_SECURITY_BASIC_AUTH)\n        || securityScheme.includes(API_SECURITY_API_KEY))) {\n        mandatoryValue = null;\n    } else if (!securityScheme.includes(API_SECURITY_MUTUAL_SSL)) {\n        mandatoryValue = API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY;\n    } else if (securityScheme.includes(API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY)) {\n        mandatoryValue = API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY;\n    }\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} id='applicationLevel'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.APISecurity.Components.\n                                    ApplicationLevel.http'\n                                defaultMessage='Application Level Security'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.tooltip'\n                                        defaultMessage={\n                                            'This option determines the type of security'\n                                            + ' that will be used to secure this API. An API can be secured '\n                                            + 'with either OAuth2/Basic/ApiKey or it can be secured with all of them. '\n                                            + 'If OAuth2 option is selected, relevant API will require a valid '\n                                            + 'OAuth2 token for successful invocation.'\n                                        }\n                                    />\n                                )}\n                                aria-label='APISecurity'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <FormGroup style={{ display: 'flow-root' }}>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        checked={securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={DEFAULT_API_SECURITY_OAUTH2}\n                                        color='primary'\n                                    />\n                                )}\n                                label='OAuth2'\n                            />\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        checked={securityScheme.includes(API_SECURITY_BASIC_AUTH)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={API_SECURITY_BASIC_AUTH}\n                                        color='primary'\n                                        id='api-security-basic-auth-checkbox'\n                                    />\n                                )}\n                                label='Basic'\n                            />\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={securityScheme.includes(API_SECURITY_API_KEY)}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={API_SECURITY_API_KEY}\n                                        color='primary'\n                                        id='api-security-api-key-checkbox'\n                                    />\n                                )}\n                                label='Api Key'\n                            />\n                        </FormGroup>\n                        <FormControl className={classes.bottomSpace} component='fieldset'>\n                            <RadioGroup\n                                aria-label='HTTP security HTTP mandatory selection'\n                                name={API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY}\n                                value={mandatoryValue}\n                                onChange={({ target: { name, value } }) => configDispatcher({\n                                    action: 'securityScheme',\n                                    event: { name, value },\n                                })}\n                                row\n                            >\n                                <FormControlLabel\n                                    value={API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY}\n                                    control={(\n                                        <Radio\n                                            disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label='Mandatory'\n                                    labelPlacement='end'\n                                />\n                                <FormControlLabel\n                                    value='optional'\n                                    control={(\n                                        <Radio\n                                            disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label='Optional'\n                                    labelPlacement='end'\n                                />\n                            </RadioGroup>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.APISecurity.application.mandatory'\n                                    defaultMessage='Choose whether Application level security is mandatory or optional'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                        {(apiFromContext.apiType === API.CONSTS.API) && (\n                            <KeyManager\n                                api={api}\n                                configDispatcher={configDispatcher}\n                            />\n                        )}\n                        <AuthorizationHeader api={api} configDispatcher={configDispatcher} />\n                        <FormControl>\n                            {!hasResourceWithSecurity\n                            && (\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.api.unsecured'\n                                        defaultMessage='Application level security is not required since API\n                                        has no secured resources'\n                                    />\n                                </FormHelperText>\n                            )}\n                        </FormControl>\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nApplicationLevel.propTypes = {\n    configDispatcher: PropTypes.func.isRequired,\n    haveMultiLevelSecurity: PropTypes.bool.isRequired,\n    securityScheme: PropTypes.arrayOf(PropTypes.string).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport APIValidation from 'AppData/APIValidation';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\n\nexport default function AuthorizationHeader(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    const [isHeaderNameValid, setIsHeaderNameValid] = useState(true);\n    let hasResourceWithSecurity;\n    if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n        const apiList = apiFromContext.apis;\n        for (const apiInProduct in apiList) {\n            if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                hasResourceWithSecurity = apiList[apiInProduct].operations.findIndex(\n                    (op) => op.authType !== 'None',\n                ) > -1;\n                if (hasResourceWithSecurity) {\n                    break;\n                }\n            }\n        }\n    } else {\n        hasResourceWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n    }\n    if (!hasResourceWithSecurity && api.authorizationHeader !== '') {\n        configDispatcher({ action: 'authorizationHeader', value: '' });\n    }\n\n    function validateHeader(value) {\n        const headerValidity = APIValidation.authorizationHeader.required()\n            .validate(value, { abortEarly: false }).error;\n        if (headerValidity === null) {\n            setIsHeaderNameValid(true);\n            configDispatcher({ action: 'saveButtonDisabled', value: false });\n        } else {\n            setIsHeaderNameValid(false);\n            configDispatcher({ action: 'saveButtonDisabled', value: true });\n        }\n    }\n\n    return (\n        <Grid container spacing={1} alignItems='center'>\n            <Grid item xs={11}>\n                <TextField\n                    disabled={isRestricted(['apim:api_create'], apiFromContext) || !hasResourceWithSecurity}\n                    id='outlined-name'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.auth.header.label'\n                            defaultMessage='Authorization Header'\n                        />\n                    )}\n                    value={hasResourceWithSecurity ? (api.authorizationHeader || ' ') : ''}\n                    error={!isHeaderNameValid}\n                    helperText={\n                        (!isHeaderNameValid)\n                        && (\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.AuthHeader.helper.text'\n                                defaultMessage='Authorization header name cannot contain spaces or special characters'\n                            />\n                        )\n                    }\n                    InputProps={{\n                        id: 'itest-id-headerName-input',\n                        onBlur: ({ target: { value } }) => {\n                            validateHeader(value);\n                        },\n                    }}\n                    margin='normal'\n                    variant='outlined'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'authorizationHeader', value })}\n                    style={{ display: 'flex' }}\n                />\n            </Grid>\n            <Grid item xs={1}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.AuthHeader.tooltip'\n                            defaultMessage={\n                                ' The header name that is used to send the authorization '\n                                + 'information. \"Authorization\" is the default header.'\n                            }\n                        />\n                    )}\n                    aria-label='Auth Header'\n                    placement='right-end'\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Grid>\n        </Grid>\n    );\n}\n\nAuthorizationHeader.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Certificates from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/Certificates';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport Transports from 'AppComponents/Apis/Details/Configuration/components/Transports.jsx';\n\nimport {\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n} from './apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction TransportLevel(props) {\n    const {\n        haveMultiLevelSecurity, securityScheme, configDispatcher, intl, id, api,\n    } = props;\n    const isMutualSSLEnabled = securityScheme.includes(API_SECURITY_MUTUAL_SSL);\n    const [apiFromContext] = useAPI();\n    const [clientCertificates, setClientCertificates] = useState([]);\n    const classes = useStyles();\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     *\n     * @param {string} certificate The certificate needs to be associated with the API\n     * @param {string} policy The tier to be used for the certificate.\n     * @param {string} alias The alias of the certificate to be deleted.\n     *\n     * */\n    const saveClientCertificate = (certificate, policy, alias) => {\n        return API.addClientCertificate(id, certificate, policy, alias).then((resp) => {\n            if (resp.status === 201) {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.add.success',\n                    defaultMessage: 'Certificate added successfully',\n                }));\n                const tmpCertificates = [...clientCertificates];\n                tmpCertificates.push({\n                    apiId: resp.obj.apiId,\n                    alias: resp.obj.alias,\n                    tier: resp.obj.tier,\n                });\n                setClientCertificates(tmpCertificates);\n            }\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.alias.error',\n                    defaultMessage: 'Something went wrong while adding the API certificate',\n                }));\n            }\n        });\n    };\n\n    /**\n     * Method to delete the selected certificate.\n     *\n     * @param {string} alias The alias of the certificate to be deleted.\n     * */\n    const deleteClientCertificate = (alias) => {\n        return API.deleteClientCertificate(alias, id).then((resp) => {\n            setClientCertificates(() => {\n                if (resp.status === 200) {\n                    return clientCertificates.filter((cert) => {\n                        return cert.alias !== alias;\n                    });\n                } else {\n                    return -1;\n                }\n            });\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.delete.success',\n                defaultMessage: 'Certificate Deleted Successfully',\n            }));\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.delete.error',\n                    defaultMessage: 'Error while deleting certificate',\n                }));\n            }\n        });\n    };\n\n    // Get the client certificates from backend.\n    useEffect(() => {\n        API.getAllClientCertificates(id).then((resp) => {\n            const { certificates } = resp.obj;\n            setClientCertificates(certificates);\n        }).catch((err) => {\n            console.error(err);\n            setClientCertificates([]);\n        });\n    }, []);\n\n    let mandatoryValue = 'optional';\n    // If not mutual ssl security is selected, no mandatory values should be pre-selected\n    if (!isMutualSSLEnabled) {\n        mandatoryValue = 'null';\n    } else if (\n        !(securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2) || securityScheme.includes(API_SECURITY_BASIC_AUTH)\n            || securityScheme.includes(API_SECURITY_API_KEY))\n    ) {\n        mandatoryValue = API_SECURITY_MUTUAL_SSL_MANDATORY;\n    } else if (securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY)) {\n        mandatoryValue = API_SECURITY_MUTUAL_SSL_MANDATORY;\n    }\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} id='transportLevel'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.APISecurity.Components.\n                                    TransportLevel.transport.level.security'\n                                defaultMessage='Transport Level Security'\n                            />\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <Transports api={api} configDispatcher={configDispatcher} securityScheme={securityScheme} />\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={isMutualSSLEnabled}\n                                    onChange={({ target: { checked, value } }) => configDispatcher({\n                                        action: 'securityScheme',\n                                        event: { checked, value },\n                                    })}\n                                    value={API_SECURITY_MUTUAL_SSL}\n                                    color='primary'\n                                    id='mutual-ssl-checkbox'\n                                />\n                            )}\n                            label='Mutual SSL'\n                        />\n                        {isMutualSSLEnabled && (\n                            <FormControl component='fieldset'>\n                                <RadioGroup\n                                    aria-label='HTTP security SSL mandatory selection'\n                                    name={API_SECURITY_MUTUAL_SSL_MANDATORY}\n                                    value={mandatoryValue}\n                                    onChange={({ target: { name, value } }) => configDispatcher({\n                                        action: 'securityScheme',\n                                        event: { name, value },\n                                    })}\n                                    row\n                                >\n                                    <FormControlLabel\n                                        value={API_SECURITY_MUTUAL_SSL_MANDATORY}\n                                        control={(\n                                            <Radio\n                                                disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label='Mandatory'\n                                        labelPlacement='end'\n                                    />\n                                    <FormControlLabel\n                                        value='optional'\n                                        control={(\n                                            <Radio\n                                                disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label='Optional'\n                                        labelPlacement='end'\n                                    />\n                                </RadioGroup>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.http.mandatory'\n                                        defaultMessage='Choose whether Transport level security is mandatory or\n                                        optional'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        )}\n                        {isMutualSSLEnabled && (\n                            // TODO:\n                            // This is half baked!!!\n                            // Refactor the Certificate component to share its capabilities in here and\n                            // endpoints page ~tmkb\n                            <Certificates\n                                isMutualSSLEnabled={isMutualSSLEnabled}\n                                certificates={clientCertificates}\n                                uploadCertificate={saveClientCertificate}\n                                deleteCertificate={deleteClientCertificate}\n                                apiId={id}\n                            />\n                        )}\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nTransportLevel.propTypes = {\n    configDispatcher: PropTypes.func.isRequired,\n    haveMultiLevelSecurity: PropTypes.bool.isRequired,\n    securityScheme: PropTypes.arrayOf(PropTypes.string).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    id: PropTypes.string.isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl((TransportLevel));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Icon,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport Dropzone from 'react-dropzone';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport APIValidation from 'AppData/APIValidation';\nimport SelectEndpoint from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/SelectEndpoint';\nimport SelectPolicies from '../../../Create/Components/SelectPolicies';\n\nconst dropzoneStyles = {\n    border: '1px dashed #c4c4c4',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    fileinput: {\n        display: 'none',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n    certificatesHeader: {\n        fontWeight: 600,\n        marginTop: 20,\n    },\n    addCertificateBtn: {\n        borderColor: '#c4c4c4',\n        borderRadius: '8px',\n        borderStyle: 'dashed',\n        borderWidth: 'thin',\n    },\n    certificateList: {\n        maxHeight: '250px',\n        overflow: 'scroll',\n    },\n    certDetailsHeader: {\n        fontWeight: '600',\n    },\n    uploadCertDialogHeader: {\n        fontWeight: '600',\n    },\n}));\n\n/**\n * This component is used to upload the certificates\n * @param {any} props The input props.\n * @returns {any} The HTML representation of the Certificates.\n */\nexport default function UploadCertificate(props) {\n    const {\n        endpoints,\n        uploadCertificate,\n        isMutualSSLEnabled,\n        uploadCertificateOpen,\n        setUploadCertificateOpen,\n        aliasList,\n    } = props;\n    const [alias, setAlias] = useState('');\n    const [policy, setPolicy] = useState('');\n    const [endpoint, setEndpoint] = useState('');\n    const [isSaving, setSaving] = useState(false);\n    const [certificate, setCertificate] = useState({ name: '', content: {} });\n    const [isEndpointEmpty, setIsEndpointEmpty] = useState(false);\n    const [isPoliciesEmpty, setPoliciesEmpty] = useState(false);\n    const [aliasValidity, setAliasValidity] = useState();\n    const classes = useStyles();\n    const [isRejected, setIsRejected] = useState(false);\n\n    const closeCertificateUpload = () => {\n        setUploadCertificateOpen(false);\n        setAliasValidity();\n        setCertificate({ name: '', content: '' });\n        setAlias('');\n        setEndpoint('');\n        setPolicy('');\n    };\n\n    /**\n     * On change functionality to handle the policy dropdown\n     *\n     * @param {*} event\n     */\n    function handleOnChange(event) {\n        const { value } = event.target;\n        setPolicy(value);\n    }\n\n    /**\n     * Method to validate the policies.\n     * @param {string} value selected policy.\n     * */\n    const onValidate = (value) => {\n        setPoliciesEmpty(value === '');\n    };\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     * */\n    const saveCertificate = () => {\n        setSaving(true);\n        if (isMutualSSLEnabled) {\n            uploadCertificate(certificate.content, policy, alias)\n                .then(closeCertificateUpload)\n                .finally(() => setSaving(false));\n        } else {\n            uploadCertificate(certificate.content, endpoint, alias)\n                .then(closeCertificateUpload)\n                .finally(() => setSaving(false));\n        }\n    };\n\n    /**\n     * Handled the file upload action of the dropzone.\n     *\n     * @param {array} file The accepted file list by the dropzone.\n     * */\n    const onDrop = (file) => {\n        const certificateFile = file[0];\n        const rejectedFiles = ['pem', 'txt', 'jks', 'key', 'ca-bundle'];\n        const extension = certificateFile.name.split('.');\n        if (rejectedFiles.includes(extension[1])) {\n            setIsRejected(true);\n        } else {\n            setIsRejected(false);\n        }\n        if (certificateFile) {\n            setCertificate({ name: certificateFile.name, content: certificateFile });\n        }\n    };\n\n    const handleEndpointOnChange = (value) => {\n        setEndpoint(value);\n        if (value) {\n            setIsEndpointEmpty(false);\n        } else {\n            setIsEndpointEmpty(true);\n        }\n    };\n\n    const handleAliasOnBlur = () => {\n        const aliasValidation = APIValidation.alias.required().validate(alias).error;\n        if (aliasValidation) {\n            setAliasValidity({ isValid: false, message: aliasValidation.details[0].message });\n        } else {\n            setAliasValidity({ isValid: true, message: '' });\n        }\n    };\n\n    const getHelperText = () => {\n        if (aliasValidity && !aliasValidity.isValid) {\n            return (aliasValidity.message);\n        } else if (aliasList && aliasList.includes(alias)) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias.exist.error'\n                    defaultMessage='Alias already exists'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias.default.message'\n                    defaultMessage='Alias for the Certificate'\n                />\n            );\n        }\n    };\n\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n    return (\n        <Dialog open={uploadCertificateOpen}>\n            <DialogTitle>\n                <Typography className={classes.uploadCertDialogHeader}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.uploadCertificate'\n                        defaultMessage='Upload Certificate'\n                    />\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid>\n                    <div>\n                        {isMutualSSLEnabled ? (\n                            <SelectPolicies\n                                multiple={false}\n                                policies={policy}\n                                helperText='Select a throttling policy for the certificate'\n                                onChange={handleOnChange}\n                                required\n                                validate={onValidate}\n                            />\n                        )\n                            : (\n                                <SelectEndpoint\n                                    endpoints={endpoints}\n                                    onChange={handleEndpointOnChange}\n                                    endpoint={endpoint}\n                                    isEndpointEmpty={isEndpointEmpty}\n                                    required\n                                />\n                            )}\n                        <TextField\n                            required\n                            id='certificateAlias'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias'\n                                    defaultMessage='Alias'\n                                />\n                            )}\n                            value={alias}\n                            placeholder='My Alias'\n                            onChange={(event) => setAlias(event.target.value)}\n                            onBlur={() => handleAliasOnBlur()}\n                            margin='normal'\n                            variant='outlined'\n                            error={\n                                (aliasValidity && !aliasValidity.isValid) || (aliasList && aliasList.includes(alias))\n                            }\n                            helperText={getHelperText()}\n                            fullWidth\n                            inputProps={{ maxLength: 45 }}\n                        />\n                        <Dropzone\n                            multiple={false}\n                            accept={\n                                'application/pkcs8,'\n                                    + 'application/pkcs10, application/pkix-crl,'\n                                    + 'application/pkcs7-mime,'\n                                    + 'application/x-x509-ca-cert,'\n                                    + 'application/x-x509-user-cert,'\n                                    + 'application/x-pkcs7-crl,'\n                                    + 'application/x-pkcs12,'\n                                    + 'application/x-pkcs7-certificates,'\n                                    + 'application/x-pkcs7-certreqresp,'\n                                    + '.p8, .p10, .cer, .cert, .p7c, .crt, .der, .p12, .pfx, .p7b, .spc, .p7r'\n                            }\n                            className={classes.dropzone}\n                            activeClassName={classes.acceptDrop}\n                            rejectClassName={classes.rejectDrop}\n                            onDrop={(dropFile) => {\n                                onDrop(dropFile);\n                            }}\n                        >\n                            {({ getRootProps, getInputProps }) => (\n                                <div {...getRootProps({ style: dropzoneStyles })}>\n                                    <input {...getInputProps()} />\n                                    <div className={classes.dropZoneWrapper} data-testid='cert-upload-btn'>\n                                        {certificate.name === '' ? (\n                                            <div>\n                                                <Icon style={{ fontSize: 56 }}>cloud_upload</Icon>\n                                                <Typography>\n                                                    <FormattedMessage\n                                                        id={\n                                                            'Apis.Details.Endpoints.GeneralConfiguration'\n                                                                + '.UploadCertificate.click.or.drop.to.upload.file'\n                                                        }\n                                                        defaultMessage={\n                                                            'Click or drag the certificate'\n                                                                + ' file to upload.'\n                                                        }\n                                                    />\n                                                </Typography>\n                                            </div>\n                                        ) : iff(\n                                            isRejected,\n                                            <div classNames={classes.uploadedFile}>\n                                                <InsertDriveFileIcon color='error' fontSize='large' />\n                                                <Box fontSize='h6.fontSize' color='error' fontWeight='fontWeightLight'>\n                                                    <Grid xs={12}>\n                                                        {certificate.name}\n                                                    </Grid>\n                                                    <Grid xs={12}>\n                                                        <Typography variant='caption' color='error'>\n                                                            <FormattedMessage\n                                                                id={\n                                                                    'Apis.Details.Endpoints.GeneralConfiguration'\n                                                            + '.UploadCertificate.invalid.file'\n                                                                }\n                                                                defaultMessage='Invalid file type'\n                                                            />\n                                                        </Typography>\n                                                    </Grid>\n                                                </Box>\n                                            </div>,\n                                            <div className={classes.uploadedFile}>\n                                                <InsertDriveFileIcon color='primary' fontSize='large' />\n                                                <Box fontSize='h6.fontSize' fontWeight='fontWeightLight'>\n                                                    <Typography>\n                                                        {certificate.name}\n                                                    </Typography>\n                                                </Box>\n                                            </div>,\n                                        )}\n                                    </div>\n                                </div>\n                            )}\n                        </Dropzone>\n                    </div>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={closeCertificateUpload}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    id='upload-cert-save-btn'\n                    onClick={saveCertificate}\n                    variant='contained'\n                    color='primary'\n                    autoFocus\n                    disabled={\n                        alias === '' || (aliasValidity && !aliasValidity.isValid)\n                            || (!isMutualSSLEnabled && endpoint === '')\n                            || certificate.name === ''\n                            || (isMutualSSLEnabled && isPoliciesEmpty)\n                            || isSaving || (aliasList && aliasList.includes(alias)) || isRejected\n                    }\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.config.save.button'\n                        defaultMessage='Save'\n                    />\n                    {isSaving && <CircularProgress size={24} />}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nUploadCertificate.defaultProps = {\n    isMutualSSLEnabled: false,\n    endpoints: [],\n};\n\nUploadCertificate.propTypes = {\n    certificates: PropTypes.shape({}).isRequired,\n    uploadCertificate: PropTypes.func.isRequired,\n    isMutualSSLEnabled: PropTypes.bool,\n    setUploadCertificateOpen: PropTypes.func.isRequired,\n    uploadCertificateOpen: PropTypes.bool.isRequired,\n    endpoints: PropTypes.shape([]),\n    aliasList: PropTypes.shape([]).isRequired,\n};\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { MenuItem, TextField } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nexport default function SelectEndpoint(props) {\n    const {\n        onChange,\n        endpoint,\n        isEndpointEmpty,\n        endpoints,\n    } = props;\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n    return (\n        <TextField\n            autoFocus\n            error={isEndpointEmpty || endpoints.length === 0}\n            helperText={endpoints.length === 0 ? (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.empty.error'\n                    defaultMessage='Save endpoints before adding the Certificate'\n                />\n            ) : iff(isEndpointEmpty, <FormattedMessage\n                id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.error'\n                defaultMessage='Endpoint should not be empty'\n            />, <FormattedMessage\n                id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.helpertext'\n                defaultMessage='Endpoint for the Certificate'\n            />)}\n            required\n            id='endpoint-certificate'\n            label={(\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint'\n                    defaultMessage='Endpoint'\n                />\n            )}\n            value={endpoint}\n            placeholder='Endpoint'\n            onChange={(event) => onChange(event.target.value)}\n            margin='normal'\n            variant='outlined'\n            fullWidth\n            select\n        >\n            {endpoints !== null && endpoints.map((ep) => {\n                if (ep) {\n                    return (<MenuItem value={ep.url}>{ep.url}</MenuItem>);\n                }\n                return null;\n            })}\n        </TextField>\n    );\n}\n\nSelectEndpoint.propTypes = {\n    endpoints: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    endpoint: PropTypes.string.isRequired,\n    isEndpointEmpty: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n        marginLeft: theme.spacing(0.1),\n    },\n}));\n\n/**\n * Trottling Policies dropdown selector used in minimized API Create form\n * @export\n * @param {*} props\n * @returns {React.Component}\n */\nexport default function SelectPolicies(props) {\n    const {\n        onChange, policies: selectedPolicies, multiple, helperText, isAPIProduct, validate,\n    } = props;\n    const [policies, setPolicies] = useState({});\n    const classes = useStyles();\n    useEffect(() => {\n        API.policies('subscription').then((response) => setPolicies(response.body));\n    }, []);\n    const handleValidateAndChange = ({ target: { value, name } }) => {\n        validate('policies', value);\n        onChange({ target: { name, value } });\n    };\n    if (!policies.list) {\n        return <CircularProgress />;\n    } else {\n        return (\n            <TextField\n                fullWidth\n                select\n                label={(\n                    <>\n                        <FormattedMessage\n                            id='Apis.Create.Components.SelectPolicies.business.plans'\n                            defaultMessage='Business plan(s)'\n                        />\n                        {isAPIProduct && (<sup className={classes.mandatoryStar}>*</sup>)}\n                    </>\n                )}\n                value={selectedPolicies}\n                name='policies'\n                onChange={handleValidateAndChange}\n                SelectProps={{\n                    multiple,\n                    renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                }}\n                helperText={isAPIProduct ? helperText + 'API Product' : helperText + 'API'}\n                margin='normal'\n                variant='outlined'\n                InputProps={{\n                    id: 'itest-id-apipolicies-input',\n                }}\n            >\n                {policies.list.map((policy) => (\n                    <MenuItem\n                        dense\n                        disableGutters={multiple}\n                        id={policy.name}\n                        key={policy.name}\n                        value={policy.displayName}\n                    >\n                        {multiple && <Checkbox color='primary' checked={selectedPolicies.includes(policy.name)} />}\n                        <ListItemText primary={policy.displayName} secondary={policy.description} />\n                    </MenuItem>\n                ))}\n            </TextField>\n        );\n    }\n}\n\nSelectPolicies.defaultProps = {\n    policies: [],\n    multiple: true,\n    required: false,\n    isAPIProduct: PropTypes.bool.isRequired,\n    helperText: 'Select one or more throttling policies for the ',\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Typography from '@material-ui/core/Typography';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { API_SECURITY_MUTUAL_SSL } from './APISecurity/components/apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    error: {\n        color: theme.palette.error.main,\n    },\n}));\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Transports(props) {\n    const { api, configDispatcher, securityScheme } = props;\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const isMutualSSLEnabled = securityScheme.includes(API_SECURITY_MUTUAL_SSL);\n    const Validate = () => {\n        if (api.transport && api.transport.length === 0) {\n            return (\n                <Typography>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.transport.empty'\n                        defaultMessage='Please select at least one transport!'\n                    />\n                </Typography>\n            );\n        } else if (isMutualSSLEnabled && !api.transport.includes('https')) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.transport.sslHttps'\n                    defaultMessage='Please select Https as transport with mutual SSL!'\n                />\n            );\n        }\n        return null; // No errors :-)\n    };\n    return (\n        <Grid container spacing={1} alignItems='flex-start'>\n            <Grid item>\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.transports'\n                            defaultMessage='Transports'\n                        />\n                    </FormLabel>\n                    <FormGroup style={{ display: 'flow-root' }}>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={api.transport\n                                        ? api.transport.includes('http') : null}\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'transport',\n                                        event: { checked, value: 'http' },\n                                    })}\n                                    value='http'\n                                    color='primary'\n                                    id='http-transport'\n                                />\n                            )}\n                            label='HTTP'\n                        />\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={api.transport\n                                        ? api.transport.includes('https') : null}\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'transport',\n                                        event: { checked, value: 'https' },\n                                    })}\n                                    value='https'\n                                    color='primary'\n                                />\n                            )}\n                            label='HTTPS'\n                        />\n                    </FormGroup>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.Transports.tooltip'\n                            defaultMessage={\n                                'API will be exposed in selected transport(s) in the gateway(s)'\n                                + ' If Mutual SSL option is selected, a trusted client'\n                                + ' certificate should be presented to access the API'\n                            }\n                        />\n                    )}\n                    aria-label='Transports'\n                    placement='right-end'\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Grid>\n            <Grid item>\n                <span className={classes.error}>\n                    <Validate />\n                </span>\n            </Grid>\n        </Grid>\n    );\n}\n\nTransports.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport EditRounded from '@material-ui/icons/EditRounded';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Container from '@material-ui/core/Container';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { Progress } from 'AppComponents/Shared';\nimport UpdateComplexity from '../../QueryAnalysis/UpdateComplexity';\n\nconst useStyles = makeStyles(() => ({\n    content: {\n        flexGrow: 1,\n    },\n    itemWrapper: {\n        width: 'auto',\n        display: 'flex',\n    },\n    FormControl: {\n        padding: 10,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    subTitle: {\n        marginTop: 20,\n    },\n    subTitleDescription: {\n        marginBottom: 10,\n    },\n    flowWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    heading: {\n        margin: 'auto',\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    paper: {\n        padding: '10px 24px',\n        width: 'auto',\n    },\n    editIcon: {\n        position: 'absolute',\n        top: 8,\n        right: 0,\n    },\n    dialogPaper: {\n        minHeight: '95vh',\n        maxHeight: '95vh',\n        minWidth: '150vh',\n        maxWidth: '150vh',\n    },\n}));\n\n/**\n * The base component of the GraphQL Query Analysis.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nexport default function GraphQLQueryAnalysis(props) {\n    const {\n        api,\n        setUpdateComplexityList,\n    } = props;\n    const [open, setOpen] = useState(false);\n    const classes = useStyles();\n    const [list, setList] = useState(null);\n    const [typelist, setTypeList] = useState([]);\n\n    /**\n     * Get Summation of field's complexity value of all types\n     * @param {Object of array} List\n     */\n    function findSummation(List) {\n        const type = [...new Set(List.map((respond) => respond.type))];\n        const array = [];\n        type.map((respond) => {\n            const ob = {};\n            ob.type = respond;\n            ob.summation = 0;\n            List.map((obj) => {\n                if (obj.type === respond) {\n                    ob.summation += obj.complexityValue;\n                }\n                return ob;\n            });\n            array.push(ob);\n            return array;\n        });\n        setTypeList(array);\n    }\n\n    /**\n     * Set the Initial Complexity Values to the field's\n     */\n\n    function setInitialComplexity() {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexityType = apiClient.getGraphqlPoliciesComplexityTypes(apiId);\n        promisedComplexityType\n            .then((res) => {\n                const array = [];\n                res.typeList.map((respond) => {\n                    respond.fieldList.map((ob) => {\n                        const obj = {};\n                        obj.type = respond.type;\n                        obj.field = ob;\n                        obj.complexityValue = 1;\n                        array.push(obj);\n                        return ob;\n                    });\n                    return array;\n                });\n                setList(array);\n                findSummation(array);\n            });\n    }\n\n    useEffect(() => {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.getGraphqlPoliciesComplexity(apiId);\n        promisedComplexity\n            .then((res) => {\n                setList(res.list);\n                findSummation(res.list);\n                if (res.list.length === 0) {\n                    setInitialComplexity();\n                }\n            })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }, []);\n\n    /**\n    * Edit Custom Complexity Values\n    */\n    function editComplexity() {\n        setUpdateComplexityList(list);\n        findSummation(list);\n        setOpen(false);\n    }\n    /**\n     * set open state of the dialog box\n     */\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    if (list === null) {\n        return <Progress />;\n    }\n\n    return (\n        <>\n            <Paper className={classes.paper} spacing={2}>\n                <Grid container spacing={2} alignItems='flex-start'>\n                    <Grid item md={12} style={{ position: 'relative', display: 'inline-flex' }}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configurartion.components.QueryAnalysis'\n                                defaultMessage='Query Analysis'\n                            />\n                        </Typography>\n                        <Typography className={classes.heading}>\n\n                            <span>update complexity</span>\n\n                        </Typography>\n                        <Button\n                            className={classes.editIcon}\n                            size='small'\n                            onClick={handleClickOpen}\n                        >\n                            <EditRounded />\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            <Dialog\n                classes={{ paper: classes.dialogPaper }}\n                open={open}\n                aria-labelledby='responsive-dialog-title'\n            >\n                <DialogTitle id='responsive-dialog-title'>\n                    <Typography className={classes.subHeading} variant='h4'>\n                        <FormattedMessage\n                            id='Apis.Details.Configurartion.components.QueryAnalysis.edit'\n                            defaultMessage='Edit Complexity Values'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <DialogContentText>\n                        <Container fixed>\n                            <UpdateComplexity\n                                list={list}\n                                setList={setList}\n                                typelist={typelist}\n                            />\n                        </Container>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Grid item>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            onClick={editComplexity}\n                            className={classes.saveButton}\n                        >\n\n                            <FormattedMessage\n                                id='Apis.Details.QyeryAnalysis.UpdateComplexity.save'\n                                defaultMessage='Set'\n                            />\n\n                        </Button>\n                    </Grid>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Apis.Details.Configurartion.components.QueryAnalysis.cancle.btn'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nGraphQLQueryAnalysis.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    setUpdateComplexityList: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TextField from '@material-ui/core/TextField';\nimport TableCell from '@material-ui/core/TableCell';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TableRow from '@material-ui/core/TableRow';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    searchWrapper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n}));\n\n/**\n *\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nexport default function UpdateComplexity(props) {\n    const classes = useStyles();\n    const [filterKeyWord, setFilter] = useState('');\n    const {\n        setList, typelist, list,\n    } = props;\n\n    /**\n     * Filter the information by Types.\n     */\n\n    const setFilterByKeyWord = (event) => {\n        setFilter(event.target.value.toLowerCase());\n    };\n\n    return (\n        <>\n            <Grid item md={2}>\n                <Box mt={4} pb={2}>\n                    <div className={classes.searchWrapper}>\n                        <TextField\n                            id='outlined-full-width'\n                            label='Type'\n                            placeholder='Search By Types'\n                            onChange={(e) => setFilterByKeyWord(e, typelist)}\n                            fullWidth\n                            variant='outlined'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                </Box>\n            </Grid>\n            <Grid item md={12}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.typeName'\n                                        defaultMessage='Type'\n                                    />\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.fieldcomplexity'\n                                        defaultMessage='Fields'\n                                    />\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.fieldcomplexitysum'\n                                        defaultMessage='Sum of the Complexity'\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {typelist.filter(\n                            (item) => item.type.toLowerCase().includes(filterKeyWord),\n                        ).map((typename) => {\n                            return (\n                                <TableRow style={{ borderStyle: 'hidden' }}>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {typename.type}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <ExpansionPanel>\n                                            <ExpansionPanelSummary\n                                                expandIcon={<ExpandMoreIcon />}\n                                                aria-controls='panel1a-content'\n                                                id='panel1a-header'\n                                            />\n                                            <ExpansionPanelDetails>\n                                                <Grid item md={12}>\n                                                    <Table>\n                                                        <TableRow>\n                                                            <TableCell>\n                                                                <b>Field</b>\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <b>ComplexityValue</b>\n                                                            </TableCell>\n                                                        </TableRow>\n                                                        {list.map((respond, index) => ((respond.type === typename.type)\n                                                     && (\n                                                         <TableRow>\n                                                             <TableCell>\n                                                                 {respond.field}\n                                                             </TableCell>\n                                                             <TableCell>\n                                                                 <TextField\n                                                                     id='complexityValue'\n                                                                     label='complexityValue'\n                                                                     margin='normal'\n                                                                     variant='outlined'\n                                                                     value={respond.complexityValue}\n                                                                     onChange={(event) => {\n                                                                         const newArr = [...list];\n                                                                         newArr[index] = {\n                                                                             type: respond.type,\n                                                                             field: respond.field,\n                                                                             complexityValue: +event.target.value,\n                                                                         };\n                                                                         setList(newArr);\n                                                                     }}\n                                                                 />\n                                                             </TableCell>\n                                                         </TableRow>\n                                                     )))}\n                                                    </Table>\n                                                </Grid>\n                                            </ExpansionPanelDetails>\n                                        </ExpansionPanel>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {typename.summation}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </Grid>\n        </>\n    );\n}\n\nUpdateComplexity.propTypes = {\n    setList: PropTypes.func.isRequired,\n    list: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            field: PropTypes.string,\n            complexityValue: PropTypes.number,\n        }),\n    ).isRequired,\n    typelist: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            summation: PropTypes.number,\n        }),\n    ).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useEffect, useState, useCallback,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash/isEmpty';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport API from 'AppData/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport AsyncOperation from '../Resources/components/AsyncOperation';\nimport GroupOfOperations from '../Resources/components/operationComponents/asyncapi/GroupOfOperations';\nimport AddOperation from '../Resources/components/AddOperation';\nimport SubscriptionConfig from '../Resources/components/operationComponents/asyncapi/SubscriptionConfig';\nimport { extractAsyncAPIPathParameters } from '../Resources/operationUtils';\nimport SaveOperations from '../Resources/components/SaveOperations';\n\nconst verbMap = {\n    sub: 'subscribe',\n    pub: 'publish',\n};\n\n/**\n * This component handles the Resource page in API details though it's written in a sharable way\n * that anyone could use this to render resources in anywhere else if needed.\n *\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function Topics(props) {\n    const {\n        disableUpdate,\n        disableAddOperation,\n    } = props;\n\n    const [api, updateAPI] = useAPI();\n    const [pageError, setPageError] = useState(false);\n    const [sharedScopes, setSharedScopes] = useState();\n    const [sharedScopesByName, setSharedScopesByName] = useState();\n    const [asyncAPISpec, setAsyncAPISpec] = useState({});\n    const [securityDefScopes, setSecurityDefScopes] = useState({});\n    const isAsyncAPI = api.type === 'WEBSUB' || api.type === 'WS' || api.type === 'SSE';\n    const [markedOperations, setSelectedOperation] = useState({});\n\n    /**\n     *\n     * @param {*} spec\n     * @param {*} ref\n     */\n    function getRefTarget(spec, ref) {\n        const arr = ref.split('/');\n        const i = (arr[0] === '#') ? 1 : 0;\n        let target = spec;\n        for (let j = i; j < arr.length; j++) {\n            target = target[arr[j]];\n        }\n        return target;\n    }\n\n    /**\n     *\n     * @param {*} spec\n     * @param {*} parent\n     */\n    function resolveSpec(spec, source) {\n        if (typeof source === 'object') {\n            let o = {};\n            Object.entries(source).forEach(([k, v]) => {\n                if (v !== null) {\n                    if (k !== '$ref') {\n                        o[k] = resolveSpec(spec, v);\n                    } else {\n                        const resolvedRef = resolveSpec(spec, getRefTarget(spec, v));\n                        o = { ...o, ...resolvedRef };\n                    }\n                }\n            });\n            return o;\n        }\n        return source;\n    }\n\n    /**\n     *\n     * @param {*} state\n     * @param {*} configAction\n     */\n    function websubSubscriptionConfigReducer(state, configAction) {\n        const { action, value } = configAction;\n        const nextState = { ...state };\n        switch (action) {\n            case 'enable':\n                nextState.enable = value;\n                if (!value) {\n                    nextState.secret = '';\n                }\n                break;\n            case 'signingAlgorithm':\n            case 'signatureHeader':\n            case 'secret':\n                nextState[action] = value;\n                break;\n            default:\n                return nextState;\n        }\n        return nextState;\n    }\n    const initialWebsubSubscriptionConfig = api.websubSubscriptionConfiguration || {\n        enable: false,\n        signingAlgorithm: '',\n        signatureHeader: '',\n        secret: '',\n    };\n\n    const [websubSubscriptionConfiguration, websubSubscriptionConfigDispatcher] = useReducer(\n        websubSubscriptionConfigReducer, initialWebsubSubscriptionConfig,\n    );\n\n    /**\n     *\n     *\n     * @param {*} currenPaths\n     * @param {*} action\n     */\n    function operationsReducer(currentOperations, operationAction) {\n        const { action, data } = operationAction;\n        const { target, verb, value } = data || {};\n        const addedOperations = cloneDeep(currentOperations);\n        let updatedOperation;\n        if (target) {\n            updatedOperation = cloneDeep(currentOperations[target]);\n        }\n\n        switch (action) {\n            case 'init':\n                setSelectedOperation({});\n                return data || asyncAPISpec.channels;\n            case 'description':\n                updatedOperation[action] = value;\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], description: updatedOperation.description },\n                };\n            case 'uriMapping':\n                return {\n                    ...currentOperations,\n                    [target]: {\n                        ...currentOperations[target],\n                        [verb]: {\n                            ...currentOperations[target][verb],\n                            'x-uri-mapping': value,\n                        },\n                    },\n                };\n            case 'authType':\n                updatedOperation['x-auth-type'] = value ? 'Any' : 'None';\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], 'x-auth-type': updatedOperation['x-auth-type'] },\n                };\n            case 'add':\n                // If target is not there add an empty object\n                if (!addedOperations[data.target]) {\n                    addedOperations[data.target] = {};\n                }\n                addedOperations[data.target].parameters = extractAsyncAPIPathParameters(data.target);\n                // eslint-disable-next-line no-case-declarations\n                let alreadyExistCount = 0;\n                for (let currentVerb of data.verbs) {\n                    currentVerb = verbMap[currentVerb];\n                    if (addedOperations[data.target][currentVerb]) {\n                        const message = `Operation already exist with ${data.target} and ${currentVerb}`;\n                        Alert.warning(message);\n                        console.warn(message);\n                        alreadyExistCount++;\n                    } else {\n                        addedOperations[data.target][currentVerb] = { };\n                    }\n                }\n                if (alreadyExistCount === data.verbs.length) {\n                    Alert.error('Operation(s) already exist!');\n                    return currentOperations;\n                }\n                return addedOperations;\n            case 'parameter':\n                updatedOperation.parameters = updatedOperation.parameters || { };\n                updatedOperation.parameters[value.name] = { ...value };\n                delete updatedOperation.parameters[value.name].name;\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], parameters: updatedOperation.parameters },\n                };\n            case 'addPayloadProperty':\n                updatedOperation[verb].message = updatedOperation[verb].message || { };\n                updatedOperation[verb].message.payload = updatedOperation[verb].message.payload || { };\n                updatedOperation[verb].message.payload.type = 'object';\n                updatedOperation[verb].message.payload.properties = updatedOperation[verb].message.payload.properties\n                    || { };\n                updatedOperation[verb].message.payload.properties[value.name] = {\n                    description: value.description,\n                    type: value.type,\n                };\n                break;\n            case 'deletePayloadProperty':\n                delete updatedOperation[verb].message.payload.properties[value];\n                break;\n            case 'payloadProperty':\n                updatedOperation[verb].message.payload.properties[value.name] = value;\n                break;\n            case 'scopes': {\n                const defValue = value[0];\n                updatedOperation[verb]['x-scopes'] = [];\n                for (let i = 0; i < defValue.length; i++) {\n                    updatedOperation[verb]['x-scopes'].push(defValue[i]);\n                }\n\n                for (const selectedScope of defValue) {\n                    if (selectedScope\n                        && !securityDefScopes[selectedScope]\n                        && securityDefScopes[selectedScope] !== '') {\n                        let scopeDescription = '';\n                        if (selectedScope in sharedScopesByName) {\n                            if (sharedScopesByName[selectedScope].scope.description !== null) {\n                                scopeDescription = sharedScopesByName[selectedScope].scope.description;\n                            }\n                            securityDefScopes[selectedScope] = scopeDescription;\n                        }\n                        setSecurityDefScopes(securityDefScopes);\n                    }\n                }\n                break;\n            }\n            default:\n                return currentOperations;\n        }\n        return {\n            ...currentOperations,\n            [target]: { ...currentOperations[target], [verb]: updatedOperation[verb] },\n        };\n    }\n    const [operations, operationsDispatcher] = useReducer(operationsReducer, {});\n\n    /**\n     *\n     *\n     * @param {*} operation\n     * @param {*} checked\n     */\n    function onOperationSelectM(operation, checked) {\n        const { target, verb } = operation;\n        setSelectedOperation((currentSelections) => {\n            const nextSelectedOperations = cloneDeep(currentSelections);\n            if (!nextSelectedOperations[target]) {\n                nextSelectedOperations[target] = {};\n            }\n            if (checked) {\n                nextSelectedOperations[target][verb] = checked;\n            } else {\n                delete nextSelectedOperations[target][verb];\n            }\n            if (isEmpty(nextSelectedOperations[target])) {\n                delete nextSelectedOperations[target];\n            }\n            return nextSelectedOperations;\n        });\n    }\n    const onMarkAsDelete = useCallback(onOperationSelectM, [setSelectedOperation]);\n\n    /**\n     *\n     * @param {*} spec\n     */\n    function verifySecurityScheme(spec) {\n        /* eslint-disable no-param-reassign */\n        spec.components = spec.components || {};\n        spec.components.securitySchemes = spec.components.securitySchemes || {};\n        spec.components.securitySchemes.oauth2 = spec.components.securitySchemes.oauth2 || { type: 'oauth2' };\n        spec.components.securitySchemes.oauth2.flows = spec.components.securitySchemes.oauth2.flows || {};\n        spec.components.securitySchemes.oauth2.flows.implicit = spec.components.securitySchemes.oauth2.flows.implicit\n            || {};\n        spec.components.securitySchemes.oauth2.flows.implicit.scopes = spec.components.securitySchemes.oauth2.flows\n            .implicit.scopes || {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    /**\n     * This method sets the securityDefinitionScopes from the spec\n     * @param {Object} spec The original swagger content.\n     */\n    function setSecurityDefScopesFromSpec(spec) {\n        verifySecurityScheme(spec);\n        setSecurityDefScopes(cloneDeep(spec.components.securitySchemes.oauth2.flows.implicit.scopes));\n    }\n\n    /**\n     * This method sets the scopes of the spec from the securityDefinitionScopes\n     */\n    function setSpecScopesFromSecurityDefScopes() {\n        verifySecurityScheme(asyncAPISpec);\n        asyncAPISpec.components.securitySchemes.oauth2.flows.implicit.scopes = securityDefScopes;\n    }\n\n    /**\n     *\n     * @param {*} rawSpec The original swagger content.\n     * @returns {null}\n     */\n    function resolveAndUpdateSpec(rawSpec) {\n        const resolvedChannels = resolveSpec(rawSpec, rawSpec);\n        const resolvedSpec = { ...rawSpec, channels: resolvedChannels.channels };\n        operationsDispatcher({ action: 'init', data: resolvedSpec.channels });\n        setAsyncAPISpec(resolvedSpec);\n        setSecurityDefScopesFromSpec(rawSpec);\n    }\n\n    /**\n     *\n     * Update the asyncapi using /asyncapi PUT operation and then fetch the updated API Object doing a apis/{api-uuid}\n     * GET\n     * @param {JSON} spec Updated full AsyncAPI spec ready to PUT\n     * @returns {Promise} Promise resolving to updated API object\n     */\n    function updateAsyncAPIDefinition(spec) {\n        return api\n            .updateAsyncAPIDefinition(spec)\n            .then((response) => resolveAndUpdateSpec(response.body))\n            .then(updateAPI)\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    setPageError(error.response.body);\n                } else {\n                    Alert.error('Error while updating the definition');\n                }\n            });\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    function updateSecurityDefinition(apiOperations) {\n        Object.keys(securityDefScopes).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const [, verbs] of Object.entries(apiOperations)) {\n                for (const [, verbInfo] of Object.entries(verbs)) {\n                    // Checking if the scope resides in the operation\n                    for (const secDef of verbInfo.security || []) {\n                        if (secDef\n                            && secDef.default\n                            && secDef.default.includes(key)) {\n                            isScopeExistsInOperation = true;\n                            break;\n                        }\n                    }\n\n                    if (isScopeExistsInOperation) {\n                        break;\n                    }\n                }\n                if (isScopeExistsInOperation) {\n                    break;\n                }\n            }\n        });\n        setSecurityDefScopes(securityDefScopes);\n    }\n\n    /**\n     *\n     * Save the OpenAPI changes using REST API, type parameter is required to\n     * identify the locally created data structured, i:e type `operation` will assume that `data` contains the\n     * object structure of locally created operation object which is a combination of REST API\n     * response `operations` field and OpenAPI spec operation information\n     * @param {String} type Type of data object\n     * @param {Object} data Data object\n     * @returns {Promise|null} A promise object which resolve to Swagger PUT response body.\n     */\n    function updateAsyncAPI() {\n        const copyOfOperations = cloneDeep(operations);\n        for (const [target, verbs] of Object.entries(markedOperations)) {\n            for (const verb of Object.keys(verbs)) {\n                delete copyOfOperations[target][verb];\n                if (!copyOfOperations[target].publish && !copyOfOperations[target].subscribe) {\n                    delete copyOfOperations[target];\n                }\n            }\n        }\n\n        updateSecurityDefinition(copyOfOperations);\n        setSpecScopesFromSecurityDefScopes();\n        if (websubSubscriptionConfiguration !== api.websubSubscriptionConfiguration) {\n            return updateAPI({ websubSubscriptionConfiguration })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error('Error while updating the API');\n                })\n                .then(() => updateAsyncAPIDefinition({ ...asyncAPISpec, channels: copyOfOperations }));\n        } else {\n            return updateAsyncAPIDefinition({ ...asyncAPISpec, channels: copyOfOperations });\n        }\n    }\n\n    useEffect(() => {\n        if (api.apitype !== 'APIProduct') {\n            API.getAllScopes()\n                .then((response) => {\n                    if (response.body && response.body.list) {\n                        const sharedScopesList = [];\n                        const sharedScopesByNameList = {};\n                        const shared = true;\n                        for (const scope of response.body.list) {\n                            const modifiedScope = {};\n                            modifiedScope.scope = scope;\n                            modifiedScope.shared = shared;\n                            sharedScopesList.push(modifiedScope);\n                            sharedScopesByNameList[scope.name] = modifiedScope;\n                        }\n                        setSharedScopes(sharedScopesList);\n                        setSharedScopesByName(sharedScopesByNameList);\n                    }\n                });\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update the Swagger spec object when API object gets changed\n        api.getAsyncAPIDefinition()\n            .then((response) => {\n                resolveAndUpdateSpec(response.body);\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                }\n                console.error(error);\n            });\n    }, [api.id]);\n\n    // Note: Make sure not to use any hooks after/within this condition , because it returns conditionally\n    // If you do so, You will probably get `Rendered more hooks than during the previous render.` exception\n    // if ((!pageError && isEmpty(openAPISpec)) || (resolvedSpec.errors.length === 0 && isEmpty(resolvedSpec.spec))) {\n    if ((!pageError && isEmpty(asyncAPISpec))) {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress disableShrink />\n                </Grid>\n            </Grid>\n        );\n    }\n\n    return (\n        <Grid container direction='row' justify='flex-start' spacing={2} alignItems='stretch'>\n            {pageError && (\n                <Grid item md={12}>\n                    <Banner onClose={() => setPageError(null)} disableActions type='error' message={pageError} />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation && api.type === 'WEBSUB' && (\n                <Grid item md={12} xs={12}>\n                    <SubscriptionConfig\n                        websubSubscriptionConfigDispatcher={websubSubscriptionConfigDispatcher}\n                        websubSubscriptionConfiguration={websubSubscriptionConfiguration}\n                    />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation && (\n                <Grid item md={12} xs={12}>\n                    <AddOperation operationsDispatcher={operationsDispatcher} isAsyncAPI={isAsyncAPI} api={api} />\n                </Grid>\n            )}\n            <Grid item md={12}>\n                <Paper>\n                    {\n                        operations && Object.entries(operations).map(([target, operation]) => (\n                            <Grid key={target} item md={12}>\n                                <GroupOfOperations tag={target} operation={operation}>\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        justify='flex-start'\n                                        spacing={1}\n                                        alignItems='stretch'\n                                    >\n                                        {operation.subscribe && (\n                                            <Grid key={target + '_subscribe'} item md={12}>\n                                                <AsyncOperation\n                                                    target={target}\n                                                    verb='subscribe'\n                                                    highlight\n                                                    operation={operation}\n                                                    spec={asyncAPISpec}\n                                                    api={api}\n                                                    operationsDispatcher={operationsDispatcher}\n                                                    sharedScopes={sharedScopes}\n                                                    markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target].subscribe)}\n                                                    onMarkAsDelete={onMarkAsDelete}\n                                                />\n                                            </Grid>\n                                        )}\n                                        {operation.publish && (\n                                            <Grid key={target + '_publish'} item md={12}>\n                                                <AsyncOperation\n                                                    target={target}\n                                                    verb='publish'\n                                                    highlight\n                                                    operation={operation}\n                                                    spec={asyncAPISpec}\n                                                    api={api}\n                                                    operationsDispatcher={operationsDispatcher}\n                                                    sharedScopes={sharedScopes}\n                                                    markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target].publish)}\n                                                    onMarkAsDelete={onMarkAsDelete}\n                                                />\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </GroupOfOperations>\n                            </Grid>\n                        ))\n                    }\n                </Paper>\n                <Grid\n                    style={{ marginTop: '25px' }}\n                    container\n                    direction='row'\n                    justify='space-between'\n                    alignItems='center'\n                >\n                    {!disableUpdate && (\n                        <SaveOperations\n                            operationsDispatcher={operationsDispatcher}\n                            updateAsyncAPI={updateAsyncAPI}\n                            api={api}\n                        />\n                    )}\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nTopics.defaultProps = {\n    operationProps: { disableDelete: false },\n    disableUpdate: false,\n    disableAddOperation: false,\n};\n\nTopics.propTypes = {\n    disableAddOperation: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    operationProps: PropTypes.shape({\n        disableDelete: PropTypes.bool,\n    }),\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\n\nimport { FormattedMessage } from 'react-intl';\nimport DescriptionAndSummary from './operationComponents/asyncapi/DescriptionAndSummary';\nimport OperationGovernance from './operationComponents/asyncapi/OperationGovernance';\nimport Parameters from './operationComponents/asyncapi/Parameters';\nimport PayloadProperties from './operationComponents/asyncapi/PayloadProperties';\nimport Runtime from './operationComponents/asyncapi/Runtime';\n\n/**\n *\n * Handle the operation UI\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nfunction AsyncOperation(props) {\n    const {\n        operation,\n        operationsDispatcher,\n        highlight,\n        api,\n        disableDelete,\n        disableUpdate,\n        onMarkAsDelete,\n        markAsDelete,\n        spec,\n        target,\n        verb,\n        sharedScopes,\n    } = props;\n\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n\n    const [isExpanded, setIsExpanded] = useState(false);\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n        return {\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n            paperStyles: {\n                border: `1px solid ${backgroundColor}`,\n                borderBottom: '',\n            },\n            customDivider: {\n                backgroundColor,\n            },\n            linearProgress: {\n                height: '2px',\n            },\n            highlightSelected: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n            },\n            contentNoMargin: {\n                margin: theme.spacing(0),\n            },\n            overlayUnmarkDelete: {\n                position: 'absolute',\n                zIndex: theme.zIndex.operationDeleteUndo,\n                right: '10%',\n            },\n        };\n    });\n    const isUsedInAPIProduct = false;\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function toggleDelete(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        setIsExpanded(false);\n        onMarkAsDelete({ verb, target }, !markAsDelete);\n    }\n\n    /**\n     *\n     *\n     * @param {*} event\n     * @param {*} expanded\n     */\n    function handleExpansion(event, expanded) {\n        setIsExpanded(expanded);\n    }\n    const classes = useStyles();\n    return (\n        <>\n            {markAsDelete && (\n                <Box className={classes.overlayUnmarkDelete}>\n                    <Tooltip title='Marked for delete' aria-label='Marked for delete'>\n                        <Button onClick={toggleDelete} variant='outlined' style={{ marginTop: '10px' }}>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.undo.delete'\n                                defaultMessage='Undo Delete'\n                            />\n                        </Button>\n                    </Tooltip>\n                </Box>\n            )}\n            <ExpansionPanel\n                expanded={isExpanded}\n                onChange={handleExpansion}\n                disabled={markAsDelete}\n                className={classes.paperStyles}\n            >\n                <ExpansionPanelSummary\n                    className={highlight ? classes.highlightSelected : ''}\n                    disableRipple\n                    disableTouchRipple\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel2a-content'\n                    id='panel2a-header'\n                    classes={{ content: classes.contentNoMargin }}\n                >\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={11}>\n                            <Badge invisible='false' color='error' variant='dot'>\n                                <Button\n                                    disableFocusRipple\n                                    variant='outlined'\n                                    size='small'\n                                    className={classes.customButton}\n                                >\n                                    {trimmedVerb.toUpperCase()}\n                                </Button>\n                            </Badge>\n                            <Typography display='inline' style={{ margin: '0px 30px' }} variant='h6' gutterBottom>\n                                {target}\n                            </Typography>\n                        </Grid>\n                        {!(disableDelete || markAsDelete) && (\n                            <Grid item md={1} justify='flex-end' container>\n                                <Tooltip\n                                    title={\n                                        isUsedInAPIProduct\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.Operation.cannot.delete'\n                                                    + '.when.used.in.api.products'}\n                                                    defaultMessage='Cannot delete operation when used in an API product'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Resources.components.Operation.Delete'\n                                                    defaultMessage='Delete'\n                                                />\n                                            )\n                                    }\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.Operation.delete.operation'\n                                            defaultMessage='Delete operation'\n                                        />\n                                    )}\n                                >\n                                    <div>\n                                        <IconButton\n                                            disabled={Boolean(isUsedInAPIProduct) || disableUpdate}\n                                            onClick={toggleDelete}\n                                            aria-label='delete'\n                                        >\n                                            <DeleteIcon fontSize='small' />\n                                        </IconButton>\n                                    </div>\n                                </Tooltip>\n                            </Grid>\n                        )}\n                    </Grid>\n                </ExpansionPanelSummary>\n                <Divider light className={classes.customDivider} />\n                <ExpansionPanelDetails>\n                    <Grid spacing={2} container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <DescriptionAndSummary\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        {operation.parameters && (\n                            <Parameters\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                api={api}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                            />\n                        )}\n                        <PayloadProperties\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        <OperationGovernance\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            api={api}\n                            disableUpdate={disableUpdate}\n                            spec={spec}\n                            target={target}\n                            verb={verb}\n                            sharedScopes={sharedScopes}\n                        />\n                        {(api.type === 'WS' || api.type === 'WEBSUB') && (\n                            <Runtime\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                disableUpdate={disableUpdate}\n                                target={target}\n                                verb={verb}\n                                api={api}\n                            />\n                        )}\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\nAsyncOperation.defaultProps = {\n    highlight: false,\n    disableUpdate: false,\n    disableDelete: false,\n    onMarkAsDelete: () => {},\n    markAsDelete: false,\n};\nAsyncOperation.propTypes = {\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})), resourcePolicies: PropTypes.shape({}) })\n        .isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    onMarkAsDelete: PropTypes.func,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    markAsDelete: PropTypes.bool,\n    disableDelete: PropTypes.bool,\n    operation: PropTypes.shape({\n        'x-wso2-new': PropTypes.bool,\n        summary: PropTypes.string,\n    }).isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    highlight: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n};\n\nexport default React.memo(AsyncOperation);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * Renders the operation summary and description sections\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DescriptionAndSummary(props) {\n    const {\n        operation, operationsDispatcher, disableUpdate, target, verb,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Description\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <TextField\n                    margin='dense'\n                    fullWidth\n                    label='Description'\n                    multiline\n                    disabled={disableUpdate}\n                    rows='4'\n                    value={operation.description || ''}\n                    variant='outlined'\n                    onChange={\n                        ({ target: { value } }) => operationsDispatcher(\n                            { action: 'description', data: { target, verb, value } },\n                        )\n                    }\n                />\n            </Grid>\n            <Grid item md={6} />\n        </>\n    );\n}\n\nDescriptionAndSummary.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nDescriptionAndSummary.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Link } from 'react-router-dom';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { getAsyncAPIOperationScopes } from '../../../operationUtils';\n\n/**\n *\n * Renders the security and scopes selection section in the operation collapsed page\n * @export\n * @param {*} props\n * @returns\n */\nexport default function OperationGovernance(props) {\n    const {\n        operation, operationsDispatcher, api, disableUpdate, target, verb, sharedScopes,\n    } = props;\n    const operationScopes = getAsyncAPIOperationScopes(operation[verb]);\n    const filteredApiScopes = api.scopes.filter((sharedScope) => !sharedScope.shared);\n    const intl = useIntl();\n\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography gutterBottom variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Topics.components.operationComponents.OperationGovernance.title'\n                        defaultMessage='Operation Governance'\n                    />\n                    <Typography style={{ marginLeft: '10px' }} gutterBottom variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Topics.components.operationComponents.OperationGovernance.subTitle'\n                            defaultMessage='(Security & Scopes)'\n                        />\n                    </Typography>\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                <FormControl disabled={disableUpdate} component='fieldset'>\n                    <FormControlLabel\n                        control={(\n                            <Switch\n                                checked={operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none'}\n                                onChange={({ target: { checked } }) => operationsDispatcher({\n                                    action: 'authType',\n                                    data: { target, verb, value: checked },\n                                })}\n                                size='small'\n                                color='primary'\n                            />\n                        )}\n                        label='Security'\n                        labelPlacement='start'\n                    />\n                </FormControl>\n                <sup style={{ marginLeft: '10px' }}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id={'Apis.Details.Topics.components.operationComponents.OperationGovernance.Security'\n                                + '.tooltip'}\n                                defaultMessage='This will enable/disable Application Level securities defined in the\n                                Runtime Configurations page.'\n                            />\n                        )}\n                        fontSize='small'\n                        aria-label='Operation security'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </sup>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                {\n                    operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? (\n                        <TextField\n                            id='operation_scope'\n                            select\n                            SelectProps={{\n                                multiple: true,\n                                renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                            }}\n                            disabled={disableUpdate}\n                            fullWidth\n                            label={api.scopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                                id: 'Apis.Details.Topics.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.label.default',\n                                defaultMessage: 'Operation scope',\n                            }) : intl.formatMessage({\n                                id: 'Apis.Details.Topics.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.label.notAvailable',\n                                defaultMessage: 'No scope available',\n                            })}\n                            value={operationScopes}\n                            onChange={({ target: { value } }) => operationsDispatcher({\n                                action: 'scopes',\n                                data: { target, verb, value: value ? [value] : [] },\n                            })}\n                            helperText={(\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.helperText'}\n                                    defaultMessage='Select a scope to control permissions to this operation'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        >\n                            <ListSubheader>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.select.local'}\n                                    defaultMessage='API Scopes'\n                                />\n                            </ListSubheader>\n                            {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                                <MenuItem\n                                    key={apiScope.scope.name}\n                                    value={apiScope.scope.name}\n                                    dense\n                                >\n                                    <Checkbox checked={operationScopes.includes(apiScope.scope.name)} color='primary' />\n                                    {apiScope.scope.name}\n                                </MenuItem>\n                            )) : (\n                                <MenuItem\n                                    value=''\n                                    disabled\n                                >\n                                    <em>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Topics.components.operationComponents.'\n                                        + 'OperationGovernance.operation.no.api.scope.available'}\n                                            defaultMessage='No API scopes available'\n                                        />\n                                    </em>\n                                </MenuItem>\n                            )}\n                            <ListSubheader>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.select.shared'}\n                                    defaultMessage='Shared Scopes'\n                                />\n                            </ListSubheader>\n                            {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                                <MenuItem\n                                    key={sharedScope.scope.name}\n                                    value={sharedScope.scope.name}\n                                    dense\n                                >\n                                    <Checkbox\n                                        checked={operationScopes.includes(sharedScope.scope.name)}\n                                        color='primary'\n                                    />\n                                    {sharedScope.scope.name}\n                                </MenuItem>\n                            )) : (\n                                <MenuItem\n                                    value=''\n                                    disabled\n                                >\n                                    <em>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Topics.components.operationComponents.'\n                                        + 'OperationGovernance.operation.no.sharedpi.scope.available'}\n                                            defaultMessage='No shared scopes available'\n                                        />\n                                    </em>\n                                </MenuItem>\n                            )}\n                        </TextField>\n                    ) : null\n                }\n            </Grid>\n            <Grid item md={5} style={{ marginTop: '14px' }}>\n                {\n                    operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? !disableUpdate && (\n                        <Link\n                            to={`/apis/${api.id}/scopes/create`}\n                            target='_blank'\n                        >\n                            <Typography\n                                style={{ marginLeft: '10px' }}\n                                color='primary'\n                                display='inline'\n                                variant='caption'\n                            >\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.create.new.scope'}\n                                    defaultMessage='Create New Scope'\n                                />\n                                <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                            </Typography>\n                        </Link>\n                    ) : null\n                }\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nOperationGovernance.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})) }),\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nOperationGovernance.defaultProps = {\n    api: { scopes: [] },\n    sharedScopes: [],\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport ListParameters from './ListParameters';\n\n/*\n    Paramters will contain: name, description, type\n*/\n\n/**\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Parameters(props) {\n    const {\n        operation, spec, target, verb, operationsDispatcher,\n    } = props;\n    let haveParameters = false;\n    Object.entries(operation.parameters).forEach(() => {\n        haveParameters = true;\n    });\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Topic Parameters\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                {haveParameters && (\n                    <ListParameters\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        spec={spec}\n                    />\n                )}\n            </Grid>\n        </>\n    );\n}\n\nParameters.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport EditParameter from './EditParameter';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListParameters(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate,\n    } = props;\n    const classes = useStyles();\n    const [editingParameter, setEditingParameter] = useState(null);\n\n    return (\n        <>\n            {editingParameter !== null && (\n                <EditParameter\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingParameter={editingParameter}\n                    setEditingParameter={setEditingParameter}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.name'\n                                defaultMessage='Name'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.datatype'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.description'\n                                defaultMessage='Description'\n                            />\n                        </TableCell>\n                        {!disableUpdate && (\n                            <TableCell align='left'>\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.ListParameter.actions'\n                                    defaultMessage='Actions'\n                                />\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        operation.parameters && Object.entries(operation.parameters).map(([k, v]) => {\n                            return (\n                                <TableRow key={k}>\n                                    <TableCell align='left'>{k}</TableCell>\n                                    <TableCell align='left'>{v.schema.type}</TableCell>\n                                    <TableCell align='left'>{v.description}</TableCell>\n                                    <TableCell align='left'>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                                            + 'ListParameter.edit'}\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                onClick={() => setEditingParameter({ name: k, ...v })}\n                                                fontSize='small'\n                                            >\n                                                <EditIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListParameters.defaultProps = {\n    disableUpdate: false,\n};\nListParameters.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function EditParameter(props) {\n    const {\n        operationsDispatcher, target, verb, editingParameter, setEditingParameter,\n    } = props;\n\n    /**\n     *\n     *\n     * @param {*} currentParameter\n     * @param {*} paramAction\n     */\n    function parameterActionReducer(currentParameter, paramAction) {\n        const { action, value } = paramAction;\n        const nextParameter = currentParameter.schema\n            ? { ...currentParameter, schema: { ...currentParameter.schema } } : { ...currentParameter };\n        switch (action) {\n            case 'description':\n                nextParameter[action] = value;\n                break;\n            case 'type':\n                nextParameter.schema = nextParameter.schema || {};\n                nextParameter.schema[action] = value;\n                break;\n            default:\n                break;\n        }\n        return nextParameter;\n    }\n    const [parameter, parameterActionDispatcher] = useReducer(parameterActionReducer, editingParameter);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingParameter(null);\n    };\n\n    const handelDone = () => {\n        operationsDispatcher({ action: 'parameter', data: { target, verb, value: parameter } });\n        handleClose();\n    };\n\n    const getSupportedDataTypes = () => {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    };\n\n    const isEditing = parameter !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-parameter'>\n            <DialogTitle disableTypography id='edit-parameter'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {parameter.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : ''}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes().map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditParameter.'\n                                    + 'select.data.type'}\n                                    defaultMessage='Select the Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6} />\n                    <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                    {/* <Grid item md={6}>\n                        <TextField\n                            value={capitalizeFirstLetter(parameter.in)}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.type'\n                                    defaultMessage='Parameter Type'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <TextField\n                            value={parameter.name}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.name'\n                                    defaultMessage='Name'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : parameter.type}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes(version, parameter.in).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'select.schema.data.type'}\n                                    defaultMessage='Select the Schema Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <FormControl\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                            disabled={parameter.schema\n                                ? iff(\n                                    parameter.schema.type === 'boolean' || parameter.schema.type === 'object',\n                                    true,\n                                    false,\n                                )\n                                : iff(\n                                    parameter.type === 'boolean' || parameter.type === 'object',\n                                    true,\n                                    false,\n                                )}\n                        >\n                            <InputLabel id='edit-parameter-format'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'data.format'}\n                                    defaultMessage='Data Format'\n                                />\n                            </InputLabel>\n                            <Select\n                                value={parameter.schema ? parameter.schema.format : parameter.format}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'format',\n                                    id: 'edit-parameter-format',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getDataFormats(\n                                    parameter.schema ? parameter.schema.type : parameter.type,\n                                ).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'select.format.of.data.type'}\n                                    defaultMessage='Select the Format of Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid item>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={parameter.required}\n                                        onChange={(\n                                            { target: { name, checked } },\n                                        ) => parameterActionDispatcher({ action: name, value: checked })}\n                                        value={parameter.required}\n                                        inputProps={{\n                                            name: 'required',\n                                        }}\n                                    />\n                                )}\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'required'}\n                                        defaultMessage='Required'\n                                    />\n                                )}\n                            />\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid container direction='row' justify='flex-end' alignItems='center'>\n                        <DialogContentText>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                + 'use.done.button.to.persist.changes'}\n                                defaultMessage='Use DONE button in the page to persist changes'\n                            />\n                        </DialogContentText>\n                    </Grid> */}\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={handelDone}\n                    variant='contained'\n                    color='primary'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditParameter.propTypes = {\n    // operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingParameter: PropTypes.shape({}).isRequired,\n    setEditingParameter: PropTypes.func.isRequired,\n    // version: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport AddPayloadProperty from './AddPayloadProperty';\nimport ListPayloadProperties from './ListPayloadProperties';\n\n/*\n    Paramters will contain: name, description, type\n*/\n\n/**\n * Renders the payload properties section\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function PayloadProperties(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Payload Properties\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                {!disableUpdate && (\n                    <AddPayloadProperty\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                    />\n                )}\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                <ListPayloadProperties\n                    disableUpdate={disableUpdate}\n                    target={target}\n                    verb={verb}\n                    operationsDispatcher={operationsDispatcher}\n                    operation={operation}\n                />\n            </Grid>\n        </>\n    );\n}\n\nPayloadProperties.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n\nPayloadProperties.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles(() => ({\n    formControl: {\n        minWidth: 120,\n    },\n    parameterContainer: {\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    checkBox: {\n        color: '#7c7c7c',\n    },\n}));\n\n/**\n *\n * Add payload properties according to the AsyncAPI spec.\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddPayloadProperty(props) {\n    const {\n        operationsDispatcher, target, verb,\n    } = props;\n\n    /**\n     *\n     * @param {*} state\n     * @param {*} action\n     */\n    function newPropertyReducer(state, action) {\n        const { type, value } = action;\n        const nextState = { ...state };\n        switch (type) {\n            case 'name':\n            case 'description':\n            case 'type':\n                nextState[type] = value;\n                break;\n            case 'clear':\n                return {\n                    name: '',\n                    description: '',\n                    type: '',\n                };\n            default:\n                return nextState;\n        }\n        return nextState;\n    }\n\n    const [property, newPropertyDispatcher] = useReducer(newPropertyReducer, { });\n    const classes = useStyles();\n\n    /**\n     * Get supported data types for properies.\n     * @returns {*} data types\n     */\n    function getSupportedDataTypes() {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    }\n\n    /**\n     * Clear inputs\n     */\n    function clearInputs() {\n        newPropertyDispatcher({ type: 'clear' });\n    }\n\n    /**\n     * Add new property\n     */\n    function addNewProperty() {\n        operationsDispatcher({\n            action: 'addPayloadProperty',\n            data: {\n                target, verb, value: property,\n            },\n        });\n        clearInputs();\n    }\n\n    return (\n        <Grid container direction='row' spacing={1} className={classes.parameterContainer}>\n            <Grid item xs={2} md={2}>\n                <TextField\n                    id='parameter-name'\n                    label='Name'\n                    name='name'\n                    value={property.name}\n                    onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                    helperText='Enter property name'\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewProperty();\n                        }\n                    }}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    {/* <InputLabel ref={inputLabel} htmlFor='data-type' error={isParameterExist}> */}\n                    <InputLabel htmlFor='data-type'>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.data.type'\n                            defaultMessage='Data Type'\n                        />\n                    </InputLabel>\n\n                    <Select\n                        value={property.type}\n                        onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                        inputProps={{\n                            name: 'type',\n                            id: 'data-type',\n                        }}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                    >\n                        {\n                            getSupportedDataTypes().map((dataType) => {\n                                return (\n                                    <MenuItem value={dataType} dense>\n                                        {dataType}\n                                    </MenuItem>\n                                );\n                            })\n                        }\n                    </Select>\n                    <FormHelperText id='my-helper-text'>Select the data type</FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6} md={6}>\n                <TextField\n                    id='parameter-description'\n                    label='Description'\n                    name='description'\n                    value={property.description}\n                    onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                    helperText='Enter property description'\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewProperty();\n                        }\n                    }}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.AddParameter.add.tooltip'\n                            defaultMessage='Add new parameter'\n                        />\n                    )}\n                    aria-label='AddParameter'\n                    placement='bottom'\n                    interactive\n                >\n                    <span>\n                        <Button\n                            style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                            size='small'\n                            variant='outlined'\n                            aria-label='add'\n                            color='primary'\n                            onClick={addNewProperty}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.AddParameter.add'\n                                defaultMessage='Add'\n                            />\n                        </Button>\n                    </span>\n                </Tooltip>\n                <sup>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddParameter.clear.inputs.tooltip'\n                                defaultMessage='Clear inputs'\n                            />\n                        )}\n                        aria-label='clear-inputs'\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <IconButton\n                                onClick={clearInputs}\n                                size='small'\n                            >\n                                <ClearIcon />\n                            </IconButton>\n                        </span>\n                    </Tooltip>\n                </sup>\n            </Grid>\n        </Grid>\n    );\n}\n\nAddPayloadProperty.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default React.memo(injectIntl(AddPayloadProperty));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport EditPayloadProperty from './EditPayloadProperty';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListPayloadProperties(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate,\n    } = props;\n    const classes = useStyles();\n    const [editingProperty, setEditingProperty] = useState(null);\n    const properties = (operation && operation[verb] && operation[verb].message && operation[verb].message.payload\n            && operation[verb].message.payload.properties) ? operation[verb].message.payload.properties : { };\n\n    return (\n        <>\n            {editingProperty !== null && (\n                <EditPayloadProperty\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingProperty={editingProperty}\n                    setEditingProperty={setEditingProperty}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.name'\n                                defaultMessage='Name'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.data.type'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.description'\n                                defaultMessage='Description'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.actions'\n                                defaultMessage='Actions'\n                            />\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        properties && Object.entries(properties).map(([k, v]) => {\n                            return (\n                                <TableRow key={k}>\n                                    <TableCell align='left'>{k}</TableCell>\n                                    <TableCell align='left'>{v.type}</TableCell>\n                                    <TableCell align='left'>{v.description}</TableCell>\n                                    <TableCell align='left'>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                                            + 'ListPayloadProperties.edit'}\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                onClick={() => setEditingProperty({ name: k, ...v })}\n                                                fontSize='small'\n                                            >\n                                                <EditIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents'\n                                            + '.ListPayloadProps.delete'}\n                                                defaultMessage='Delete'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                disabled={disableUpdate}\n                                                onClick={() => operationsDispatcher({\n                                                    action: 'deletePayloadProperty',\n                                                    data: { target, verb, value: k },\n                                                })}\n                                                fontSize='small'\n                                            >\n                                                <DeleteIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListPayloadProperties.defaultProps = {\n    disableUpdate: false,\n};\nListPayloadProperties.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\n/**\n * Edit payload properties according to the AsyncAPI spec.\n * @export\n * @returns\n */\nexport default function EditPayloadProperty(props) {\n    const {\n        operationsDispatcher, target, verb, editingProperty, setEditingProperty,\n    } = props;\n\n    /**\n     * Payload property reducer\n     *\n     * @param {*} currentProperty\n     * @param {*} paramAction\n     */\n    function propertyActionReducer(currentProperty, paramAction) {\n        const { action, value } = paramAction;\n        const nextProperty = currentProperty.schema\n            ? { ...currentProperty, schema: { ...currentProperty.schema } } : { ...currentProperty };\n        switch (action) {\n            case 'type':\n            case 'description':\n                nextProperty[action] = value;\n                break;\n            default:\n                break;\n        }\n        return nextProperty;\n    }\n\n    const [property, propertyActionDispatcher] = useReducer(propertyActionReducer, editingProperty);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingProperty(null);\n    };\n\n    const handelDone = () => {\n        operationsDispatcher({ action: 'payloadProperty', data: { target, verb, value: property } });\n        handleClose();\n    };\n\n    const getSupportedDataTypes = () => {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    };\n\n    const isEditing = property !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-property'>\n            <DialogTitle disableTypography id='edit-property'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {property.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-property-type'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty'\n                                    + '.data.type'}\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={property.type}\n                                onChange={\n                                    ({ target: { name, value } }) => propertyActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-property-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes().map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {dataType}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty.'\n                                    + 'select.data.type'}\n                                    defaultMessage='Select the Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6} />\n                    <Grid item md={12}>\n                        <TextField\n                            value={property.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty'\n                                    + '.description'}\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                propertyActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={handelDone}\n                    variant='contained'\n                    color='primary'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditPayloadProperty.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingProperty: PropTypes.shape({}).isRequired,\n    setEditingProperty: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport Utils from 'AppData/Utils';\nimport { FileCopy } from '@material-ui/icons';\n\n/**\n * Renders the callback URL for WebSub and URI mapping for WebSocket.\n *\n * @param {*} props\n */\nexport default function Runtime(props) {\n    const {\n        operation, operationsDispatcher, target, verb, api,\n    } = props;\n    const { settings } = useAppContext();\n    const { allEnvRevision } = useRevisionContext();\n    const allEnvDeployments = Utils.getAllEnvironmentDeployments(settings.environment, allEnvRevision);\n\n    const buildCallbackURL = (protocol, host, port) => {\n        const context = api.context.substr(0, 1) !== '/' ? '/' + api.context : api.context;\n        let url = `${protocol}://${host || '{GATEWAY_HOST}'}:${port || `{websub_event_receiver_${protocol}_endpoint}`}`;\n        url += context;\n        url += '/' + api.version;\n        url += '/webhooks_events_receiver_resource?topic=';\n        url += target.toLowerCase();\n        return url;\n    };\n\n    const getUriMappingHelperText = (value) => {\n        let fqPath;\n        if (api.endpointConfig\n            && api.endpointConfig.production_endpoints\n            && api.endpointConfig.production_endpoints.url\n            && api.endpointConfig.production_endpoints.url.length > 0\n            && value\n            && value.length > 0) {\n            const { url } = api.endpointConfig.production_endpoints;\n            fqPath = ((url.substr(-1) === '/') ? url.substr(0, url.length - 1) : url) + value;\n        }\n        return fqPath ? 'Production URL will be ' + fqPath : '';\n    };\n    const [uriMappingHelperText, setUriMappingHelperText] = useState(\n        getUriMappingHelperText(operation[verb]['x-uri-mapping']),\n    );\n\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Runtime\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            {api.type === 'WS' && (\n                <>\n                    <Grid item md={1} />\n                    <Grid item md={5}>\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='URL Mapping'\n                            value={operation[verb]['x-uri-mapping']}\n                            variant='outlined'\n                            helperText={uriMappingHelperText}\n                            onChange={(e) => {\n                                let { value } = e.target;\n                                if (value.length > 0 && value.substr(0, 1) !== '/') {\n                                    value = '/' + value;\n                                }\n                                setUriMappingHelperText(getUriMappingHelperText(value));\n                                operationsDispatcher({ action: 'uriMapping', data: { target, verb, value } });\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={6} />\n                </>\n            )}\n            {api.type === 'WEBSUB' && settings.environment.map((env) => (\n                <>\n                    <Grid item md={1} />\n                    <Grid item md={10}>\n                        <Typography variant='subtitle1'>{env.displayName}</Typography>\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='HTTP Callback URL'\n                            disabled\n                            value={buildCallbackURL('http', allEnvDeployments[env.name].vhost.host,\n                                allEnvDeployments[env.name].vhost.websubHttpPort)}\n                            variant='outlined'\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <CopyToClipboard\n                                            text={buildCallbackURL('http',\n                                                allEnvDeployments[env.name].vhost.host,\n                                                allEnvDeployments[env.name].vhost.websubHttpPort)}\n                                        >\n                                            <IconButton>\n                                                <Icon>\n                                                    <FileCopy />\n                                                </Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='HTTPS Callback URL'\n                            disabled\n                            value={buildCallbackURL('https', allEnvDeployments[env.name].vhost.host,\n                                allEnvDeployments[env.name].vhost.websubHttpsPort)}\n                            variant='outlined'\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <CopyToClipboard\n                                            text={buildCallbackURL('https',\n                                                allEnvDeployments[env.name].vhost.host,\n                                                allEnvDeployments[env.name].vhost.websubHttpsPort)}\n                                        >\n                                            <IconButton>\n                                                <Icon>\n                                                    <FileCopy />\n                                                </Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={1} />\n                </>\n            ))}\n        </>\n    );\n}\n\nRuntime.propTypes = {\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport PropTypes from 'prop-types';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n/**\n * Return a group container , User should provide the operations list as the child component\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function GroupOfOperations(props) {\n    const { children, tag } = props;\n    return (\n        <ExpansionPanel defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls='panel1a-content' id='panel1a-header'>\n                <Typography variant='h4'>\n                    {tag}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nGroupOfOperations.propTypes = {\n    children: PropTypes.element.isRequired,\n    tag: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\n\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        minWidth: 120,\n    },\n    paper: {\n        paddingLeft: theme.spacing(4),\n        paddingTop: theme.spacing(1.5),\n        paddingBottom: theme.spacing(0.5),\n        marginTop: '12px',\n    },\n}));\n\n/**\n * Renders Subscription configurations for WebSub APIs.\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction SubscriptionConfig(props) {\n    const {\n        websubSubscriptionConfigDispatcher, websubSubscriptionConfiguration,\n    } = props;\n\n    const [isExpanded, setIsExpanded] = useState(false);\n    const classes = useStyles();\n    const [enabled, setEnabled] = useState(!!websubSubscriptionConfiguration.enable);\n\n    /**\n     *\n     */\n    function generateSecret() {\n        return 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[x]/g, (c) => {\n            // eslint-disable-next-line no-bitwise\n            const r = Math.random() * 16 | 0;\n            // eslint-disable-next-line no-bitwise, no-mixed-operators\n            const v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    /**\n     *\n     */\n    function getAlgorithms() {\n        return ['SHA1', 'SHA256', 'SHA384', 'SHA512'];\n    }\n\n    return (\n        <ExpansionPanel\n            expanded={isExpanded}\n            onChange={(e, expanded) => {\n                setIsExpanded(expanded);\n            }}\n            className={classes.paperStyles}\n        >\n            <ExpansionPanelSummary\n                disableRipple\n                disableTouchRipple\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls='panel2a-content'\n                id='panel2a-header'\n                classes={{ content: classes.contentNoMargin }}\n            >\n                <Grid item md={12} xs={12}>\n                    <Box ml={1}>\n                        <Typography variant='subtitle1' gutterBottom>\n                            Subscription Configuration\n                        </Typography>\n                    </Box>\n                </Grid>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Grid container direction='row' spacing={0} justify='center' alignItems='center'>\n                    <Grid item xs={6}>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Switch\n                                        checked={websubSubscriptionConfiguration.enable}\n                                        onChange={({ target: { checked } }) => {\n                                            setEnabled(checked);\n                                            websubSubscriptionConfigDispatcher({\n                                                action: 'enable',\n                                                value: checked,\n                                            });\n                                        }}\n                                        size='small'\n                                        color='primary'\n                                    />\n                                )}\n                                label='Enable'\n                                labelPlacement='start'\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            select\n                            disabled={!enabled}\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Subscription.signingAlgorithm'\n                                        defaultMessage='Signing Algortithm'\n                                    />\n                                </>\n                            )}\n                            value={websubSubscriptionConfiguration.signingAlgorithm}\n                            helperText='Select an algorithm to sign the message'\n                            name='secret'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => websubSubscriptionConfigDispatcher({\n                                action: 'signingAlgorithm',\n                                value,\n                            })}\n                        >\n                            {\n                                getAlgorithms().map((name) => (\n                                    <MenuItem value={name} dense>\n                                        {name}\n                                    </MenuItem>\n                                ))\n                            }\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            disabled={!enabled}\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Subscription.signature.header'\n                                        defaultMessage='Signature Header'\n                                    />\n                                </>\n                            )}\n                            value={websubSubscriptionConfiguration.signatureHeader}\n                            helperText='Set the HTTP header use by the provider to send the signature'\n                            name='secret'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => websubSubscriptionConfigDispatcher({\n                                action: 'signatureHeader',\n                                value,\n                            })}\n                        />\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <Grid container direction='row'>\n                            <Grid item xs={10}>\n                                <TextField\n                                    autoFocus\n                                    fullWidth\n                                    disabled\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Subscription.secret'\n                                                defaultMessage='Secret'\n                                            />\n                                        </>\n                                    )}\n                                    value={websubSubscriptionConfiguration.secret}\n                                    helperText='Use the above secret key while registering at the provider'\n                                    name='secret'\n                                    margin='normal'\n                                    variant='outlined'\n                                />\n                            </Grid>\n                            <Grid item xs={2}>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    disabled={!enabled}\n                                    onClick={() => websubSubscriptionConfigDispatcher({\n                                        action: 'secret',\n                                        value: generateSecret(),\n                                    })}\n                                    style={{ marginLeft: 10, marginTop: 25 }}\n                                >\n                                    Generate\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={6} />\n                </Grid>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nSubscriptionConfig.propTypes = {\n    websubSubscriptionConfigDispatcher: PropTypes.func.isRequired,\n    websubSubscriptionConfiguration: PropTypes.shape({\n        signingAlgorithm: PropTypes.string.isRequired,\n        signatureHeader: PropTypes.string.isRequired,\n        secret: PropTypes.string.isRequired,\n        enable: PropTypes.bool.isRequired,\n    }).isRequired,\n};\n\nexport default React.memo(SubscriptionConfig);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer, useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link, useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ArrowForwardIcon from '@material-ui/icons/SettingsEthernet';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport { isRestricted } from 'AppData/AuthManager';\nimport API from 'AppData/api';\nimport Endpoints from './components/Endpoints';\nimport KeyManager from './components/KeyManager';\nimport APILevelRateLimitingPolicies from './components/APILevelRateLimitingPolicies';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    boxFlex: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n        minHeight: '250px',\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(1),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 175,\n        right: -55,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    info: {\n        display: 'flex',\n        height: '100%',\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    const keyManagers = api.apiType === API.CONSTS.APIProduct ? ['all'] : [...api.keyManagers];\n    return {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        apiThrottlingPolicy: api.apiThrottlingPolicy,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        wsdlUrl: api.wsdlUrl,\n        transport: [...api.transport],\n        securityScheme: [...api.securityScheme],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n        keyManagers,\n    };\n}\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function RuntimeConfiguration() {\n    /**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\n    function configReducer(state, configAction) {\n        const { action, value } = configAction;\n        const nextState = { ...copyAPIConfig(state) };\n        switch (action) {\n            case 'apiThrottlingPolicy':\n            case 'maxTps':\n                nextState[action] = value;\n                return nextState;\n            case 'keymanagers':\n                nextState.keyManagers = value;\n                return nextState;\n            case 'throttlingPoliciesEnabled':\n                if (value) {\n                    nextState.apiThrottlingPolicy = '';\n                } else {\n                    nextState.apiThrottlingPolicy = null;\n                }\n                return nextState;\n            case 'allKeyManagersEnabled':\n                if (value) {\n                    nextState.keyManagers = [];\n                } else {\n                    nextState.keyManagers = ['all'];\n                }\n                return nextState;\n            default:\n                return state;\n        }\n    }\n    const { api, updateAPI } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const history = useHistory();\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSave() {\n        setIsUpdating(true);\n\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => setIsUpdating(false));\n    }\n\n    function handleSaveAndDeploy() {\n        setIsUpdating(true);\n\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    }\n\n    return (\n        <>\n            <Box pb={3}>\n                <Typography variant='h5'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.topic.header'\n                        defaultMessage='Runtime Configurations'\n                    />\n                </Typography>\n            </Box>\n            <div className={classes.contentWrapper}>\n                <Grid container direction='row' justify='space-around' alignItems='stretch' spacing={8}>\n                    <Grid item xs={12} md={7} style={{ marginBottom: 30, position: 'relative' }}>\n                        <Typography className={classes.heading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.section.client.websocket'\n                                defaultMessage='Client Websocket'\n                            />\n                        </Typography>\n                        <div className={classes.boxFlex}>\n                            <Paper\n                                className={classes.paper}\n                                elevation={0}\n                                style={{ display: 'flex', alignItems: 'center' }}\n                            >\n                                <Box pr={3}>\n                                    <KeyManager api={apiConfig} configDispatcher={configDispatcher} />\n                                </Box>\n                                <Box pr={3}>\n                                    <APILevelRateLimitingPolicies api={apiConfig} configDispatcher={configDispatcher} />\n                                </Box>\n                            </Paper>\n                            <ArrowForwardIcon className={classes.arrowForwardIcon} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Typography className={classes.heading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.section.backend.websocket'\n                                defaultMessage='Backend Websocket'\n                            />\n                        </Typography>\n                        <Paper className={classes.paper} style={{ height: 'calc(100% - 75px)' }} elevation={0}>\n                            {!api.isAPIProduct() && (\n                                <>\n                                    <Endpoints api={api} />\n                                </>\n                            )}\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid container direction='row' alignItems='center' spacing={1} style={{ marginTop: 20 }}>\n                        <Grid item>\n                            {api.isRevision\n                                || ((apiConfig.visibility === 'RESTRICTED' && apiConfig.visibleRoles.length === 0)\n                                || isRestricted(['apim:api_create'], api)) ? (\n                                    <Button\n                                        disabled\n                                        type='submit'\n                                        variant='contained'\n                                        color='primary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.save'\n                                            defaultMessage='Save'\n                                        />\n                                    </Button>\n                                ) : (\n                                    <CustomSplitButton\n                                        handleSave={handleSave}\n                                        handleSaveAndDeploy={handleSaveAndDeploy}\n                                        isUpdating={isUpdating}\n                                    />\n                                )}\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Grid item>\n                                <Typography variant='body2' color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.update.not.allowed'\n                                        defaultMessage={\n                                            '* You are not authorized to update particular fields of'\n                                            + ' the API due to insufficient permissions'\n                                        }\n                                    />\n                                </Typography>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n        display: 'inline-flex',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    keyManagerSelect: {\n        minWidth: 180,\n    },\n}));\n\n/**\n *\n * API Level Rate Limiting configuration\n * @param {*} props\n * @returns\n */\nexport default function APILevelRateLimitingPolicies(props) {\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const {\n        configDispatcher,\n        api: { apiThrottlingPolicy },\n    } = props;\n    const [apiRateLimits, setApiRateLimits] = useState([]);\n    const handleChange = (event) => {\n        configDispatcher({\n            action: 'apiThrottlingPolicy',\n            value: event.target.value,\n        });\n    };\n\n    useEffect(() => {\n        API.policies('api').then((response) => setApiRateLimits(response.body.list));\n    }, []);\n\n    return (\n        <ExpansionPanel className={classes.expansionPanel} defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography className={classes.subHeading} variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APILevelRateLimitingPolicies.configuration'\n                        defaultMessage='Rate Limiting Configuration'\n                    />\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.APILevelRateLimitingPolicies.components.Configuration.tooltip'\n                                defaultMessage={'Selected Rate Limiting Policy will be applied to all the'\n                                + ' requests of this API.'}\n                            />\n                        )}\n                        aria-label='Rate Limiting Policies'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline className={classes.iconSpace} />\n                    </Tooltip>\n                </Typography>\n                <FormControlLabel\n                    className={classes.actionSpace}\n                    control={(\n                        <Switch\n                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                            checked={!(apiThrottlingPolicy === null)}\n                            onChange={({ target: { checked } }) => configDispatcher({\n                                action: 'throttlingPoliciesEnabled',\n                                value: checked,\n                            })}\n                            color='primary'\n                        />\n                    )}\n                />\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                <Grid container spacing={1} alignItems='center'>\n                    <Grid item md={6} xs={12}>\n                        {!(apiThrottlingPolicy === null) && (\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                id='operation_throttling_policy'\n                                select\n                                value={apiThrottlingPolicy}\n                                onChange={handleChange}\n                                label='Rate limiting policies'\n                                margin='dense'\n                                variant='outlined'\n                                style={{ display: 'flex', minWidth: 180 }}\n                            >\n                                {apiRateLimits.map((rateLimit) => (\n                                    <MenuItem key={rateLimit.name} value={rateLimit.name}>\n                                        {rateLimit.displayName}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        )}\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nAPILevelRateLimitingPolicies.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\n\nimport LifeCycleUpdate from './LifeCycleUpdate';\nimport LifeCycleHistory from './LifeCycleHistory';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    historyHead: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n});\n/**\n *\n *\n * @class LifeCycle\n * @extends {Component}\n */\nclass LifeCycle extends Component {\n    /**\n     * Creates an instance of LifeCycle.\n     * @param {Object} props\n     * @memberof LifeCycle\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.state = {\n            lcHistory: null,\n            checkList: [],\n            certList: [],\n        };\n        this.updateData = this.updateData.bind(this);\n        this.handleChangeCheckList = this.handleChangeCheckList.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @memberof LifeCycle\n     */\n    componentDidMount() {\n        const { api: { id } } = this.props;\n        const promisedClientCerts = Api.getAllClientCertificates(id);\n        const { intl } = this.props;\n        promisedClientCerts.then((certList) => {\n            const clientCerts = certList.body;\n            this.setState({\n                certList: [...clientCerts.certificates],\n            });\n            this.updateData();\n        }).catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.error.certs',\n                    defaultMessage: 'Error while retrieving certificates',\n                }));\n                console.error(error);\n            }\n        });\n    }\n\n    handleChangeCheckList = (index) => (event, checked) => {\n        const { checkList } = this.state;\n        checkList[index].checked = checked;\n        this.setState({ checkList });\n    };\n\n    /**\n     *\n     *\n     * @memberof LifeCycle\n     */\n    updateData() {\n        const { api: { id } } = this.props;\n        const promisedAPI = Api.get(id);\n        const promisedLcState = this.api.getLcState(id);\n        const promisedLcHistory = this.api.getLcHistory(id);\n        Promise.all([promisedAPI, promisedLcState, promisedLcHistory])\n            .then((response) => {\n                const api = response[0];\n                const lcState = response[1].body;\n                const lcHistory = response[2].body.list;\n\n                // Creating checklist\n                const checkList = [];\n                let index = 0;\n                for (const item of lcState.checkItems) {\n                    checkList.push({\n                        index,\n                        label: item.name,\n                        value: item.name,\n                        checked: false,\n                    });\n                    index++;\n                }\n                this.setState({\n                    api,\n                    lcState,\n                    lcHistory,\n                    checkList,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n            });\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof LifeCycle\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            api, lcState, checkList, lcHistory, certList,\n        } = this.state;\n        const apiFromContext = this.context.api;\n        if (apiFromContext && isRestricted(['apim:api_publish'], apiFromContext)) {\n            return (\n                <Grid container direction='row' alignItems='center' spacing={4} style={{ marginTop: 20 }}>\n                    <Grid item>\n                        <Typography variant='body2' color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.LifeCycle.change.not.allowed'\n                                defaultMessage={\n                                    '* You are not authorized to change the life cycle state of the API'\n                                    + ' due to insufficient permissions'\n                                }\n                            />\n                        </Typography>\n                    </Grid>\n                </Grid>\n            );\n        }\n        if (!lcState) {\n            return <Progress />;\n        }\n        return (\n            <>\n                <Typography id='itest-api-details-lifecycle-head' variant='h4' gutterBottom>\n                    <FormattedMessage id='Apis.Details.LifeCycle.LifeCycle.lifecycle' defaultMessage='Lifecycle' />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <LifeCycleUpdate\n                                handleUpdate={this.updateData}\n                                lcState={lcState}\n                                checkList={checkList}\n                                handleChangeCheckList={this.handleChangeCheckList}\n                                api={api}\n                                certList={certList}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            {lcHistory.length > 1 && (\n                                <div>\n                                    <Typography variant='h6' gutterBottom className={classes.historyHead}>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.LifeCycle.history'\n                                            defaultMessage='History'\n                                        />\n                                    </Typography>\n                                    <LifeCycleHistory lcHistory={lcHistory} />\n                                </div>\n                            )}\n                        </Grid>\n                    </Grid>\n                </div>\n            </>\n        );\n    }\n}\n\nLifeCycle.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nLifeCycle.contextType = ApiContext;\n\nexport default withStyles(styles)(LifeCycle);\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport { CircularProgress } from '@material-ui/core';\nimport { ScopeValidation, resourceMethod, resourcePath } from 'AppData/ScopeValidation';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport PublishWithoutDeploy from 'AppComponents/Apis/Details/LifeCycle/Components/PublishWithoutDeploy';\nimport Configurations from 'Config';\nimport LifeCycleImage from './LifeCycleImage';\nimport CheckboxLabels from './CheckboxLabels';\nimport LifecyclePending from './LifecyclePending';\nimport { API_SECURITY_MUTUAL_SSL_MANDATORY, API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY }\n    from '../Configuration/components/APISecurity/components/apiSecurityConstants';\n\nconst styles = (theme) => ({\n    buttonsWrapper: {\n        marginTop: 40,\n    },\n    stateButton: {\n        marginRight: theme.spacing(),\n    },\n    paperCenter: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        alignItems: 'left',\n        justifyContent: 'left',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n});\n\n/**\n *\n *\n * @class LifeCycleUpdate\n * @extends {Component}\n */\nclass LifeCycleUpdate extends Component {\n    /**\n     * @param {*} props @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.updateLifeCycleState = this.updateLifeCycleState.bind(this);\n        this.api = new API();\n        this.WORKFLOW_STATUS = {\n            CREATED: 'CREATED',\n            APPROVED: 'APPROVED',\n        };\n        this.state = {\n            newState: null,\n            isUpdating: null,\n            pageError: null,\n            isOpen: false,\n            deploymentsAvailable: false,\n        };\n        this.setIsOpen = this.setIsOpen.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     *\n     * Set Deployment availability\n     */\n    componentDidMount() {\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        this.api.getRevisionsWithEnv(apiUUID).then((result) => {\n            this.setState({ deploymentsAvailable: result.body.count > 0 });\n        });\n    }\n\n    /**\n     *\n     * Set isOpen state of the dialog box which shows the caution message when publish without deploying\n     * @param {Boolean} isOpen Should dialog box is open or not\n     */\n    setIsOpen(isOpen) {\n        this.setState({ isOpen });\n    }\n\n    /**\n     * @param {*} apiUUID api UUID\n     * @param {*} action life cycle action\n     * @memberof LifeCycleUpdate\n     */\n    updateLCStateOfAPI(apiUUID, action) {\n        this.setState({ isUpdating: action });\n        let promisedUpdate;\n        const lifecycleChecklist = this.props.checkList.map((item) => item.value + ':' + item.checked);\n        if (lifecycleChecklist.length > 0) {\n            promisedUpdate = this.api.updateLcState(apiUUID, action, lifecycleChecklist.toString());\n        } else {\n            promisedUpdate = this.api.updateLcState(apiUUID, action);\n        }\n        promisedUpdate\n            .then((response) => {\n                /* TODO: Handle IO erros ~tmkb */\n                // get the latest state of the API\n                this.context.updateAPI();\n                const newState = response.body.lifecycleState.state;\n                const { workflowStatus } = response.body;\n                this.setState({ newState });\n                const { intl } = this.props;\n\n                if (workflowStatus === this.WORKFLOW_STATUS.CREATED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.LifeCycle.LifeCycleUpdate.success.createStatus',\n                        defaultMessage: 'Lifecycle state change request has been sent',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.LifeCycle.LifeCycleUpdate.success.otherStatus',\n                        defaultMessage: 'Lifecycle state updated successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    this.setState({ pageError: error.response.body });\n                } else {\n                    // TODO add i18n ~tmkb\n                    const message = 'Something went wrong while updating the lifecycle';\n                    Alert.error(message);\n                    this.setState({ pageError: error.response.body });\n                }\n                console.error(error);\n            })\n            .finally(() => {\n                this.setState({ isUpdating: null });\n            });\n    }\n\n    /**\n     *\n     * Set handle click warning\n     */\n    handleClick() {\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        this.setIsOpen(false);\n        this.updateLCStateOfAPI(apiUUID, 'Publish');\n    }\n\n    /**\n     *\n     *\n     * @param {*} event event\n     * @memberof LifeCycleUpdate\n     */\n    updateLifeCycleState(event) {\n        const { deploymentsAvailable } = this.state;\n        event.preventDefault();\n        let action = event.currentTarget.getAttribute('data-value');\n        if (action === 'Deploy To Test') {\n            action = 'Deploy as a Prototype';\n        }\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        if (action === 'Publish' && !deploymentsAvailable) {\n            this.setIsOpen(true);\n        } else {\n            this.updateLCStateOfAPI(apiUUID, action);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof LifeCycleUpdate\n     */\n    render() {\n        const {\n            api, lcState, classes, theme, handleChangeCheckList, checkList, certList,\n        } = this.props;\n        const lifecycleStates = [...lcState.availableTransitions];\n        const { newState, pageError, isOpen } = this.state;\n        const isWorkflowPending = api.workflowStatus && api.workflowStatus === this.WORKFLOW_STATUS.CREATED;\n        const lcMap = new Map();\n        lcMap.set('Published', 'Publish');\n        lcMap.set('Prototyped', 'Deploy as a prototype');\n        lcMap.set('Deprecated', 'Deprecate');\n        lcMap.set('Blocked', 'Block');\n        lcMap.set('Created', 'Create');\n        lcMap.set('Retired', 'Retire');\n        const isPrototype = api.endpointConfig && api.endpointConfig.implementation_status === 'prototyped';\n        const isMutualSSLEnabled = api.securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY);\n        const isAppLayerSecurityMandatory = api.securityScheme.includes(\n            API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n        );\n        const isCertAvailable = certList.length !== 0;\n        const isBusinessPlanAvailable = api.policies.length !== 0;\n        const lifecycleButtons = lifecycleStates.map((item) => {\n            const state = { ...item, displayName: item.event };\n            if (state.event === 'Deploy as a Prototype') {\n                if (state.displayName === 'Deploy as a Prototype') {\n                    state.displayName = 'Prototype';\n                }\n                return {\n                    ...state,\n                    disabled: !isPrototype || (api.type !== 'WEBSUB' && api.endpointConfig == null),\n                };\n            }\n            if (state.event === 'Publish') {\n                return {\n                    ...state,\n                    disabled:\n                        (api.type !== 'WEBSUB' && api.endpointConfig === null)\n                        || (isMutualSSLEnabled && !isCertAvailable)\n                        || (isAppLayerSecurityMandatory && !isBusinessPlanAvailable)\n                        || (api.type !== 'WEBSUB' && api.endpointConfig != null\n                            && api.endpointConfig.implementation_status === 'prototyped'),\n                };\n            }\n            return {\n                ...state,\n                disabled: false,\n            };\n        });\n\n        return (\n            <Grid container>\n                {isWorkflowPending ? (\n                    <Grid item xs={12}>\n                        <LifecyclePending currentState={lcState.state} />\n                    </Grid>\n                ) : (\n                    <Grid item xs={12}>\n                        {theme.custom.lifeCycleImage ? (\n                            <img\n                                src={Configurations.app.context + theme.custom.lifeCycleImage}\n                                alt='life cycles'\n                            />\n                        ) : (\n                            <Grid container spacing={3}>\n                                <Grid item xs={8}>\n                                    <LifeCycleImage lifeCycleStatus={newState || api.lifeCycleStatus} />\n                                </Grid>\n                                {(api.lifeCycleStatus === 'CREATED'\n                                    || api.lifeCycleStatus === 'PROTOTYPED') && (\n                                    <Grid item xs={3}>\n                                        <CheckboxLabels\n                                            api={api}\n                                            isMutualSSLEnabled={isMutualSSLEnabled}\n                                            isAppLayerSecurityMandatory={isAppLayerSecurityMandatory}\n                                            isCertAvailable={isCertAvailable}\n                                            isBusinessPlanAvailable={isBusinessPlanAvailable}\n                                        />\n                                    </Grid>\n                                )}\n                            </Grid>\n                        )}\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    {!isWorkflowPending && (\n                        <FormGroup row>\n                            {checkList.map((checkItem, index) => (\n                                <FormControlLabel\n                                    key={checkList[index].value}\n                                    control={(\n                                        <Checkbox\n                                            checked={checkList[index].checked}\n                                            onChange={handleChangeCheckList(index)}\n                                            value={checkList[index].value}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label={checkList[index].label}\n                                />\n                            ))}\n                        </FormGroup>\n                    )}\n                    <ScopeValidation\n                        resourcePath={resourcePath.API_CHANGE_LC}\n                        resourceMethod={resourceMethod.POST}\n                    >\n                        <div className={classes.buttonsWrapper}>\n                            {!isWorkflowPending\n                            && lifecycleButtons.map((transitionState) => {\n                                /* Skip when transitions available for current state, this occurs in states\n                                where have allowed re-publishing in prototype and published sates */\n                                return (\n                                    <Button\n                                        disabled={transitionState.disabled\n                                        || this.state.isUpdating || api.isRevision}\n                                        variant='contained'\n                                        color='primary'\n                                        className={classes.stateButton}\n                                        key={transitionState.event}\n                                        data-value={transitionState.event}\n                                        onClick={this.updateLifeCycleState}\n                                        data-testid={transitionState.event + '-btn'}\n                                    >\n                                        {transitionState.displayName}\n                                        {this.state.isUpdating === transitionState.event && (\n                                            <CircularProgress size={18} />\n                                        )}\n                                    </Button>\n                                );\n                            })}\n                        </div>\n                    </ScopeValidation>\n                </Grid>\n                {/* Page error banner */}\n                {pageError && (\n                    <Grid item xs={11}>\n                        <Banner\n                            onClose={() => this.setState({ pageError: null })}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n                {/* end of Page error banner */}\n                <PublishWithoutDeploy\n                    apiID={api.id}\n                    handleClick={this.handleClick}\n                    handleClose={() => this.setIsOpen(false)}\n                    open={isOpen}\n                />\n            </Grid>\n        );\n    }\n}\n\nLifeCycleUpdate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    checkList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    lcState: PropTypes.shape({}).isRequired,\n    handleChangeCheckList: PropTypes.func.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nLifeCycleUpdate.contextType = ApiContext;\n\nexport default withStyles(styles, { withTheme: true })(injectIntl(LifeCycleUpdate));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport LinkIcon from '@material-ui/icons/Link';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst styles = (theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n    const {\n        children, classes, onClose, ...other\n    } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant='h6'>{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label='close' className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\n/**\n *\n * @returns\n */\nexport default function PublishWithoutDeploy(props) {\n    const {\n        apiID, handleClick, open, handleClose,\n    } = props;\n\n    return (\n        <Dialog onClose={handleClose} aria-labelledby='publish-api-confirmation' open={open}>\n            <DialogTitle id='itest-publish-confirmation' onClose={handleClose}>\n                <FormattedMessage\n                    id='Apis.Details.LifeCycle.components.confirm.publish.title'\n                    defaultMessage='Publish API without deployments'\n                />\n            </DialogTitle>\n            <Divider light />\n            <DialogContent>\n                <Box my={1}>\n                    <DialogContentText id='itest-confirm-publish-text'>\n                        <Typography variant='subtitle1' display='block' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.components.confirm.publish.message'\n                                defaultMessage={'The API will not be available for '\n                                        + 'consumption unless it is deployed.'}\n                            />\n                        </Typography>\n                    </DialogContentText>\n                </Box>\n\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    Publish\n                </Button>\n                <Button\n                    variant='contained'\n                    color='primary'\n                    component={RouterLink}\n                    to={'/apis/' + apiID + '/deployments'}\n                >\n                    <Box fontSize='button.fontSize' alignItems='center' display='flex' fontFamily='fontFamily'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.publish.content.info.deployments'\n                            defaultMessage='Deployments'\n                        />\n                        <Box ml={0.5} mt={0.25} display='flex'>\n                            <LinkIcon fontSize='small' />\n                        </Box>\n                    </Box>\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n `max-len` es-lint rule has been disabled for the entire file due to the generated svg elements in the file.\n it's impossible to get them under 120 columns rule\n  */\n/* eslint-disable max-len */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = () => ({\n    root: {\n        marginTop: 30,\n    },\n});\n\n/**\n *\n *\n * @class LifeCycleImage\n * @extends {React.Component}\n */\nclass LifeCycleImage extends React.Component {\n    /**\n     *\n     *\n     * @param {*} element\n     * @returns\n     * @memberof LifeCycleImage\n     */\n    highLightMe(element) {\n        const style = {};\n        if (!element.startsWith(this.props.lifeCycleStatus.toLowerCase())) {\n            style.opacity = 0.2;\n        }\n        return style;\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof LifeCycleImage\n     */\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                width='633'\n                height='244'\n                viewBox='0 0 743.09858 287.34519'\n                id='svg5953'\n                className={classes.root}\n            >\n                <defs id='defs5955'>\n                    <path\n                        transform='scale(.26458)'\n                        id='path5588'\n                        d='m 1738.3694,290.45336 a 290.37688,290.37688 0 0 1 268.3994,-179.55952 290.37688,290.37688 0 0 1 5.8758,0.0595'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path5578'\n                        d='m 2103.6746,127.54094 a 290.37688,290.37688 0 0 1 193.3409,265.03704'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path5547'\n                        d='m 1748.9295,534.82816 a 290.37688,290.37688 0 0 0 257.8393,156.81941 290.37688,290.37688 0 0 0 5.8709,-0.0593'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path4189'\n                        d='m 1748.9295,534.82816 a 290.37688,290.37688 0 0 0 257.8393,156.81941 290.37688,290.37688 0 0 0 5.8709,-0.0593'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                </defs>\n                <g id='layer1' transform='translate(51.512 4.77)'>\n                    <path d='m 99,13.3622 24,0 0,24 -24,0 z' id='path6746' fill='none' />\n                    <g id='prototyped' style={this.highLightMe('prototyped')}>\n                        <text\n                            id='text6729'\n                            y='6.362'\n                            x='61'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                            fill='#2b2b2b'\n                        >\n                            <tspan y='6.362' x='61' id='tspan6731'>\n                                PROTOTYPED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6748'\n                            d='m 118,16.3622 -4.18,0 c -0.42,-1.16 -1.52,-2 -2.82,-2 -1.3,0 -2.4,0.84 -2.82,2 l -4.18,0 c -1.1,0 -2,0.9 -2,2 l 0,14 c 0,1.1 0.9,2 2,2 l 14,0 c 1.1,0 2,-0.9 2,-2 l 0,-14 c 0,-1.1 -0.9,-2 -2,-2 z m -7,0 c 0.55,0 1,0.45 1,1 0,0.55 -0.45,1 -1,1 -0.55,0 -1,-0.45 -1,-1 0,-0.55 0.45,-1 1,-1 z m -2,14 -4,-4 1.41,-1.41 2.59,2.58 6.59,-6.59 1.41,1.42 -8,8 z'\n                        />\n                    </g>\n                    <path d='m 224.5,133.8622 24,0 0,24 -24,0 z' id='path6762' fill='none' />\n                    <g id='published' style={this.highLightMe('published')}>\n                        <text\n                            id='text6524'\n                            y='125.476'\n                            x='207'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.476' x='207' id='tspan6526'>\n                                PUBLISHED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6764'\n                            d='m 240.5,144.8622 c 1.66,0 2.99,-1.34 2.99,-3 0,-1.66 -1.33,-3 -2.99,-3 -1.66,0 -3,1.34 -3,3 0,1.66 1.34,3 3,3 z m -8,0 c 1.66,0 2.99,-1.34 2.99,-3 0,-1.66 -1.33,-3 -2.99,-3 -1.66,0 -3,1.34 -3,3 0,1.66 1.34,3 3,3 z m 0,2 c -2.33,0 -7,1.17 -7,3.5 l 0,2.5 14,0 0,-2.5 c 0,-2.33 -4.67,-3.5 -7,-3.5 z m 8,0 c -0.29,0 -0.62,0.02 -0.97,0.05 1.16,0.84 1.97,1.97 1.97,3.45 l 0,2.5 6,0 0,-2.5 c 0,-2.33 -4.67,-3.5 -7,-3.5 z'\n                        />\n                    </g>\n                    <g id='created' style={this.highLightMe('created')}>\n                        <text\n                            id='text6520'\n                            y='282.362'\n                            x='68'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='282.362' x='68' id='tspan6522'>\n                                CREATED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6778'\n                            d='m 97,238.8622 c -1.1,0 -1.99,0.9 -1.99,2 l -0.01,16 c 0,1.1 0.89,2 1.99,2 l 12.01,0 c 1.1,0 2,-0.9 2,-2 l 0,-12 -6,-6 -8,0 z m 7,7 0,-5.5 5.5,5.5 -5.5,0 z'\n                        />\n                    </g>\n                    <path d='m 91,236.8622 24,0 0,24 -24,0 z' id='path6780' fill='none' />\n                    <g id='deprecated' style={this.highLightMe('deprecated')}>\n                        <text\n                            id='text6536'\n                            y='125.476'\n                            x='397.858'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.476' x='397.858' id='tspan6538'>\n                                DEPRECATED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6794'\n                            d='m 433.52944,97.811947 c 0,1.1 0.9,2 2,2 l 8,0 c 1.1,0 2,-0.9 2,-2 l 0,-12 -12,0 0,12 z m 13,-15 -3.5,0 -1,-1 -5,0 -1,1 -3.5,0 0,2 14,0 0,-2 z'\n                        />\n                        <path id='path6796' d='m 427.52944,78.811947 24,0 0,24.000003 -24,0 z' fill='none' />\n                    </g>\n                    <path d='m 427.52944,236.8622 24,0 0,24 -24,0 z' id='path6810' clipRule='evenodd' fill='none' />\n                    <g id='blocked' style={this.highLightMe('blocked')}>\n                        <text\n                            id='text6532'\n                            y='282.362'\n                            x='386.858'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='282.362' x='386.858' id='tspan6534'>\n                                BLOCKED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6812'\n                            d='m 450.22944,255.8622 -9.1,-9.1 c 0.9,-2.3 0.4,-5 -1.5,-6.9 -2,-2 -5,-2.4 -7.4,-1.3 l 4.3,4.3 -3,3 -4.4,-4.3 c -1.2,2.4 -0.7,5.4 1.3,7.4 1.9,1.9 4.6,2.4 6.9,1.5 l 9.1,9.1 c 0.4,0.4 1,0.4 1.4,0 l 2.3,-2.3 c 0.5,-0.4 0.5,-1.1 0.1,-1.4 z'\n                        />\n                    </g>\n                    <g id='retired' style={this.highLightMe('retired')}>\n                        <text\n                            id='text6540'\n                            y='125.483'\n                            x='627.485'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.483' x='627.485' id='tspan6542'>\n                                RETIRED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6826'\n                            d='m 663.36667,89.811947 0,2 -13,0 0,-6 9,0 c 2.21,0 4,1.79 4,4 z m -20,3 0,2 6,0 0,2 8,0 0,-2 6,0 0,-2 -20,0 z m 5.14,-1.9 c 1.16,-1.19 1.14,-3.08 -0.04,-4.24 -1.19,-1.16 -3.08,-1.14 -4.24,0.04 -1.16,1.19 -1.14,3.08 0.04,4.24 1.19,1.16 3.08,1.14 4.24,-0.04 z'\n                        />\n                        <path id='path6828' d='m 641.36667,78.811947 24,0 0,24.000003 -24,0 z' fill='none' />\n                    </g>\n                    <g id='published_to_created' style={this.highLightMe('published_to_created')}>\n                        <path\n                            id='path6872'\n                            d='m 235.84375,184.86133 c -11.86654,31.99459 -35.12697,58.48216 -65.32031,74.38281 l -5.4624,15.71344 14.85695,3.63617 c 35.16928,-17.95415 62.42125,-48.3249 76.47461,-85.22656 l -15.28708,7.18109 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#065381'\n                        />\n                        <path\n                            id='path6985'\n                            d='m 178.61585,255.22337 -4.875,15.375 14.5,3.625'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 187.11585,249.22337 -4.875,15.375 14.5,3.625'\n                            id='path6987'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='created_to_published' style={this.highLightMe('created_to_published')}>\n                        <path\n                            id='path6850'\n                            d='m 202.80469,171.18359 c -8.60566,23.79669 -25.78994,43.52064 -48.1836,55.30469 l 15.33148,4.4495 -5.74163,15.30245 c 27.19915,-14.16065 48.15744,-37.93366 58.79687,-66.69335 l -4.08764,-14.98782 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#34b2e4'\n                        />\n                        <path\n                            d='m 200.07828,178.47337 15.66836,-6.25318 3.78013,13.89858'\n                            id='path6979'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            id='path6991'\n                            d='m 195.3937,187.48898 15.66836,-6.25318 3.78013,13.89858'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='prototyped_to_published' style={this.highLightMe('prototyped_to_published')}>\n                        <path\n                            id='path6874'\n                            d='m 181.42383,-4.0683594 5.18392,15.3553234 -15.14681,3.480614 c 26.97521,14.497097 48.38501,37.525806 60.88086,65.484375 l 16.41911,5.795641 4.09261,-14.231188 C 238.22018,39.231643 213.06477,12.507292 181.42383,-4.0683594 Z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#fe912a'\n                        />\n                        <path\n                            id='path6993'\n                            d='m 228.26421,71.982698 16.39604,5.833631 3.93328,-14.097941'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 224.76421,65.357698 16.39604,5.833631 3.93328,-14.097941'\n                            id='path6995'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='published_to_prototyped' style={this.highLightMe('published_to_prototyped')}>\n                        <path\n                            id='path6855'\n                            d='m 164.61328,27.712891 -16.76273,3.798407 6.57718,15.455499 c 19.64736,10.327117 35.3679,26.809879 44.75391,46.923828 l 6.94786,-12.105746 13.33339,3.763949 C 208.07457,60.73778 188.78631,40.399355 164.61328,27.712891 Z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#ffc95c'\n                        />\n                        <path\n                            id='path6997'\n                            d='m 163.43006,52.336437 -6.45235,-15.202795 16.61701,-3.535534'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='M 171.82695,57.993291 165.3746,42.790496 181.99161,39.254962'\n                            id='path6999'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='created_to_prototyped' style={this.highLightMe('created_to_prototyped')}>\n                        <path\n                            id='path6870'\n                            d='M 35.433594,-4.7226562 C -17.800688,22.43674 -51.366944,77.095386 -51.511719,136.85742 c 0.08726,60.42038 34.333636,115.59607 88.439453,142.48828 l -5.963174,-14.43529 14.818643,-3.6858 C -1.8626488,238.10436 -32.152993,189.83798 -32.251953,136.87891 -32.191581,84.271252 -2.3316563,36.239603 44.818359,12.90625 l 7.576833,-14.3582512 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#8b103e'\n                        />\n                        <path\n                            id='path7001'\n                            d='m 25.625,1.1122031 16.25,3 -7.125,13.7499999'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 16.375,7.1122031 16.25,2.9999999 -7.125,13.75'\n                            id='path7003'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='prototyped_to_created' style={this.highLightMe('prototyped_to_created')}>\n                        <path\n                            id='path6840'\n                            d='M 52.171875,26.720703 C 10.473112,47.61586 -15.897048,90.22032 -16,136.86133 c 0.06835,46.84095 26.630186,89.61173 68.585938,110.43945 l 18.169686,-5.17409 -8.489999,-14.63841 C 27.868397,210.36444 6.0894455,175.28511 6,136.86133 6.0597413,98.328986 27.932967,63.153267 62.464844,46.056641 l -14.466177,-4.2932 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#e34856'\n                        />\n                        <path\n                            id='path7005'\n                            d='m 39.421204,240.07329 17.677669,-4.94975 -7.778174,-14.49569'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 27.930719,230.8809 17.677669,-4.94975 -7.778174,-14.49569'\n                            id='path7007'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='deprecated_to_retired' style={this.highLightMe('deprecated_to_retired')}>\n                        <path\n                            id='rect7009'\n                            d='m 530.25049,110.51652 68.24164,0 9.89949,9.52539 -9.89949,9.40863 -68.24164,0 9.54594,-9.76218 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            id='path7016'\n                            d='m 589.97554,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            d='m 581.28804,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            id='path7018'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='published_to_deprecated' style={this.highLightMe('published_to_deprecated')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 306.25049,110.51652 68.24164,0 9.89949,9.52539 -9.89949,9.40863 -68.24164,0 9.54594,-9.76218 z'\n                            id='path7020'\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 365.97554,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            id='path7022'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7024'\n                            d='m 357.28804,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='published_to_blocked' style={this.highLightMe('published_to_blocked')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 306.92162,149.0749 92.7941,75.49823 1.41692,13.66474 -13.63383,0.80053 -92.79411,-75.49822 13.59185,-1.29876 z'\n                            id='path7026'\n                            color='#000'\n                            overflow='visible'\n                            fill='#65daad'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 392.87565,219.47284 1.33665,12.84698 -12.94218,0.70939'\n                            id='path7028'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7030'\n                            d='m 386.23855,213.86735 1.33664,12.84698 -12.94218,0.70939'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g\n                        id='blocked_to_published'\n                        transform='rotate(180 338.919 207.057)'\n                        style={this.highLightMe('blocked_to_published')}\n                    >\n                        <path\n                            id='path7039'\n                            d='m 306.92162,149.0749 92.7941,75.49823 1.41692,13.66474 -13.63383,0.80053 -92.79411,-75.49822 13.59185,-1.29876 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#64d0da'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            id='path7041'\n                            d='m 392.87565,219.47284 1.33665,12.84698 -12.94218,0.70939'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            d='m 386.23855,213.86735 1.33664,12.84698 -12.94218,0.70939'\n                            id='path7043'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='blocked_to_deprecated' style={this.highLightMe('blocked_to_deprecated')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 427.85405,225.05409 0,-68.24164 9.52539,-9.89949 9.40863,9.89949 0,68.24164 -9.76218,-9.54594 z'\n                            id='path7045'\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 428.37098,165.32904 8.95242,-9.31051 8.89273,9.42988'\n                            id='path7047'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7049'\n                            d='m 428.37098,174.01654 8.95242,-9.31051 8.89273,9.42988'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\nLifeCycleImage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    lifeCycleStatus: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(LifeCycleImage);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Paper from '@material-ui/core/Paper';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckIcon from '@material-ui/icons/Check';\nimport green from '@material-ui/core/colors/green';\nimport yellow from '@material-ui/core/colors/yellow';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst useStyles = makeStyles((theme) => ({\n    stateButton: {\n        marginRight: theme.spacing(),\n    },\n    paperCenter: {\n        padding: theme.spacing(2),\n        display: 'block',\n        alignItems: 'left',\n        justifyContent: 'center',\n    },\n    iconTrue: {\n        color: green[500],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconFalse: {\n        color: theme.palette.grey[500],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconWarn: {\n        color: yellow[700],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    grid: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'left',\n        alignItems: 'left',\n    },\n    labelsGrid: {\n        fontWeight: 600,\n        marginTop: theme.spacing(3),\n    },\n}));\n/**\n * This component renders the requirements list\n * @param {*} props\n */\nexport default function CheckboxLabels(props) {\n    const classes = useStyles();\n    const {\n        api, isMutualSSLEnabled, isCertAvailable, isAppLayerSecurityMandatory, isBusinessPlanAvailable,\n    } = props;\n    const isEndpointAvailable = api.endpointConfig !== null && !api.endpointConfig.implementation_status;\n    const isPrototypedAvailable = (api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped')\n        || api.endpointImplementationType === 'INLINE';\n\n    return (\n        <Paper className={classes.paperCenter}>\n            <Grid xs={12}>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.Configuration.requirements'\n                        defaultMessage='Requirements'\n                    />\n                </Typography>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.Configuration.requirements.state.transition'\n                        defaultMessage='Requirements for next state transition'\n                    />\n                </Typography>\n            </Grid>\n            {(api.lifeCycleStatus === 'CREATED' || api.lifeCycleStatus === 'PROTOTYPED') && (\n                <>\n                    <Grid xs={12} className={classes.labelsGrid}>\n                        <Typography variant='subtitle2'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.publisher'\n                                defaultMessage='Publish'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid xs={12}>\n                        {api.type !== 'WEBSUB' && (\n                            <Grid xs={12} className={classes.grid}>\n                                {isEndpointAvailable ? (\n                                    <CheckIcon className={classes.iconTrue} />\n                                ) : (\n                                    <CloseIcon className={classes.iconFalse} />\n                                )}\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Apis.Details.LifeCycle.CheckboxLabels.endpoints.provided'\n                                        defaultMessage='Endpoint provided'\n                                    />\n                                </Typography>\n                                <Link to={'/apis/' + api.id + '/endpoints'}>\n                                    <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                </Link>\n                            </Grid>\n                        )}\n                        <>\n                            {isAppLayerSecurityMandatory && (\n                                <Grid xs={12} className={classes.grid}>\n                                    {isBusinessPlanAvailable ? (\n                                        <CheckIcon className={classes.iconTrue} />\n                                    ) : (\n                                        <CloseIcon className={classes.iconFalse} />\n                                    )}\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.CheckboxLabels.business.plans.selected'\n                                            defaultMessage='Business Plan(s) selected'\n                                        />\n                                    </Typography>\n                                    <Link to={'/apis/' + api.id + '/subscriptions'}>\n                                        <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                    </Link>\n                                </Grid>\n                            )}\n                            {isMutualSSLEnabled && (\n                                <Grid xs={12} className={classes.grid}>\n                                    {isCertAvailable ? (\n                                        <CheckIcon className={classes.iconTrue} />\n                                    ) : (\n                                        <CloseIcon className={classes.iconFalse} />\n                                    )}\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.CheckboxLabels.cert.provided'\n                                            defaultMessage='Certificate provided'\n                                        />\n                                    </Typography>\n                                    <Link to={'/apis/' + api.id + '/runtime-configuration'}>\n                                        <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                    </Link>\n                                </Grid>\n                            ) }\n                        </>\n                    </Grid>\n                    { api.type !== 'GRAPHQL' && (\n                        <>\n                            <Grid xs={12} className={classes.labelsGrid}>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.prototype'\n                                        defaultMessage='Deploy as a Prototype'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid xs={12}>\n                                {api.type !== 'WEBSUB' && (\n                                    <Grid xs={12} className={classes.grid}>\n                                        {isPrototypedAvailable ? (\n                                            <CheckIcon className={classes.iconTrue} />\n                                        ) : (\n                                            <CloseIcon className={classes.iconFalse} />\n                                        )}\n                                        <Typography>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Configuration.Configuration.prototype.endpoints'\n                                                    + '.provided'}\n                                                defaultMessage='Prototype Endpoint provided'\n                                            />\n                                        </Typography>\n                                        <Link to={'/apis/' + api.id + '/endpoints'}>\n                                            <LaunchIcon\n                                                style={{ marginLeft: '2px' }}\n                                                color='primary'\n                                                fontSize='small'\n                                            />\n                                        </Link>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </>\n                    )}\n                </>\n            )}\n            {api.lifeCycleStatus === 'PUBLISHED' && (\n                <>\n                    <Grid xs={12} className={classes.labelsGrid}>\n                        <Typography variant='subtitle2'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.prototype'\n                                defaultMessage='Deploy as a Prototype'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid xs={12}>\n                        <Grid xs={12} className={classes.grid}>\n                            {isPrototypedAvailable ? (\n                                <CheckIcon className={classes.iconTrue} />\n                            ) : (\n                                <CloseIcon className={classes.iconFalse} />\n                            )}\n                            <Typography>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Configuration.prototype.endpoints.provided'\n                                    defaultMessage='Prototype Endpoint provided'\n                                />\n                            </Typography>\n                            <Link to={'/apis/' + api.id + '/endpoints'}>\n                                <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Paper>\n    );\n}\n\nCheckboxLabels.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport PropTypes from 'prop-types';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport {\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\n} from '@material-ui/core/';\nimport Slide from '@material-ui/core/Slide';\n\nconst lifecyclePending = (props) => {\n    const { currentState } = props;\n    const intl = useIntl();\n    const [isOpen, setOpen] = useState(false);\n    const [api, updateAPI] = useAPI();\n    const deleteTask = () => {\n        const { id } = api;\n        api.cleanupPendingTask(id)\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.success',\n                    defaultMessage: 'Lifecycle task deleted successfully',\n                }));\n                updateAPI();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.error',\n                    defaultMessage: 'Error while deleting task',\n                }));\n            });\n    };\n    return (\n        <Paper>\n            <Box display='block' p={2} mt={2}>\n                <Box display='block'>\n                    <Typography variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.pending'\n                            defaultMessage='Pending lifecycle state change.'\n                        />\n                    </Typography>\n                </Box>\n                <Box display='block' mt={0.5}>\n                    <Typography variant='subtitle2'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.current.state'\n                            defaultMessage='Current state is'\n                        />\n                        {' '}\n                        {currentState}\n                    </Typography>\n                </Box>\n                <Box display='flex' mt={2}>\n                    <Button\n                        size='small'\n                        variant='contained'\n                        color='primary'\n                        onClick={() => setOpen(true)}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.delete.task'\n                            defaultMessage='Delete Task'\n                        />\n                    </Button>\n\n                </Box>\n            </Box>\n            <Dialog open={isOpen} transition={Slide}>\n                <DialogTitle>\n                    <FormattedMessage\n                        id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.title'\n                        defaultMessage='Delete Task'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.text.description'\n                            defaultMessage='The life cycle task will be removed'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button dense onClick={() => setOpen(false)}>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='text'\n                        color='primary'\n                        onClick={deleteTask}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog,delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Paper>\n    );\n};\nlifecyclePending.propTypes = {\n    currentState: PropTypes.string.isRequired,\n};\nexport default lifecyclePending;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Person from '@material-ui/icons/Person';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { FormattedMessage } from 'react-intl';\n\nconst styles = (theme) => ({\n    firstCol: {\n        width: 100,\n    },\n    personIcon: {\n        fontSize: theme.typography.fontSize,\n    },\n    avatar: {\n        width: 25,\n        height: 25,\n    },\n});\nconst LifeCycleHistory = (props) => {\n    const { classes } = props;\n    return (\n        <Paper>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell className={classes.firstCol}>\n                            <FormattedMessage id='Apis.Details.LifeCycle.LifeCycleHistory.user' defaultMessage='User' />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.LifeCycleHistory.action'\n                                defaultMessage='Action'\n                            />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage id='Apis.Details.LifeCycle.LifeCycleHistory.time' defaultMessage='Time' />\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.lcHistory.reverse().map((entry) => entry.previousState && (\n                        <TableRow key={entry.postState}>\n                            <TableCell component='th' scope='row'>\n                                <Avatar className={classes.avatar}>\n                                    <Person className={classes.personIcon} />\n                                </Avatar>\n                                <div>{entry.user}</div>\n                            </TableCell>\n                            <TableCell>\n                                <FormattedMessage\n                                    id='Apis.Details.LifeCycle.LifeCycleHistory.lifecycle.state.history'\n                                    defaultMessage='LC has changed from {previous} to {post}'\n                                    values={{ previous: entry.previousState, post: entry.postState }}\n                                />\n                            </TableCell>\n                            <TableCell>{moment(entry.updatedTime).fromNow()}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </Paper>\n    );\n};\nLifeCycleHistory.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    lcHistory: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\nexport default withStyles(styles)(LifeCycleHistory);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Listing from './Listing';\nimport View from './View';\nimport Edit from './Edit';\nimport EditContent from './EditContent';\nimport DocCreate from './Create';\n\nconst Documents = (props) => {\n    const { isAPIProduct } = useContext(APIContext);\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents'} component={Listing} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/details'} component={View} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/edit'} component={Edit} />\n                <Route\n                    exact\n                    path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/edit-content'}\n                    component={EditContent} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/create'} component={DocCreate} />\n                <Route component={ResourceNotFound} />\n            </Switch>\n        </div>\n    );\n};\n\nDocuments.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default Documents;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport MUIDataTable from 'mui-datatables';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Create from './Create';\nimport MarkdownEditor from './MarkdownEditor';\nimport Edit from './Edit';\nimport Delete from './Delete';\nimport DeleteMultiple from './DeleteMultiple';\nimport Download from './Download';\n\nconst TextEditor = lazy(() => import('./TextEditor' /* webpackChunkName: \"ListingTextEditor\" */));\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(2),\n    },\n    mainTitle: {\n        paddingRight: 10,\n    },\n    actionTable: {\n        '& td': {\n            width: 50,\n        },\n        '& td:first-child': {\n            width: 130,\n        },\n    },\n    messageBox: {\n        marginTop: 20,\n    },\n    actions: {\n        padding: '20px 0',\n        '& button': {\n            marginLeft: 0,\n        },\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n});\nfunction LinkGenerator(props) {\n    return props.apiType === 'APIProduct' ? (\n        <Link to={'/api-products/' + props.apiId + '/documents/' + props.docId + '/details'}>{props.docName}</Link>\n    ) : (\n        <Link to={'/apis/' + props.apiId + '/documents/' + props.docId + '/details'}>{props.docName}</Link>\n    );\n}\nclass Listing extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            docs: null,\n            showAddDocs: false,\n            docsToDelete: null,\n        };\n        this.apiId = props.api.id;\n        this.toggleAddDocs = this.toggleAddDocs.bind(this);\n        this.getDocumentsList = this.getDocumentsList.bind(this);\n    }\n    /**\n     * @inheritDoc\n     * @memberof Listing\n     */\n    componentDidMount() {\n        this.getDocumentsList();\n    }\n\n    /*\n     Get the document list attached to current API and set it to the state\n     */\n    getDocumentsList() {\n        const { api, intl } = this.props;\n        const  getSortOrder = (prop) => {    \n            return function(a, b) {    \n                if (a[prop] > b[prop]) {    \n                    return 1;    \n                } else if (a[prop] < b[prop]) {    \n                    return -1;    \n                }    \n                return 0;    \n            }    \n        }  \n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct();\n            const docs = apiProduct.getDocuments(api.id);\n            docs.then((response) => {\n                const documentList = response.body.list.filter((item) => item.otherTypeName !== '_overview');\n                documentList.sort(getSortOrder('name'));\n                this.setState({ docs: documentList });\n            }).catch((errorResponse) => {\n                const errorData = JSON.parse(errorResponse.message);\n                const messageTxt =\n                    'Error[' + errorData.code + ']: ' + errorData.description + ' | ' + errorData.message + '.';\n                console.error(messageTxt);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Documents.Listing.documents.listing.fetching.error.message.api.product',\n                    defaultMessage: 'Error in fetching documents list of the API Product',\n                }));\n            });\n        } else {\n            const newApi = new API();\n            const docs = newApi.getDocuments(this.props.api.id);\n            docs.then((response) => {\n                const documentList = response.body.list.filter((item) => item.otherTypeName !== '_overview');\n                documentList.sort(getSortOrder('name'));\n                this.setState({ docs: documentList });\n            }).catch((errorResponse) => {\n                const errorData = JSON.parse(errorResponse.message);\n                const messageTxt =\n                    'Error[' + errorData.code + ']: ' + errorData.description + ' | ' + errorData.message + '.';\n                console.error(messageTxt);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Documents.Listing.documents.listing.fetching.error.message',\n                    defaultMessage: 'Error in fetching documents list of the API',\n                }));\n            });\n        }\n    }\n    toggleAddDocs() {\n        this.setState((oldState) => {\n            return { showAddDocs: !oldState.showAddDocs };\n        });\n    }\n    render() {\n        const { classes, api, isAPIProduct } = this.props;\n        const { docs, showAddDocs, docsToDelete } = this.state;\n        const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/documents/create`;\n        const showActionsColumn = isRestricted(['apim:api_publish', 'apim:api_create'], api) ? 'excluded' : true;\n        const options = {\n            title: false,\n            filter: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n            search: false,\n            onRowsDelete: (rowData, rowMeta, that = this) => {\n                that.setState({ docsToDelete: rowData });\n                return false;\n            },\n        };\n        const columns = [\n            {\n                name: 'documentId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'name',\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const docName = tableMeta.rowData[1];\n                            const docId = tableMeta.rowData[0];\n                            return (\n                                <LinkGenerator\n                                    docName={docName}\n                                    docId={docId}\n                                    apiId={this.apiId}\n                                    apiType={api.apiType}\n                                />\n                            );\n                        }\n                        return null;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Listing.column.header.name'\n                            defaultMessage='name'\n                        />\n                    ),\n                },\n            },\n            {\n                name: 'sourceType',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Listing.column.header.source.type'\n                        defaultMessage='sourceType'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'type',\n                label: (\n                    <FormattedMessage id='Apis.Details.Documents.Listing.column.header.type' defaultMessage='type' />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'sourceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'action',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Listing.column.header.action'\n                        defaultMessage='action'\n                    />\n                ),\n                options: {\n                    display: showActionsColumn,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const docName = tableMeta.rowData[1];\n                            const docId = tableMeta.rowData[0];\n                            const sourceType = tableMeta.rowData[2];\n                            const sourceUrl = tableMeta.rowData[4];\n                            if (sourceType === 'MARKDOWN') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <MarkdownEditor docName={docName} docId={docId} apiId={this.apiId} />\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'INLINE') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <Suspense\n                                                    fallback={\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Documents.Listing.loading'\n                                                            defaultMessage='Loading...'\n                                                        />\n                                                    }\n                                                >\n                                                    <TextEditor\n                                                        docName={docName}\n                                                        docId={docId}\n                                                        apiId={this.apiId}\n                                                        apiType={api.apiType}\n                                                    />\n                                                </Suspense>\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'URL') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <a href={sourceUrl}>\n                                                <Button>\n                                                    <Icon>open_in_new</Icon>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Documents.Listing.documents.open'\n                                                        defaultMessage='Open'\n                                                    />\n                                                </Button>\n                                               </a>  \n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'FILE') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <Download docId={docId} apiId={this.apiId} />\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else {\n                                return <span />;\n                            }\n                        }\n                        return null;\n                    },\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n        if(!docs){\n            return (<Progress />);\n        }\n        return (\n            <React.Fragment>\n                {docsToDelete && (\n                    <DeleteMultiple getDocumentsList={this.getDocumentsList} docsToDelete={docsToDelete} docs={docs} />\n                )}\n                <div className={classes.titleWrapper}>\n                    <Typography id='itest-api-details-documents-head' variant='h4' className={classes.mainTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Listing.documents.listing.title'\n                            defaultMessage='Documents'\n                        />\n                    </Typography>\n                    {docs && docs.length > 0 && (\n                        <Link to={!isRestricted(['apim:api_create', 'apim:api_publish'], api) && !api.isRevision && url}>\n                            <Button\n                                size='small'\n                                data-testid='add-document-btn'\n                                className={classes.button}\n                                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                            >\n                                <AddCircle className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.Listing.add.new.document.button'\n                                    defaultMessage='Add New Document'\n                                />\n                            </Button>\n                        </Link>\n                    )}\n                </div>\n                <div>\n                    {showAddDocs && (\n                        <Create\n                            toggleAddDocs={this.toggleAddDocs}\n                            getDocumentsList={this.getDocumentsList}\n                            apiType={api.apiType}\n                        />\n                    )}\n\n                    {docs && docs.length > 0 ? (\n                        <MUIDataTable title='' data={docs} columns={columns} options={options} />\n                    ) : (\n                        <InlineMessage type='info' height={140}>\n                            <div className={classes.contentWrapper}>\n                                <Typography variant='h5' component='h3' className={classes.head}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.add.new.msg.title'\n                                        defaultMessage='Create Documents'\n                                    />\n                                </Typography>\n                                {api.apiType === API.CONSTS.APIProduct\n                                    ? \n                                <Typography component='p' className={classes.content}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.APIProduct.add.new.msg.content'\n                                        defaultMessage={\n                                            'You can add different types of documents to an API.' +\n                                            ' Proper documentation helps API publishers to market their ' +\n                                            ' APIs better and sustain competition. '\n                                        }\n                                    />\n                                </Typography>\n                                    : \n                                <Typography component='p' className={classes.content}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.add.new.msg.content'\n                                        defaultMessage={\n                                            'You can add different types of documents to an API.' +\n                                            ' Proper documentation helps API publishers to market their ' +\n                                            ' APIs better and sustain competition. '\n                                        }\n                                    />\n                                </Typography>\n                                }\n                                <div className={classes.actions}>\n                                    <Link to={!isRestricted(['apim:api_create', 'apim:api_publish'], api) && !api.isRevision && url}>\n                                        <Button\n                                            id='add-new-document-btn'\n                                            data-testid='add-document-btn'\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.button}\n                                            disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.Documents.Listing.add.new.msg.button'\n                                                defaultMessage='Add New Document'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </div>\n                        </InlineMessage>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nListing.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(Listing)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { FormattedMessage } from 'react-intl';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nfunction GoToEdit(props) {\n    const { doc } = props;\n    const [open, setOpen] = React.useState(true);\n    const { api, isAPIProduct } = useContext(APIContext);\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    let docContentEditPath = null;\n    if (doc && doc.body && doc.body.documentId) {\n        docContentEditPath = `/${urlPrefix}/${api.id}/documents/${doc.body.documentId}/edit-content`;\n    }\n\n    let displayAddContent;\n    if (doc.body.sourceType === 'INLINE'  || doc.body.sourceType === 'MARKDOWN') {\n        displayAddContent = true;\n    } else {\n        displayAddContent= false;\n    }\n\n    console.info('printing doc', doc);\n    function handleClose() {\n        setOpen(false);\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>\n                {' '}\n                <FormattedMessage\n                    id='Apis.Details.Documents.GoToEdit.title'\n                    defaultMessage='Document Created Successfully'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    {displayAddContent ? (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.GoToEdit.description.content'\n                        defaultMessage= 'You can add content to the document or go back to the document listing page.'\n                    />\n                    ) : (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.GoToEdit.description.file'\n                        defaultMessage= {'You can go back to the document listing page and upload' + \n                        ' the file by editing the document.'}\n                    />\n                    )}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                {displayAddContent && (<Link\n                    to={{\n                        pathname: docContentEditPath,\n                        state: { doc: doc.body },\n                    }}\n                >\n                    <Button color='primary'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.GoToEdit.add.content'\n                            defaultMessage='Add Content'\n                        />\n                    </Button>\n                </Link>)}\n                <Link to={listingPath}>\n                    <Button color='primary' autoFocus id='add-content-back-to-listing-btn'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.GoToEdit.back.to.listing'\n                            defaultMessage='Back to Listing'\n                        />\n                    </Button>\n                </Link>\n            </DialogActions>\n        </Dialog>\n    );\n}\nGoToEdit.propTypes = {\n    doc: PropTypes.shape({}).isRequired,\n};\nexport default GoToEdit;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nfunction Delete(props) {\n    const { intl } = props;\n    const [open, setOpen] = useState(false);\n    const { api } = useContext(APIContext);\n\n    const runAction = (action) => {\n        if (action === 'yes') {\n            deleteDoc();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteDoc = () => {\n        const {\n            apiId, docId, getDocumentsList, apiType,\n        } = props;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.deleteDocument(apiId, docId);\n        docPromise\n            .then(() => {\n                Alert.info(`${intl.formatMessage({\n                    id: 'Apis.Details.Documents.Delete.document.delete.successfully',\n                    defaultMessage: 'deleted successfully.',\n                })}`);\n                setOpen(!open);\n                getDocumentsList();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const { apiName } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}>\n                <Icon>delete_forever</Icon>\n                <FormattedMessage id='Apis.Details.Documents.Delete.document.delete' defaultMessage='Delete' />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={toggleOpen}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.confirm.title'\n                        defaultMessage='Delete Document'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete.confirm.body'\n                            defaultMessage={\n                                'Selected document will be deleted from the API.' +\n                                'You will not be able to undo this action.'\n                            }\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => runAction('no')} color='default'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={() => runAction('yes')} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete'\n                            defaultMessage='Yes. Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\nDelete.propTypes = {\n    apiId: PropTypes.shape({}).isRequired,\n    apiType: PropTypes.string.isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    getDocumentsList: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(Delete);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\n\nfunction DeleteMultiple(props) {\n    const {\n        intl, docsToDelete, docs, getDocumentsList,\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n    const restApi = isAPIProduct ? new APIProduct() : new API();\n\n    const [open, setOpen] = useState(true);\n\n    const runAction = (action) => {\n        if (action === 'yes') {\n            deleteDocs();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteDocs = () => {\n        const docPromises = [];\n\n        docsToDelete.data.map((docIndexObj) => {\n            const doc = docs[docIndexObj.index];\n            docPromises.push(restApi.deleteDocument(api.id, doc.documentId));\n        });\n        Promise.all(docPromises)\n            .then((values) => {\n                console.log(values);\n                Alert.info(`${intl.formatMessage({\n                    id: 'Apis.Details.Documents.Delete.document.delete.successfully',\n                    defaultMessage: 'deleted successfully.',\n                })}`);\n                setOpen(!open);\n                getDocumentsList();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(`${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Delete.document.delete.error',\n                        defaultMessage: 'Error while deleting documents!',\n                    })}`);\n                }\n            });\n    };\n    useEffect(() => {\n        setOpen(true);\n    }, [docsToDelete]);\n\n    return (\n        <Dialog\n            open={open}\n            onClose={toggleOpen}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Delete.selected.document.listing.delete.confirm.title'\n                    defaultMessage='Delete Selected Documents'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    <strong>{api.name}</strong>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.selected.document.listing.delete.confirm.body'\n                        defaultMessage={\n                            'Selected documents will be deleted from the API.' +\n                            ' You will not be able to undo this action.'\n                        }\n                    />\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => runAction('no')} color='default'>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button onClick={() => runAction('yes')} color='primary' autoFocus>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.yes'\n                        defaultMessage='Delete'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\nDeleteMultiple.propTypes = {\n    docs: PropTypes.instanceOf(Array).isRequired,\n    getDocumentsList: PropTypes.func.isRequired,\n    docsToDelete: PropTypes.instanceOf(Array).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(DeleteMultiple);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {useState, useEffect} from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport Utils from 'AppData/Utils';\n\nfunction Download(props) {\n    const { intl } = props;\n\n    const { docId, apiId } = props;\n    const [isFileAvailable, setIsFileAvailable] = useState(false);\n    const [isSuccessful, setIsSuccessful] = useState(false);\n\n    useEffect(() => {\n        const api = new Api();\n        const promised_get_content = api.getFileForDocument(apiId, docId);\n        promised_get_content\n            .then((done) => {\n                setIsSuccessful(true);\n                setIsFileAvailable(true);\n            })\n            .catch((error) => {\n                setIsSuccessful(true);\n                setIsFileAvailable(false);\n            });\n    }, []);\n    const handleDownload = () => {\n        const api = new Api();\n        const promised_get_content = api.getFileForDocument(apiId, docId);\n        promised_get_content\n            .then((response) => {\n                Utils.forceDownload(response);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id:'Apis.Details.Documents.Download.documents.markdown.editor.download.error',\n                        defaultMessage: 'Error downloading the file',\n                    }));\n                }\n            });\n    };\n\n    return (\n        isSuccessful &&\n        <Button onClick={handleDownload} disabled={!isFileAvailable}>\n            <Icon>arrow_downward</Icon>\n            <FormattedMessage\n                id='Apis.Details.Documents.Download.documents.listing.download'\n                defaultMessage='Download'\n            />\n        </Button>\n    );\n}\nDownload.propTypes = {\n    apiId: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(Download);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext, Suspense, lazy } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport ReactSafeHtml from 'react-safe-html';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TableRow from '@material-ui/core/TableRow';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Utils from 'AppData/Utils';\n\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"ViewReactMD\" */));\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n    },\n    docTitle: {\n        fontWeight: 100,\n        fontSize: 50,\n        color: theme.palette.grey[500],\n    },\n    docBadge: {\n        padding: theme.spacing(1),\n        background: theme.palette.primary.main,\n        position: 'absolute',\n        top: 0,\n        marginTop: -22,\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    button: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    displayURL: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: theme.palette.getContrastText(theme.palette.grey[200]),\n        display: 'flex',\n    },\n    displayURLLink: {\n        paddingLeft: theme.spacing(2),\n    },\n    paper: {\n        marginTop: 20,\n        padding: theme.spacing(2),\n        height: '100%',\n    },\n    leftCell: {\n        width: 150,\n    },\n    summaryView: {\n        'word-break': 'break-word',\n    },\n});\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction View(props) {\n    const {\n        classes,\n        fullScreen,\n        intl,\n        match: {\n            params: { documentId },\n        },\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n\n    const [code, setCode] = useState('');\n    const [doc, setDoc] = useState(null);\n    const restAPI = isAPIProduct ? new APIProduct() : new API();\n\n    useEffect(() => {\n        const docPromise = restAPI.getDocument(api.id, documentId);\n        docPromise\n            .then(doc => {\n                const { body } = doc;\n                setDoc(body);\n                if (body.sourceType === 'MARKDOWN' || body.sourceType === 'INLINE') loadContentForDoc();\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }, [documentId]);\n\n    const loadContentForDoc = () => {\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, documentId);\n        docPromise\n            .then(doc => {\n                setCode(doc.text);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    };\n\n    const handleDownload = () => {\n        const promised_get_content = restAPI.getFileForDocument(api.id, documentId);\n        promised_get_content\n            .then(response => {\n                Utils.forceDownload(response);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(\n                        intl.formatMessage({\n                            id: 'Apis.Details.Documents.View.error.downloading',\n                            defaultMessage: 'Error downloading the file',\n                        }),\n                    );\n                }\n            });\n    };\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    return (\n        doc && (\n            <React.Fragment>\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Link to={listingPath} className={classes.titleLink}>\n                            <Typography variant=\"h5\" align=\"left\" className={classes.mainTitle}>\n                                <FormattedMessage id=\"Apis.Details.Documents.View.heading\" defaultMessage=\"Documents\" />\n                            </Typography>\n                        </Link>\n                        <Icon>keyboard_arrow_right</Icon>\n                        <Typography variant=\"h5\">{doc.name}</Typography>\n                    </div>\n                    <Paper className={classes.paper}>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell className={classes.leftCell}>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.name\"\n                                                defaultMessage=\"Name\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">{doc.name}</Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.summary\"\n                                                defaultMessage=\"Summary\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell className={classes.summaryView}>\n                                        <Typography variant=\"body1\">{doc.summary}</Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.catogery\"\n                                                defaultMessage=\"Categorized as\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            {doc.type === 'OTHER' ? doc.otherTypeName : doc.type}\n                                        </Typography>{' '}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.source\"\n                                                defaultMessage=\"Source Type\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">{doc.sourceType}</Typography>{' '}\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Paper>\n\n                    <Paper className={classes.paper}>\n                        {doc.sourceType === 'MARKDOWN' && (\n                            <Suspense fallback={<CircularProgress />}>\n                                <ReactMarkdown escapeHtml source={code} />\n                            </Suspense>\n                        )}\n                        {doc.sourceType === 'INLINE' && <ReactSafeHtml html={code} />}\n                        {doc.sourceType === 'URL' && (\n                            <a className={classes.displayURL} href={doc.sourceUrl} target=\"_blank\">\n                                {doc.sourceUrl}\n                                <Icon className={classes.displayURLLink}>open_in_new</Icon>\n                            </a>\n                        )}\n                        {doc.sourceType === 'FILE' && (\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                className={classes.button}\n                                onClick={handleDownload}\n                            >\n                                <FormattedMessage\n                                    id=\"Apis.Details.Documents.View.btn.download\"\n                                    defaultMessage=\"Download\"\n                                />\n\n                                <Icon>arrow_downward</Icon>\n                            </Button>\n                        )}\n                    </Paper>\n                </div>\n            </React.Fragment>\n        )\n    );\n}\n\nView.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    doc: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    fullScreen: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(View));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState, Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport isEmpty from 'lodash.isempty';\nimport MarkdownEditor from './MarkdownEditor';\nimport { FormattedMessage } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\n\nconst TextEditor = lazy(() => import('./TextEditor' /* webpackChunkName: \"EditContentTextEditor\" */));\n\nfunction EditContent(props) {\n    const [doc, setDoc] = useState(null);\n    const {\n        history: {\n            location: { state, pathname },\n            replace,\n        },\n    } = props;\n    useEffect(() => {\n        // Check if we want to show the add content screen in the case of coming from GoToEdit.jsx with history -> state props\n\n        if (!isEmpty(state)) {\n            const { doc } = state;\n            if (doc) {\n                setDoc(doc);\n            }\n        }\n    }, []);\n    return (\n        <React.Fragment>\n            {doc && doc.sourceType === 'MARKDOWN' && (\n                <MarkdownEditor docName={doc.name} docId={doc.documentId} showAtOnce />\n            )}\n            {doc && doc.sourceType === 'INLINE' && (\n                <Suspense\n                    fallback={<Progress />}\n                >\n                    <TextEditor docName={doc.name} docId={doc.documentId} showAtOnce />\n                </Suspense>\n            )}\n        </React.Fragment>\n    );\n}\nexport default withRouter(EditContent);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport APIRateLimiting from '../Resources/components/APIRateLimiting';\nimport Operation from './Operation';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 400,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    scopes: {\n        width: 400,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    buttonMain: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        marginRight: theme.spacing(1),\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: 300,\n    },\n    addResource: {\n        width: 600,\n        marginTop: 0,\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n});\n\n/**\n * This class defined for operation List\n */\nclass Operations extends React.Component {\n    /**\n     *\n     * @param {*} props the props parameters\n     */\n    constructor(props) {\n        super(props);\n        const { api } = props;\n        const { operations } = api;\n        const operationCopy = [...operations];\n        operationCopy.sort((a, b) => ((a.target + a.verb > b.target + b.verb) ? 1 : -1));\n        this.state = {\n            notFound: false,\n            apiPolicies: [],\n            operations: operationCopy,\n            apiThrottlingPolicy: api.apiThrottlingPolicy,\n            filterKeyWord: '',\n            isSaving: false,\n            sharedScopes: [],\n            apiScopesByName: {},\n            sharedScopesByName: {},\n        };\n\n        this.newApi = new Api();\n        this.handleUpdateList = this.handleUpdateList.bind(this);\n        this.handleApiThrottlePolicy = this.handleApiThrottlePolicy.bind(this);\n        this.updateOperations = this.updateOperations.bind(this);\n    }\n\n    /**\n     *\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        const apiScopesByNameList = {};\n        const promisedResPolicies = Api.policies('api');\n        promisedResPolicies\n            .then((policies) => {\n                this.setState({ apiPolicies: policies.obj.list });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error.status;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n\n        for (const scopeObject of api.scopes) {\n            const modifiedScope = {};\n            modifiedScope.scope = scopeObject.scope;\n            modifiedScope.shared = scopeObject.shared;\n            apiScopesByNameList[scopeObject.scope.name] = modifiedScope;\n        }\n        this.setState({ apiScopesByName: apiScopesByNameList });\n        this.getAllSharedScopes();\n    }\n\n    /**\n     *\n     * @param {*} event\n     */\n    setFilterByKeyWord(event) {\n        this.setState({ filterKeyWord: event.target.value.toLowerCase() });\n    }\n\n    /**\n     * @memberof Operations\n     */\n    getAllSharedScopes() {\n        Api.getAllScopes()\n            .then((response) => {\n                if (response.body && response.body.list) {\n                    const sharedScopesList = [];\n                    const sharedScopesByNameList = {};\n                    const shared = true;\n                    for (const scope of response.body.list) {\n                        const modifiedScope = {};\n                        modifiedScope.scope = scope;\n                        modifiedScope.shared = shared;\n                        sharedScopesList.push(modifiedScope);\n                        sharedScopesByNameList[scope.name] = modifiedScope;\n                    }\n                    this.setState({ sharedScopesByName: sharedScopesByNameList });\n                    this.setState({ sharedScopes: sharedScopesList });\n                }\n            });\n    }\n\n    /**\n     *\n     *\n     * @param {*} throttlePolicy\n     * @memberof Operations\n     */\n    handleApiThrottlePolicy(apiThrottlingPolicy) {\n        this.setState({ apiThrottlingPolicy });\n    }\n\n    /**\n     *\n     * @param {*} newOperation\n     */\n    handleUpdateList(newOperation) {\n        const { operations, sharedScopesByName, apiScopesByName } = this.state;\n        const updatedList = operations.map(\n            (operation) => ((operation.target === newOperation.target && operation.verb === newOperation.verb)\n                ? newOperation : operation),\n        );\n\n        for (const selectedScope of newOperation.scopes) {\n            if (selectedScope\n                && !apiScopesByName[selectedScope]\n                && apiScopesByName[selectedScope] !== '') {\n                if (selectedScope in sharedScopesByName) {\n                    apiScopesByName[selectedScope] = sharedScopesByName[selectedScope];\n                }\n            }\n        }\n        this.setState({ apiScopesByName });\n        this.setState({ operations: updatedList });\n    }\n\n    /**\n     *\n     */\n    updateOperations() {\n        const { operations, apiThrottlingPolicy, apiScopesByName } = this.state;\n        const { updateAPI } = this.props;\n        this.setState({ isSaving: true });\n        this.updateApiScopes(operations);\n        const scopes = Object.keys(apiScopesByName).map((key) => { return apiScopesByName[key]; });\n        updateAPI({ operations, apiThrottlingPolicy, scopes }).finally(() => this.setState({ isSaving: false }));\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    updateApiScopes(apiOperations) {\n        const { apiScopesByName, sharedScopesByName } = this.state;\n        Object.keys(apiScopesByName).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const operation of apiOperations) {\n                // Checking if the scope resides in the operation\n                if (operation.scopes.includes(key)) {\n                    isScopeExistsInOperation = true;\n                    break;\n                }\n            }\n            // Checking if the scope exists in operation and is a shared scope\n            if (!isScopeExistsInOperation && (key in sharedScopesByName)) {\n                delete apiScopesByName[key];\n            }\n        });\n        this.setState({ apiScopesByName });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { api, resourceNotFoundMessage } = this.props;\n        const {\n            operations, apiPolicies, apiThrottlingPolicy, isSaving, filterKeyWord, notFound, sharedScopes,\n        } = this.state;\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFoundMessage} />;\n        }\n        if (!operations && apiPolicies.length === 0) {\n            return <Progress />;\n        }\n        const { classes } = this.props;\n        return (\n            <>\n                <Box pb={3}>\n                    <Typography variant='h5'>\n                        <FormattedMessage\n                            id='Apis.Details.Operations.Operations.title'\n                            defaultMessage='Operations'\n                        />\n                    </Typography>\n                </Box>\n\n                <Grid container spacing={2}>\n                    <Grid item md={12}>\n                        <APIRateLimiting\n                            operationRateLimits={apiPolicies}\n                            api={api}\n                            value={apiThrottlingPolicy}\n                            onChange={this.handleApiThrottlePolicy}\n                        />\n                    </Grid>\n                    <Grid item md={2}>\n                        <Box mt={4} pb={2}>\n                            <div className={classes.searchWrapper}>\n                                <TextField\n                                    id='outlined-full-width'\n                                    label='Operation'\n                                    placeholder='Filter Operations'\n                                    onChange={(e) => this.setFilterByKeyWord(e, api.operations)}\n                                    fullWidth\n                                    variant='outlined'\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </div>\n                        </Box>\n                    </Grid>\n                    <Grid item md={12}>\n                        <Table>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.operation.operationName'\n                                            defaultMessage='Operation'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.OperationType'\n                                            defaultMessage='Operation Type'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.throttling.policy'\n                                            defaultMessage='Rate Limiting'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.scopes'\n                                            defaultMessage='Scope'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.authType'\n                                            defaultMessage='Security Enabled'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                            {operations.filter(\n                                (operation) => operation.target.toLowerCase().includes(filterKeyWord),\n                            ).map((item) => {\n                                return (\n                                    <Operation\n                                        operation={item}\n                                        handleUpdateList={this.handleUpdateList}\n                                        scopes={api.scopes}\n                                        sharedScopes={sharedScopes}\n                                        isOperationRateLimiting={!apiThrottlingPolicy}\n                                        apiPolicies={apiPolicies}\n                                    />\n                                );\n                            })}\n                        </Table>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            disabled={isSaving || api.isRevision}\n                            className={classes.buttonMain}\n                            onClick={this.updateOperations}\n                            data-testid='custom-select-save-button'\n                        >\n                            {isSaving && <CircularProgress size={20} />}\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.save'\n                                defaultMessage='Save'\n                            />\n                        </Button>\n                        <Link to={'/apis/' + api.id + '/overview'}>\n                            <Button>\n                                <FormattedMessage\n                                    id='Apis.Details.Operations.Operation.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                        </Link>\n                    </Grid>\n                </Grid>\n            </>\n        );\n    }\n}\n\nOperations.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        operations: PropTypes.arrayOf(PropTypes.shape({})),\n        scopes: PropTypes.arrayOf(PropTypes.string),\n        updateOperations: PropTypes.func,\n        policies: PropTypes.func,\n        id: PropTypes.string,\n    }).isRequired,\n    resourceNotFoundMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Operations));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Switch from '@material-ui/core/Switch';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        width: 400,\n    },\n    mainTitle: {\n        paddingLeft: 20,\n    },\n    scopes: {\n        width: 400,\n    },\n    dropDown: {\n        width: theme.spacing(11.25),\n    },\n    divider: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    chip: {\n        margin: theme.spacing(),\n        color: theme.palette.text.secondary,\n        minWidth: 100,\n    },\n    chipActive: {\n        margin: theme.spacing(),\n        color: theme.palette.text.secondary,\n        background: theme.palette.background.active,\n        minWidth: 100,\n        borderRadius: theme.shape.borderRadius,\n    },\n    paper: {\n        padding: 20,\n    },\n    link: {\n        cursor: 'pointer',\n    },\n    listItem: {\n        paddingLeft: 0,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    formControl: {\n        paddingRight: 0,\n        marginRight: 0,\n    },\n    resourceRoot: {\n        background: theme.palette.grey['100'],\n        paddingLeft: theme.spacing(),\n        paddingRight: theme.spacing(),\n        borderRadius: theme.shape.borderRadius,\n        marginBottom: theme.spacing(),\n    },\n    deleteButton: {\n        marginLeft: 'auto',\n    },\n    pathDisplay: {\n        marginRight: theme.spacing(2),\n        marginLeft: theme.spacing(2),\n    },\n    descriptionWrapper: {\n        paddingTop: theme.spacing(),\n        paddingBottom: theme.spacing(),\n    },\n    scopeSelect: {\n        width: '100%',\n    },\n    descriptionWrapperUp: {\n        paddingBottom: '0 !important',\n    },\n    addParamRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    propsForm: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    deleteLink: {\n        cursor: 'pointer',\n    },\n    row: {\n        '& td': {\n            borderBottom: 'none',\n            verticalAlign: 'bottom',\n            width: '33%',\n            paddingLeft: 0,\n        },\n    },\n});\n\n/**\n *\n */\nclass Operation extends React.Component {\n    /**\n     *\n     * @param {any} props @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSecurity: false,\n        };\n        this.handleScopeChange = this.handleScopeChange.bind(this);\n        this.handlePolicyChange = this.handlePolicyChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    /**\n     *\n     * @param {*} operationAction event triggered for handle  Scope Change\n     */\n    handleScopeChange(operationAction) {\n        const { operation } = this.props;\n        const { data } = operationAction;\n        const { value } = data || {};\n        const defValue = value[0];\n        const newoperation = {\n            ...operation,\n            scopes: [...operation.scopes],\n        };\n        newoperation.scopes = defValue;\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     *\n     * @param {*} e event triggered for handle  policy Change\n     */\n    handlePolicyChange(e) {\n        const { operation } = this.props;\n        const newoperation = { ...operation };\n        newoperation.throttlingPolicy = e.target.value;\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     * @param {*} event event triggered for handle  policy Change\n     */\n    handleChange(event) {\n        const { operation } = this.props;\n        const newoperation = { ...operation };\n        const { checked } = event.target;\n        if (checked) {\n            newoperation.authType = 'Any';\n        } else {\n            newoperation.authType = 'None';\n        }\n        this.setState({\n            isSecurity: checked,\n        });\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            operation, theme, classes, apiPolicies, scopes, isOperationRateLimiting, sharedScopes, intl,\n        } = this.props;\n        const dropdownScopes = [...scopes];\n        const { isSecurity } = this.state;\n        const filteredApiScopes = dropdownScopes.filter((sharedScope) => !sharedScope.shared);\n        let chipColor = theme.custom.operationChipColor\n            ? theme.custom.operationChipColor[operation.verb.toLowerCase()]\n            : null;\n        let chipTextColor = '#000000';\n        if (!chipColor) {\n            console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n            chipColor = '#cccccc';\n        } else {\n            chipTextColor = theme.palette.getContrastText(\n                theme.custom.operationChipColor[operation.verb.toLowerCase()],\n            );\n        }\n        return (\n            <TableRow style={{ borderStyle: 'hidden' }} data-testid={operation.target + '-tbl-row'}>\n                <TableCell>\n                    <Typography variant='body1'>\n                        {operation.target}\n                    </Typography>\n                </TableCell>\n                <TableCell>\n                    <Chip\n                        label={operation.verb}\n                        style={{\n                            backgroundColor: chipColor, color: chipTextColor, height: 20, width: 40, fontSize: 9,\n                        }}\n                        className={classes.chipActive}\n                    />\n                </TableCell>\n                <TableCell>\n                    <Select\n                        className={classes.dropDown}\n                        value={isOperationRateLimiting ? operation.throttlingPolicy : ''}\n                        disabled={!isOperationRateLimiting}\n                        onChange={this.handlePolicyChange}\n                        fieldName='Throttling Policy'\n                    >\n                        {apiPolicies.map((policy) => (\n                            <MenuItem\n                                key={policy.name}\n                                value={policy.name}\n                            >\n                                {policy.displayName}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </TableCell>\n                <TableCell>\n                    <TextField\n                        id='operation_scope'\n                        select\n                        SelectProps={{\n                            multiple: true,\n                            renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        }}\n                        fullWidth\n                        label={dropdownScopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                            id: 'Apis.Details.Operations.Operation.operation.scope.label.default',\n                            defaultMessage: 'Operation scope',\n                        }) : intl.formatMessage({\n                            id: 'Apis.Details.Operations.Operation.operation.scope.label.notAvailable',\n                            defaultMessage: 'No scope available',\n                        })}\n                        value={operation.scopes}\n                        onChange={({ target: { value } }) => this.handleScopeChange({\n                            data: { value: value ? [value] : [] },\n                        })}\n                        helperText={(\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.helperText'\n                                defaultMessage='Select a scope to control permissions to this operation'\n                            />\n                        )}\n                        margin='dense'\n                        variant='outlined'\n                    >\n                        <ListSubheader>\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.select.local'\n                                defaultMessage='API Scopes'\n                            />\n                        </ListSubheader>\n                        {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                            <MenuItem\n                                key={apiScope.scope.name}\n                                value={apiScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operation.scopes.includes(apiScope.scope.name)} color='primary' />\n                                {apiScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id='Apis.Details.Operations.Operation.operation.no.api.scope.available'\n                                        defaultMessage='No API scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                        <ListSubheader>\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.select.shared'\n                                defaultMessage='Shared Scopes'\n                            />\n                        </ListSubheader>\n                        {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                            <MenuItem\n                                key={sharedScope.scope.name}\n                                value={sharedScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operation.scopes.includes(sharedScope.scope.name)} color='primary' />\n                                {sharedScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id='Apis.Details.Operations.Operation.operation.no.sharedpi.scope.available'\n                                        defaultMessage='No shared scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                    </TextField>\n                </TableCell>\n                <TableCell>\n                    <Switch\n                        checked={(() => {\n                            if (operation.authType === 'None') {\n                                return false;\n                            }\n                            return true;\n                        })()}\n                        onChange={this.handleChange}\n                        value={isSecurity}\n                        color='primary'\n                        data-testid={operation.target + '-security-btn'}\n                    />\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nOperation.propTypes = {\n    classes: PropTypes.shape({\n    }).isRequired,\n    operation: PropTypes.shape({\n        target: PropTypes.string,\n        verb: PropTypes.string,\n        throttlingPolicy: PropTypes.string,\n        auth: PropTypes.string,\n    }).isRequired,\n    apiPolicies: PropTypes.shape({\n    }).isRequired,\n    isOperationRateLimiting: PropTypes.shape({\n    }).isRequired,\n    scopes: PropTypes.shape({\n    }).isRequired,\n    handleUpdateList: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Operation));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\n\nimport Resources from './Resources';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APIOperations() {\n    return (\n        <>\n            <Box mb={4}>\n                <Typography id='itest-api-details-resources-head' variant='h4' gutterBottom>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.APIOperations.title'\n                        defaultMessage='Resources'\n                    />\n                </Typography>\n            </Box>\n            <Resources />\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\n// spliced operation components\n\nimport { FormattedMessage } from 'react-intl';\nimport DescriptionAndSummary from './operationComponents/DescriptionAndSummary';\nimport OperationGovernance from './operationComponents/OperationGovernance';\nimport AWSLambdaSettings from './operationComponents/AWSLambdaSettings';\nimport Parameters from './operationComponents/Parameters';\nimport SOAPToRESTListing from './operationComponents/SOAPToREST/SOAPToRESTListing';\nimport { getOperationScopes } from '../operationUtils';\n\n/**\n *\n * Handle the operation UI\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nfunction Operation(props) {\n    const {\n        operation,\n        operationsDispatcher,\n        highlight,\n        operationRateLimits,\n        api,\n        disableDelete,\n        disableUpdate,\n        onMarkAsDelete,\n        markAsDelete,\n        hideParameters,\n        spec,\n        resourcePolicy,\n        resourcePoliciesDispatcher,\n        target,\n        verb,\n        arns,\n        resolvedSpec,\n        sharedScopes,\n        setFocusOperationLevel,\n    } = props;\n    const [isExpanded, setIsExpanded] = useState(false);\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb];\n        return {\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n            },\n            paperStyles: {\n                border: `1px solid ${backgroundColor}`,\n                borderBottom: '',\n            },\n            customDivider: {\n                backgroundColor,\n            },\n            linearProgress: {\n                height: '2px',\n            },\n            highlightSelected: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n            },\n            contentNoMargin: {\n                margin: theme.spacing(0),\n            },\n            overlayUnmarkDelete: {\n                position: 'absolute',\n                zIndex: theme.zIndex.operationDeleteUndo,\n                right: '10%',\n            },\n        };\n    });\n    const apiOperation = api.operations[target] && api.operations[target][verb.toUpperCase()];\n    const isUsedInAPIProduct = apiOperation && Array.isArray(\n        apiOperation.usedProductIds,\n    ) && apiOperation.usedProductIds.length;\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function toggleDelete(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        setIsExpanded(false);\n        onMarkAsDelete({ verb, target }, !markAsDelete);\n    }\n\n    /**\n     *\n     *\n     * @param {*} event\n     * @param {*} expanded\n     */\n    function handleExpansion(event, expanded) {\n        setIsExpanded(expanded);\n    }\n    const classes = useStyles();\n    return (\n        <>\n            {markAsDelete && (\n                <Box className={classes.overlayUnmarkDelete}>\n                    <Tooltip title='Marked for delete' aria-label='Marked for delete'>\n                        <Button onClick={toggleDelete} variant='outlined' style={{ marginTop: '10px' }}>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.undo.delete'\n                                defaultMessage='Undo Delete'\n                            />\n                        </Button>\n                    </Tooltip>\n                </Box>\n            )}\n            <ExpansionPanel\n                expanded={isExpanded}\n                onChange={handleExpansion}\n                disabled={markAsDelete}\n                className={classes.paperStyles}\n            >\n                <ExpansionPanelSummary\n                    className={highlight ? classes.highlightSelected : ''}\n                    disableRipple\n                    disableTouchRipple\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel2a-content'\n                    id={verb + target}\n                    classes={{ content: classes.contentNoMargin }}\n                >\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={4}>\n                            <Badge invisible={!operation['x-wso2-new']} color='error' variant='dot'>\n                                <Button\n                                    disableFocusRipple\n                                    variant='contained'\n                                    size='small'\n                                    className={classes.customButton}\n                                >\n                                    {verb}\n                                </Button>\n                            </Badge>\n                            <Typography display='inline' style={{ margin: '0px 30px' }} variant='h6' gutterBottom>\n                                {target}\n                                <Typography\n                                    display='inline'\n                                    style={{ margin: '0px 30px' }}\n                                    variant='caption'\n                                    gutterBottom\n                                >\n                                    {operation.summary}\n                                </Typography>\n                            </Typography>\n                        </Grid>\n                        {(isUsedInAPIProduct) ? (\n                            <Grid item md={3}>\n                                <Box display='flex' justifyContent='center'>\n                                    <ReportProblemOutlinedIcon fontSize='small' />\n                                    <Box display='flex' ml={1} mt={1 / 4} fontSize='caption.fontSize'>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.Operation.this.operation.'\n                                            + 'used.in.products'}\n                                            defaultMessage={'This operation is used in {isUsedInAPIProduct} API '\n                                            + 'product(s)'}\n                                            values={{ isUsedInAPIProduct }}\n                                        />\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        ) : (\n                            <Grid item md={3} />\n                        )}\n                        <Grid item md={4}>\n                            <Typography\n                                display='inline'\n                                style={{ margin: '0px 30px' }}\n                                variant='caption'\n                                gutterBottom\n                            >\n                                <b>{ getOperationScopes(operation, spec) != null && 'Scope : ' }</b>\n                                { getOperationScopes(operation, spec) != null\n                                    && getOperationScopes(operation, spec).join(', ') }\n                            </Typography>\n                        </Grid>\n                        {!(disableDelete || markAsDelete) && (\n                            <Grid item md={1} justify='flex-end' container>\n                                <Tooltip\n                                    title={\n                                        isUsedInAPIProduct\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.Operation.cannot.delete'\n                                                    + '.when.used.in.api.products'}\n                                                    defaultMessage='Cannot delete operation when used in an API product'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Resources.components.Operation.Delete'\n                                                    defaultMessage='Delete'\n                                                />\n                                            )\n                                    }\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.Operation.delete.operation'\n                                            defaultMessage='Delete operation'\n                                        />\n                                    )}\n                                >\n                                    <div>\n                                        <IconButton\n                                            disabled={Boolean(isUsedInAPIProduct) || disableUpdate}\n                                            onClick={toggleDelete}\n                                            aria-label='delete'\n                                        >\n                                            <DeleteIcon fontSize='small' />\n                                        </IconButton>\n                                    </div>\n                                </Tooltip>\n                            </Grid>\n                        )}\n                    </Grid>\n                </ExpansionPanelSummary>\n                <Divider light className={classes.customDivider} />\n                <ExpansionPanelDetails>\n                    <Grid spacing={2} container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <DescriptionAndSummary\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        <OperationGovernance\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            operationRateLimits={operationRateLimits}\n                            api={api}\n                            disableUpdate={disableUpdate}\n                            spec={spec}\n                            target={target}\n                            verb={verb}\n                            sharedScopes={sharedScopes}\n                            setFocusOperationLevel={setFocusOperationLevel}\n                        />\n                        {!hideParameters && (\n                            <Parameters\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                operationRateLimits={operationRateLimits}\n                                api={api}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                                resolvedSpec={resolvedSpec}\n                            />\n                        )}\n                        {resourcePolicy && (\n                            <SOAPToRESTListing\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                operationRateLimits={operationRateLimits}\n                                resourcePolicy={resourcePolicy}\n                                resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                            />\n                        )}\n                        {\n                            api.endpointConfig\n                            && api.endpointConfig.endpoint_type\n                            && api.endpointConfig.endpoint_type === 'awslambda'\n                            && (\n                                <AWSLambdaSettings\n                                    operation={operation}\n                                    operationsDispatcher={operationsDispatcher}\n                                    target={target}\n                                    verb={verb}\n                                    arns={arns}\n                                />\n                            )\n                        }\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\nOperation.defaultProps = {\n    highlight: false,\n    disableUpdate: false,\n    hideParameters: false,\n    disableDelete: false,\n    onMarkAsDelete: () => {},\n    markAsDelete: false,\n    operationRateLimits: [], // Response body.list from apis policies for `api` throttling policies type\n};\nOperation.propTypes = {\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})), resourcePolicies: PropTypes.shape({}) })\n        .isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    onMarkAsDelete: PropTypes.func,\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    markAsDelete: PropTypes.bool,\n    disableDelete: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    hideParameters: PropTypes.bool,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    operation: PropTypes.shape({\n        'x-wso2-new': PropTypes.bool,\n        summary: PropTypes.string,\n    }).isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    highlight: PropTypes.bool,\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})),\n    arns: PropTypes.shape([]).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default React.memo(Operation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n *\n * Renders the operation summary and description sections\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DescriptionAndSummary(props) {\n    const {\n        operation, operationsDispatcher, disableUpdate, target, verb,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Summary\n                    {' '}\n                    {'&'}\n                    {' '}\n                    Description\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <TextField\n                    margin='dense'\n                    fullWidth\n                    label='Description'\n                    multiline\n                    disabled={disableUpdate}\n                    rows='4'\n                    value={operation.description}\n                    variant='outlined'\n                    onChange={\n                        ({ target: { value } }) => operationsDispatcher(\n                            { action: 'description', data: { target, verb, value } },\n                        )\n                    }\n                />\n            </Grid>\n            <Grid item md={5}>\n                <TextField\n                    id='operation_summary'\n                    label='Summary'\n                    margin='dense'\n                    variant='outlined'\n                    fullWidth\n                    disabled={disableUpdate}\n                    multiline\n                    rows='4'\n                    value={operation.summary}\n                    onChange={({ target: { value } }) => operationsDispatcher(\n                        { action: 'summary', data: { target, verb, value } },\n                    )}\n                />\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nDescriptionAndSummary.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nDescriptionAndSummary.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Link } from 'react-router-dom';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { getOperationScopes } from '../../operationUtils';\n\n/**\n *\n * Renders the security , throttling policies and scopes selection section in the operation collapsed page\n * @export\n * @param {*} props\n * @returns\n */\nexport default function OperationGovernance(props) {\n    const {\n        operation, operationsDispatcher, operationRateLimits, api, disableUpdate, spec, target, verb, sharedScopes,\n        setFocusOperationLevel,\n    } = props;\n    const operationScopes = getOperationScopes(operation, spec);\n    const isOperationRateLimiting = api.apiThrottlingPolicy === null;\n    const filteredApiScopes = api.scopes.filter((sharedScope) => !sharedScope.shared);\n    const intl = useIntl();\n    const scrollToTop = () => {\n        setFocusOperationLevel(true);\n        document.querySelector('#react-root').scrollTop = 195;\n    };\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography gutterBottom variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.OperationGovernance.title'\n                        defaultMessage='Operation Governance'\n                    />\n                    <Typography style={{ marginLeft: '10px' }} gutterBottom variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.OperationGovernance.subTitle'\n                            defaultMessage='(Security, Rate Limiting & Scopes)'\n                        />\n                    </Typography>\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                <FormControl disabled={disableUpdate} component='fieldset'>\n                    <FormControlLabel\n                        control={(\n                            <Switch\n                                data-testid={'security-' + verb + '' + target}\n                                checked={operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none'}\n                                onChange={({ target: { checked } }) => operationsDispatcher({\n                                    action: 'authType',\n                                    data: { target, verb, value: checked },\n                                })}\n                                size='small'\n                                color='primary'\n                            />\n                        )}\n                        label='Security'\n                        labelPlacement='start'\n                    />\n                </FormControl>\n                <sup style={{ marginLeft: '10px' }}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.OperationGovernance.Security'\n                                + '.tooltip'}\n                                defaultMessage='This will enable/disable Application Level securities defined in the\n                                Runtime Configurations page.'\n                            />\n                        )}\n                        fontSize='small'\n                        aria-label='Operation security'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </sup>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <Box display='flex' flexDirection='row' alignItems='flex-start'>\n                    <TextField\n                        select\n                        fullWidth={!isOperationRateLimiting}\n                        SelectProps={{\n                            autoWidth: true,\n                            IconComponent: isOperationRateLimiting ? ArrowDropDownIcon : 'span',\n                        }}\n                        disabled={disableUpdate || !isOperationRateLimiting}\n                        label={\n                            isOperationRateLimiting\n                                ? intl.formatMessage({\n                                    id: 'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.rate.limiting.policy',\n                                    defaultMessage: 'Rate limiting policy',\n                                })\n                                : (\n                                    <div>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.governed.by'}\n                                            defaultMessage='Rate limiting is governed by '\n                                        />\n                                        <Box\n                                            fontWeight='fontWeightBold'\n                                            display='inline'\n                                            color='primary.main'\n                                            cursor='pointer'\n                                        >\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.API.level'}\n                                                defaultMessage='API Level'\n                                            />\n                                        </Box>\n                                    </div>\n                                )\n                        }\n                        value={\n                            isOperationRateLimiting\n                            && operation['x-throttling-tier']\n                                ? operation['x-throttling-tier']\n                                : ''\n                        }\n                        onChange={({ target: { value } }) => operationsDispatcher({\n                            action: 'throttlingPolicy',\n                            data: { target, verb, value },\n                        })}\n                        helperText={\n                            isOperationRateLimiting\n                                ? intl.formatMessage({\n                                    id: 'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.rate.limiting.policy.select',\n                                    defaultMessage: 'Select a rate limit policy for this operation',\n                                })\n                                : (\n                                    <span>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section1'}\n                                            defaultMessage='Use '\n                                        />\n                                        <Box fontWeight='fontWeightBold' display='inline' color='primary.main'>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section2'}\n                                                defaultMessage='Operation Level'\n                                            />\n                                        </Box>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section3'}\n                                            defaultMessage=' rate limiting to '\n                                        />\n                                        <b>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section4'}\n                                                defaultMessage='enable'\n                                            />\n                                        </b>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section5'}\n                                            defaultMessage=' rate limiting per operation'\n                                        />\n                                    </span>\n                                )\n                        }\n                        margin='dense'\n                        variant='outlined'\n                        id={verb + target + '-operation_throttling_policy'}\n                    >\n                        {operationRateLimits.map((rateLimit) => (\n                            <MenuItem\n                                key={rateLimit.name}\n                                value={rateLimit.name}\n                                id={verb + target + '-operation_throttling_policy-' + rateLimit.name}\n                            >\n                                {rateLimit.displayName}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    {!isOperationRateLimiting && (\n                        <Button onClick={scrollToTop}>\n                            <FormattedMessage\n                                id={\n                                    'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.rate.limiting.button.text'\n                                }\n                                defaultMessage='Change rate limiting level'\n                            />\n                            <ExpandLessIcon />\n                        </Button>\n                    )}\n                </Box>\n            </Grid>\n            <Grid item md={6} />\n            <Grid item md={1} />\n            <Grid item md={5}>\n                { operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? (\n                    <TextField\n                        select\n                        SelectProps={{\n                            multiple: true,\n                            renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        }}\n                        disabled={disableUpdate}\n                        fullWidth\n                        label={api.scopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                            id: 'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.operation.scope.label.default',\n                            defaultMessage: 'Operation scope',\n                        }) : intl.formatMessage({\n                            id: 'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.operation.scope.label.notAvailable',\n                            defaultMessage: 'No scope available',\n                        })}\n                        value={operationScopes}\n                        onChange={({ target: { value } }) => operationsDispatcher({\n                            action: 'scopes',\n                            data: { target, verb, value: value ? [value] : [] },\n                        })}\n                        helperText={(\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.helperText'}\n                                defaultMessage='Select a scope to control permissions to this operation'\n                            />\n                        )}\n                        margin='dense'\n                        variant='outlined'\n                        id={verb + target + '-operation-scope-select'}\n                    >\n                        <ListSubheader>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.select.local'}\n                                defaultMessage='API Scopes'\n                            />\n                        </ListSubheader>\n                        {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                            <MenuItem\n                                id={verb + target + '-operation-scope-' + apiScope.scope.name}\n                                key={apiScope.scope.name}\n                                value={apiScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operationScopes.includes(apiScope.scope.name)} color='primary' />\n                                {apiScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.operation.no.api.scope.available'}\n                                        defaultMessage='No API scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                        <ListSubheader>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.select.shared'}\n                                defaultMessage='Shared Scopes'\n                            />\n                        </ListSubheader>\n                        {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                            <MenuItem\n                                key={sharedScope.scope.name}\n                                value={sharedScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operationScopes.includes(sharedScope.scope.name)} color='primary' />\n                                {sharedScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.operation.no.sharedpi.scope.available'}\n                                        defaultMessage='No shared scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                    </TextField>\n                ) : null }\n            </Grid>\n            <Grid item md={5} style={{ marginTop: '14px' }}>\n                { operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? !disableUpdate && (\n                    <Link to={`/apis/${api.id}/scopes/create`} target='_blank'>\n                        <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.create.new.scope'}\n                                defaultMessage='Create New Scope'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                ) : null}\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nOperationGovernance.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})),\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})) }),\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nOperationGovernance.defaultProps = {\n    operationRateLimits: [],\n    api: { scopes: [] },\n    sharedScopes: [],\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * The renderInput function.\n * @param {any} inputProps The props that are being passed to the function.\n * @returns {any} HTML view of the inputs.\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    // eslint-disable-next-line react/forbid-prop-types\n    classes: PropTypes.shape({}).isRequired,\n    // eslint-disable-next-line react/forbid-prop-types, react/require-default-props\n    InputProps: PropTypes.shape({}),\n};\n\n/**\n * The renderSuggestion function.\n * @param {any} suggestionProps The props that are being passed to the function.\n * @returns {any} HTML view of the suggestions.\n */\nfunction renderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, selectedItem,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (selectedItem || '').indexOf(suggestion) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion}\n            selected={isHighlighted}\n            component='div'\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    // eslint-disable-next-line react/forbid-prop-types\n    itemProps: PropTypes.shape({}).isRequired,\n    selectedItem: PropTypes.string.isRequired,\n    suggestion: PropTypes.shape('').isRequired,\n};\n\n/**\n * The getSuggestions function.\n * @param {any} value The value that are being passed to the function.\n * @param {any} arns The arns that are being passed to the function.\n * @returns {any} suggestion values.\n */\nfunction getSuggestions(value, { showEmpty = false } = {}, arns) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n    return inputLength === 0 && !showEmpty\n        ? []\n        : arns.filter((suggestion) => {\n            const keep = count < 5 && suggestion.slice(0, inputLength).toLowerCase() === inputValue;\n            if (keep) {\n                count += 1;\n            }\n            return keep;\n        });\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1000,\n        marginTop: theme.spacing(-2),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n}));\n\n/**\n * The autocomplete component. This component lists the ARNs of a specific user role.\n * @returns {any} HTML view of the autocomplete component.\n * @param {any} props The input parameters.\n */\nexport default function IntegrationDownshift(props) {\n    const classes = useStyles();\n    const {\n        operation,\n        operationsDispatcher,\n        target,\n        verb,\n        arns,\n    } = props;\n    const [timeout, setTimeout] = useState(50000);\n    useEffect(() => {\n        if (operation['x-amzn-resource-timeout']) {\n            setTimeout(operation['x-amzn-resource-timeout']);\n        }\n    }, []);\n    const handleTimeoutMin = (event) => {\n        if (event.target.value !== '') {\n            const minutes = parseInt(event.target.value, 10);\n            const seconds = (timeout / 1000) % 60;\n            const milliSeconds = (minutes * 60 + seconds) * 1000;\n            let newTimeout = 0;\n            if (milliSeconds > 900000) {\n                newTimeout = 900000;\n            } else if (milliSeconds < 1000) {\n                newTimeout = 1000;\n            } else {\n                newTimeout = milliSeconds;\n            }\n            setTimeout(newTimeout);\n            operationsDispatcher({\n                action: 'amznResourceTimeout',\n                data: { target, verb, value: newTimeout },\n            });\n        }\n    };\n    const handleTimeoutSec = (event) => {\n        if (event.target.value !== '') {\n            const minutes = Math.floor((timeout / 1000) / 60);\n            const seconds = parseInt(event.target.value, 10);\n            const milliSeconds = (minutes * 60 + seconds) * 1000;\n            let newTimeout = 0;\n            if (milliSeconds > 900000) {\n                newTimeout = 900000;\n            } else if (milliSeconds < 1000) {\n                newTimeout = 1000;\n            } else {\n                newTimeout = milliSeconds;\n            }\n            setTimeout(newTimeout);\n            operationsDispatcher({\n                action: 'amznResourceTimeout',\n                data: { target, verb, value: newTimeout },\n            });\n        }\n    };\n    return (\n        <>\n            <Grid item md={12} xs={12}>\n                <Typography variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.AWSLambdaSettings.Title'\n                        defaultMessage='AWS Lambda Settings'\n                    />\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} xs={1} />\n            <Grid item md={7} xs={7}>\n                <Downshift\n                    id='downshift-options'\n                    onSelect={(changes) => {\n                        if (changes !== null) {\n                            operationsDispatcher({\n                                action: 'amznResourceName',\n                                data: { target, verb, value: changes },\n                            });\n                        }\n                    }}\n                >\n                    {({\n                        clearSelection,\n                        getInputProps,\n                        getItemProps,\n                        getLabelProps,\n                        getMenuProps,\n                        highlightedIndex,\n                        inputValue,\n                        isOpen,\n                        openMenu,\n                        selectedItem,\n                    }) => {\n                        const {\n                            onBlur, onChange, onFocus, ...inputProps\n                        } = getInputProps({\n                            onChange: (event) => {\n                                operationsDispatcher({\n                                    action: 'amznResourceName',\n                                    data: { target, verb, value: event.target.value },\n                                });\n                                if (event.target.value === '') {\n                                    clearSelection();\n                                }\n                            },\n                            onBlur: () => {\n                                clearSelection();\n                            },\n                            value: operation['x-amzn-resource-name'],\n                            onFocus: openMenu,\n                            placeholder: 'Select or type an ARN',\n                        });\n                        return (\n                            <div className={classes.container}>\n                                {renderInput({\n                                    variant: 'outlined',\n                                    required: true,\n                                    fullWidth: true,\n                                    classes,\n                                    InputLabelProps: getLabelProps({ shrink: true }),\n                                    label: 'Amazon Resource Name (ARN)',\n                                    helperText: 'Select or type an ARN',\n                                    InputProps: {\n                                        onBlur,\n                                        onChange,\n                                        onFocus,\n                                        endAdornment: (\n                                            <InputAdornment position='end'>\n                                                <Icon className={classes.helpIcon}>keyboard_arrow_down</Icon>\n                                            </InputAdornment>\n                                        ),\n                                    },\n                                    inputProps,\n                                })}\n\n                                <div {...getMenuProps()}>\n                                    {isOpen ? (\n                                        <Paper className={classes.paper} square>\n                                            {getSuggestions(inputValue, { showEmpty: true }, arns)\n                                                .map((suggestion, index) => renderSuggestion({\n                                                    suggestion,\n                                                    index,\n                                                    itemProps: getItemProps({ item: suggestion }),\n                                                    highlightedIndex,\n                                                    selectedItem,\n                                                }))}\n                                        </Paper>\n                                    ) : null}\n                                </div>\n                            </div>\n                        );\n                    }}\n                </Downshift>\n            </Grid>\n            <Grid item md={1} xs={1} />\n            <Grid item md={1} xs={1}>\n                <TextField\n                    id='timeout-min'\n                    label='min'\n                    variant='outlined'\n                    helperText='Set Timeout'\n                    type='number'\n                    inputProps={{\n                        min: 0,\n                        max: 15,\n                        step: 1,\n                    }}\n                    value={Math.floor((timeout / 1000) / 60)}\n                    onChange={(event) => {\n                        handleTimeoutMin(event);\n                    }}\n                />\n            </Grid>\n            <Grid item md={1} xs={1}>\n                <TextField\n                    id='timeout-sec'\n                    label='sec'\n                    variant='outlined'\n                    type='number'\n                    inputProps={{\n                        min: 0,\n                        max: 59,\n                        step: 1,\n                    }}\n                    value={(timeout / 1000) % 60}\n                    onChange={(event) => {\n                        handleTimeoutSec(event);\n                    }}\n                />\n            </Grid>\n            <Grid item md={1} xs={1} />\n        </>\n    );\n}\n\nIntegrationDownshift.propTypes = {\n    operation: PropTypes.isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    arns: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport { getVersion } from 'AppComponents/Apis/Details/Resources/operationUtils';\nimport AddParameter from './AddParameter';\nimport ListParameters from './ListParameters';\n\n/**\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Parameters(props) {\n    const {\n        operation, spec, target, verb, operationsDispatcher, disableUpdate, resolvedSpec,\n    } = props;\n    const specVersion = getVersion(spec);\n    const haveParameters = (operation.parameters && operation.parameters.length !== 0) || operation.requestBody;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Parameters\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                {!disableUpdate && (\n                    <AddParameter\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        specVersion={specVersion}\n                    />\n                )}\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                {haveParameters && (\n                    <ListParameters\n                        disableUpdate={disableUpdate}\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        spec={spec}\n                        specVersion={specVersion}\n                        resolvedSpec={resolvedSpec}\n                    />\n                )}\n            </Grid>\n        </>\n    );\n}\n\nParameters.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n\nParameters.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useRef, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {\n    iff,\n    getParameter,\n    getParameterTypes,\n    getSupportedDataTypes,\n} from 'AppComponents/Apis/Details/Resources/components/operationComponents/parameterUtils';\n\nconst useStyles = makeStyles(() => ({\n    formControl: {\n        minWidth: 120,\n    },\n    parameterContainer: {\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    checkBox: {\n        color: '#7c7c7c',\n    },\n}));\n\n/**\n *\n * Add resource parameter according to swagger spec\n * A unique parameter is defined by a combination of a name and param type and schema or content is required\n * OpenAPI 3.0 spec: https://swagger.io/specification/#parameterObject\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddParameter(props) {\n    const {\n        operation, operationsDispatcher, target, verb, specVersion, intl,\n    } = props;\n    const inputLabel = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    const initParameter = getParameter(specVersion);\n\n    /**\n     *\n     *\n     * @param {*} state\n     * @param {*} action\n     * @returns\n     */\n    function newParameterReducer(state, action) {\n        const { type, value } = action;\n        switch (type) {\n            case 'in':\n            case 'name':\n            case 'required':\n                return { ...state, [type]: value };\n            case 'type': {\n                if (specVersion === '2.0') {\n                    return { ...state, [type]: value };\n                } else {\n                    return { ...state, schema: { [type]: value } };\n                }\n            }\n            case 'clear':\n                return initParameter;\n            default:\n                return state;\n        }\n    }\n    const [newParameter, newParameterDispatcher] = useReducer(newParameterReducer, initParameter);\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    let isParameterExist = false;\n    const isParameterExistValue = operation.parameters && operation.parameters.map(\n        (operations) => (operations.in === newParameter.in && operations.name === newParameter.name),\n    );\n\n    if (isParameterExistValue && isParameterExistValue.includes(true)) {\n        isParameterExist = true;\n    } else {\n        isParameterExist = false;\n    }\n\n    const classes = useStyles();\n\n    /**\n     *\n     *\n     */\n    function clearInputs() {\n        newParameterDispatcher({ type: 'clear' });\n    }\n    /**\n     *\n     *\n     */\n    function addNewParameter() {\n        if (newParameter.in === 'body') {\n            operationsDispatcher(specVersion === '2.0'\n                ? {\n                    action: 'parameter',\n                    data: {\n                        target,\n                        verb,\n                        value: {\n                            name: newParameter.name,\n                            description: '',\n                            required: newParameter.required,\n                            in: newParameter.in,\n                            schema: {\n                                type: newParameter.type,\n                            },\n                        },\n                    },\n                }\n                : {\n                    action: 'requestBody',\n                    data: {\n                        target,\n                        verb,\n                        value: {\n                            description: '',\n                            required: newParameter.required,\n                            content: { [newParameter.name]: { schema: { type: 'object' } } },\n                        },\n                    },\n                });\n        } else {\n            operationsDispatcher({ action: 'parameter', data: { target, verb, value: newParameter } });\n        }\n        clearInputs();\n    }\n\n    function isDisabled() {\n        if (specVersion === '2.0') {\n            return (!newParameter.name || !newParameter.type || !newParameter.in || isParameterExist);\n        }\n        return (!newParameter.name || !newParameter.schema.type || !newParameter.in || isParameterExist);\n    }\n\n    function getParameterNameHelperText(paramIn) {\n        if (isParameterExist) {\n            return intl.formatMessage({\n                id: 'Apis.Details.Resources.components.operationComponents.AddParameter.parameter.name.already.exists',\n                defaultMessage: 'Parameter name already exists',\n            });\n        }\n        if (paramIn === 'body') {\n            if (specVersion !== '2.0') {\n                return intl.formatMessage({\n                    id: 'Apis.Details.Resources.components.operationComponents.AddParameter.enter.content.type',\n                    defaultMessage: 'Enter Content Type',\n                });\n            }\n        }\n        return intl.formatMessage({\n            id: 'Apis.Details.Resources.components.operationComponents.AddParameter.enter.parameter.name',\n            defaultMessage: 'Enter Parameter Name',\n        });\n    }\n\n    return (\n        <Grid container direction='row' spacing={1} className={classes.parameterContainer}>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    <InputLabel ref={inputLabel} htmlFor='param-in' error={isParameterExist}>\n                        Parameter Type\n                    </InputLabel>\n\n                    <Select\n                        value={newParameter.in}\n                        onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                        labelWidth={labelWidth}\n                        inputProps={{\n                            name: 'in',\n                        }}\n                        id={'param-' + verb + target}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                        error={isParameterExist}\n                    >\n                        {getParameterTypes(specVersion).map((paramType) => {\n                            if ((paramType === 'body' || paramType === 'formData')\n                                && !['post', 'put', 'patch'].includes(verb)) {\n                                return null;\n                            }\n                            return (\n                                <MenuItem value={paramType} dense id={'param-' + verb + target + '/' + paramType}>\n                                    {capitalizeFirstLetter(paramType)}\n                                </MenuItem>\n                            );\n                        })}\n                    </Select>\n                    {isParameterExist\n                        ? (\n                            <FormHelperText error>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.parameter.name.exists'\n                                    defaultMessage='Parameter type already exists'\n                                />\n                            </FormHelperText>\n                        )\n                        : (\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.select.parameter.type'\n                                    defaultMessage='Select the parameter type'\n                                />\n                            </FormHelperText>\n                        )}\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <TextField\n                    id={'name-' + verb + target}\n                    label={newParameter.in === 'body'\n                        ? iff(specVersion === '2.0',\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.parameter.name'\n                                defaultMessage='Parameter Name'\n                            />,\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.content.type'\n                                defaultMessage='Content Type'\n                            />)\n                        : (\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.parameter.name'\n                                defaultMessage='Parameter Name'\n                            />\n                        )}\n                    name='name'\n                    value={newParameter.name}\n                    onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                    helperText={getParameterNameHelperText(newParameter.in)}\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewParameter();\n                        }\n                    }}\n                    error={isParameterExist}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    <InputLabel ref={inputLabel} htmlFor={'data-' + verb + target} error={isParameterExist}>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.data.type'\n                            defaultMessage='Data Type'\n                        />\n                    </InputLabel>\n\n                    <Select\n                        value={newParameter.schema !== undefined ? newParameter.schema.type : newParameter.type}\n                        onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                        labelWidth={labelWidth}\n                        inputProps={{\n                            name: 'type',\n                        }}\n                        id={'data-' + verb + target}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                        error={isParameterExist}\n                    >\n                        {getSupportedDataTypes(specVersion, newParameter.in).map((paramType) => {\n                            return (\n                                <MenuItem value={paramType} dense id={'data-' + verb + target + '/' + paramType}>\n                                    {capitalizeFirstLetter(paramType)}\n                                </MenuItem>\n                            );\n                        })}\n                    </Select>\n                    <FormHelperText>Select the data type</FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl component='fieldset' className={classes.formControl}>\n                    <FormControlLabel\n                        className={classes.checkBox}\n                        control={(\n                            <Checkbox\n                                data-testid={'required-' + verb + target}\n                                checked={newParameter.required}\n                                onChange={\n                                    ({\n                                        target: { name, value },\n                                    }) => newParameterDispatcher({ type: name, value: !value })\n                                }\n                                value={newParameter.required}\n                                inputProps={{\n                                    name: 'required',\n                                }}\n                            />\n                        )}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.required'\n                                defaultMessage='Required'\n                            />\n                        )}\n                    />\n                    <FormHelperText>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.required.helper.text'\n                            defaultMessage='Check whether the parameter is required.'\n                        />\n                    </FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.AddParameter.add.tooltip'\n                            defaultMessage='Add new parameter'\n                        />\n                    )}\n                    placement='bottom'\n                    interactive\n                >\n                    <span>\n                        <Button\n                            style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                            disabled={isDisabled()}\n                            size='small'\n                            variant='outlined'\n                            aria-label='Add Parameter'\n                            color='primary'\n                            onClick={addNewParameter}\n                            id={`param-${verb}${target}-add-btn`}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.AddParameter.add'\n                                defaultMessage='Add'\n                            />\n                        </Button>\n                    </span>\n                </Tooltip>\n                <sup>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddParameter.clear.inputs.tooltip'\n                                defaultMessage='Clear inputs'\n                            />\n                        )}\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <IconButton onClick={clearInputs} size='small' aria-label='clear-inputs'>\n                                <ClearIcon />\n                            </IconButton>\n                        </span>\n                    </Tooltip>\n                </sup>\n            </Grid>\n        </Grid>\n    );\n}\n\nAddParameter.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    specVersion: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default React.memo(injectIntl(AddParameter));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { FormattedMessage } from 'react-intl';\nimport { isRef } from 'AppComponents/Apis/Details/Resources/operationUtils';\nimport RequestBody from 'AppComponents/Apis/Details/Resources/components/operationComponents/RequestBody';\nimport Banner from 'AppComponents/Shared/Banner';\nimport EditParameter from './EditParameter';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListParameters(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate, hideParameterEdit, specVersion, resolvedSpec,\n    } = props;\n    const classes = useStyles();\n    const [editingParameter, setEditingParameter] = useState(null);\n    if (!resolvedSpec) {\n        return (\n            <Banner\n                disableActions\n                dense\n                type='error'\n                message={(\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.spec.error'\n                        defaultMessage='Error in resolving the definition!'\n                    />\n                )}\n            />\n        );\n    }\n    return (\n        <>\n            {editingParameter !== null && (\n                <EditParameter\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingParameter={editingParameter}\n                    setEditingParameter={setEditingParameter}\n                    version={specVersion}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.type'\n                                defaultMessage='Parameter Type'\n                            />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.name'\n                                defaultMessage='Name/Content Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.data.type'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.required'\n                                defaultMessage='Required'\n                            />\n                        </TableCell>\n                        {!disableUpdate && (\n                            <TableCell align='left'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.ListParameter.actions'\n                                    defaultMessage='Actions'\n                                />\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {operation.parameters && resolvedSpec.paths\n                        && operation.parameters.map((parameter, index) => {\n                            const isRefParam = isRef(parameter);\n                            const paramCopy = isRefParam\n                                ? resolvedSpec.paths[target][verb].parameters[index] : parameter;\n                            return (\n                                <TableRow\n                                    key={paramCopy.name}\n                                    id={`param-list-${paramCopy.in}-${paramCopy.name}-${paramCopy.schema\n                                        ? paramCopy.schema.type : paramCopy.type}`}\n                                >\n                                    <TableCell align='left'>{capitalizeFirstLetter(paramCopy.in)}</TableCell>\n                                    <TableCell align='left'>{paramCopy.name}</TableCell>\n                                    <TableCell align='left'>\n                                        {capitalizeFirstLetter(paramCopy.schema\n                                            ? paramCopy.schema.type : paramCopy.type)}\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        {paramCopy.required\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.yes'}\n                                                    defaultMessage='Yes'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.no'}\n                                                    defaultMessage='No'\n                                                />\n                                            )}\n                                    </TableCell>\n                                    {!disableUpdate && (\n                                        <TableCell align='left'>\n                                            {!isRefParam && (\n                                                <Tooltip title={(\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                                            + 'ListParameter.edit'}\n                                                        defaultMessage='Edit'\n                                                    />\n                                                )}\n                                                >\n                                                    <IconButton\n                                                        onClick={() => setEditingParameter(parameter)}\n                                                        fontSize='small'\n                                                    >\n                                                        <EditIcon fontSize='small' />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            )}\n                                            <Tooltip title={(\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.delete'}\n                                                    defaultMessage='Delete'\n                                                />\n                                            )}\n                                            >\n                                                <IconButton\n                                                    disabled={disableUpdate}\n                                                    onClick={() => operationsDispatcher({\n                                                        action: 'deleteParameter',\n                                                        data: { target, verb, value: paramCopy },\n                                                    })}\n                                                    fontSize='small'\n                                                >\n                                                    <DeleteIcon fontSize='small' />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            );\n                        })}\n                    {operation.requestBody && isRef(operation.requestBody) && resolvedSpec.paths\n                        && Object.entries(resolvedSpec.paths[target][verb].requestBody.content).map(\n                            ([contentType, content]) => {\n                                return (\n                                    <RequestBody\n                                        contentType={contentType}\n                                        content={content}\n                                        operation={operation}\n                                        disableUpdate={disableUpdate}\n                                        hideParameterEdit={hideParameterEdit}\n                                        operationsDispatcher={operationsDispatcher}\n                                        target={target}\n                                        verb={verb}\n                                    />\n                                );\n                            },\n                        )}\n                    {operation.requestBody && !isRef(operation.requestBody)\n                        && Object.entries(operation.requestBody.content).map(([contentType, content]) => {\n                            return (\n                                <RequestBody\n                                    contentType={contentType}\n                                    content={content}\n                                    operation={operation}\n                                    disableUpdate={disableUpdate}\n                                    hideParameterEdit={hideParameterEdit}\n                                    operationsDispatcher={operationsDispatcher}\n                                    target={target}\n                                    verb={verb}\n                                />\n                            );\n                        })}\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListParameters.defaultProps = {\n    hideParameterEdit: false,\n    disableUpdate: false,\n};\nListParameters.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    hideParameterEdit: PropTypes.bool,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    specVersion: PropTypes.string.isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport TableCell from '@material-ui/core/TableCell';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TableRow from '@material-ui/core/TableRow';\n\n/**\n * Component to render the Request b\n *\n * */\nfunction RequestBody(props) {\n    const {\n        contentType, content, operation, disableUpdate, hideParameterEdit, operationsDispatcher, target, verb,\n    } = props;\n    return (\n        <TableRow key={contentType}>\n            <TableCell align='left'>\n                <FormattedMessage\n                    id='Apis.Details.Resources.components.operationComponents.ListParameter.body'\n                    defaultMessage='Body'\n                />\n            </TableCell>\n            <TableCell>{contentType}</TableCell>\n            <TableCell align='left'>{content.schema.type}</TableCell>\n            <TableCell align='left'>\n                {operation.requestBody.required\n                    ? (\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.yes'}\n                            defaultMessage='Yes'\n                        />\n                    )\n                    : (\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.no'}\n                            defaultMessage='No'\n                        />\n                    )}\n            </TableCell>\n            {!disableUpdate && (\n                <TableCell align='left'>\n                    {hideParameterEdit && (\n                        <Tooltip title='Edit'>\n                            <IconButton onClick={() => {}} fontSize='small'>\n                                <EditIcon fontSize='small' />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    <Tooltip title={(\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.delete'}\n                            defaultMessage='Delete'\n                        />\n                    )}\n                    >\n                        <IconButton\n                            disabled={disableUpdate}\n                            onClick={() => {\n                                operationsDispatcher({\n                                    action: 'requestBody',\n                                    data: {\n                                        target,\n                                        verb,\n                                        value: {\n                                            description: '',\n                                            required: false,\n                                            content: {},\n                                        },\n                                    },\n                                });\n                            }}\n                            fontSize='small'\n                        >\n                            <DeleteIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                </TableCell>\n            )}\n        </TableRow>\n    );\n}\n\nRequestBody.propTypes = {\n    contentType: PropTypes.string.isRequired,\n    content: PropTypes.shape({}).isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool.isRequired,\n    hideParameterEdit: PropTypes.bool.isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nexport default RequestBody;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport {\n    getSupportedDataTypes,\n    getDataFormats,\n    iff,\n} from 'AppComponents/Apis/Details/Resources/components/operationComponents/parameterUtils';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n    subtleText: {\n        color: theme.palette.grey[400],\n    },\n}));\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function EditParameter(props) {\n    const {\n        operationsDispatcher, target, verb, editingParameter, setEditingParameter, version,\n    } = props;\n    /**\n     *\n     *\n     * @param {*} currentParameter\n     * @param {*} paramAction\n     */\n    function parameterActionReducer(currentParameter, paramAction) {\n        const { action, value } = paramAction;\n        const nextParameter = currentParameter.schema\n            ? { ...currentParameter, schema: { ...currentParameter.schema } } : { ...currentParameter };\n        switch (action) {\n            case 'description':\n            case 'required':\n                nextParameter[action] = value;\n                break;\n            case 'type':\n                if (nextParameter.schema) {\n                    nextParameter.schema[action] = value;\n                } else {\n                    nextParameter[action] = value;\n                }\n                break;\n            case 'format':\n                if (nextParameter.schema) {\n                    if (value) {\n                        nextParameter.schema[action] = value;\n                    } else {\n                        delete nextParameter.schema[action];\n                    }\n                } else if (value) {\n                    nextParameter[action] = value;\n                } else {\n                    delete nextParameter[action];\n                }\n                break;\n            default:\n                break;\n        }\n        return nextParameter;\n    }\n    const [parameter, parameterActionDispatcher] = useReducer(parameterActionReducer, editingParameter);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingParameter(null);\n    };\n\n    /**\n     *\n     *\n     */\n    function handelDone() {\n        operationsDispatcher({ action: 'parameter', data: { target, verb, value: parameter } });\n        handleClose();\n    }\n    const isEditing = parameter !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-parameter'>\n            <DialogTitle disableTypography id='edit-parameter'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {capitalizeFirstLetter(parameter.in)}\n                        {' '}\n                        :\n                        {parameter.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <TextField\n                            value={capitalizeFirstLetter(parameter.in)}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.type'\n                                    defaultMessage='Parameter Type'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid>\n                    <Grid item md={6}>\n                        <TextField\n                            value={parameter.name}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.name'\n                                    defaultMessage='Name'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid>\n                    <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : parameter.type}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes(version, parameter.in).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'select.schema.data.type'}\n                                    defaultMessage='Select the Schema Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6}>\n                        <FormControl\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                            disabled={parameter.schema\n                                ? iff(\n                                    parameter.schema.type === 'boolean' || parameter.schema.type === 'object',\n                                    true,\n                                    false,\n                                )\n                                : iff(\n                                    parameter.type === 'boolean' || parameter.type === 'object',\n                                    true,\n                                    false,\n                                )}\n                        >\n                            <InputLabel id='edit-parameter-format'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'data.format'}\n                                    defaultMessage='Data Format'\n                                />\n                            </InputLabel>\n                            <Select\n                                value={parameter.schema ? parameter.schema.format : parameter.format}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'format',\n                                    id: 'edit-parameter-format',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                <MenuItem value='' dense className={classes.subtleText}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                            + 'select.format.of.data.type.none.option'}\n                                        defaultMessage='No Data Type'\n                                    />\n                                </MenuItem>\n                                {getDataFormats(\n                                    parameter.schema ? parameter.schema.type : parameter.type,\n                                ).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'select.format.of.data.type'}\n                                    defaultMessage='Select the Format of Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={parameter.required}\n                                        onChange={(\n                                            { target: { name, checked } },\n                                        ) => parameterActionDispatcher({ action: name, value: checked })}\n                                        value={parameter.required}\n                                        inputProps={{\n                                            name: 'required',\n                                        }}\n                                    />\n                                )}\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                            + 'required'}\n                                        defaultMessage='Required'\n                                    />\n                                )}\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid container direction='row' justify='flex-end' alignItems='center'>\n                        <DialogContentText>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'use.done.button.to.persist.changes'}\n                                defaultMessage='Use DONE button in the page to persist changes'\n                            />\n                        </DialogContentText>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button size='small' onClick={handelDone} variant='contained' color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditParameter.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingParameter: PropTypes.shape({}).isRequired,\n    setEditingParameter: PropTypes.func.isRequired,\n    version: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, Suspense, lazy, useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Button from '@material-ui/core/Button';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\n\nimport PolicyEditor from './PolicyEditor';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"SOAPToRESTMonaco\" */));\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SOAPToRESTListing(props) {\n    const { resourcePolicy, resourcePoliciesDispatcher } = props;\n    const [resourcePolicyIn, setResourcePolicyIn] = useState(resourcePolicy.in);\n    const [resourcePolicyOut, setResourcePolicyOut] = useState(resourcePolicy.out);\n    useEffect(() => {\n        setResourcePolicyIn(resourcePolicy.in);\n        setResourcePolicyOut(resourcePolicy.out);\n    }, [resourcePolicy]);\n    // Get use preference from OS https://material-ui.com/customization/palette/#user-preference\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const [openEditor, setOpenEditor] = useState(false);\n    const [selectedTab, setTabIndex] = useState('in');\n    const editorOptions = {\n        selectOnLineNumbers: true,\n        readOnly: true,\n        smoothScrolling: true,\n        wordWrap: 'on',\n    };\n    const selectedPolicy = selectedTab === 'in' ? resourcePolicyIn : resourcePolicyOut;\n    const editorProps = {\n        language: 'xml',\n        height: 'calc(50vh)',\n        theme: prefersDarkMode ? 'vs-dark' : 'vs',\n        value: selectedPolicy.content,\n        options: editorOptions,\n    };\n\n    /**\n     *\n     *\n     * @param {*} content\n     */\n    function setPolicyContent(content) {\n        if (selectedTab === 'in') {\n            setResourcePolicyIn({ ...resourcePolicyIn, content });\n        } else {\n            setResourcePolicyOut({ ...resourcePolicyOut, content });\n        }\n    }\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Mediation\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Tabs\n                    value={selectedTab}\n                    indicatorColor='primary'\n                    textColor='primary'\n                    onChange={(event, tab) => setTabIndex(tab)}\n                    aria-label='Resource mediation in/out tabs'\n                >\n                    <Tab value='in' label='In' />\n                    <Tab value='out' label='Out' />\n                </Tabs>\n                <Box p={1}>\n                    <Button onClick={() => setOpenEditor(true)} variant='outlined' size='small' color='primary'>\n                        Edit\n                        {' '}\n                        <EditIcon />\n                    </Button>\n                    {!openEditor && (\n                        <Paper elevation={4}>\n                            <Suspense fallback={<CircularProgress disableShrink />}>\n                                <MonacoEditor {...editorProps} />\n                            </Suspense>\n                        </Paper>\n                    )}\n                </Box>\n            </Grid>\n            <PolicyEditor\n                resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                setPolicyContent={setPolicyContent}\n                selectedPolicy={selectedPolicy}\n                originalResourcePolicy={resourcePolicy[selectedTab]}\n                direction={selectedTab}\n                prefersDarkMode={prefersDarkMode}\n                onClose={() => setOpenEditor(false)}\n                open={openEditor}\n            />\n        </>\n    );\n}\n\nSOAPToRESTListing.defaultProps = {\n    disableUpdate: false,\n};\nSOAPToRESTListing.propTypes = {\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Suspense, lazy, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Fade from '@material-ui/core/Fade';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Banner from 'AppComponents/Shared/Banner';\nimport CloseConfirmation from './CloseConfirmation';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"PolicyEditorMonaco\" */));\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        // position: 'relative',\n        top: 'auto',\n        bottom: 0,\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst Transition = React.forwardRef((props, ref) => {\n    return <Fade in ref={ref} {...props} />;\n});\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function PolicyEditor(props) {\n    const classes = useStyles();\n    const [api] = useAPI();\n    const {\n        open,\n        onClose,\n        prefersDarkMode,\n        originalResourcePolicy,\n        selectedPolicy,\n        setPolicyContent,\n        resourcePoliciesDispatcher,\n        direction,\n    } = props;\n    const [pageError, setPageError] = useState(null);\n    const [openConfirmation, setOpenConfirmation] = useState(false);\n    const [saving, setSaving] = useState(false);\n\n    const editorOptions = {\n        selectOnLineNumbers: true,\n        readOnly: saving,\n        smoothScrolling: true,\n        wordWrap: 'on',\n    };\n    const editorProps = {\n        language: 'xml',\n        height: 'calc(100vh)',\n        theme: prefersDarkMode ? 'vs-dark' : 'vs',\n        value: selectedPolicy.content,\n        options: editorOptions,\n        onChange: setPolicyContent,\n    };\n\n    /**\n     *\n     *\n     */\n    function confirmAndClose() {\n        // No need to confirm if user have not done any changes\n        if (selectedPolicy.content !== originalResourcePolicy.content) {\n            setOpenConfirmation(true);\n        } else {\n            onClose();\n        }\n    }\n    /**\n     *\n     *\n     */\n    function save() {\n        setSaving(true);\n        api.updateResourcePolicy(selectedPolicy)\n            .then((response) => {\n                Alert.success('Resource policy updated successfully');\n                resourcePoliciesDispatcher({ action: 'update', data: { value: response.body, direction } });\n                onClose();\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                } else {\n                    // TODO add i18n ~tmkb\n                    const message = error.message || 'Something went wrong while updating resource policy!';\n                    Alert.error(message);\n                    setPageError(message);\n                }\n                console.error(error);\n            })\n            .finally(() => setSaving(false));\n    }\n\n    return (\n        <Dialog fullScreen open={open} onClose={onClose} TransitionComponent={Transition}>\n            <AppBar position='fixed' color='default' className={classes.appBar}>\n                <Toolbar variant='dense'>\n                    <Grid container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <Grid item>\n                            <Button\n                                disabled={saving}\n                                variant='outlined'\n                                color='primary'\n                                className={classes.title}\n                                onClick={save}\n                            >\n                                save & close\n                                {saving && <CircularProgress size={18} />}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button color='inherit' className={classes.title} onClick={confirmAndClose}>\n                                close\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n            </AppBar>\n            <Grid container direction='row' justify='center' alignItems='center'>\n                {pageError && (\n                    <Grid item xs={12}>\n                        <Banner\n                            onClose={() => setPageError(null)}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <Grid item xs={12}>\n                <Suspense fallback={<CircularProgress disableShrink />}>\n                    <MonacoEditor {...editorProps} />\n                </Suspense>\n            </Grid>\n            <CloseConfirmation\n                open={openConfirmation}\n                onClose={() => {\n                    setPolicyContent(originalResourcePolicy.content);\n                    setOpenConfirmation(false);\n                }}\n                closeEditor={onClose}\n            />\n        </Dialog>\n    );\n}\nPolicyEditor.defaultProps = {\n    open: false,\n    onClose: () => {},\n    prefersDarkMode: false,\n\n};\nPolicyEditor.propTypes = {\n    open: PropTypes.bool,\n    onClose: PropTypes.func,\n    prefersDarkMode: PropTypes.bool,\n    originalResourcePolicy: PropTypes.shape({}).isRequired,\n    selectedPolicy: PropTypes.shape({}).isRequired,\n    setPolicyContent: PropTypes.func.isRequired,\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    direction: PropTypes.oneOf(['in', 'out']).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function CloseConfirmation(props) {\n    const { open, onClose, closeEditor } = props;\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>Discard changes and Close</DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    All the unsaved changes will be lost\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color='primary'>\n                    Cancel\n                </Button>\n                <Button\n                    onClick={() => {\n                        onClose();\n                        closeEditor();\n                    }}\n                    color='primary'\n                    autoFocus\n                >\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nCloseConfirmation.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    closeEditor: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport PropTypes from 'prop-types';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n/**\n *\n * Return a group container , User should provide the operations list as the child component\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function GroupOfOperations(props) {\n    const { openAPI, children, tag } = props;\n    const currentTagInfo = openAPI.tags && openAPI.tags.find((tagInfo) => tagInfo.name === tag);\n    return (\n        <ExpansionPanel defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls='panel1a-content' id={tag}>\n                <Typography variant='h4'>\n                    {tag}\n                    {currentTagInfo && (\n                        <Typography style={{ margin: '0px 30px' }} variant='caption'>\n                            {currentTagInfo.description}\n                        </Typography>\n                    )}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nGroupOfOperations.propTypes = {\n    children: PropTypes.element.isRequired,\n    openAPI: PropTypes.shape({ tags: PropTypes.arrayOf(PropTypes.string) }).isRequired,\n    tag: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SpecErrors(props) {\n    const { specErrors } = props;\n    const [open, setOpen] = useState(false);\n    if (specErrors.length === 0) {\n        return null;\n    }\n    return (\n        <>\n            <sup>\n                <Tooltip title='Show errors'>\n                    <IconButton onClick={() => setOpen(true)} color='secondary' aria-label='Errors in spec'>\n                        <ErrorOutlineIcon color='error' />\n                    </IconButton>\n                </Tooltip>\n            </sup>\n            <Dialog maxWidth='md' aria-labelledby='confirmation-dialog-title' open={open}>\n                <DialogTitle id='confirmation-dialog-title'>\n                    <Typography display='inline' color='textPrimary' variant='h6'>\n                        Errors\n                        <Typography display='inline' variant='subtitle2'>\n                            {' '}\n                            in OpenAPI definition\n                        </Typography>\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {specErrors.map((error, index) => (\n                            <>\n                                {index % 2 !== 0 && <Divider light variant='inset' />}\n                                <ListItem>\n                                    <ListItemText\n                                        primary={error.message}\n                                        primaryTypographyProps={{\n                                            color: 'error',\n                                        }}\n                                        inset\n                                    />\n                                </ListItem>\n                            </>\n                        ))}\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setOpen(false)} color='primary'>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nSpecErrors.propTypes = {\n    specErrors: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n *\n * Simply reders the edit api definition link in the bottom of the resources listing\n * @export\n * @param {*} props\n * @returns\n */\nexport default function GoToDefinitionLink(props) {\n    const { api, message } = props;\n    return (\n        <Box m={1}>\n            <Link to={`/apis/${api.id}/api definition`}>\n                <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                    {message}\n                    <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                </Typography>\n            </Link>\n        </Box>\n    );\n}\nGoToDefinitionLink.defaultProps = {\n    message: 'Edit API Definition',\n};\nGoToDefinitionLink.propTypes = {\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n    message: PropTypes.string,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\nimport isEmpty from 'lodash.isempty';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nexport default function OperationsSelector(props) {\n    const { selectedOperations, setSelectedOperation, operations } = props;\n    const [apiFromContext] = useAPI();\n\n    // TODO: Following logic introduce a limitation in showing `indeterminate` icon state if user\n    // select all -> unchecked one operation -> recheck same operation again ~tmkb\n    const isIndeterminate = !isEmpty(selectedOperations);\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function handleSelector() {\n        setSelectedOperation(isIndeterminate ? {} : operations);\n    }\n    return (\n        <Grid container direction='row' justify='space-between' alignItems='center'>\n            <Grid item />\n            <Grid item>\n                <Box mr={17.25}>\n                    <Tooltip title={isIndeterminate ? 'Clear selections' : 'Mark all for delete'}>\n                        <div>\n                            <IconButton\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                onClick={handleSelector}\n                                aria-label='delete all'\n                                size='large'\n                            >\n                                {isIndeterminate ? <ClearAllIcon /> : <DeleteSweepIcon />}\n                            </IconButton>\n                        </div>\n                    </Tooltip>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n}\n\nOperationsSelector.defaultProps = {};\n\nOperationsSelector.propTypes = {\n    selectedOperations: PropTypes.shape({}).isRequired,\n    setSelectedOperation: PropTypes.func.isRequired,\n    operations: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Box from '@material-ui/core/Box';\nimport API from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nimport Resources from 'AppComponents/Apis/Details/Resources/Resources';\nimport APIRateLimiting from '../Resources/components/APIRateLimiting';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APIProductOperations() {\n    const [api, updateAPI] = useAPI();\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(api.apiThrottlingPolicy);\n    const [operationRateLimits, setOperationRateLimits] = useState([]);\n    const [isSaving, setIsSaving] = useState(false);\n    useEffect(() => {\n        // Fetch API level throttling policies only when the page get mounted for the first time `componentDidMount`\n        API.policies('api').then((response) => {\n            setOperationRateLimits(response.body.list);\n        });\n        // TODO: need to handle the error cases through catch ~tmkb\n    }, []);\n\n    useEffect(() => {\n        setApiThrottlingPolicy(api.apiThrottlingPolicy);\n    }, [api.apiThrottlingPolicy]);\n\n    /**\n     *\n     *\n     */\n    function saveChanges() {\n        setIsSaving(true);\n        updateAPI({ apiThrottlingPolicy }).finally(() => setIsSaving(false));\n    }\n    return (\n        <Grid container spacing={4}>\n            <Grid item md={12}>\n                <Typography variant='h4' gutterBottom>\n                    Product Resources\n                </Typography>\n                <Box component='div' display='inline'>\n                    <Link to={'/api-products/' + api.id + '/resources/edit'}>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                        >\n                            <EditIcon />\n                            <FormattedMessage\n                                id='Apis.Details.Resources.Resources.edit.resources.button'\n                                defaultMessage='Edit Resources'\n                            />\n                        </Button>\n                    </Link>\n                </Box>\n            </Grid>\n            <Grid item md={12}>\n                <APIRateLimiting\n                    operationRateLimits={operationRateLimits}\n                    api={api}\n                    isAPIProduct\n                    value={apiThrottlingPolicy}\n                    onChange={setApiThrottlingPolicy}\n                />\n            </Grid>\n            {!isRestricted(['apim:api_create'], api) && (\n                <Grid item md={12}>\n                    <Box ml={1}>\n                        <Button\n                            onClick={saveChanges}\n                            disabled={api.isRevision}\n                            variant='contained'\n                            size='small'\n                            color='primary'\n                        >\n                            Save\n                            {isSaving && <CircularProgress size={24} />}\n                        </Button>\n                        <Box display='inline' ml={1}>\n                            <Button\n                                size='small'\n                                variant='outlined'\n                                onClick={() => setApiThrottlingPolicy(api.apiThrottlingPolicy)}\n                            >\n                                Reset\n                            </Button>\n                        </Box>\n                    </Box>\n                </Grid>\n            )}\n\n            <Grid item md={12}>\n                <Resources\n                    hideAPIDefinitionLink\n                    disableUpdate\n                    disableRateLimiting\n                    operationProps={{ disableDelete: true }}\n                    disableMultiSelect\n                    disableAddOperation\n                />\n            </Grid>\n        </Grid>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable array-callback-return */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"operationObj\"] }] */\n\nimport React, { useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport cloneDeep from 'lodash.clonedeep';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport ProductResourcesEditWorkspace from './ProductResourcesEditWorkspace';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n    },\n    buttonWrapper: {\n        marginTop: theme.spacing(4),\n    },\n}));\n\n/**\n *\n *\n * @returns\n */\nfunction ProductResourcesEdit() {\n    const classes = useStyles();\n\n    // Get the current api product object from the context\n    const { api, updateAPI } = useContext(APIContext);\n    const apiCopy = cloneDeep(api);\n    const history = useHistory();\n    const { apis } = apiCopy;\n\n    // Define states\n    const [apiResources, setApiResources] = useState(apis);\n    const [isUpdating, setUpdating] = useState(false);\n    // Initialize the rest api libraries\n\n    const handleSave = () => {\n        setUpdating(true);\n\n        const updatePromise = updateAPI({ apis: apiResources }, true);\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n\n    const handleSaveAndDeploy = () => {\n        setUpdating(true);\n\n        const updatePromise = updateAPI({ apis: apiResources }, true);\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            }).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    };\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.titleWrapper}>\n                <Typography variant='h4' align='left' className={classes.mainTitle}>\n                    <FormattedMessage\n                        id='Apis.Details.ProductResources.ProductResourcesEdit.title'\n                        defaultMessage='Manage Resources'\n                    />\n                </Typography>\n            </div>\n            <div className={classes.contentWrapper}>\n                <ProductResourcesEditWorkspace\n                    apiResources={apiResources}\n                    setApiResources={setApiResources}\n                    api={api}\n                />\n                <div className={classes.buttonWrapper}>\n                    <Grid container direction='row' alignItems='flex-start' spacing={1}>\n                        <Grid item>\n                            <div>\n                                <CustomSplitButton\n                                    handleSave={handleSave}\n                                    handleSaveAndDeploy={handleSaveAndDeploy}\n                                    isUpdating={isUpdating}\n                                    id='save-product-resources'\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesEdit.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ProductResourcesEdit;\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n    useContext, useEffect, useState, useReducer,\n} from 'react';\nimport { Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { Link, withRouter } from 'react-router-dom';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport NewEndpointCreate from 'AppComponents/Apis/Details/Endpoints/NewEndpointCreate';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport { isRestricted } from 'AppData/AuthManager';\nimport EndpointOverview from './EndpointOverview';\nimport { createEndpointConfig, getEndpointTemplateByType } from './endpointUtils';\n\nconst styles = (theme) => ({\n    endpointTypesWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'row',\n        margin: '2px',\n    },\n    root: {\n        flexGrow: 1,\n        paddingRight: '10px',\n    },\n    buttonSection: {\n        marginTop: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginLeft: theme.spacing(2),\n    },\n    endpointValidityMessage: {\n        color: theme.palette.error.main,\n    },\n    errorMessageContainer: {\n        marginTop: theme.spacing(1),\n    },\n    implSelectRadio: {\n        padding: theme.spacing(1) / 2,\n    },\n});\n\nconst defaultSwagger = { paths: {} };\n\n/**\n * The base component of the endpoints view.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nfunction Endpoints(props) {\n    const { classes, intl, history } = props;\n    const { api, updateAPI } = useContext(APIContext);\n    const [swagger, setSwagger] = useState(defaultSwagger);\n    const [endpointValidity, setAPIEndpointsValid] = useState({ isValid: true, message: '' });\n    const [isUpdating, setUpdating] = useState(false);\n\n    const apiReducer = (initState, configAction) => {\n        const tmpEndpointConfig = cloneDeep(initState.endpointConfig);\n        const { action, value } = configAction;\n        switch (action) {\n            case 'production_endpoints':\n            case 'sandbox_endpoints': {\n                if (value) {\n                    return { ...initState, endpointConfig: { ...tmpEndpointConfig, [action]: value } };\n                }\n                delete tmpEndpointConfig[action];\n                return { ...initState, endpointConfig: { ...tmpEndpointConfig } };\n            }\n            case 'select_endpoint_category': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'set_lb_config': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'add_endpoint': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'set_advance_config': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'remove_endpoint': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'endpointImplementationType': { // set implementation status\n                const { endpointType, implementationType } = value;\n                const config = createEndpointConfig(endpointType);\n                if (endpointType === 'prototyped') {\n                    if (implementationType === 'mock') {\n                        api.generateMockScripts(api.id).then((res) => { // generates mock/sample payloads\n                            setSwagger(res.obj);\n                        });\n                        return { ...initState, endpointConfig: config, endpointImplementationType: 'INLINE' };\n                    }\n                    return { ...initState, endpointConfig: config, endpointImplementationType: 'ENDPOINT' };\n                }\n                return { ...initState, endpointConfig: config };\n            }\n            case 'endpointSecurity': { // set endpoint security\n                const config = cloneDeep(initState.endpointConfig);\n                const tmpSecurityInfo = cloneDeep(value);\n                return { ...initState, endpointConfig: { ...config, endpoint_security: tmpSecurityInfo } };\n            }\n            case 'endpoint_type': { // set endpoint type\n                const config = getEndpointTemplateByType(\n                    value.category,\n                    value.endpointType === 'address',\n                    tmpEndpointConfig,\n                );\n                const endpointSecurity = cloneDeep(initState.endpointConfig.endpoint_security);\n                return { ...initState, endpointConfig: { ...config, endpoint_security: endpointSecurity } };\n            }\n            case 'set_inline': {\n                const { endpointImplementationType, endpointConfig } = value;\n                api.generateMockScripts(api.id).then((res) => { // generates mock/sample payloads\n                    setSwagger(res.obj);\n                });\n                return { ...initState, endpointConfig, endpointImplementationType };\n            }\n            case 'set_prototyped': {\n                const { endpointImplementationType, endpointConfig } = value;\n                return {\n                    ...initState,\n                    endpointImplementationType,\n                    endpointConfig,\n                };\n            }\n            case 'set_awsCredentials': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'select_endpoint_type': {\n                const { endpointImplementationType, endpointConfig } = value;\n                return {\n                    ...initState,\n                    endpointConfig,\n                    endpointImplementationType,\n                };\n            }\n            default: {\n                return initState;\n            }\n        }\n    };\n    const [apiObject, apiDispatcher] = useReducer(apiReducer, api.toJSON());\n\n    /**\n     * Method to update the api.\n     *\n     * @param {boolean} isRedirect Used for dynamic endpoints to redirect to the runtime config page.\n     */\n    const handleSave = (isRedirect) => {\n        const { endpointConfig, endpointImplementationType } = apiObject;\n        setUpdating(true);\n        if (endpointImplementationType === 'INLINE') {\n            api.updateSwagger(swagger).then((resp) => {\n                setSwagger(resp.obj);\n            }).then(() => {\n                updateAPI({ endpointConfig, endpointImplementationType });\n            }).finally(() => {\n                setUpdating(false);\n                if (isRedirect) {\n                    history.push('/apis/' + api.id + '/runtime-configuration');\n                }\n            });\n        } else {\n            updateAPI(apiObject).finally(() => {\n                setUpdating(false);\n                if (isRedirect) {\n                    history.push('/apis/' + api.id + '/runtime-configuration');\n                }\n            });\n        }\n    };\n\n    const handleSaveAndDeploy = () => {\n        const { endpointConfig, endpointImplementationType, endpointSecurity } = apiObject;\n        setUpdating(true);\n        if (endpointImplementationType === 'INLINE') {\n            api.updateSwagger(swagger).then((resp) => {\n                setSwagger(resp.obj);\n            }).then(() => {\n                updateAPI({ endpointConfig, endpointImplementationType, endpointSecurity });\n            }).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n        } else {\n            updateAPI(apiObject).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n        }\n    };\n\n    /**\n     * Validate the provided endpoint config object.\n     *\n     * @param {any} endpointConfig The provided endpoint config for validation.\n     * @param {string} implementationType The api implementation type (INLINE/ ENDPOINT)\n     * @return {{isValid: boolean, message: string}} The endpoint validity information.\n     * */\n    const validate = (implementationType) => {\n        const { endpointConfig } = apiObject;\n        if (endpointConfig && endpointConfig.endpoint_security) {\n            const { production, sandbox } = endpointConfig.endpoint_security;\n            if (production && production.enabled) {\n                if (production.type === 'OAUTH') {\n                    if (production.grantType === 'PASSWORD') {\n                        if (production.tokenUrl === null\n                            || production.tokenUrl === ''\n                            || production.clientId === null\n                            || production.clientSecret === null\n                            || production.username === null\n                            || production.username === ''\n                            || production.password === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.password.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret/Username/Password should not be empty',\n                                }),\n                            };\n                        }\n                    } else if (production.grantType === 'CLIENT_CREDENTIALS') {\n                        if (production.tokenUrl === null\n                            || production.tokenUrl === ''\n                            || production.clientId === null\n                            || production.clientSecret === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.client.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret should not be empty',\n                                }),\n                            };\n                        }\n                    }\n                } else if (production.username === '' || production.password === null) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.security.username.error',\n                            defaultMessage: 'Endpoint Security User Name/ Password should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (sandbox && sandbox.enabled) {\n                if (sandbox.type === 'OAUTH') {\n                    if (sandbox.grantType === 'PASSWORD') {\n                        if (sandbox.tokenUrl === null\n                            || sandbox.tokenUrl === ''\n                            || sandbox.clientId === null\n                            || sandbox.clientSecret === null\n                            || sandbox.username === null\n                            || sandbox.username === ''\n                            || sandbox.password === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.password.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret/Username/Password should not be empty',\n                                }),\n                            };\n                        }\n                    } else if (sandbox.grantType === 'CLIENT_CREDENTIALS') {\n                        if (sandbox.tokenUrl === null\n                            || sandbox.tokenUrl === ''\n                            || sandbox.clientId === null\n                            || sandbox.clientSecret === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.client.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret should not be empty',\n                                }),\n                            };\n                        }\n                    }\n                } else if (sandbox.username === '' || sandbox.password === null) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.security.username.error',\n                            defaultMessage: 'Endpoint Security User Name/ Password should not be empty',\n                        }),\n                    };\n                }\n            }\n        }\n        if (endpointConfig === null) {\n            return { isValid: true, message: '' };\n        }\n        const endpointType = endpointConfig.endpoint_type;\n        if (endpointType === 'awslambda') {\n            if (endpointConfig.access_method === 'stored') {\n                if (endpointConfig.amznAccessKey === '' || endpointConfig.amznSecretKey === ''\n                || endpointConfig.amznRegion === '') {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.accessKey.secretKey.error',\n                            defaultMessage: 'Access Key, Secret Key and Region should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (endpointConfig.amznAccessKey !== '' && endpointConfig.amznSecretKey === 'AWS_SECRET_KEY') {\n                return {\n                    isValid: false,\n                    message: '',\n                };\n            }\n        } else if (endpointType === 'load_balance') {\n            /**\n             * Checklist:\n             *  production/ sandbox endpoints should be an array.\n             *  production/ sandbox endpoint [0] must be present.\n             * */\n            if (endpointConfig.production_endpoints && endpointConfig.production_endpoints.length > 0) {\n                if (!endpointConfig.production_endpoints[0].url\n                    || (endpointConfig.production_endpoints[0].url\n                        && endpointConfig.production_endpoints[0].url === '')) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.prod.endpoint.loadbalance',\n                            defaultMessage: 'Default Production Endpoint should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (endpointConfig.sandbox_endpoints && endpointConfig.sandbox_endpoints.length > 0) {\n                if (!endpointConfig.sandbox_endpoints[0].url\n                    || (endpointConfig.sandbox_endpoints[0].url && endpointConfig.sandbox_endpoints[0].url === '')) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.sandbox.endpoint.loadbalance',\n                            defaultMessage: 'Default Sandbox Endpoint should not be empty',\n                        }),\n                    };\n                }\n            }\n        } else {\n            let isValidEndpoint = false;\n            if (endpointConfig.implementation_status === 'prototyped') {\n                if (implementationType === 'ENDPOINT') {\n                    if (endpointConfig.production_endpoints && endpointConfig.production_endpoints.url === '') {\n                        return {\n                            isValid: false,\n                            message: intl.formatMessage({\n                                id: 'Apis.Details.Endpoints.Endpoints.missing.prototype.url',\n                                defaultMessage: 'Prototype Endpoint URL should not be empty',\n                            }),\n                        };\n                    }\n                }\n                isValidEndpoint = true;\n            } else if (endpointConfig.production_endpoints && !endpointConfig.sandbox_endpoints) {\n                isValidEndpoint = endpointConfig.production_endpoints.url !== '';\n            } else if (endpointConfig.sandbox_endpoints && !endpointConfig.production_endpoints) {\n                isValidEndpoint = endpointConfig.sandbox_endpoints.url !== '';\n            } else if (!endpointConfig.sandbox_endpoints && !endpointConfig.production_endpoints) {\n                isValidEndpoint = false;\n            } else {\n                isValidEndpoint = endpointConfig.sandbox_endpoints.url !== ''\n                        || endpointConfig.production_endpoints.url !== '';\n            }\n            if (endpointConfig.sandbox_endpoints) {\n                isValidEndpoint &&= endpointConfig.sandbox_endpoints.url !== '';\n            }\n            if (endpointConfig.production_endpoints) {\n                isValidEndpoint &&= endpointConfig.production_endpoints.url !== '';\n            }\n            return !isValidEndpoint ? {\n                isValid: false,\n                message: intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.Endpoints.missing.endpoint.error',\n                    defaultMessage: 'Either one of Production or Sandbox Endpoints should be added.',\n                }),\n            } : { isValid: true, message: '' };\n        }\n        return {\n            isValid: true,\n            message: '',\n        };\n    };\n\n    useEffect(() => {\n        if (api.type !== 'WS') {\n            api.getSwagger(apiObject.id).then((resp) => {\n                setSwagger(resp.obj);\n            }).catch((err) => {\n                console.err(err);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        setAPIEndpointsValid(validate(apiObject.endpointImplementationType));\n    }, [apiObject]);\n\n    const saveAndRedirect = () => {\n        handleSave(true);\n    };\n    /**\n     * Method to update the swagger object.\n     *\n     * @param {any} swaggerObj The updated swagger object.\n     * */\n    const changeSwagger = (swaggerObj) => {\n        setSwagger(swaggerObj);\n    };\n\n    /**\n     * Generate endpoint configuration based on the selected endpoint type and set to the api object.\n     *\n     * @param {string} endpointType The endpoint type.\n     * @param {string} implementationType The endpoint implementationType. (Required only for prototype endpoints)\n     * */\n    const generateEndpointConfig = (endpointType, implementationType) => {\n        apiDispatcher({ action: 'endpointImplementationType', value: { endpointType, implementationType } });\n    };\n\n    return (\n        <>\n            {/* Since the api is set to the state in component did mount, check both the api and the apiObject. */}\n            {(api.endpointConfig === null && apiObject.endpointConfig === null)\n                ? <NewEndpointCreate generateEndpointConfig={generateEndpointConfig} apiType={apiObject.type} />\n                : (\n                    <div className={classes.root}>\n                        <Typography id='itest-api-details-endpoints-head' variant='h4' align='left' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.Endpoints.endpoints.header'\n                                defaultMessage='Endpoints'\n                            />\n                        </Typography>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={12} className={classes.endpointsContainer}>\n                                    <EndpointOverview\n                                        swaggerDef={swagger}\n                                        updateSwagger={changeSwagger}\n                                        api={apiObject}\n                                        onChangeAPI={apiDispatcher}\n                                        endpointsDispatcher={apiDispatcher}\n                                        saveAndRedirect={saveAndRedirect}\n                                    />\n                                </Grid>\n                            </Grid>\n                            {\n                                endpointValidity.isValid\n                                    ? <div />\n                                    : (\n                                        <Grid item className={classes.errorMessageContainer}>\n                                            <Typography className={classes.endpointValidityMessage}>\n                                                {endpointValidity.message}\n                                            </Typography>\n                                        </Grid>\n                                    )\n                            }\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='flex-start'\n                                spacing={1}\n                                className={classes.buttonSection}\n                            >\n                                <Grid item>\n                                    {api.isRevision || !endpointValidity.isValid\n                                        || isRestricted(['apim:api_create'], api) ? (\n                                            <Button\n                                                disabled\n                                                type='submit'\n                                                variant='contained'\n                                                color='primary'\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.save'\n                                                    defaultMessage='Save'\n                                                />\n                                            </Button>\n                                        ) : (\n                                            <CustomSplitButton\n                                                handleSave={handleSave}\n                                                handleSaveAndDeploy={handleSaveAndDeploy}\n                                                isUpdating={isUpdating}\n                                                id='endpoint-save-btn'\n                                            />\n                                        )}\n                                </Grid>\n                                <Grid item>\n                                    <Link to={'/apis/' + api.id + '/overview'}>\n                                        <Button>\n                                            <FormattedMessage\n                                                id='Apis.Details.Endpoints.Endpoints.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </Grid>\n                                {isRestricted(['apim:api_create'], api)\n                                && (\n                                    <Grid item>\n                                        <Typography variant='body2' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Endpoints.Endpoints.update.not.allowed'\n                                                defaultMessage={'*You are not authorized to update endpoints of'\n                                                + ' the API due to insufficient permissions'}\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </div>\n                    </div>\n                )}\n        </>\n\n    );\n}\n\nEndpoints.propTypes = {\n    classes: PropTypes.shape({\n        root: PropTypes.shape({}),\n        buttonSection: PropTypes.shape({}),\n        endpointTypesWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({}).isRequired,\n};\n\nexport default withRouter(injectIntl(withStyles(styles)(Endpoints)));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useState } from 'react';\nimport {\n    Typography,\n    Grid,\n    withStyles,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n    FormControl,\n    Divider,\n    Button,\n    Card,\n    CardContent,\n    CardActions,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst styles = (theme) => ({\n    inlineMessageContainer: {\n        marginBottom: theme.spacing(1),\n    },\n    endpointTypeCard: {\n        margin: theme.spacing(1),\n        maxWidth: theme.spacing(30),\n        transition: 'box-shadow 0.3s ease-in-out',\n        height: theme.spacing(40),\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    cardContent: {\n        height: theme.spacing(40),\n    },\n    content: {\n        marginTop: theme.spacing(1),\n    },\n    cardActions: {\n        justifyContent: 'flex-end',\n        borderTop: 'solid #e0e0e0 thin',\n    },\n});\n\n/**\n * Component to create new endpoint.\n * This component will render if the api object does not have an endpoint configuration, letting users to create a\n * new endpoint configuration based on their requirement.\n * Following endpoint types are supported.\n * 1. HTTP/ SOAP endpoints\n * 2. Prototyped/ Mock endpoints\n * 3. AWS Lambda endpoints\n * 4. Dynamic Endpoints\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nfunction NewEndpointCreate(props) {\n    const {\n        classes,\n        intl,\n        generateEndpointConfig,\n        apiType,\n    } = props;\n    const [endpointImplType, setImplType] = useState('mock');\n    const endpointTypes = [\n        {\n            type: 'http',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.http.endpoint',\n                defaultMessage: 'HTTP/ REST Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.http.endpoint.description',\n                defaultMessage: 'A REST API endpoint based on a URI template.',\n            }),\n            options: null,\n            disabled: ['SOAPTOREST'],\n        },\n        {\n            type: 'address',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.soap.endpoint',\n                defaultMessage: 'HTTP/ SOAP Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.soap.endpoint.description',\n                defaultMessage: 'The direct URI of the web service.',\n            }),\n            options: null,\n            disabled: ['GRAPHQL', 'SSE'],\n        },\n        {\n            type: 'prototyped',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.prototype.endpoint',\n                defaultMessage: 'Prototype Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.prototype.endpoint.description',\n                defaultMessage: 'Use the inbuilt JavaScript engine to prototype the API or provide an endpoint'\n                    + ' to a prototype API. The inbuilt JavaScript engine does support prototype SOAP APIs',\n            }),\n            options: [\n                {\n                    type: 'mock',\n                    name: intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.NewEndpointCreate.prototype.implementation',\n                        defaultMessage: 'Prototype Implementation',\n                    }),\n                    disabled: ['SOAP', 'SOAPTOREST', 'SSE'],\n                },\n                {\n                    type: 'prototyped',\n                    name: intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.NewEndpointCreate.default.prototype.endpoints',\n                        defaultMessage: 'Prototype Endpoint',\n                    }),\n                    disabled: [],\n                },\n            ],\n            disabled: ['GRAPHQL', 'SSE'],\n        },\n        {\n            type: 'dynamic',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.dynamic.endpoint',\n                defaultMessage: 'Dynamic Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.dynamic.endpoint.description',\n                defaultMessage: 'If you need to send the request to the URI specified in the TO header.',\n            }),\n            options: null,\n            disabled: ['SSE'],\n        },\n        {\n            type: 'awslambda',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.awslambda.endpoint',\n                defaultMessage: 'AWS Lambda Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.awslambda.endpoint.description',\n                defaultMessage: 'If you need to invoke AWS Lambda functions through API gateway.',\n            }),\n            options: null,\n            disabled: ['SOAPTOREST', 'GRAPHQL', 'SSE'],\n        },\n    ];\n\n    const eligibleTypes = endpointTypes.filter((type) => !type.disabled.includes(apiType)).map((type) => {\n        return type;\n    });\n\n    return (\n        <>\n            <Typography variant='h4' align='left' className={classes.titleWrapper}>\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.NewEndpointCreate.add.endpoints.header'\n                    defaultMessage='Select an Endpoint Type to Add'\n                />\n            </Typography>\n            <Grid container justify='flex-start' spacing={2}>\n                {eligibleTypes.map(((type) => {\n                    return (\n                        <Grid item className={classes.inlineMessageContainer}>\n                            <Card className={classes.endpointTypeCard}>\n                                <CardContent className={classes.cardContent}>\n                                    <Typography variant='h5' component='h3' className={classes.head}>\n                                        {type.name}\n                                    </Typography>\n                                    <Divider />\n                                    <Typography component='p' className={classes.content}>\n                                        {type.description}\n                                    </Typography>\n                                    {type.options\n                                        ? (\n                                            <div>\n                                                <FormControl component='fieldset' className={classes.formControl}>\n                                                    <RadioGroup\n                                                        aria-label='EndpointType'\n                                                        name='endpointType'\n                                                        className={classes.radioGroup}\n                                                        value={endpointImplType}\n                                                        onChange={(event) => { setImplType(event.target.value); }}\n                                                    >\n                                                        {type.options.filter((types) => !types.disabled\n                                                            .includes(apiType)).map(((option) => {\n                                                            return (\n                                                                <FormControlLabel\n                                                                    value={option.type}\n                                                                    control={<Radio color='primary' />}\n                                                                    label={option.name}\n                                                                />\n                                                            );\n                                                        }))}\n                                                    </RadioGroup>\n                                                </FormControl>\n                                            </div>\n                                        )\n                                        : <div /> }\n                                </CardContent>\n                                <CardActions className={classes.cardActions}>\n                                    <Button\n                                        color='primary'\n                                        className={classes.button}\n                                        onClick={() => generateEndpointConfig(type.type, endpointImplType)}\n                                        data-testid={type.name.replace(/\\s/g, '').toLowerCase() + '-add-btn'}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.NewEndpointCreate.create.button'\n                                            defaultMessage='Add'\n                                        />\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    );\n                }))}\n            </Grid>\n        </>\n    );\n}\n\nNewEndpointCreate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    generateEndpointConfig: PropTypes.func.isRequired,\n    apiType: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(injectIntl(NewEndpointCreate));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n    useEffect, useState, useCallback,\n} from 'react';\nimport {\n    FormControl,\n    Grid,\n    Paper,\n    Typography,\n    withStyles,\n    Radio,\n    FormControlLabel,\n    Collapse,\n    RadioGroup, Checkbox, Dialog, DialogTitle, DialogContent, IconButton, Button, DialogActions, Icon,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Progress } from 'AppComponents/Shared';\n\nimport cloneDeep from 'lodash.clonedeep';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport InlineEndpoints from 'AppComponents/Apis/Details/Endpoints/Prototype/InlineEndpoints';\nimport {\n    getEndpointTypeProperty,\n    createEndpointConfig,\n    getEndpointTemplate,\n} from './endpointUtils';\nimport GeneralConfiguration from './GeneralConfiguration';\nimport LoadbalanceFailoverConfig from './LoadbalanceFailoverConfig';\nimport GenericEndpoint from './GenericEndpoint';\nimport AdvanceEndpointConfig from './AdvancedConfig/AdvanceEndpointConfig';\nimport EndpointSecurity from './GeneralConfiguration/EndpointSecurity';\nimport Credentials from './AWSLambda/Credentials.jsx';\n\nconst styles = (theme) => ({\n    listing: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    endpointContainer: {\n        paddingLeft: theme.spacing(2),\n        padding: theme.spacing(1),\n    },\n    endpointName: {\n        paddingLeft: theme.spacing(1),\n        fontSize: '1rem',\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n    endpointTypesWrapper: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(2),\n    },\n    sandboxHeading: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    endpointsWrapperLeft: {\n        padding: theme.spacing(1),\n        borderRight: '#c4c4c4',\n        borderRightStyle: 'solid',\n        borderRightWidth: 'thin',\n    },\n    endpointsWrapperRight: {\n        padding: theme.spacing(1),\n    },\n    endpointsTypeSelectWrapper: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        padding: theme.spacing(1),\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    endpointTypesSelectWrapper: {\n        display: 'flex',\n    },\n    defaultEndpointWrapper: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    configDialogHeader: {\n        fontWeight: '600',\n    },\n    addLabel: {\n        padding: theme.spacing(2),\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    button: {\n        textTransform: 'none',\n    },\n});\n\nconst endpointTypes = [\n    { key: 'http', value: 'HTTP/Passthrough' },\n    { key: 'default', value: 'Dynamic Endpoints' },\n    { key: 'address', value: 'HTTP/SOAP Endpoint' },\n    { key: 'prototyped', value: 'Prototype Endpoint' },\n    { key: 'INLINE', value: 'Prototype Implementation' },\n    { key: 'awslambda', value: 'AWS Lambda' },\n];\n\n/**\n * The endpoint overview component. This component holds the views of endpoint creation and configuration.\n * @param {any} props The props that are being passed to the component.\n * @returns {any} HTML view of the endpoints overview.\n */\nfunction EndpointOverview(props) {\n    const {\n        classes,\n        api,\n        endpointsDispatcher,\n        swaggerDef,\n        updateSwagger,\n        saveAndRedirect,\n    } = props;\n    const { endpointConfig } = api;\n    const [endpointType, setEndpointType] = useState(endpointTypes[0]);\n    const [supportedEnpointTypes, setSupportedEndpointType] = useState([]);\n\n    const [epConfig, setEpConfig] = useState(endpointConfig);\n    const [endpointSecurityInfo, setEndpointSecurityInfo] = useState(null);\n    const [advanceConfigOptions, setAdvancedConfigOptions] = useState({\n        open: false,\n        index: 0,\n        type: '',\n        category: '',\n        config: undefined,\n    });\n    const [endpointSecurityConfig, setEndpointSecurityConfig] = useState({\n        open: false,\n        type: '',\n        category: '',\n        config: undefined,\n    });\n    const [endpointCategory, setEndpointCategory] = useState({ sandbox: false, prod: false });\n    const [typeChangeConfirmation, setTypeChangeConfirmation] = useState({ openDialog: false });\n\n    const handleToggleEndpointSecurity = () => {\n        const tmpSecurityInfo = !endpointSecurityInfo ? {\n            production: {\n                enabled: false,\n                type: null,\n                username: null,\n                password: null,\n                grantType: null,\n                tokenUrl: null,\n                clientId: null,\n                clientSecret: null,\n                customParameters: {},\n            },\n            sandbox: {\n                enabled: false,\n                type: null,\n                username: null,\n                password: null,\n                grantType: null,\n                tokenUrl: null,\n                clientId: null,\n                clientSecret: null,\n                customParameters: {},\n            },\n        } : endpointSecurityInfo;\n        setEndpointSecurityInfo(tmpSecurityInfo);\n    };\n\n    /**\n     * Method to get the type of the endpoint. (HTTP/REST or HTTP/SOAP)\n     * In failover/ loadbalance cases, the endpoint type is presented in the endpoints list. Therefore that property\n     * needs to be extracted separately.\n     *\n     * @param {Object} apiObject  The representative type of the endpoint.\n     * @return {string} The type of the endpoint.\n     * */\n    const getEndpointType = (apiObject) => {\n        const type = apiObject.endpointConfig && apiObject.endpointConfig.endpoint_type;\n        if (apiObject.endpointImplementationType === 'INLINE') {\n            return endpointTypes[4];\n        } else if (apiObject.endpointImplementationType === 'ENDPOINT'\n            && apiObject.endpointConfig.implementation_status === 'prototyped') {\n            return endpointTypes[3];\n        } else if (type === 'http') {\n            return endpointTypes[0];\n        } else if (type === 'default') {\n            return endpointTypes[1];\n        } else if (type === 'address') {\n            return endpointTypes[2];\n        } else if (type === 'awslambda') {\n            return endpointTypes[5];\n        } else {\n            const availableEndpoints = (endpointConfig.production_endpoints && endpointConfig.production_endpoints)\n                || (endpointConfig.sandbox_endpoints && endpointConfig.sandbox_endpoints);\n            // Handle the all endpoints de-select condition... Rollback to http.\n            if (!availableEndpoints) {\n                return endpointTypes[0];\n            }\n            if (Array.isArray(availableEndpoints)) {\n                return availableEndpoints[0].endpoint_type !== undefined\n                    ? endpointTypes[2] : endpointTypes[0];\n            }\n            return availableEndpoints.endpoint_type !== undefined\n                ? endpointTypes[2] : endpointTypes[0];\n        }\n    };\n\n    /**\n     * Method to get the supported endpoint types by api type.\n     *\n     * @param {Object} apiObject  The representative type of the endpoint.\n     * @return {string} The supported endpoint types.\n     * */\n    const getSupportedType = (apiObject) => {\n        const { type } = apiObject;\n        let supportedEndpointTypes = [];\n        if (type === 'GRAPHQL') {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/Passthrough' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n            ];\n        } else if (type === 'SOAP' || type === 'SOAPTOREST') {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/Passthrough' },\n                { key: 'address', value: 'HTTP/SOAP Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n                { key: 'prototyped', value: 'Prototype Endpoint' },\n            ];\n        } else if (type === 'SSE') {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/Passthrough' },\n            ];\n        } else {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/Passthrough' },\n                { key: 'address', value: 'HTTP/SOAP Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n                { key: 'prototyped', value: 'Prototype Endpoint' },\n                { key: 'INLINE', value: 'Prototype Implementation' },\n                { key: 'awslambda', value: 'AWS Lambda' },\n            ];\n        }\n        return supportedEndpointTypes;\n    };\n\n    useEffect(() => {\n        const supportedTypeLists = getSupportedType(api);\n        const epType = getEndpointType(api);\n        if (epType.key !== 'INLINE') {\n            setEndpointCategory({\n                prod: !!endpointConfig.production_endpoints,\n                sandbox: !!endpointConfig.sandbox_endpoints,\n            });\n        }\n        setSupportedEndpointType(supportedTypeLists);\n        setEpConfig(endpointConfig);\n        setEndpointType(epType);\n        setEndpointSecurityInfo(endpointConfig.endpoint_security);\n    }, [props]);\n\n\n    const getEndpoints = (type) => {\n        if (epConfig[type]) {\n            return epConfig[type].length > 0\n                ? epConfig[type][0].url : epConfig[type].url;\n        }\n        return '';\n    };\n\n    const handleOnChangeEndpointCategoryChange = (category) => {\n        let endpointConfigCopy = cloneDeep(endpointConfig);\n        if (category === 'prod') {\n            const endpointProp = 'production_endpoints';\n            if (endpointCategory[category]) {\n                delete endpointConfigCopy[endpointProp];\n                if (endpointConfigCopy.endpointType === 'failover') {\n                    delete endpointConfigCopy.production_failovers;\n                }\n            } else if (endpointConfigCopy.endpointType === 'load_balance') {\n                endpointConfigCopy[endpointProp] = [getEndpointTemplate(endpointType.key)];\n            } else if (endpointConfigCopy.endpointType === 'failover') {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n                endpointConfigCopy.production_failovers = [];\n            } else {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n            }\n        } else {\n            const endpointProp = 'sandbox_endpoints';\n            if (endpointCategory[category]) {\n                delete endpointConfigCopy[endpointProp];\n                if (endpointConfigCopy.endpointType === 'failover') {\n                    delete endpointConfigCopy.sandbox_failovers;\n                }\n            } else if (endpointConfigCopy.endpointType === 'load_balance') {\n                endpointConfigCopy[endpointProp] = [getEndpointTemplate(endpointType.key)];\n            } else if (endpointConfigCopy.endpointType === 'failover') {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n                endpointConfigCopy.sandbox_failovers = [];\n            } else {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n            }\n        }\n        // Check whether, config has either prod/ sandbox endpoints. If not, reSet the endpoint type to http\n        if (!endpointConfigCopy.production_endpoints && !endpointConfigCopy.sandbox_endpoints) {\n            endpointConfigCopy = createEndpointConfig('http');\n        }\n        endpointsDispatcher({ action: 'select_endpoint_category', value: endpointConfigCopy });\n    };\n\n    /**\n     * Method to modify the endpoint represented by the given parameters.\n     *\n     * If url is null, remove the endpoint from the endpoint config.\n     *\n     * @param {number} index The index of the endpoint in the listing.\n     * @param {string} category The endpoint category. (production/ sand box)\n     * @param {string} url The new endpoint url.\n     * */\n    const editEndpoint = (index, category, url) => {\n        let modifiedEndpoint = null;\n        // Make a copy of the endpoint config.\n        const endpointConfigCopy = cloneDeep(epConfig);\n        /*\n        * If the index > 0, it means that the endpoint is load balance or fail over.\n        * Otherwise it is the default endpoint. (index = 0)\n        * */\n        if (index > 0) {\n            const endpointTypeProperty = getEndpointTypeProperty(endpointConfigCopy.endpoint_type, category);\n            modifiedEndpoint = endpointConfigCopy[endpointTypeProperty];\n            /*\n            * In failover case, the failover endpoints are a separate object. But in endpoint listing, since we\n            *  consider all the endpoints as a single list, to get the real index of the failover endpoint we use\n            *  index - 1.\n            * */\n            if (endpointConfigCopy.endpoint_type === 'failover') {\n                modifiedEndpoint[index - 1].url = url.trim();\n            } else {\n                modifiedEndpoint[index].url = url.trim();\n            }\n            endpointConfigCopy[endpointTypeProperty] = modifiedEndpoint;\n        } else if (url !== '') {\n            modifiedEndpoint = endpointConfigCopy[category];\n\n            /*\n            * In this case, we are editing the default endpoint.\n            * If the endpoint type is load balance, the production_endpoints or the sandbox_endpoint object is an\n            *  array. Otherwise, in failover mode, the default endpoint is an object.\n            *\n            * So, we check whether the endpoints is an array or an object.\n            *\n            * If This is the first time a user creating an endpoint endpoint config object does not have\n            *  production_endpoints or sandbox_endpoints object.\n            * Therefore create new object and add to the endpoint config.\n            * */\n            if (!modifiedEndpoint) {\n                modifiedEndpoint = getEndpointTemplate(endpointConfigCopy.endpoint_type);\n                modifiedEndpoint.url = url.trim();\n            } else if (Array.isArray(modifiedEndpoint)) {\n                if (url === '') {\n                    modifiedEndpoint.splice(0, 1);\n                } else {\n                    modifiedEndpoint[0].url = url.trim();\n                }\n            } else {\n                modifiedEndpoint.url = url.trim();\n            }\n            endpointConfigCopy[category] = modifiedEndpoint;\n        } else {\n            /*\n            * If the url is empty, delete the respective endpoint object.\n            * */\n            delete endpointConfigCopy[category];\n        }\n        endpointsDispatcher({ action: category, value: modifiedEndpoint });\n    };\n\n    const handleEndpointCategorySelect = (event) => {\n        endpointsDispatcher({\n            action: 'endpoint_type',\n            value: { category: event.target.value, endpointType: endpointType.key },\n        });\n    };\n\n    /**\n     * Handles the endpoint type change functionality.\n     *\n     * @param {string} value The selected endpoint type.\n     * */\n    const changeEndpointType = (value) => {\n        setTypeChangeConfirmation({ openDialog: false });\n        const selectedKey = typeChangeConfirmation.type || value;\n        if (selectedKey === 'INLINE') {\n            const tmpConfig = createEndpointConfig('prototyped');\n            endpointsDispatcher({\n                action: 'set_inline',\n                value: {\n                    endpointConfig: tmpConfig,\n                    endpointImplementationType: 'INLINE',\n                },\n            });\n        } else if (selectedKey === 'prototyped') {\n            const tmpConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'set_prototyped',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: tmpConfig,\n                },\n            });\n        } else if (selectedKey === 'awslambda') {\n            const generatedEndpointConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'select_endpoint_type',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: { ...generatedEndpointConfig },\n                },\n            });\n        } else {\n            const generatedEndpointConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'select_endpoint_type',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: { ...generatedEndpointConfig },\n                },\n            });\n        }\n    };\n\n    /**\n     * Handles the endpoint type select event. If endpoint config has existing values, show confirmation dialog.\n     * @param {any} event The select event.\n     * */\n    const handleEndpointTypeSelect = (event) => {\n        // Check whether the endpoint Config has values.\n        if (epConfig.production_endpoints || epConfig.sandbox_endpoints) {\n            // Show confirmation dialog\n            setTypeChangeConfirmation({ type: event.target.value, openDialog: true });\n        } else {\n            changeEndpointType(event.target.value);\n        }\n    };\n\n    /**\n     * Method to get the advance configuration from the selected endpoint.\n     *\n     * @param {number} index The selected endpoint index\n     * @param {string} epType The type of the endpoint. (loadbalance/ failover)\n     * @param {string} category The endpoint category (Production/ sandbox)\n     * @return {object} The advance config object of the endpoint.\n     * */\n    const getAdvanceConfig = (index, epType, category) => {\n        const endpointTypeProperty = getEndpointTypeProperty(epType, category);\n        let advanceConfig = {};\n        if (index > 0) {\n            if (epConfig.endpoint_type === 'failover') {\n                advanceConfig = epConfig[endpointTypeProperty][index - 1].config;\n            } else {\n                advanceConfig = epConfig[endpointTypeProperty][index].config;\n            }\n        } else {\n            const endpointInfo = epConfig[endpointTypeProperty];\n            if (Array.isArray(endpointInfo)) {\n                advanceConfig = endpointInfo[0].config;\n            } else {\n                advanceConfig = endpointInfo.config;\n            }\n        }\n        return advanceConfig;\n    };\n\n    /**\n     * Method to open/ close the advance configuration dialog. This method also sets some information about the\n     * seleted endpoint type/ category and index.\n     *\n     * @param {number} index The index of the selected endpoint.\n     * @param {string} type The endpoint type\n     * @param {string} category The endpoint category.\n     * */\n    const toggleAdvanceConfig = (index, type, category) => {\n        const advanceEPConfig = getAdvanceConfig(index, type, category);\n        setAdvancedConfigOptions(() => {\n            return ({\n                open: !advanceConfigOptions.open,\n                index,\n                type,\n                category,\n                config: advanceEPConfig === undefined ? {} : advanceEPConfig,\n            });\n        });\n    };\n\n    const toggleEndpointSecurityConfig = (type, category) => {\n        handleToggleEndpointSecurity();\n        setEndpointSecurityConfig(() => {\n            return ({\n                open: !endpointSecurityConfig.open,\n                type,\n                category,\n                config: endpointSecurityInfo === undefined ? {} : endpointSecurityInfo,\n            });\n        });\n    };\n\n    /**\n     * Method to handle the endpoint security changes.\n     * @param {string} value The value\n     * @param {string} type The security property that is being modified.\n     * */\n    const handleEndpointSecurityChange = (value, type) => {\n        endpointsDispatcher({\n            action: 'endpointSecurity',\n            value: { ...endpointSecurityInfo, [type]: value },\n        });\n    };\n\n    const saveEndpointSecurityConfig = (endpointSecurityObj, enType) => {\n        endpointsDispatcher({\n            action: 'endpointSecurity',\n            value: {\n                ...endpointSecurityInfo,\n                [enType]: {\n                    ...endpointSecurityInfo[enType],\n                    enabled: endpointSecurityObj.type !== 'NONE'\n                        ? endpointSecurityInfo[enType].enabled = true : endpointSecurityInfo[enType].enabled = false,\n                },\n            },\n        });\n        setEndpointSecurityConfig({ open: false });\n    };\n\n    const closeEndpointSecurityConfig = () => {\n        setEndpointSecurityConfig({ open: false });\n    };\n\n    /**\n     * Method to save the advance configurations.\n     *\n     * @param {object} advanceConfig The advance configuration object.\n     * */\n    const saveAdvanceConfig = (advanceConfig) => {\n        const config = cloneDeep(epConfig);\n        const endpointConfigProperty = getEndpointTypeProperty(\n            advanceConfigOptions.type, advanceConfigOptions.category,\n        );\n        const selectedEndpoints = config[endpointConfigProperty];\n        if (Array.isArray(selectedEndpoints)) {\n            if (advanceConfigOptions.type === 'failover') {\n                selectedEndpoints[advanceConfigOptions.index - 1].config = advanceConfig;\n            } else {\n                selectedEndpoints[advanceConfigOptions.index].config = advanceConfig;\n            }\n        } else {\n            selectedEndpoints.config = advanceConfig;\n        }\n        setAdvancedConfigOptions({ open: false });\n        endpointsDispatcher({\n            action: 'set_advance_config',\n            value: { ...config, [endpointConfigProperty]: selectedEndpoints },\n        });\n    };\n\n    /**\n     * Method to close the advance configuration dialog box.\n     * */\n    const closeAdvanceConfig = () => {\n        setAdvancedConfigOptions({ open: false });\n    };\n\n    /**\n     * Method to update the resource paths object in the swagger.\n     * @param {any} paths The updated paths object.\n     * */\n    const updatePaths = useCallback(\n        (paths) => {\n            updateSwagger({ ...swaggerDef, paths });\n        },\n        [swaggerDef],\n    );\n\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function epCategoryOnChangeHandler(event) {\n        handleOnChangeEndpointCategoryChange('prod', event);\n    }\n\n    return (\n        <div className={classes.overviewWrapper}>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    {api.type === 'WS' ? <div /> : (\n                        <FormControl component='fieldset' className={classes.formControl}>\n                            <RadioGroup\n                                aria-label='EndpointType'\n                                name='endpointType'\n                                className={classes.radioGroup}\n                                value={endpointType.key}\n                                onChange={handleEndpointTypeSelect}\n                            >\n                                {supportedEnpointTypes.map((endpoint) => {\n                                    if (api.lifeCycleStatus === 'CREATED') {\n                                        return (\n                                            <FormControlLabel\n                                                value={endpoint.key}\n                                                control={(\n                                                    <Radio\n                                                        disabled={(isRestricted(['apim:api_create'], api))}\n                                                        color='primary'\n                                                        id={endpoint.key}\n                                                    />\n                                                )}\n                                                label={endpoint.value}\n                                            />\n                                        );\n                                    } else if (api.lifeCycleStatus === 'PROTOTYPED') {\n                                        if (endpoint.key === 'prototyped' || endpoint.key === 'INLINE') {\n                                            return (\n                                                <FormControlLabel\n                                                    value={endpoint.key}\n                                                    control={(\n                                                        <Radio\n                                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                                            color='primary'\n                                                        />\n                                                    )}\n                                                    label={endpoint.value}\n                                                />\n                                            );\n                                        }\n                                    } else if (endpoint.key !== 'prototyped' && endpoint.key !== 'INLINE') {\n                                        return (\n                                            <FormControlLabel\n                                                value={endpoint.key}\n                                                control={(\n                                                    <Radio\n                                                        disabled={(isRestricted(['apim:api_create'], api))}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={endpoint.value}\n                                            />\n                                        );\n                                    }\n                                    return <div />;\n                                })}\n                            </RadioGroup>\n                        </FormControl>\n                    )}\n                </Grid>\n                <Grid item xs={12}>\n                    {endpointType.key === 'INLINE' ? iff(Object.keys(swaggerDef.paths).length !== 0,\n                        <InlineEndpoints paths={swaggerDef.paths} updatePaths={updatePaths} />, <Progress />)\n                        : (\n                            <Paper className={classes.endpointContainer}>\n                                {endpointType.key === 'awslambda'\n                                    ? (\n                                        <Credentials\n                                            apiId={api.id}\n                                            endpointConfig={endpointConfig}\n                                            endpointsDispatcher={endpointsDispatcher}\n                                        />\n                                    )\n                                    : (\n                                        <>\n                                            {endpointType.key === 'prototyped'\n                                                ? (\n                                                    <Typography>\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                                + 'EndpointOverview.prototype.endpoint'\n                                                                + '.prototype.label'}\n                                                            defaultMessage='Prototype Endpoint'\n                                                        />\n                                                    </Typography>\n                                                )\n                                                : (\n                                                    <FormControlLabel\n                                                        control={(\n                                                            <Checkbox\n                                                                id='production-endpoint-checkbox'\n                                                                disabled={isRestricted(['apim:api_create'], api)}\n                                                                checked={endpointCategory.prod}\n                                                                value='prod'\n                                                                color='primary'\n                                                                onChange={epCategoryOnChangeHandler}\n                                                            />\n                                                        )}\n                                                        label={(\n                                                            <Typography>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.'\n                                                                        + 'Endpoints.EndpointOverview'\n                                                                        + '.production.endpoint.production.label'}\n                                                                    defaultMessage='Production Endpoint'\n                                                                />\n                                                            </Typography>\n                                                        )}\n                                                    />\n                                                )}\n                                            <Collapse in={endpointCategory.prod}>\n                                                {endpointType.key === 'default'\n                                                    ? (\n\n                                                        <InlineMessage>\n                                                            <div className={classes.contentWrapper}>\n                                                                <Typography component='p' className={classes.content}>\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.EndpointOverview'\n                                                                            + '.upload.mediation.message'}\n                                                                        defaultMessage={\n                                                                            'Please upload a mediation'\n                                                                            + ' sequence file to'\n                                                                            + ' Message Mediation Policies,'\n                                                                            + ' which sets the endpoints.'\n                                                                        }\n                                                                    />\n                                                                    <IconButton\n                                                                        onClick={saveAndRedirect}\n                                                                    >\n                                                                        <LaunchIcon\n                                                                            style={{ marginLeft: '2px' }}\n                                                                            fontSize='small'\n                                                                            color='primary'\n                                                                        />\n                                                                    </IconButton>\n                                                                </Typography>\n                                                            </div>\n                                                            <Button\n                                                                className={classes.button}\n                                                                aria-label='Settings'\n                                                                onClick={() => toggleAdvanceConfig(\n                                                                    0, '', 'production_endpoints',\n                                                                )}\n                                                                disabled={\n                                                                    (isRestricted(\n                                                                        ['apim:api_create'], api,\n                                                                    )\n                                                                    )\n                                                                }\n                                                                variant='outlined'\n                                                            >\n                                                                <Icon\n                                                                    className={classes.buttonIcon}\n                                                                >\n                                                                    settings\n                                                                </Icon>\n                                                                <Typography>\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.EndpointOverview'\n                                                                            + '.advance.endpoint.configuration'}\n                                                                        defaultMessage='Advanced Configurations'\n                                                                    />\n                                                                </Typography>\n                                                            </Button>\n                                                            <Button\n                                                                className={classes.button}\n                                                                aria-label='Settings'\n                                                                onClick={() => toggleEndpointSecurityConfig(\n                                                                    '', 'production',\n                                                                )}\n                                                                disabled={\n                                                                    (isRestricted(\n                                                                        ['apim:api_create'], api,\n                                                                    )\n                                                                    )\n                                                                }\n                                                                variant='outlined'\n                                                            >\n                                                                <Icon\n                                                                    className={classes.buttonIcon}\n                                                                >\n                                                                    security\n                                                                </Icon>\n                                                                <Typography>\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.EndpointOverview'\n                                                                            + '.endpoint.security.configuration'}\n                                                                        defaultMessage={'Endpoint '\n                                                                        + 'Security Configurations'}\n                                                                    />\n                                                                </Typography>\n                                                            </Button>\n                                                        </InlineMessage>\n                                                    )\n                                                    : (\n                                                        <GenericEndpoint\n                                                            autoFocus\n                                                            name={endpointType.key === 'prototyped'\n                                                                ? (\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.'\n                                                                            + 'EndpointOverview.prototype'\n                                                                            + '.endpoint.prototype.header'}\n                                                                        defaultMessage='Prototype Endpoint'\n                                                                    />\n                                                                ) : (\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.'\n                                                                            + 'EndpointOverview.production'\n                                                                            + '.endpoint.production.header'}\n                                                                        defaultMessage='Production Endpoint'\n                                                                    />\n                                                                )}\n                                                            className={classes.defaultEndpointWrapper}\n                                                            endpointURL={getEndpoints('production_endpoints')}\n                                                            type=''\n                                                            index={0}\n                                                            category='production_endpoints'\n                                                            editEndpoint={editEndpoint}\n                                                            setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                            esCategory='production'\n                                                            setESConfigOpen={toggleEndpointSecurityConfig}\n                                                            apiId={api.id}\n                                                        />\n                                                    )}\n                                            </Collapse>\n                                            {endpointType.key === 'prototyped' ? <div />\n                                                : (\n                                                    <div>\n                                                        <FormControlLabel\n                                                            control={(\n                                                                <Checkbox\n                                                                    id='sandbox-endpoint-checkbox'\n                                                                    disabled={isRestricted(['apim:api_create'], api)}\n                                                                    checked={endpointCategory.sandbox}\n                                                                    value='sandbox'\n                                                                    color='primary'\n                                                                    onChange={(event) => (\n                                                                        handleOnChangeEndpointCategoryChange(\n                                                                            'sandbox', event,\n                                                                        ))}\n                                                                />\n                                                            )}\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.Endpoints.'\n                                                                        + 'EndpointOverview.sandbox.endpoint'}\n                                                                    defaultMessage='Sandbox Endpoint'\n                                                                />\n                                                            )}\n                                                        />\n                                                        <Collapse in={endpointCategory.sandbox}>\n                                                            {endpointType.key === 'default'\n                                                                ? (\n                                                                    <InlineMessage>\n                                                                        <div className={classes.contentWrapper}>\n                                                                            <Typography\n                                                                                component='p'\n                                                                                className={classes.content}\n                                                                            >\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints'\n                                                                                        + '.EndpointOverview.upload'\n                                                                                        + '.mediation.message'}\n                                                                                    defaultMessage={\n                                                                                        'Please upload a mediation'\n                                                                                        + ' sequence file to'\n                                                                                        + ' Message Mediation Policies,'\n                                                                                        + ' which sets the endpoints.'\n                                                                                    }\n                                                                                />\n                                                                                <IconButton\n                                                                                    onClick={saveAndRedirect}\n                                                                                >\n                                                                                    <LaunchIcon\n                                                                                        style={{ marginLeft: '2px' }}\n                                                                                        fontSize='small'\n                                                                                        color='primary'\n                                                                                    />\n                                                                                </IconButton>\n                                                                            </Typography>\n                                                                        </div>\n                                                                        <Button\n                                                                            className={classes.button}\n                                                                            aria-label='Settings'\n                                                                            onClick={() => toggleAdvanceConfig(\n                                                                                0, '', 'sandbox_endpoints',\n                                                                            )}\n                                                                            disabled={\n                                                                                (isRestricted(\n                                                                                    ['apim:api_create'], api,\n                                                                                )\n                                                                                )\n                                                                            }\n                                                                            variant='outlined'\n                                                                        >\n                                                                            <Icon\n                                                                                className={classes.buttonIcon}\n                                                                            >\n                                                                                settings\n                                                                            </Icon>\n                                                                            <Typography>\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints'\n                                                                                        + '.EndpointOverview.advance'\n                                                                                        + '.endpoint.configuration'}\n                                                                                    defaultMessage={'Advanced '\n                                                                                        + 'Configurations'}\n                                                                                />\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </InlineMessage>\n                                                                )\n                                                                : (\n                                                                    <GenericEndpoint\n                                                                        autoFocus\n                                                                        name='Sandbox Endpoint'\n                                                                        className={classes.defaultEndpointWrapper}\n                                                                        endpointURL={getEndpoints('sandbox_endpoints')}\n                                                                        type=''\n                                                                        index={0}\n                                                                        category='sandbox_endpoints'\n                                                                        editEndpoint={editEndpoint}\n                                                                        esCategory='sandbox'\n                                                                        setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                                        setESConfigOpen={toggleEndpointSecurityConfig}\n                                                                        apiId={api.id}\n                                                                    />\n                                                                )}\n\n                                                        </Collapse>\n                                                    </div>\n                                                )}\n                                        </>\n                                    )}\n                            </Paper>\n                        )}\n                </Grid>\n                {endpointType.key === 'INLINE' || endpointType.key === 'prototyped' || endpointType.key === 'awslambda'\n                    || api.type === 'WS'\n                    ? <div />\n                    : (\n                        <Grid item xs={12}>\n                            <Typography variant='h4' align='left' className={classes.titleWrapper} gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.EndpointOverview.general.config.header'\n                                    defaultMessage='General Endpoint Configurations'\n                                />\n                            </Typography>\n                            <GeneralConfiguration\n                                epConfig={(cloneDeep(epConfig))}\n                                endpointType={endpointType}\n                                endpointsDispatcher={endpointsDispatcher}\n                            />\n                        </Grid>\n                    )}\n                {\n                    endpointType.key === 'INLINE'\n                        || endpointType.key === 'default'\n                        || endpointType.key === 'prototyped'\n                        || api.type === 'WS'\n                        || endpointType.key === 'awslambda'\n                        ? <div />\n                        : (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant='h4'\n                                    align='left'\n                                    className={classes.titleWrapper}\n                                    gutterBottom\n                                >\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.'\n                                            + 'EndpointOverview.lb.failover.endpoints.header'}\n                                        defaultMessage='Load balance and Failover Configurations'\n                                    />\n                                </Typography>\n                                <LoadbalanceFailoverConfig\n                                    handleEndpointCategorySelect={handleEndpointCategorySelect}\n                                    toggleAdvanceConfig={toggleAdvanceConfig}\n                                    toggleESConfig={toggleEndpointSecurityConfig}\n                                    endpointsDispatcher={endpointsDispatcher}\n                                    epConfig={(cloneDeep(epConfig))}\n                                    endpointSecurityInfo={endpointSecurityInfo}\n                                    handleEndpointTypeSelect={handleEndpointTypeSelect}\n                                    globalEpType={endpointType}\n                                    apiType={api.type}\n                                />\n                            </Grid>\n                        )\n                }\n            </Grid>\n            <Dialog open={advanceConfigOptions.open}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.advance.endpoint.configuration'\n                            defaultMessage='Advanced Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <AdvanceEndpointConfig\n                        isSOAPEndpoint={endpointType.key === 'address'}\n                        advanceConfig={advanceConfigOptions.config}\n                        onSaveAdvanceConfig={saveAdvanceConfig}\n                        onCancel={closeAdvanceConfig}\n                    />\n                </DialogContent>\n            </Dialog>\n            <Dialog open={endpointSecurityConfig.open}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.security.configuration'\n                            defaultMessage='Endpoint Security Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    {endpointSecurityConfig.category === 'production' ? (\n                        <EndpointSecurity\n                            securityInfo={endpointSecurityInfo\n                                            && (endpointSecurityInfo.production\n                                                ? endpointSecurityInfo.production : endpointSecurityInfo)}\n                            onChangeEndpointAuth={handleEndpointSecurityChange}\n                            saveEndpointSecurityConfig={saveEndpointSecurityConfig}\n                            closeEndpointSecurityConfig={closeEndpointSecurityConfig}\n                            isProduction\n                        />\n                    ) : (\n                        <EndpointSecurity\n                            securityInfo={endpointSecurityInfo\n                                            && (endpointSecurityInfo.sandbox\n                                                ? endpointSecurityInfo.sandbox : endpointSecurityInfo)}\n                            onChangeEndpointAuth={handleEndpointSecurityChange}\n                            saveEndpointSecurityConfig={saveEndpointSecurityConfig}\n                            closeEndpointSecurityConfig={closeEndpointSecurityConfig}\n                        />\n                    )}\n                </DialogContent>\n            </Dialog>\n            <Dialog open={typeChangeConfirmation.openDialog}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.type.change.confirmation'\n                            defaultMessage='Change Endpoint Type'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.type.change.confirmation.message'\n                            defaultMessage='Your current endpoint configuration will be lost.'\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => { setTypeChangeConfirmation({ openDialog: false }); }}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.change.type.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={() => { changeEndpointType(typeChangeConfirmation.type); }}\n                        color='primary'\n                        id='change-endpoint-type-btn'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints..EndpointOverview.change.type.proceed'\n                            defaultMessage='Proceed'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nEndpointOverview.propTypes = {\n    classes: PropTypes.shape({\n        overviewWrapper: PropTypes.shape({}),\n        endpointTypesWrapper: PropTypes.shape({}),\n        endpointName: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n    swaggerDef: PropTypes.shape({}).isRequired,\n    updateSwagger: PropTypes.func.isRequired,\n    saveAndRedirect: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EndpointOverview));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, {\n    useState, useEffect, useContext, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\nimport GenericResource from 'AppComponents/Apis/Details/Endpoints/Prototype/GenericResource';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst xMediationScriptProperty = 'x-mediation-script';\n\nconst defaultScript = '/* mc.setProperty(\\'CONTENT_TYPE\\', \\'application/json\\');\\n\\t'\n    + 'mc.setPayloadJSON(\\'{ \"data\" : \"sample JSON\"}\\');*/\\n'\n    + '/*Uncomment the above comment block to send a sample response.*/';\n\n/**\n * The inline endpoints component.\n * This component lists the api resources to add custom mediation scripts.\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nfunction InlineEndpoints(props) {\n    const { api } = useContext(APIContext);\n    const {\n        paths, updatePaths,\n    } = props;\n    const [mockValueDetails, setMockValueDetails] = useState({ resourcePath: '', resourceMethod: '' });\n\n    /**\n     * Handles the onChange event of the script editor.\n     *\n     * @param {string} value The editor content\n     * @param {string} path The path value of the resource.\n     * @param {string} method The resource method.\n     * */\n    const onScriptChange = useCallback(\n        (value, path, method) => {\n            const tmpPaths = JSON.parse(JSON.stringify(paths));\n            tmpPaths[path][method][xMediationScriptProperty] = value;\n            updatePaths(tmpPaths);\n        },\n        [mockValueDetails.resourcePath, mockValueDetails.resourceMethod],\n    );\n\n    const [mockScripts, setMockScripts] = useState([]);\n\n    useEffect(() => {\n        const promisedResponse = api.getGeneratedMockScriptsOfAPI(api.id);\n        promisedResponse.then((response) => {\n            setMockScripts(response.obj.list);\n        });\n    }, []);\n\n    function getGeneratedMockScriptOfAPI(resourcePath, resourceMethod) {\n        for (let i = 0; i < mockScripts.length; i++) {\n            if (mockScripts[i].verb.toLowerCase() === resourceMethod.toLowerCase()\n                && mockScripts[i].path === resourcePath) {\n                return mockScripts[i].content;\n            }\n        }\n        return null;\n    }\n\n    return (\n        <>\n            <Grid container spacing={1} direction='column'>\n                {Object.keys(paths).map((path) => {\n                    return (\n                        Object.keys(paths[path]).map((method) => {\n                            const mediationScript = paths[path][method][xMediationScriptProperty];\n                            const script = mediationScript === undefined ? defaultScript : mediationScript;\n                            const originalScript = getGeneratedMockScriptOfAPI(path, method);\n                            return (\n                                <GenericResource\n                                    resourcePath={path}\n                                    resourceMethod={method}\n                                    onChange={onScriptChange}\n                                    scriptContent={script}\n                                    originalScript={originalScript}\n                                    setMockValueDetails={setMockValueDetails}\n                                />\n                            );\n                        })\n                    );\n                })}\n            </Grid>\n        </>\n    );\n}\n\nInlineEndpoints.propTypes = {\n    paths: PropTypes.shape({}).isRequired,\n    updatePaths: PropTypes.func.isRequired,\n};\n\nexport default React.memo(InlineEndpoints);\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, {\n    useContext,\n    lazy,\n    Suspense,\n    useState,\n} from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport {\n    Chip,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Utils from 'AppData/Utils';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"GenResourceMonaco\" */));\n\n/**\n * The generic resource component.\n *\n * @param {any} props The input props\n * @return {any} The HTML representation of the component.\n * */\nfunction GenericResource(props) {\n    const {\n        resourcePath, resourceMethod, scriptContent, onChange, originalScript, setMockValueDetails,\n    } = props;\n    const { api } = useContext(APIContext);\n    const [showReset, setShowReset] = useState(false);\n\n    const useStyles = makeStyles((theme) => {\n        let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[resourceMethod] : null;\n        let chipTextColor = '#000000';\n        if (!chipColor) {\n            console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n            chipColor = '#cccccc';\n        } else {\n            chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[resourceMethod]);\n        }\n\n        return {\n            editor: {\n                width: '100%',\n                height: '500px',\n            },\n            chipActive: {\n                borderRadius: '5px',\n                width: '80%',\n                backgroundColor: chipColor,\n                color: chipTextColor,\n                ...theme.typography.button,\n            },\n            resourcePathContainer: {\n                paddingTop: theme.spacing(1),\n            },\n            prototypeResourceHeader: {\n                borderBottom: `${chipColor} 1px solid`,\n            },\n            chipExpansionPanel: {\n                backgroundColor: Utils.hexToRGBA(chipColor, 0.1),\n                border: `${chipColor} 1px solid`,\n            },\n            scriptResetButton: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: '10px',\n            },\n\n        };\n    });\n\n    const classes = useStyles();\n\n    return (\n        <Grid item>\n            <ExpansionPanel className={classes.chipExpansionPanel}>\n                <ExpansionPanelSummary className={classes.prototypeResourceHeader} expandIcon={<ExpandMoreIcon />}>\n                    <Grid container spacing={12}>\n                        <Grid xs={1}>\n                            <Chip label={resourceMethod} className={classes.chipActive} />\n                        </Grid>\n                        <Grid xs className={classes.resourcePathContainer}>\n                            <Typography>{resourcePath}</Typography>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.genericResourceContent}>\n                    <Grid container direction='column'>\n                        <Grid item className={classes.scriptResetButton}>\n                            <Typography variant='subtitle2'>\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.Prototype.InlineEndpoints.script'\n                                    defaultMessage='Script'\n                                />\n                            </Typography>\n                            {showReset\n                            && (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => {\n                                        setShowReset(false);\n                                        setMockValueDetails({ resourcePath, resourceMethod });\n                                        onChange(originalScript, resourcePath, resourceMethod);\n                                    }}\n                                >\n                                    Reset\n                                </Button>\n                            )}\n                        </Grid>\n                        <Grid item>\n                            <Suspense fallback={<CircularProgress />}>\n                                <MonacoEditor\n                                    height='50vh'\n                                    width='100%'\n                                    theme='vs-dark'\n                                    value={scriptContent}\n                                    options={{\n                                        selectOnLineNumbers: true,\n                                        readOnly: `${isRestricted(['apim:api_create'], api)}`,\n                                    }}\n                                    language='javascript'\n                                    onChange={(content) => {\n                                        setShowReset(true);\n                                        setMockValueDetails({ resourcePath, resourceMethod });\n                                        onChange(content, resourcePath, resourceMethod);\n                                    }}\n                                />\n                            </Suspense>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </Grid>\n    );\n}\n\nGenericResource.propTypes = {\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n    scriptContent: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default React.memo(GenericResource);\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport {\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Typography,\n    withStyles,\n    Box,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Certificates from './GeneralConfiguration/Certificates';\nimport API from '../../../../data/api'; // TODO: Use webpack aliases instead of relative paths ~tmkb\nimport Alert from '../../../Shared/Alert';\nimport { endpointsToList } from './endpointUtils';\n\nconst styles = (theme) => ({\n    configHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    generalConfigContent: {\n        boxShadow: 'inset -1px 2px 3px 0px #c3c3c3',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'flex',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n        fontWeight: '900',\n    },\n    endpointConfigSection: {\n        padding: '10px',\n    },\n    generalConfigPanel: {\n        width: '100%',\n    },\n    securityHeading: {\n        fontWeight: 600,\n    },\n    sandboxEndpointSwitch: {\n        marginLeft: theme.spacing(2),\n    },\n});\n\n/**\n * The component which holds the general configurations of the endpoints.\n *\n * @param {any} props The input properties to the component\n * @returns {any} The HTML representation of the component.\n * */\nfunction GeneralConfiguration(props) {\n    const {\n        intl,\n        epConfig,\n        endpointType,\n        classes,\n    } = props;\n    const [isConfigExpanded, setConfigExpand] = useState(false);\n    const [endpointCertificates, setEndpointCertificates] = useState([]);\n    const [aliasList, setAliasList] = useState([]);\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     * */\n    const saveCertificate = (certificate, endpoint, alias) => {\n        return API.addCertificate(certificate, endpoint, alias)\n            .then((resp) => {\n                if (resp.status === 201) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.add.success',\n                        defaultMessage: 'Certificate added successfully',\n                    }));\n                    const tmpCertificates = [...endpointCertificates];\n                    tmpCertificates.push({\n                        alias: resp.obj.alias,\n                        endpoint: resp.obj.endpoint,\n                    });\n                    setEndpointCertificates(tmpCertificates);\n                }\n            })\n            .catch((err) => {\n                console.error(err.message);\n                if (err.message === 'Conflict') {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.alias.exist',\n                        defaultMessage: 'Adding Certificate Failed. Certificate Alias Exists.',\n                    }));\n                } else if (err.response) {\n                    Alert.error(err.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.error',\n                        defaultMessage: 'Something went wrong while adding the certificate.',\n                    }));\n                }\n            });\n    };\n    /**\n     * Method to delete the selected certificate.\n     *\n     * @param {string} alias The alias of the certificate to be deleted.\n     * */\n    const deleteCertificate = (alias) => {\n        return API.deleteEndpointCertificate(alias)\n            .then((resp) => {\n                setEndpointCertificates(() => {\n                    if (resp.status === 200) {\n                        return endpointCertificates.filter((cert) => {\n                            return cert.alias !== alias;\n                        });\n                    } else {\n                        return -1;\n                    }\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.delete.success',\n                    defaultMessage: 'Certificate Deleted Successfully',\n                }));\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.delete.error',\n                    defaultMessage: 'Error Deleting Certificate',\n                }));\n            });\n    };\n\n    // Get the certificates from backend.\n    useEffect(() => {\n        if (!isRestricted(['apim:ep_certificates_view'])) {\n            const endpointCertificatesList = [];\n            const aliases = [];\n\n            let endpoints = endpointsToList(epConfig);\n            const filteredEndpoints = [];\n            const epLookup = [];\n            for (const ep of endpoints) {\n                if (ep) {\n                    if (!epLookup.includes(ep.url)) {\n                        filteredEndpoints.push(ep);\n                        epLookup.push(ep.url);\n                    }\n                }\n            }\n            endpoints = filteredEndpoints;\n\n            for (const ep of endpoints) {\n                if (ep && ep.url) {\n                    const params = {};\n                    params.endpoint = ep.url;\n                    API.getEndpointCertificates(params)\n                        .then((response) => {\n                            const { certificates } = response.obj;\n                            for (const cert of certificates) {\n                                endpointCertificatesList.push(cert);\n                                aliases.push(cert.alias);\n                            }\n                        })\n                        .catch((err) => {\n                            console.error(err);\n                        });\n                }\n            }\n            setEndpointCertificates(endpointCertificatesList);\n            setAliasList(aliases);\n        } else {\n            setEndpointCertificates([]);\n        }\n    }, []);\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={isConfigExpanded}\n                onChange={() => setConfigExpand(!isConfigExpanded)}\n                className={classes.generalConfigPanel}\n                disabled={isRestricted(['apim:ep_certificates_view'])}\n            >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    id={endpointType.key + '-panel1bh-header'}\n                    className={classes.configHeaderContainer}\n                >\n                    {endpointType.key === 'awslambda' ? (\n                        <div />\n                    ) : (\n                        <Typography\n                            className={classes.secondaryHeading}\n                            hidden={endpointType.key === 'awslambda'}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.GeneralConfiguration.certificates.sub.heading'\n                                defaultMessage='Certificates'\n                            />\n                            :\n                            {' '}\n                            {endpointCertificates.length}\n                            {isRestricted(['apim:ep_certificates_view']) && (\n                                <Box ml={2}>\n                                    <Typography variant='body2' color='primary'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.GeneralConfiguration.not.allowed'\n                                            defaultMessage={'*You are not authorized to view certificates'\n                                        + ' due to insufficient permissions'}\n                                        />\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n                    )}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.generalConfigContent}>\n                    <Grid\n                        container\n                        className={classes.endpointConfigSection}\n                        hidden={endpointType.key === 'default' || endpointType.key === 'awslambda'}\n                    >\n                        <Certificates\n                            endpoints={endpointsToList(epConfig)}\n                            certificates={endpointCertificates}\n                            uploadCertificate={saveCertificate}\n                            deleteCertificate={deleteCertificate}\n                            aliasList={aliasList}\n                        />\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\n\nGeneralConfiguration.propTypes = {\n    epConfig: PropTypes.shape({}).isRequired,\n    endpointType: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(GeneralConfiguration));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Icon,\n    IconButton,\n    MenuItem,\n    TextField,\n    Typography,\n    withStyles,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport cloneDeep from 'lodash.clonedeep';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport EndpointListing from 'AppComponents/Apis/Details/Endpoints/EndpointListing';\nimport LoadBalanceConfig from 'AppComponents/Apis/Details/Endpoints/LoadBalanceConfig';\nimport Collapse from '@material-ui/core/Collapse';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { getEndpointTypeProperty } from './endpointUtils';\n\nconst styles = (theme) => ({\n    endpointTypeSelect: {\n        width: '50%',\n        marginTop: theme.spacing(1),\n    },\n    configHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    generalConfigContent: {\n        boxShadow: 'inset -1px 2px 3px 0px #c3c3c3',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'flex',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n        fontWeight: '900',\n    },\n    endpointConfigSection: {\n        padding: '10px',\n    },\n    generalConfigPanel: {\n        width: '100%',\n    },\n    endpointsTypeSelectWrapper: {\n        display: 'flex',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    lbConfigBtn: {\n        position: 'relative',\n        top: '10px',\n    },\n    endpointName: {\n        fontWeight: 600,\n    },\n    wrapper: {\n        width: '100%',\n    },\n});\n\nconst endpointTypes = [\n    { key: 'none', value: 'None' },\n    { key: 'failover', value: 'Failover' },\n    { key: 'load_balance', value: 'Load Balanced' },\n];\n\n/**\n * The component which holds the load balance and failover configuration.\n *\n * @param {any} props The input properties to the component\n * @returns {any} The HTML representation of the component.\n * */\nfunction LoadbalanceFailoverConfig(props) {\n    const {\n        epConfig,\n        classes,\n        endpointsDispatcher,\n        toggleAdvanceConfig,\n        toggleESConfig,\n        globalEpType,\n        handleEndpointCategorySelect,\n    } = props;\n    const { api } = useContext(APIContext);\n    const [isConfigExpanded, setConfigExpand] = useState(false);\n    const [endpointType, setEndpointType] = useState(props);\n    const [isLBConfigOpen, setLBConfigOpen] = useState(false);\n\n    useEffect(() => {\n        const epType = epConfig.endpoint_type;\n        if (epType === 'http' || epType === 'address') {\n            setEndpointType('none');\n        } else {\n            setEndpointType(epType);\n        }\n    }, [props]);\n\n    /**\n     * Method to add new loadbalance/ failover endpoint to the existing endpoints.\n     *\n     * @param {string} category The endpoint category (production/ sandbox)\n     * @param {string} type The endpoint type. (load_balance/ failover)\n     * @param {string} newURL The url of the new endpoint.\n     * */\n    const addEndpoint = (category, type, newURL) => {\n        const endpointConfigCopy = cloneDeep(epConfig);\n        const endpointTemplate = {\n            endpoint_type: globalEpType.key,\n            template_not_supported: false,\n            url: newURL,\n        };\n        const epConfigProperty = getEndpointTypeProperty(type, category);\n        let endpointList = endpointConfigCopy[epConfigProperty];\n        /**\n         * Check whether we have existing endpoints added.\n         * */\n        if (endpointList) {\n            if (!Array.isArray(endpointList)) {\n                endpointList = [endpointList].concat(endpointTemplate);\n            } else {\n                endpointList = endpointList.concat(endpointTemplate);\n            }\n        } else {\n            endpointList = [endpointTemplate];\n        }\n        endpointConfigCopy[epConfigProperty] = endpointList;\n        endpointsDispatcher({ action: 'add_endpoint', value: endpointConfigCopy });\n    };\n\n    /**\n     * Method to handle the loadbalance configuration changes.\n     *\n     * @param {object} lbConfig The modified loadbalance configuration.\n     * */\n    const handleLBConfigChange = (lbConfig) => {\n        endpointsDispatcher({ action: 'set_lb_config', value: { ...epConfig, ...lbConfig } });\n        setLBConfigOpen(false);\n    };\n\n    const getEndpointTypeHeading = () => {\n        switch (endpointType) {\n            case 'none':\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.none.heading'\n                        defaultMessage='Not Configured'\n                    />\n                );\n            case 'failover':\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.failover.heading'\n                        defaultMessage='Failover Endpoints'\n                    />\n                );\n            default:\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.loadbalance.heading'\n                        defaultMessage='Load Balanced Endpoints'\n                    />\n                );\n        }\n    };\n\n    /**\n     * Method to remove the selected endpoint from the endpoints list.\n     *\n     * @param {number} index The selected endpoint index\n     * @param {string} epType The type of the endpoint. (loadbalance/ failover)\n     * @param {string} category The endpoint category (production/ sandbox)\n     * */\n    const removeEndpoint = (index, epType, category) => {\n        const tmpEndpointConfig = cloneDeep(epConfig);\n        const endpointConfigProperty = getEndpointTypeProperty(epType, category);\n        const indexToRemove = epType === 'failover' ? index - 1 : index;\n        const tmpEndpoints = tmpEndpointConfig[endpointConfigProperty];\n        tmpEndpoints.splice(indexToRemove, 1);\n        endpointsDispatcher({\n            action: 'remove_endpoint',\n            value: { ...epConfig, [endpointConfigProperty]: tmpEndpoints },\n        });\n    };\n\n    const editEndpoint = () => {};\n    const handleEndpointTypeSelect = (event) => {\n        setEndpointType(event.target.value);\n        handleEndpointCategorySelect(event);\n    };\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={isConfigExpanded || endpointType === 'load_balance' || endpointType === 'failover'}\n                onChange={() => setConfigExpand(!isConfigExpanded)}\n                className={classes.generalConfigPanel}\n            >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel1bh-content'\n                    id='panel1bh-header'\n                    className={classes.configHeaderContainer}\n                >\n                    <Typography className={classes.secondaryHeading}>\n                        {getEndpointTypeHeading()}\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.generalConfigContent}>\n                    {(!epConfig.production_endpoints && !epConfig.sandbox_endpoints)\n                        ? (\n                            <InlineMessage>\n                                <div className={classes.contentWrapper}>\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.no.endpoints.message'\n                                            defaultMessage='Add Production/ Sandbox endpoints to configure.'\n                                        />\n                                    </Typography>\n                                </div>\n                            </InlineMessage>\n                        )\n                        : (\n                            <Grid container item xs={12}>\n                                <Grid xs={12} className={classes.endpointsTypeSelectWrapper}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        id='certificateEndpoint'\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.endpoint.type'\n                                                defaultMessage='Endpoint Type'\n                                            />\n                                        )}\n                                        value={endpointType}\n                                        placeholder='Endpoint'\n                                        onChange={handleEndpointTypeSelect}\n                                        margin='normal'\n                                        variant='outlined'\n                                        select\n                                        className={classes.endpointTypeSelect}\n                                    >\n                                        {endpointTypes.map((type) => {\n                                            return (\n                                                <MenuItem\n                                                    value={type.key}\n                                                    id={'config-type-' + type.key}\n                                                >\n                                                    {type.value}\n                                                </MenuItem>\n                                            );\n                                        })}\n                                    </TextField>\n                                    <div className={classes.lpConfigWrapper}>\n                                        <IconButton\n                                            className={classes.lbConfigBtn}\n                                            disabled={epConfig.endpoint_type !== 'load_balance'}\n                                            aria-label='Delete'\n                                            onClick={() => setLBConfigOpen(true)}\n                                        >\n                                            <Icon>\n                                                settings\n                                            </Icon>\n                                        </IconButton>\n                                    </div>\n                                </Grid>\n                                <Grid xs={12} container spacing={2}>\n                                    <Collapse className={classes.wrapper} in={endpointType !== 'none'}>\n                                        {epConfig.production_endpoints\n                                    && (\n                                        <Grid xs={12} className={classes.endpointsWrapperLeft}>\n                                            <Typography className={classes.endpointName}>\n                                                {epConfig.endpoint_type === 'failover'\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                            + 'LoadbalanceFailoverConfig.production.'\n                                                            + 'failover.endpoint'}\n                                                            defaultMessage='Production Failover Endpoints'\n                                                        />\n                                                    )\n                                                    : (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.LoadbalanceFailoverConfig.'\n                                                    + 'production.loadbalance.endpoint'}\n                                                            defaultMessage='Production Loadbalanced Endpoints'\n                                                        />\n                                                    )}\n                                            </Typography>\n                                            <EndpointListing\n                                                apiEndpoints={epConfig.production_endpoints}\n                                                failOvers={epConfig.production_failovers}\n                                                epType={epConfig.endpoint_type}\n                                                addNewEndpoint={addEndpoint}\n                                                removeEndpoint={removeEndpoint}\n                                                editEndpoint={editEndpoint}\n                                                setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                setESConfigOpen={toggleESConfig}\n                                                category='production_endpoints'\n                                                apiId={api.id}\n                                            />\n                                        </Grid>\n                                    )}\n                                        {epConfig.sandbox_endpoints\n                                    && (\n                                        <Grid xs={12} className={classes.endpointsWrapperRight}>\n                                            <Typography className={classes.endpointName}>\n                                                {epConfig.endpoint_type === 'failover'\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                            + 'LoadbalanceFailoverConfig.sandbox.'\n                                                            + 'failover.endpoint'}\n                                                            defaultMessage='Sandbox Failover Endpoints'\n                                                        />\n                                                    )\n                                                    : (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.LoadbalanceFailoverConfig.'\n                                                    + 'sandbox.loadbalance.endpoint'}\n                                                            defaultMessage='Sandbox Loadbalanced Endpoints'\n                                                        />\n                                                    )}\n                                            </Typography>\n                                            <EndpointListing\n                                                apiEndpoints={epConfig.sandbox_endpoints}\n                                                failOvers={epConfig.sandbox_failovers}\n                                                epType={epConfig.endpoint_type}\n                                                addNewEndpoint={addEndpoint}\n                                                removeEndpoint={removeEndpoint}\n                                                editEndpoint={editEndpoint}\n                                                setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                setESConfigOpen={toggleESConfig}\n                                                category='sandbox_endpoints'\n                                                apiId={api.id}\n                                            />\n                                        </Grid>\n                                    )}\n                                    </Collapse>\n                                </Grid>\n                            </Grid>\n                        )}\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <Dialog open={isLBConfigOpen}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.load.balance.configuration.title'\n                            defaultMessage='Load Balance Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <LoadBalanceConfig\n                        handleLBConfigChange={handleLBConfigChange}\n                        closeLBConfigDialog={() => setLBConfigOpen(false)}\n                        algoCombo={epConfig.algoCombo}\n                        algoClassName={epConfig.algoClassName}\n                        sessionTimeOut={epConfig.sessionTimeOut}\n                        failOver={epConfig.failOver}\n                        sessionManagement={epConfig.sessionManagement}\n                    />\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nLoadbalanceFailoverConfig.propTypes = {\n    epConfig: PropTypes.shape({}).isRequired,\n    endpointSecurityInfo: PropTypes.shape({}).isRequired,\n    endpointType: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n    toggleAdvanceConfig: PropTypes.func.isRequired,\n    toggleESConfig: PropTypes.func.isRequired,\n    handleEndpointCategorySelect: PropTypes.func.isRequired,\n    globalEpType: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(LoadbalanceFailoverConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Grid, withStyles } from '@material-ui/core';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport GenericEndpoint from './GenericEndpoint';\nimport GenericEndpointAdd from './GenericEndpointAdd';\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        display: 'flex',\n    },\n    epInput: {\n        width: '100%',\n    },\n    epTypeWrapper: {\n        display: 'flex',\n        padding: '5px',\n    },\n    epTypeName: {\n        paddingTop: '10px',\n        fontWeight: 600,\n    },\n    epConfig: {\n        justifyContent: 'flex-end',\n    },\n    leftArrow: {\n        paddingTop: '6px',\n    },\n    leftArrowLight: {\n        color: '#c5c5c5',\n        paddingTop: '6px',\n    },\n    dialogHeader: {\n        fontWeight: 600,\n    },\n    listItemOdd: {\n        background: '#ececec',\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:focus': {\n            backgroundColor: theme.palette.grey[400],\n        },\n    },\n    listItem: {\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:focus': {\n            backgroundColor: theme.palette.grey[400],\n        },\n    },\n});\n\n/**\n * The Component for endpoint listing.\n * @param {*} props The props that are being passed to the component.\n * @returns {any} The HTML view of the ep listing component.\n */\nfunction EndpointListing(props) {\n    const {\n        classes,\n        category,\n        apiEndpoints,\n        epType,\n        failOvers,\n        editEndpoint,\n        addNewEndpoint,\n        removeEndpoint,\n        setAdvancedConfigOpen,\n        setESConfigOpen,\n        apiId,\n    } = props;\n    const [endpointType, setEndpointType] = useState(epType);\n    const [endpoints, setEndpoints] = useState([{ url: 'http://myservice/endpoint' }]);\n    const selectedRef = useRef(null);\n\n    /**\n     * Method to add a new endpoint.\n     *\n     * @param {string} url The url of the endpoint that needs to be added.\n     * */\n    const addEndpoint = (url) => {\n        addNewEndpoint(category, epType, url);\n    };\n\n    useEffect(() => {\n        setEndpointType(epType);\n        setEndpoints(() => {\n            if (apiEndpoints !== null && epType === 'failover') {\n                return ([apiEndpoints].concat(failOvers));\n            } else {\n                if (apiEndpoints !== undefined) {\n                    return Array.isArray(apiEndpoints) ? apiEndpoints : [apiEndpoints];\n                }\n                return [{ url: 'http://myservice/' }];\n            }\n        });\n    }, [props]);\n\n    return (\n        <div className={classes.listingWrapper} ref={selectedRef}>\n            <Grid container xs={12}>\n                <Grid xs={12}>\n                    {(endpointType === 'failover' || endpointType === 'load_balance')\n                        ? (\n                            <GenericEndpointAdd\n                                addEndpoint={addEndpoint}\n                                endpointType={endpointType}\n                                category={category}\n                            />\n                        ) : (<div />)}\n                </Grid>\n                <Grid xs={12}>\n                    {\n                        (endpoints.map((ep, index) => {\n                            if (index > 0) {\n                                return (\n                                    <GenericEndpoint\n                                        readOnly\n                                        endpointURL={endpoints[index] ? endpoints[index].url : ''}\n                                        type={endpointType}\n                                        index={index}\n                                        category={category}\n                                        editEndpoint={editEndpoint}\n                                        deleteEndpoint={removeEndpoint}\n                                        setAdvancedConfigOpen={setAdvancedConfigOpen}\n                                        setESConfigOpen={setESConfigOpen}\n                                        apiId={apiId}\n                                    />\n                                );\n                            }\n                            return (<div />);\n                        }))\n                    }\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nEndpointListing.propTypes = {\n    classes: PropTypes.shape({\n        epTypeWrapper: PropTypes.shape({}),\n        epTypeName: PropTypes.shape({}),\n        listingWrapper: PropTypes.shape({}),\n        epConfig: PropTypes.shape({}),\n    }).isRequired,\n    epType: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    apiEndpoints: PropTypes.shape({}).isRequired,\n    failOvers: PropTypes.shape({}).isRequired,\n    addNewEndpoint: PropTypes.func.isRequired,\n    removeEndpoint: PropTypes.func.isRequired,\n    editEndpoint: PropTypes.func.isRequired,\n    setAdvancedConfigOpen: PropTypes.func.isRequired,\n    setESConfigOpen: PropTypes.func.isRequired,\n    apiId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EndpointListing));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState, useContext } from 'react';\n\nimport {\n    Icon,\n    IconButton,\n    InputAdornment,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    textField: {\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: theme.spacing(1),\n    },\n});\n\n/**\n * This component represents the view and functions of endpoint add.\n *\n * @param {any} props The input props.\n * @returns {any} HTML representation of the component.\n * */\nfunction GenericEndpointAdd(props) {\n    const {\n        classes,\n        addEndpoint,\n        endpointType,\n        category,\n    } = props;\n    const [serviceUrl, setServiceUrl] = useState('');\n    const { api } = useContext(APIContext);\n\n    /**\n     * The method to handle endpoint add button click action.\n     * */\n    const onAddEndpoint = () => {\n        setServiceUrl('');\n        addEndpoint(serviceUrl);\n    };\n\n    return (\n        <div className={classes.endpointInputWrapper}>\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GenericEndpoint.service.url.input'\n                        defaultMessage='Service URL'\n                    />\n                )}\n                disabled={isRestricted(['apim:api_create'], api)}\n                className={classes.textField}\n                value={serviceUrl}\n                fullWidth\n                onChange={(event) => setServiceUrl(event.target.value)}\n                variant='outlined'\n                margin='normal'\n                placeholder='Enter the Endpoint URL and press + button'\n                InputProps={{\n                    id: category + '-' + endpointType,\n                    endAdornment: (\n                        <InputAdornment position='end'>\n                            <IconButton\n                                onClick={onAddEndpoint}\n                                color='green'\n                                className={classes.iconButton}\n                                aria-label='Search'\n                                disabled={serviceUrl === ''}\n                                id={category + '-' + endpointType + '-add-btn'}\n                            >\n                                <Icon>\n                                    add\n                                </Icon>\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        </div>\n    );\n}\n\nGenericEndpointAdd.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    addEndpoint: PropTypes.func.isRequired,\n    endpointType: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(GenericEndpointAdd);\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport {\n    TextField, MenuItem, Grid, Button, withStyles,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst algorithms = [\n    {\n        key: 'org.apache.synapse.endpoints.algorithms.RoundRobin',\n        value: 'Round-Robin',\n    },\n    { key: 'other', value: 'Other' },\n];\nconst sessionManagementOps = [\n    { key: 'http', value: 'Transport' },\n    { key: 'soap', value: 'SOAP' },\n    { key: 'simpleClientSession', value: 'Client Id' },\n    { key: 'none', value: 'None' },\n];\n\nconst defaultTemplateObj = {\n    algoClassName: algorithms[0].key,\n    algoCombo: algorithms[0].key,\n    sessionManagement: sessionManagementOps[0].key,\n    sessionTimeOut: 300,\n    failOver: false,\n};\n\nconst styles = (theme) => ({\n    configButtonContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: theme.spacing(1),\n    },\n});\n\n/**\n * The component for loadbalance endpoint configuration.\n * @param {any} props The props that are being passed.\n * @returns {any} The HTML contents of the Configuration component.\n */\nfunction LoadBalanceConfig(props) {\n    const {\n        algoClassName,\n        algoCombo,\n        sessionManagement,\n        sessionTimeOut,\n        failOver,\n        handleLBConfigChange,\n        closeLBConfigDialog,\n        classes,\n    } = props;\n    const [lbConfig, setLbConfigObject] = useState(defaultTemplateObj);\n    const [algoClassNameError, setAlgoClassNameError] = useState(false);\n    const { api } = useContext(APIContext);\n\n    useEffect(() => {\n        setLbConfigObject(() => {\n            const tmpLBConfig = { ...defaultTemplateObj };\n            if (algoCombo) {\n                tmpLBConfig.algoCombo = algoCombo;\n            }\n            if (sessionManagement) {\n                tmpLBConfig.sessionManagement = sessionManagement;\n            }\n            if (algoClassName) {\n                tmpLBConfig.algoClassName = algoClassName;\n            }\n            if (sessionTimeOut) {\n                tmpLBConfig.sessionTimeOut = sessionTimeOut;\n            }\n            if (failOver) {\n                tmpLBConfig.failOver = failOver;\n            }\n            return tmpLBConfig;\n        });\n    }, [props]);\n\n    /**\n     * Method to capture the alogrithm select changes.\n     *\n     * @param {any} event The event triggered by the element.\n     * */\n    const handleAlgorithmChange = (event) => {\n        const { value } = event.target;\n        setLbConfigObject({\n            ...lbConfig,\n            algoCombo: value,\n            algoClassName: value === 'other' ? '' : defaultTemplateObj.algoClassName,\n        });\n    };\n\n    /**\n     * Method to capture the onChange event of the elements.\n     *\n     * @param {any} event The event triggered by the element.\n     * @param {string} field The respective field which is being changed.\n     * */\n    const handleFieldChange = (event, field) => {\n        setLbConfigObject({ ...lbConfig, [field]: event.target.value });\n    };\n\n    /**\n     * Method to capture the onChange event of the elements.\n     *\n     * @param {any} event The event triggered by the element.\n     * @param {string} field The respective field which is being changed.\n     * */\n    const handleFailoverFieldChange = (event, field) => {\n        setLbConfigObject({ ...lbConfig, [field]: event.target.checked });\n    };\n\n    /**\n     * Method to set the configuration changes to the original endpoints config object.\n     * */\n    const submitConfiguration = () => {\n        handleLBConfigChange(lbConfig);\n    };\n\n    return (\n        <>\n            <Grid container direction='column'>\n                <TextField\n                    id='algorithmSelect'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.algorithm'\n                            defaultMessage='Algorithm'\n                        />\n                    )}\n                    value={lbConfig.algoCombo}\n                    onChange={handleAlgorithmChange}\n                    helperText='Please select the Loadbalance Algorithm.'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                >\n                    {algorithms.map((algo) => (\n                        <MenuItem key={algo.key} value={algo.key} selected={lbConfig.algoCombo}>\n                            {algo.value}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                {(lbConfig.algoCombo === 'other')\n                    ? (\n                        <TextField\n                            id='customAlgoInput'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.LoadBalanceConfig.class.name.for.algorithm'\n                                    defaultMessage='Class Name for Algorithm'\n                                />\n                            )}\n                            required\n                            error={algoClassNameError}\n                            value={lbConfig.algoClassName}\n                            onChange={(event) => handleFieldChange(event, 'algoClassName')}\n                            onBlur={() => setAlgoClassNameError(lbConfig.algoClassName === '')}\n                            helperText='Enter the class name of the loadbalance algorithm'\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            margin='normal'\n                        />\n                    ) : <div /> }\n                <TextField\n                    id='sessionMgtSelect'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.session.management'\n                            defaultMessage='Session Management'\n                        />\n                    )}\n                    value={lbConfig.sessionManagement}\n                    onChange={(event) => handleFieldChange(event, 'sessionManagement')}\n                    helperText='Please select the Session Management mechanism.'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                >\n                    {sessionManagementOps.map((option) => (\n                        <MenuItem key={option.key} value={option.key}>\n                            {option.value}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id='sessionTimeout'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.session.timeout'\n                            defaultMessage='Session Timeout (Millis)'\n                        />\n                    )}\n                    value={lbConfig.sessionTimeOut}\n                    onChange={(event) => handleFieldChange(event, 'sessionTimeOut')}\n                    type='number'\n                    placeholder='300'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                />\n                <FormControlLabel\n                    control={(\n                        <Checkbox\n                            id='failOver'\n                            checked={lbConfig.failOver}\n                            onChange={(event) => handleFailoverFieldChange(event, 'failOver')}\n                            margin='normal'\n                            disabled={isRestricted(['apim:api_create'], api)}\n                        />\n                    )}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.failover'\n                            defaultMessage='Enable Failover'\n                        />\n                    )}\n                />\n            </Grid>\n            <Grid className={classes.configButtonContainer}>\n                <Button\n                    color='primary'\n                    variant='contained'\n                    autoFocus\n                    onClick={submitConfiguration}\n                    disabled={lbConfig.algoClassName === '' || isRestricted(['apim:api_create'], api)}\n                    style={{ marginRight: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.EndpointOverview.loadbalance.config.save.button'\n                        defaultMessage='Save'\n                    />\n                </Button>\n                <Button\n                    onClick={closeLBConfigDialog}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.EndpointOverview.loadbalance.config.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </>\n    );\n}\n\nLoadBalanceConfig.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    algoClassName: PropTypes.string.isRequired,\n    algoCombo: PropTypes.string.isRequired,\n    sessionManagement: PropTypes.string.isRequired,\n    sessionTimeOut: PropTypes.string.isRequired,\n    failOver: PropTypes.bool.isRequired,\n    handleLBConfigChange: PropTypes.func.isRequired,\n    closeLBConfigDialog: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(LoadBalanceConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport {\n    Divider,\n    FormControl,\n    Grid,\n    Input,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    Button,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst itemHeight = 48;\nconst itemPaddingTop = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: (itemHeight * 4.5) + itemPaddingTop, width: 250,\n        },\n    },\n};\nconst styles = (theme) => ({\n    formControl: {\n        width: '500px',\n    },\n    subTitle: {\n        fontSize: '1rem',\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    configContainer: {\n        paddingTop: '10px',\n    },\n    configSubContainer: {\n        paddingBottom: '10px',\n        marginTop: '5px',\n        padding: '5px',\n    },\n    textField: {\n        marginRight: theme.spacing(1),\n        width: '45%',\n    },\n    advanceDialogActions: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n});\n\n/**\n * The component for advanced endpoint configurations.\n * @param {any} props The input props\n * @returns {any} The HTML representation of the compoenent.\n */\nfunction AdvanceEndpointConfig(props) {\n    const { api } = useContext(APIContext);\n    const {\n        classes,\n        intl,\n        advanceConfig,\n        isSOAPEndpoint,\n        onSaveAdvanceConfig,\n        onCancel,\n    } = props;\n    const [advanceConfigObj, setAdvanceConfig] = useState(() => {\n        const config = {};\n        if (isSOAPEndpoint) {\n            config.format = 'soap11';\n            config.optimize = 'SWA';\n        }\n        config.actionDuration = '30000';\n        config.actionSelect = 'fault';\n        config.factor = '';\n        config.retryDelay = '';\n        config.retryErroCode = [];\n        config.retryTimeOut = '';\n        config.suspendDuration = '';\n        config.suspendErrorCode = [];\n        config.suspendMaxDuration = '';\n        return config;\n    });\n\n    /**\n     * The error codes definition.\n     * */\n    const errorCodes = [\n        {\n            key: '101001',\n            value: '101001 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.receiver.io.error.receiving',\n                defaultMessage: 'Receiver IO error Receiving',\n            }),\n        },\n        {\n            key: '101500',\n            value: '101500 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.sender.io.error.sending',\n                defaultMessage: 'Sender IO Error Sending',\n            }),\n        },\n        {\n            key: '101000',\n            value: '101000 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.receiver.io.error.sending',\n                defaultMessage: 'Retriever IO Error Sending',\n            }),\n        },\n        {\n            key: '101501',\n            value: '101501 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.sender.io.error.receiving',\n                defaultMessage: 'Sender IO Error Receiving',\n            }),\n        },\n        {\n            key: '101503',\n            value: '101503 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.failed',\n                defaultMessage: 'Connection Failed',\n            }),\n        },\n        {\n            key: '101504',\n            value: '101504 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.timed.out',\n                defaultMessage: 'Connection Timed Out',\n            }),\n        },\n        {\n            key: '101505',\n            value: '101505 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.closed',\n                defaultMessage: 'Connection Closed',\n            }),\n        },\n        {\n            key: '101506',\n            value: '101506 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.tpp.protocol.violation',\n                defaultMessage: 'TTP Protocol Violation',\n            }),\n        },\n        {\n            key: '101507',\n            value: '101507 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connect.cancel',\n                defaultMessage: 'Connect Cancel',\n            }),\n        },\n        {\n            key: '101508',\n            value: '101508 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connect.timeout',\n                defaultMessage: 'Connect Timeout',\n            }),\n        },\n        {\n            key: '101509',\n            value: '101509 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.send.abort',\n                defaultMessage: 'Send Abort',\n            }),\n        },\n        {\n            key: '101510',\n            value: '101510 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.response.processing.failure',\n                defaultMessage: 'Response Processing Failure',\n            }),\n        }];\n\n    /**\n     * Supported action items.\n     * */\n    const actionItems = [\n        {\n            key: 'fault',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.execute.fault.sequence',\n                defaultMessage: 'Execute Fault Sequence',\n            }),\n        },\n        {\n            key: 'discard',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.discard.message',\n                defaultMessage: 'Discard Message',\n            }),\n        },\n    ];\n\n    /**\n     * Message types for the address endpoint type.\n     * */\n    const messageTypes = [\n        { key: 'soap11', value: 'SOAP 1.1' },\n        { key: 'soap12', value: 'SOAP 1.2' },\n        {\n            key: 'POX',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.plain.old.xml',\n                defaultMessage: 'Plain Old XML (POX)',\n            }),\n        },\n        {\n            key: 'REST',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.representational.state.transfer',\n                defaultMessage: 'Representational State Transfer (REST)',\n            }),\n        },\n        {\n            key: 'GET',\n            value: 'GET',\n        },\n        {\n            key: 'leave-as-is',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.leave.as.is',\n                defaultMessage: 'Leave As-Is',\n            }),\n        },\n    ];\n\n    /**\n     * Address endpoint message optimizations.\n     * */\n    const optimizeOptions = [\n        { key: 'SWA', value: 'SWA' },\n        { key: 'MTOM', value: 'MTOM' },\n        {\n            key: 'leave-as-is',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.leave.as.is',\n                defaultMessage: 'Leave As-Is',\n            }),\n        },\n    ];\n\n    useEffect(() => {\n        setAdvanceConfig(() => {\n            if (advanceConfig === {}) {\n                return { ...advanceConfigObj };\n            }\n            return { ...advanceConfigObj, ...advanceConfig };\n        });\n    }, [props]);\n\n    /**\n     * Method to handle the advance endpoint field change. In each change, the advance config object is getting updated.\n     *\n     * @param {any} event The HTML event triggered by the element.\n     * @param {string} field The HTML element that is being changed.\n     * */\n    const handleConfigFieldChange = (event, field) => {\n        const di = { ...advanceConfigObj, [field]: event.target.value };\n        setAdvanceConfig(di);\n    };\n\n    return (\n        <Grid container direction='column' className={classes.configContainer}>\n            {(isSOAPEndpoint) ? (\n                <Grid item container className={classes.configSubContainer}>\n                    <Typography className={classes.subTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.message.content'\n                            defaultMessage='Message Content'\n                        />\n                    </Typography>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor='err-code-select'>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.format.select'\n                                defaultMessage='Format'\n                            />\n                        </InputLabel>\n                        <Select\n                            autoWidth={false}\n                            value={advanceConfigObj.format}\n                            onChange={(event) => handleConfigFieldChange(event, 'format')}\n                            input={<Input id='err-code-select' />}\n                            MenuProps={MenuProps}\n                        >\n                            {messageTypes.map((messageType) => (\n                                <MenuItem key={messageType.key} value={messageType.key}>\n                                    {messageType.value}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor='err-code-select'>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.optimize.select'\n                                defaultMessage='Optimize'\n                            />\n                        </InputLabel>\n                        <Select\n                            autoWidth={false}\n                            value={advanceConfigObj.optimize}\n                            onChange={(event) => handleConfigFieldChange(event, 'optimize')}\n                            input={<Input id='err-code-select' />}\n                            MenuProps={MenuProps}\n                        >\n                            {optimizeOptions.map((option) => (\n                                <MenuItem key={option.key} value={option.key}>\n                                    {option.value}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <Divider />\n                </Grid>\n            ) : (<div />)}\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage id='Endpoint.Suspension.State' defaultMessage='Endpoint Suspension State' />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.error.code'\n                            defaultMessage='Error Code'\n                        />\n                    </InputLabel>\n                    <Select\n                        multiple\n                        autoWidth={false}\n                        value={advanceConfigObj.suspendErrorCode}\n                        onChange={(event) => handleConfigFieldChange(event, 'suspendErrorCode')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                        variant='outlined'\n                    >\n                        {errorCodes.map((code) => (\n                            <MenuItem key={code.key} value={code.key}>\n                                {code.value}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='initial-duration-input'\n                    value={advanceConfigObj.suspendDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'suspendDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.initial.duration.ms'\n                            defaultMessage='Initial Duration (ms)'\n                        />\n                    )}\n                    margin='normal'\n                    type='number'\n                />\n                <TextField\n                    className={classes.textField}\n                    id='max-duration-input'\n                    value={advanceConfigObj.suspendMaxDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'suspendMaxDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.max.duration.ms'\n                            defaultMessage='Max Duration (ms)'\n                        />\n                    )}\n                    margin='normal'\n                    type='number'\n                />\n                <TextField\n                    className={classes.textField}\n                    value={advanceConfigObj.factor}\n                    onChange={(event) => handleConfigFieldChange(event, 'factor')}\n                    id='factor-input'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.factor'\n                            defaultMessage='Factor'\n                        />\n                    )}\n                    margin='normal'\n                />\n            </Grid>\n            <Divider />\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.endpoint.timeout.state'\n                        defaultMessage='Endpoint Timeout State'\n                    />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.error.code'\n                            defaultMessage='Error Code'\n                        />\n                    </InputLabel>\n                    <Select\n                        multiple\n                        autoWidth={false}\n                        value={advanceConfigObj.retryErroCode}\n                        onChange={(event) => handleConfigFieldChange(event, 'retryErroCode')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                    >\n                        {errorCodes.map((code) => (\n                            <MenuItem key={code.key} value={code.key}>\n                                {code.value}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='retries-input'\n                    value={advanceConfigObj.retryTimeOut}\n                    onChange={(event) => handleConfigFieldChange(event, 'retryTimeOut')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.retries.before.suspension'\n                            defaultMessage='Retries Before Suspension'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n                <TextField\n                    className={classes.textField}\n                    id='retry-delay-input'\n                    value={advanceConfigObj.retryDelay}\n                    onChange={(event) => handleConfigFieldChange(event, 'retryDelay')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.retry.delay.ms'\n                            defaultMessage='Retry Delay (ms)'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n            </Grid>\n            <Divider />\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage id='Connection.Timeout' defaultMessage='Connection Timeout' />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.action'\n                            defaultMessage='Action'\n                        />\n                    </InputLabel>\n                    <Select\n                        autoWidth={false}\n                        value={advanceConfigObj.actionSelect}\n                        onChange={(event) => handleConfigFieldChange(event, 'actionSelect')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                    >\n                        {actionItems.map((item) => (\n                            <MenuItem key={item.key} value={item.key}>\n                                {item.value}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='duration-input'\n                    value={advanceConfigObj.actionDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'actionDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.duration.ms'\n                            defaultMessage='Duration (ms)'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid className={classes.advanceDialogActions}>\n                <Button\n                    onClick={() => onSaveAdvanceConfig(advanceConfigObj)}\n                    color='primary'\n                    autoFocus\n                    disabled={isRestricted(['apim:api_create'], api)}\n                    variant='contained'\n                    style={{ marginRight: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.config.save.button'\n                        defaultMessage='Save'\n                    />\n                </Button>\n                <Button onClick={onCancel}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nAdvanceEndpointConfig.propTypes = {\n    classes: PropTypes.shape({\n        configContainer: PropTypes.shape({}),\n        configSubContainer: PropTypes.shape({}),\n        subTitle: PropTypes.shape({}),\n        formControl: PropTypes.shape({}),\n\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    advanceConfig: PropTypes.shape({}).isRequired,\n    isSOAPEndpoint: PropTypes.bool.isRequired,\n    onSaveAdvanceConfig: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(AdvanceEndpointConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Grid, TextField, MenuItem, InputAdornment,\n    Icon,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n} from '@material-ui/core';\nimport { RemoveRedEye } from '@material-ui/icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport Button from '@material-ui/core/Button';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport isEmpty from 'lodash.isempty';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport APIValidation from 'AppData/APIValidation';\nimport Alert from 'AppComponents/Shared/Alert';\nimport EditableParameterRow from './EditableParameterRow';\n\nconst styles = () => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n    },\n    radioWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    addParameter: {\n        marginRight: '16px',\n    },\n    marginRight: {\n        marginRight: '8px',\n    },\n    buttonIcon: {\n        marginRight: '16px',\n    },\n    button: {\n        marginTop: '5px',\n    },\n    listItem: {\n        marginTop: '25px',\n    },\n    eye: {\n        cursor: 'pointer',\n    },\n});\n\n/**\n * The base component for advanced endpoint configurations.\n * @param {any} props The props that are being passed\n * @returns {any} The html representation of the component.\n */\nfunction EndpointSecurity(props) {\n    const { api } = useContext(APIContext);\n    const {\n        intl, securityInfo, onChangeEndpointAuth, classes, isProduction,\n        saveEndpointSecurityConfig,\n        closeEndpointSecurityConfig,\n    } = props;\n    const [endpointSecurityInfo, setEndpointSecurityInfo] = useState({\n        type: '',\n        username: '',\n        password: '',\n        grantType: '',\n        tokenUrl: '',\n        clientId: '',\n        clientSecret: '',\n        customParameters: {},\n    });\n    const [securityValidity, setSecurityValidity] = useState();\n\n    const [showAddParameter, setShowAddParameter] = useState(false);\n    const [clientSecretIsMasked, setClientSecretIsMasked] = useState(true);\n    // Implementation of useState variables for parameter name and value\n    const [parameterName, setParameterName] = useState(null);\n    const [parameterValue, setParameterValue] = useState(null);\n    const endpointType = isProduction ? 'production' : 'sandbox';\n\n    const authTypes = [\n        {\n            key: 'NONE',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.none',\n                defaultMessage: 'None',\n            }),\n        },\n        {\n            key: 'BASIC',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.basic',\n                defaultMessage: 'Basic Auth',\n            }),\n        },\n        {\n            key: 'DIGEST',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.digest.auth',\n                defaultMessage: 'Digest Auth',\n            }),\n        },\n        {\n            key: 'OAUTH',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth',\n                defaultMessage: 'OAuth 2.0',\n            }),\n        },\n    ];\n    const grantTypes = [\n        {\n            key: 'CLIENT_CREDENTIALS',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth.grant.type.client',\n                defaultMessage: 'Client Credentials',\n            }),\n        },\n        {\n            key: 'PASSWORD',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth.grant.type.password',\n                defaultMessage: 'Resource Owner Password',\n            }),\n        },\n    ];\n    useEffect(() => {\n        let tmpSecurity = {};\n        if (securityInfo) {\n            tmpSecurity = { ...securityInfo };\n            const {\n                type, username, password, grantType, tokenUrl, clientId, clientSecret, customParameters,\n            } = securityInfo;\n            tmpSecurity.type = type === null ? 'NONE' : type;\n            tmpSecurity.username = username;\n            tmpSecurity.password = password === '' ? '**********' : password;\n            tmpSecurity.grantType = grantType;\n            tmpSecurity.tokenUrl = tokenUrl;\n            tmpSecurity.clientId = clientId === '' ? '********' : clientId;\n            tmpSecurity.clientSecret = clientSecret === '' ? '********' : clientSecret;\n            tmpSecurity.customParameters = customParameters;\n        }\n        setEndpointSecurityInfo(tmpSecurity);\n    }, [securityInfo]);\n\n    /**\n     * Validating whether token url is in a proper format\n     * @param {*} value value of the field\n     * @returns {*} boolean value\n     */\n    const validateTokenUrl = (value) => {\n        const state = APIValidation.url.required().validate(value).error;\n        if (state === null) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Validate Security Info properties\n     * @param {*} field value of the field\n     */\n    const validateAndUpdateSecurityInfo = (field) => {\n        if (!endpointSecurityInfo[field]) {\n            setSecurityValidity({ ...securityValidity, [field]: false });\n        } else {\n            let validity = true;\n            if (field === 'tokenUrl') {\n                validity = validateTokenUrl(endpointSecurityInfo[field]);\n            }\n            setSecurityValidity({ ...securityValidity, [field]: validity });\n        }\n        const type = isProduction ? 'production' : 'sandbox';\n        onChangeEndpointAuth(endpointSecurityInfo, type);\n    };\n\n    /**\n     * Show or hide the Add Parameter component\n     */\n    const toggleAddParameter = () => {\n        setShowAddParameter(!showAddParameter);\n    };\n\n    /**\n     * Show or hide the Client Secret\n     */\n    const toggleClientSecretMask = () => {\n        setClientSecretIsMasked(!clientSecretIsMasked);\n    };\n\n    /**\n     * Set the custom parameter name or value property\n     * @param {*} name name of the field edited\n     * @returns {*} fills the parameter name or parameter value states\n     */\n    const handleParameterChange = (name) => (event) => {\n        const { value } = event.target;\n        if (name === 'parameterName') {\n            setParameterName(value);\n        } else if (name === 'parameterValue') {\n            setParameterValue(value);\n        }\n    };\n\n    /**\n     * Check if the field is empty or not\n     * @param {*} itemValue value of the field\n     * @returns {*} boolean value\n     */\n    const validateEmpty = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        } else if (itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Add new custom parameter\n     */\n    const handleAddToList = () => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n\n        if (customParametersCopy !== null\n            && Object.prototype.hasOwnProperty.call(customParametersCopy, parameterName)) {\n            Alert.warning('Parameter name: ' + parameterName + ' already exists');\n        } else {\n            customParametersCopy[parameterName] = parameterValue;\n            setParameterName(null);\n            setParameterValue(null);\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Update existing custom parameter name-value pair\n     * @param {*} oldRow previous name-value pair\n     * @param {*} newRow new name-value pair\n     */\n    const handleUpdateList = (oldRow, newRow) => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n        const { oldName, oldValue } = oldRow;\n        const { newName, newValue } = newRow;\n        if (customParametersCopy !== null\n            && Object.prototype.hasOwnProperty.call(customParametersCopy, newName) && oldName === newName) {\n            // Only the value is updated\n            if (newValue && oldValue !== newValue) {\n                customParametersCopy[oldName] = newValue;\n            }\n        } else {\n            delete customParametersCopy[oldName];\n            customParametersCopy[newName] = newValue;\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Delete existing custom parameter name-value pair\n     * @param {*} oldName name property of the name-value pair to be removed\n     */\n    const handleDelete = (oldName) => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n        if (customParametersCopy !== null && Object.prototype.hasOwnProperty.call(customParametersCopy, oldName)) {\n            delete customParametersCopy[oldName];\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Keyboard shortcut to execute adding custom parameters when pressing the Enter key\n     * @param {*} event event containing the key that was pressed\n     */\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleAddToList();\n        }\n    };\n\n    /**\n     * Render the custom parameters component\n     * @returns {*} list of items added\n     */\n    const renderCustomParameters = () => {\n        const items = [];\n        for (const name in endpointSecurityInfo.customParameters) {\n            if (Object.prototype.hasOwnProperty.call(endpointSecurityInfo.customParameters, name)) {\n                items.push(<EditableParameterRow\n                    oldName={name}\n                    oldValue={endpointSecurityInfo.customParameters[name]}\n                    handleUpdateList={handleUpdateList}\n                    handleDelete={handleDelete}\n                    customParameters={endpointSecurityInfo.customParameters}\n                    {...props}\n                    isRestricted={isRestricted}\n                    api={api}\n                />);\n            }\n        }\n        return items;\n    };\n\n    return (\n        <Grid container direction='row' spacing={2}>\n            <Grid item xs={6}>\n                <TextField\n                    disabled={isRestricted(['apim:api_create'], api)}\n                    fullWidth\n                    select\n                    value={endpointSecurityInfo && endpointSecurityInfo.type}\n                    variant='outlined'\n                    onChange={(event) => {\n                        setEndpointSecurityInfo({\n                            ...endpointSecurityInfo,\n                            type: event.target.value,\n                        });\n                    }}\n                    inputProps={{\n                        name: 'key',\n                        id: 'auth-type-select',\n                    }}\n                    onBlur={() => validateAndUpdateSecurityInfo(isProduction)}\n                >\n                    {authTypes.map((type) => (\n                        <MenuItem value={type.key} id={'auth-type-' + type.key}>{type.value}</MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n            <Grid item xs={6} />\n\n            {(endpointSecurityInfo.type === 'OAUTH')\n                && (\n                    <>\n                        <Grid item xs={6}>\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], api)}\n                                required\n                                fullWidth\n                                select\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                        + '.EndpointSecurity.grant.type.input'}\n                                        defaultMessage='Grant Type'\n                                    />\n                                )}\n                                variant='outlined'\n                                onChange={(event) => setEndpointSecurityInfo(\n                                    { ...endpointSecurityInfo, grantType: event.target.value },\n                                )}\n                                value={endpointSecurityInfo.grantType}\n                                inputProps={{\n                                    name: 'key',\n                                    id: 'grant-type-select',\n                                }}\n                                onBlur={() => validateAndUpdateSecurityInfo('grantType')}\n                            >\n                                {grantTypes.map((type) => (\n                                    <MenuItem value={type.key}>{type.value}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n\n                        {(endpointSecurityInfo.grantType === 'CLIENT_CREDENTIALS'\n                        || endpointSecurityInfo.grantType === 'PASSWORD') && (\n                            <>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.tokenUrl === false}\n                                        helperText={\n                                            securityValidity && securityValidity.tokenUrl === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.no.tokenUrl.error'}\n                                                    defaultMessage={'Token URL should not be empty'\n                                                    + ' or formatted incorrectly'}\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.tokenUrl.message'}\n                                                    defaultMessage='Enter Token URL'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-tokenUrl'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.token.url.input'}\n                                                defaultMessage='Token URL'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, tokenUrl: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.tokenUrl}\n                                        onBlur={() => validateAndUpdateSecurityInfo('tokenUrl')}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.clientId === false}\n                                        helperText={\n                                            securityValidity && securityValidity.clientId === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.no.clientId.error'}\n                                                    defaultMessage='Client ID should not be empty'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                    + 'EndpointSecurity.clientId.message'}\n                                                    defaultMessage='Enter Client ID'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-clientId'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.clientId.input'}\n                                                defaultMessage='Client ID'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, clientId: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.clientId}\n                                        onBlur={() => validateAndUpdateSecurityInfo('clientId')}\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.clientSecret === false}\n                                        helperText={\n                                            securityValidity && securityValidity.clientSecret === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.no.clientSecret.error'}\n                                                    defaultMessage='Client Secret should not be empty'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.clientSecret.message'}\n                                                    defaultMessage='Enter Client Secret'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-clientSecret'\n                                        type={clientSecretIsMasked ? 'password' : 'text'}\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.clientSecret.input'}\n                                                defaultMessage='Client Secret'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, clientSecret: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.clientSecret}\n                                        onBlur={() => validateAndUpdateSecurityInfo('clientSecret')}\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                            endAdornment: (\n                                                <InputAdornment position='end'>\n                                                    <RemoveRedEye\n                                                        className={classes.eye}\n                                                        onClick={toggleClientSecretMask}\n                                                    />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                    />\n                                </Grid>\n                            </>\n                        )}\n                    </>\n                )}\n\n            {(endpointSecurityInfo.type === 'BASIC'\n                || endpointSecurityInfo.type === 'DIGEST'\n                || endpointSecurityInfo.grantType === 'PASSWORD') && (\n                <>\n                    <Grid item xs={6}>\n                        <TextField\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            required\n                            fullWidth\n                            error={securityValidity && securityValidity.username === false}\n                            helperText={\n                                securityValidity && securityValidity.username === false ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.no.username.error'}\n                                        defaultMessage='Username should not be empty'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.username.message'}\n                                        defaultMessage='Enter Username'\n                                    />\n                                )\n                            }\n                            variant='outlined'\n                            id='auth-userName'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.user.name.input'\n                                    defaultMessage='Username'\n                                />\n                            )}\n                            onChange={(event) => setEndpointSecurityInfo(\n                                { ...endpointSecurityInfo, username: event.target.value },\n                            )}\n                            value={endpointSecurityInfo.username}\n                            onBlur={() => validateAndUpdateSecurityInfo('username')}\n                        />\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <TextField\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            required\n                            fullWidth\n                            error={securityValidity && securityValidity.password === false}\n                            helperText={\n                                securityValidity && securityValidity.password === false ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.no.password.error'}\n                                        defaultMessage='Password should not be empty'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.password.message'}\n                                        defaultMessage='Enter Password'\n                                    />\n                                )\n                            }\n                            variant='outlined'\n                            type='password'\n                            id='auth-password'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.password.input'\n                                    defaultMessage='Password'\n                                />\n                            )}\n                            value={endpointSecurityInfo.password}\n                            onChange={(event) => setEndpointSecurityInfo(\n                                { ...endpointSecurityInfo, password: event.target.value },\n                            )}\n                            onBlur={() => validateAndUpdateSecurityInfo('password')}\n                            InputProps={{\n                                autoComplete: 'new-password',\n                            }}\n                        />\n                    </Grid>\n                </>\n            )}\n\n            {endpointSecurityInfo.type === 'OAUTH' && (endpointSecurityInfo.grantType === 'CLIENT_CREDENTIALS'\n            || endpointSecurityInfo.grantType === 'PASSWORD')\n            && (\n                <Grid item xs={12}>\n                    <ListItem\n                        className={classes.listItem}\n                    >\n                        <ListItemAvatar>\n                            <Icon color='primary'>info</Icon>\n                        </ListItemAvatar>\n                        <ListItemText>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.add.new.parameter.info'\n                                defaultMessage={'You can add any additional payload parameters'\n                                + ' required for the endpoint below'}\n                            />\n                        </ListItemText>\n                    </ListItem>\n                    <Button\n                        size='medium'\n                        className={classes.button}\n                        onClick={toggleAddParameter}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <AddCircle className={classes.buttonIcon} />\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.add.new.parameter'\n                            defaultMessage='Add New Parameter'\n                        />\n                    </Button>\n                </Grid>\n            )}\n\n            <Grid item xs={12} />\n\n            {(endpointSecurityInfo.type === 'OAUTH')\n            && (!isEmpty(endpointSecurityInfo.customParameters) || showAddParameter) && (\n                <Grid item xs={12}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.label.parameter.name'}\n                                        defaultMessage='Parameter Name'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.label.parameter.value'}\n                                        defaultMessage='Parameter Value'\n                                    />\n                                </TableCell>\n                                <TableCell />\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {showAddParameter\n                            && (\n                                <>\n                                    <TableRow>\n                                        <TableCell>\n                                            <TextField\n                                                fullWidth\n                                                required\n                                                id='outlined-required'\n                                                label={intl.formatMessage({\n                                                    id: 'Apis.Details.Endpoints.GeneralConfiguration'\n                                                    + '.EndpointSecurity.input.parameter.name',\n                                                    defaultMessage: 'Parameter Name',\n                                                })}\n                                                margin='normal'\n                                                variant='outlined'\n                                                className={classes.addParameter}\n                                                value={parameterName === null ? '' : parameterName}\n                                                onChange={handleParameterChange('parameterName')}\n                                                onKeyDown={handleKeyDown('parameterName')}\n                                                helperText={validateEmpty(parameterName)\n                                                    ? 'Invalid parameter name' : ''}\n                                                error={validateEmpty(parameterName)}\n                                                disabled={isRestricted(\n                                                    ['apim:api_create', 'apim:api_publish'],\n                                                    api,\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <TextField\n                                                fullWidth\n                                                required\n                                                id='outlined-required'\n                                                label={intl.formatMessage({\n                                                    id: 'Apis.Details.Endpoints.GeneralConfiguration'\n                                                        + '.EndpointSecurity.input.parameter.value',\n                                                    defaultMessage: 'Parameter Value',\n                                                })}\n                                                margin='normal'\n                                                variant='outlined'\n                                                className={classes.addParameter}\n                                                value={parameterValue === null ? '' : parameterValue}\n                                                onChange={handleParameterChange('parameterValue')}\n                                                onKeyDown={handleKeyDown('parameterValue')}\n                                                error={validateEmpty(parameterValue)}\n                                                disabled={isRestricted(\n                                                    ['apim:api_create', 'apim:api_publish'],\n                                                    api,\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell align='right'>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                disabled={\n                                                    !parameterValue\n                                                            || !parameterName\n                                                            || isRestricted(\n                                                                ['apim:api_create', 'apim:api_publish'], api,\n                                                            )\n                                                }\n                                                onClick={handleAddToList}\n                                                className={classes.marginRight}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Details.Properties.Properties.add'\n                                                    defaultMessage='Add'\n                                                />\n                                            </Button>\n\n                                            <Button onClick={toggleAddParameter}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Properties.Properties.cancel'\n                                                    defaultMessage='Cancel'\n                                                />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                </>\n                            )}\n                            {((endpointType === 'production') || (endpointType === 'sandbox')) && (\n                                renderCustomParameters()\n                            )}\n                        </TableBody>\n                    </Table>\n                </Grid>\n            )}\n            <Grid className={classes.advanceDialogActions}>\n                <Button\n                    onClick={() => saveEndpointSecurityConfig(endpointSecurityInfo, endpointType)}\n                    color='primary'\n                    autoFocus\n                    variant='contained'\n                    style={{ marginTop: '10px', marginRight: '10px', marginBottom: '10px' }}\n                    id='endpoint-security-submit-btn'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurityConfig.config.save.button'\n                        defaultMessage='Submit'\n                    />\n                </Button>\n                <Button\n                    onClick={closeEndpointSecurityConfig}\n                    style={{ marginTop: '10px', marginBottom: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurityConfig.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nEndpointSecurity.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    securityInfo: PropTypes.shape({}).isRequired,\n    onChangeEndpointAuth: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(injectIntl(EndpointSecurity));\n","/* eslint-disable react/jsx-no-bind */\n/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles(() => ({\n    link: {\n        cursor: 'pointer',\n    },\n}));\n\n/**\n * EditableParameterRow for OAuth Endpoint Security\n * @param {*} props properties\n * @returns {*} EditableParameterRow component\n */\nfunction EditableParameterRow(props) {\n    const {\n        oldName, oldValue,\n        handleUpdateList, handleDelete,\n        intl, isRestricted, api,\n    } = props;\n    const [newName, setName] = useState(oldName);\n    const [newValue, setValue] = useState(oldValue);\n    const [editMode, setEditMode] = useState(false);\n\n    /**\n     * Set edit mode\n     */\n    const updateEditMode = () => {\n        setEditMode(!editMode);\n    };\n\n    /**\n     * Update name field\n     * @param {*} event value entered for name field\n     */\n    const handleKeyChange = (event) => {\n        const { value } = event.target;\n        setName(value);\n    };\n\n    /**\n     * Update value field\n     * @param {*} event value entered for the value field\n     */\n    const handleValueChange = (event) => {\n        const { value } = event.target;\n        setValue(value);\n    };\n\n    /**\n     * Validate if the field is empty\n     * @param {*} itemValue value of the field\n     * @returns {*} boolean value\n     */\n    const validateEmpty = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        } else if (itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Save the updated values in the custom parameters object\n     */\n    const saveRow = () => {\n        const oldRow = { oldName, oldValue };\n        const newRow = { newName: newName || oldName, newValue: newValue || oldValue };\n        handleUpdateList(oldRow, newRow);\n        setEditMode(false);\n    };\n\n    /**\n     * Delete name-value pair in the custom parameters object\n     */\n    const deleteRow = () => {\n        handleDelete(oldName);\n    };\n\n    /**\n     * Keyboard event listener to save the name-value pair on Enter\n     * @param {*} e event containing the key that was pressed\n     */\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            saveRow();\n        }\n    };\n\n    // Styles definition\n    const classes = useStyles();\n\n    return (\n        <TableRow>\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='outlined-required'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.GeneralConfiguration.EditableParameterRow.Parameter.Name',\n                            defaultMessage: 'Parameter Name',\n                        })}\n                        margin='normal'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newName}\n                        onChange={handleKeyChange}\n                        onKeyDown={handleKeyDown}\n                        error={validateEmpty(newName)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>{oldName}</TableCell>\n            )}\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='outlined-required'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.GeneralConfiguration.EditableParameterRow.Parameter.Value',\n                            defaultMessage: 'Parameter Value',\n                        })}\n                        margin='normal'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newValue}\n                        onChange={handleValueChange}\n                        onKeyDown={handleKeyDown}\n                        error={validateEmpty(newValue)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>{oldValue}</TableCell>\n            )}\n            <TableCell align='right'>\n                {editMode ? (\n                    <>\n                        <IconButton\n                            className={classes.link}\n                            aria-label='save'\n                            onClick={saveRow}\n                            onKeyDown={() => {}}\n                            disabled={validateEmpty(newName) || validateEmpty(newValue)}\n                            color='inherit'\n                        >\n                            <SaveIcon className={classes.buttonIcon} />\n                        </IconButton>\n                    </>\n                ) : (\n                    <IconButton\n                        className={classes.link}\n                        aria-label='edit'\n                        onClick={updateEditMode}\n                        onKeyDown={() => {}}\n                        color='inherit'\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <EditIcon className={classes.buttonIcon} />\n                    </IconButton>\n                )}\n                <IconButton\n                    className={classes.link}\n                    aria-label='remove'\n                    onClick={deleteRow}\n                    onKeyDown={() => {}}\n                    color='inherit'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                >\n                    <DeleteForeverIcon className={classes.buttonIcon} />\n                </IconButton>\n            </TableCell>\n        </TableRow>\n    );\n}\n\nEditableParameterRow.propTypes = {\n    oldName: PropTypes.string.isRequired,\n    oldValue: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    handleUpdateList: PropTypes.func.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(EditableParameterRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Grid,\n    TextField,\n    makeStyles,\n    Typography,\n    Tooltip,\n    RadioGroup,\n    FormControl,\n    FormControlLabel,\n    MenuItem,\n    InputLabel,\n    Select,\n    Radio,\n} from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport API from 'AppData/api';\nimport Configurations from 'Config';\nimport Banner from 'AppComponents/Shared/Banner';\n\nconst useStyles = makeStyles((theme) => ({\n    typography: {\n        display: 'inline-block',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n    selectField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n    helpIcon: {\n        fontSize: 20,\n    },\n    banner: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n/**\n * The credentials component. This component holds the access and secret key pair.\n * @param {any} props The parameters to credentials component.\n * @returns {any} HTML view of the credentials component.\n */\nexport default function Credentials(props) {\n    const {\n        apiId,\n        endpointConfig,\n        endpointsDispatcher,\n    } = props;\n    const classes = useStyles();\n    const [pageError, setPageError] = useState(null);\n    const inputLabel = useRef(null);\n    const handleChange = (event) => {\n        const newEndpointConfig = { ...endpointConfig };\n        newEndpointConfig.access_method = event.target.value;\n        newEndpointConfig.amznAccessKey = '';\n        newEndpointConfig.amznSecretKey = '';\n        newEndpointConfig.amznRegion = '';\n        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n        setPageError(null);\n    };\n    const { regions } = Configurations.apis.endpoint.aws;\n    useEffect(() => {\n        API.getAmznResourceNames(apiId)\n            .catch((error) => {\n                setPageError(error.response.body.error);\n            });\n    }, []);\n    return (\n        <>\n            <Typography className={classes.typography}>\n                <FormattedMessage\n                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                    + '.endpoint.accessMethod'}\n                    defaultMessage='Access Method'\n                />\n            </Typography>\n            <RadioGroup\n                aria-label='accessMethod'\n                name='accessMethod'\n                value={endpointConfig.access_method}\n                onChange={handleChange}\n            >\n                <div>\n                    <FormControlLabel\n                        value='role-supplied'\n                        control={<Radio color='primary' />}\n                        label={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.accessMethod.roleSupplied'}\n                                    defaultMessage='Using IAM role-supplied temporary AWS credentials'\n                                />\n                            )\n                        }\n                    />\n                    <Tooltip\n                        title={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.tooltip'}\n                                    defaultMessage={'You can and should use an IAM role to manage temporary '\n                                    + 'credentials for applications that run on an EC2 instance'}\n                                />\n                            )\n                        }\n                    >\n                        <Icon className={classes.helpIcon}>help_outline</Icon>\n                    </Tooltip>\n                </div>\n                <div>\n                    <FormControlLabel\n                        value='stored'\n                        control={<Radio color='primary' />}\n                        label={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.accessMethod.stored'}\n                                    defaultMessage='Using stored AWS credentials'\n                                />\n                            )\n                        }\n                    />\n                </div>\n            </RadioGroup>\n            <Grid item>\n                <TextField\n                    required\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                    id='outlined-required'\n                    label={\n                        (\n                            <FormattedMessage\n                                id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                + '.endpoint.accessKey'}\n                                defaultMessage='Access Key'\n                            />\n                        )\n                    }\n                    margin='normal'\n                    variant='outlined'\n                    className={classes.textField}\n                    value={endpointConfig.amznAccessKey}\n                    onChange={(event) => {\n                        const newEndpointConfig = { ...endpointConfig };\n                        newEndpointConfig.amznAccessKey = event.target.value;\n                        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                    }}\n                />\n                <TextField\n                    required\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                    id='outlined-password-input-required'\n                    label={\n                        (\n                            <FormattedMessage\n                                id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                + '.endpoint.secretKey'}\n                                defaultMessage='Secret Key'\n                            />\n                        )\n                    }\n                    type='password'\n                    margin='normal'\n                    variant='outlined'\n                    className={classes.textField}\n                    value={endpointConfig.amznSecretKey}\n                    onChange={(event) => {\n                        const newEndpointConfig = { ...endpointConfig };\n                        newEndpointConfig.amznSecretKey = event.target.value;\n                        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                    }}\n                />\n                <FormControl\n                    required\n                    margin='normal'\n                    variant='outlined'\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                >\n                    <InputLabel ref={inputLabel}>\n                        <FormattedMessage\n                            id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                            + '.endpoint.region'}\n                            defaultMessage='Region'\n                        />\n                    </InputLabel>\n                    <Select\n                        labelId='region-label'\n                        autoWidth={false}\n                        className={classes.selectField}\n                        onChange={(event) => {\n                            const newEndpointConfig = { ...endpointConfig };\n                            newEndpointConfig.amznRegion = event.target.value;\n                            endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                        }}\n                        value={endpointConfig.amznRegion}\n                        MenuProps={{\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                            keepMounted: true,\n                            PaperProps: {\n                                style: {\n                                    maxHeight: 300,\n                                },\n                            },\n                        }}\n                    >\n                        {Object.entries(regions).map(([key, value]) => ((\n                            <MenuItem key={key} value={key}>\n                                {value}\n                            </MenuItem>\n                        )))}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Link to={`/apis/${apiId}/resources`}>\n                    <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                        <FormattedMessage\n                            id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                            + '.endpoint.linkToResources'}\n                            defaultMessage='Go to Resources to map ARNs'\n                        />\n                        <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                    </Typography>\n                </Link>\n            </Grid>\n            {pageError\n                && (\n                    <Grid item className={classes.banner}>\n                        <Banner\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='warning'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n        </>\n    );\n}\n\nCredentials.propTypes = {\n    apiId: PropTypes.shape('').isRequired,\n    endpointConfig: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport 'react-tagsinput/react-tagsinput.css';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport clsx from 'clsx';\nimport TableRow from '@material-ui/core/TableRow';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport Configurations from 'Config';\nimport Card from '@material-ui/core/Card';\nimport AddIcon from '@material-ui/icons/Add';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport APIProduct from 'AppData/APIProduct';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport API from 'AppData/api';\nimport { ConfirmDialog } from 'AppComponents/Shared/index';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport Utils from 'AppData/Utils';\nimport DisplayDevportal from './DisplayDevportal';\nimport DeploymentOnbording from './DeploymentOnbording';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    saveButton: {\n        marginTop: theme.spacing(3),\n    },\n    shapeRec: {\n        backgroundColor: 'black',\n        alignSelf: 'center',\n        width: 120,\n        height: 3,\n    },\n    shapeCircaleBack: {\n        backgroundColor: '#E2E2E2',\n        width: 63,\n        height: 63,\n    },\n    shapeInnerComplete: {\n        backgroundColor: '#095677',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6.5,\n        placeSelf: 'middle',\n    },\n    shapeInnerInactive: {\n        backgroundColor: '#BFBFBF',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6,\n        placeSelf: 'middle',\n    },\n    shapeDottedEnd: {\n        backgroundColor: '#BFBFBF',\n        border: '1px dashed #707070',\n        width: 47,\n        height: 47,\n        marginTop: 7,\n        marginLeft: 7,\n        placeSelf: 'middle',\n    },\n    shapeDottedStart: {\n        backgroundColor: '#1CB1BF',\n        border: '2px solid #ffffff',\n        width: 47,\n        height: 47,\n        marginTop: 6,\n        marginLeft: 6,\n        placeSelf: 'middle',\n    },\n    plusIconStyle: {\n        marginTop: 8,\n        marginLeft: 8,\n    },\n    shapeDottedStart1: {\n        backgroundColor: '#1CB1BF',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6.5,\n        placeSelf: 'middle',\n    },\n    textShape: {\n        marginTop: 5.5,\n        marginLeft: 6.5,\n    },\n    textShape2: {\n        marginTop: 8,\n        marginLeft: 115,\n        height: '18px',\n        fontFamily: 'sans-serif',\n    },\n    textPadding: {\n        height: '25px',\n        paddingBottom: '2px',\n    },\n    textDelete: {\n        marginTop: 8,\n        marginLeft: 120,\n        fontFamily: 'sans-serif',\n        fontSize: 'small',\n    },\n    textShape3: {\n        color: '#38536c',\n        marginLeft: 70,\n    },\n    textShape7: {\n        color: '#38536c',\n    },\n    primaryEndpoint: {\n        color: '#006E9C',\n    },\n    secondaryEndpoint: {\n        color: '#415A85',\n    },\n    textShape4: {\n        marginTop: 55,\n    },\n    textShape8: {\n        marginTop: 80,\n    },\n    textShape5: {\n        marginTop: 10,\n        marginLeft: 85,\n        marginBottom: 10,\n    },\n    textShape6: {\n        color: '#1B3A57',\n    },\n    button1: {\n        color: '#1B3A57',\n        marginLeft: 7,\n    },\n    button2: {\n        color: '#1B3A57',\n        marginLeft: 7,\n        marginTop: 10,\n    },\n    shapeRecBack: {\n        backgroundColor: 'black',\n        alignSelf: 'center',\n        width: 40,\n        height: 3,\n    },\n    shapeCircle: {\n        borderRadius: '50%',\n    },\n    shapeCircleBlack: {\n        backgroundColor: '#000000',\n        alignSelf: 'center',\n        paddingLeft: '15px',\n        width: 15,\n        height: 15,\n    },\n    changeCard: {\n        boxShadow: 15,\n        borderRadius: '10px',\n        backgroundColor: theme.palette.secondary.highlight,\n    },\n    noChangeCard: {\n        boxShadow: 15,\n        borderRadius: '10px',\n    },\n    cardHeight: {\n        boxShadow: 1,\n        height: '90%',\n    },\n    cardContentHeight: {\n        boxShadow: 1,\n        height: '50%',\n    },\n    cardActionHeight: {\n        boxShadow: 1,\n        height: '25%',\n    },\n    dialogContent: {\n        overflow: 'auto',\n        height: '90%',\n    },\n    textOverlay: {\n        overflow: 'hidden',\n        maxHeight: '100%',\n        maxWidth: '100%',\n        cursor: 'pointer',\n        '&:hover': { overflow: 'visible' },\n    },\n    gridOverflow: {\n        overflow: 'scroll',\n        width: '100%',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 130,\n    },\n    dialogPaper: {\n        width: '800px',\n        height: '500px',\n    },\n    createRevisionDialogStyle: {\n        width: '800px',\n    },\n    sectionTitle: {\n        marginBottom: theme.spacing(2),\n    },\n    deployNewRevButtonStyle: {\n        marginRight: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        marginTop: theme.spacing(3),\n    },\n    popover: {\n        pointerEvents: 'none',\n    },\n    paper: {\n        padding: theme.spacing(1),\n        maxWidth: '300px',\n    },\n    timePaddingStyle: {\n        marginTop: theme.spacing(1),\n    },\n    labelSpace: {\n        paddingLeft: theme.spacing(1),\n    },\n    labelSpacingDown: {\n        marginBottom: theme.spacing(2),\n    },\n    warningText: {\n        color: '#ff0000',\n    },\n    tableCellVhostSelect: {\n        paddingTop: theme.spacing(0),\n        paddingBottom: theme.spacing(0),\n    },\n    vhostSelect: {\n        marginTop: theme.spacing(3),\n    },\n    textCount: {\n        marginTop: theme.spacing(-2.5),\n    },\n    containerInline: {\n        display: 'inline-flex',\n    },\n    containerOverflow: {\n        display: 'grid',\n        gridGap: '16px',\n        paddingLeft: '48px',\n        gridTemplateColumns: 'repeat(auto-fill,minmax(160px,1fr))',\n        gridAutoFlow: 'column',\n        gridAutoColumns: 'minmax(160px,1fr)',\n        overflowX: 'auto',\n    },\n}));\n\n/**\n * Renders an Environments list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function Environments() {\n    const classes = useStyles();\n    const maxCommentLength = '255';\n    const intl = useIntl();\n    const { api } = useContext(APIContext);\n    const history = useHistory();\n    const { settings } = useAppContext();\n    const {\n        allRevisions, getRevision, allEnvRevision, getDeployedEnv,\n    } = useRevisionContext();\n    let revisionCount;\n    if (Configurations.app.revisionCount) {\n        revisionCount = Configurations.app.revisionCount;\n    } else {\n        revisionCount = 5;\n    }\n    const restApi = new API();\n    const restProductApi = new APIProduct();\n    const [selectedRevision, setRevision] = useState([]);\n    const defaultVhosts = settings.environment.map(\n        (e) => (e.vhosts && e.vhosts.length > 0 ? { env: e.name, vhost: e.vhosts[0].host } : undefined),\n    );\n    const [selectedVhosts, setVhosts] = useState(defaultVhosts);\n    const [selectedVhostDeploy, setVhostsDeploy] = useState(defaultVhosts);\n    const [extraRevisionToDelete, setExtraRevisionToDelete] = useState(null);\n    const [description, setDescription] = useState('');\n    const [SelectedEnvironment, setSelectedEnvironment] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [confirmDeleteOpen, setConfirmDeleteOpen] = useState(false);\n    const [revisionToDelete, setRevisionToDelete] = useState([]);\n    const [confirmRestoreOpen, setConfirmRestoreOpen] = useState(false);\n    const [revisionToRestore, setRevisionToRestore] = useState([]);\n    const [currentLength, setCurrentLength] = useState(0);\n    const [openDeployPopup, setOpenDeployPopup] = useState(history.location.state === 'deploy');\n\n    // allEnvDeployments represents all deployments of the API with mapping\n    // environment -> {revision deployed to env, vhost deployed to env with revision}\n    const allEnvDeployments = Utils.getAllEnvironmentDeployments(settings.environment, allEnvRevision);\n\n    const toggleOpenConfirmDelete = (revisionName, revisionId) => {\n        setRevisionToDelete([revisionName, revisionId]);\n        setConfirmDeleteOpen(!confirmDeleteOpen);\n    };\n\n    const toggleOpenConfirmRestore = (revisionName, revisionId) => {\n        setRevisionToRestore([revisionName, revisionId]);\n        setConfirmRestoreOpen(!confirmRestoreOpen);\n    };\n\n    const toggleDeployRevisionPopup = () => {\n        setOpenDeployPopup(!openDeployPopup);\n    };\n\n    const handleCloseDeployPopup = () => {\n        history.replace();\n        setOpenDeployPopup(false);\n        setExtraRevisionToDelete(null);\n    };\n\n    const handleClickOpen = () => {\n        if (!isRestricted(['apim:api_create', 'apim:api_publish'], api)) {\n            setOpen(true);\n        }\n    };\n\n    const handleDeleteSelect = (event) => {\n        setExtraRevisionToDelete([event.target.value, event.target.name]);\n    };\n\n    const handleSelect = (event) => {\n        const revisions = selectedRevision.filter((r) => r.env !== event.target.name);\n        const oldRevision = selectedRevision.find((r) => r.env === event.target.name);\n        let displayOnDevPortal = true;\n        if (oldRevision) {\n            displayOnDevPortal = oldRevision.displayOnDevPortal;\n        }\n        revisions.push({ env: event.target.name, revision: event.target.value, displayOnDevPortal });\n        setRevision(revisions);\n    };\n\n    const handleVhostSelect = (event) => {\n        const vhosts = selectedVhosts.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhosts(vhosts);\n    };\n\n    const handleVhostDeploySelect = (event) => {\n        const vhosts = selectedVhostDeploy.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhostsDeploy(vhosts);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setExtraRevisionToDelete(null);\n    };\n\n    const handleChange = (event) => {\n        if (event.target.checked) {\n            setSelectedEnvironment([...SelectedEnvironment, event.target.value]);\n        } else {\n            setSelectedEnvironment(\n                SelectedEnvironment.filter((env) => env !== event.target.value),\n            );\n        }\n        if (event.target.name === 'description') {\n            setDescription(event.target.value);\n            setCurrentLength(event.target.value.length);\n        }\n    };\n\n    /**\n     * Handles deleting a revision\n     * @param {Object} revisionId the revision Id\n     * @returns {Object} promised delete\n     */\n    function deleteRevision(revisionId) {\n        let promiseDelete;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            promiseDelete = restProductApi.deleteProductRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Revision Deleted Successfully',\n                        id: 'Apis.Details.Environments.Environments.revision.delete.success',\n                    }));\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting the revision',\n                            id: 'Apis.Details.Environments.Environments.revision.delete.error',\n                        }));\n                    }\n                }).finally(() => {\n                    history.replace();\n                    getRevision();\n                });\n        } else {\n            promiseDelete = restApi.deleteRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Revision Deleted Successfully',\n                        id: 'Apis.Details.Environments.Environments.revision.delete.success',\n                    }));\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting the revision',\n                            id: 'Apis.Details.Environments.Environments.revision.delete.error',\n                        }));\n                    }\n                }).finally(() => {\n                    history.replace();\n                    getRevision();\n                });\n        }\n        return promiseDelete;\n    }\n\n    /**\n     * Handles creating a new revision\n     * @param {Object} body the request body\n     * @returns {Object} promised create\n     */\n    function createRevision(body) {\n        if (api.apiType === API.CONSTS.APIProduct) {\n            restProductApi.createProductRevision(api.id, body)\n                .then(() => {\n                    Alert.info('Revision Created Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                });\n        } else {\n            api.createRevision(api.id, body)\n                .then(() => {\n                    Alert.info('Revision Created Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                });\n        }\n    }\n\n    /**\n      * Handles adding a new revision\n      * @memberof Revisions\n      */\n    function handleClickAddRevision() {\n        const body = {\n            description,\n        };\n        if (extraRevisionToDelete) {\n            deleteRevision(extraRevisionToDelete[0])\n                .then(() => {\n                    createRevision(body);\n                }).finally(() => setExtraRevisionToDelete(null));\n        } else {\n            createRevision(body);\n        }\n        setOpen(false);\n        setDescription('');\n        setExtraRevisionToDelete(null);\n    }\n\n    const runActionDelete = (confirm, revisionId) => {\n        if (confirm) {\n            deleteRevision(revisionId);\n        }\n        setConfirmDeleteOpen(!confirmDeleteOpen);\n        setRevisionToDelete([]);\n    };\n\n    /**\n      * Handles restore revision\n      * @memberof Revisions\n      */\n    function restoreRevision(revisionId) {\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.restoreRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info('Revision Restored Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while restoring the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.restoreProductRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info('Revision Restored Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while restoring the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    const runActionRestore = (confirm, revisionId) => {\n        if (confirm) {\n            restoreRevision(revisionId);\n        }\n        setConfirmRestoreOpen(!confirmRestoreOpen);\n        setRevisionToRestore([]);\n    };\n\n    /**\n      * Handles undeploy a revision\n      * @memberof Revisions\n      */\n    function undeployRevision(revisionId, envName) {\n        const body = [{\n            name: envName,\n            displayOnDevportal: false,\n        }];\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.undeployRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Revision Undeployed Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while undeploying the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.undeployProductRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Revision Undeployed Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while undeploying the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    /**\n      * Handles deploy a revision\n      * @memberof Revisions\n      */\n    function deployRevision(revisionId, envName, vhost, displayOnDevportal) {\n        const body = [{\n            name: envName,\n            displayOnDevportal,\n            vhost,\n        }];\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.deployRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Deploy revision Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while deploy the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.deployProductRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Deploy revision Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while deploy the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    /**\n      * Handles adding a new revision and deploy\n      * @memberof Revisions\n      */\n    function createDeployRevision(envList, vhostList) {\n        const body = {\n            description,\n        };\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.createRevision(api.id, body)\n                .then((response) => {\n                    Alert.info('Revision Created Successfully');\n                    const body1 = [];\n                    for (let i = 0; i < envList.length; i++) {\n                        body1.push({\n                            name: envList[i],\n                            vhost: vhostList.find((v) => v.env === envList[i]).vhost,\n                            displayOnDevportal: true,\n                        });\n                    }\n                    restApi.deployRevision(api.id, response.body.id, body1)\n                        .then(() => {\n                            Alert.info('Revision Deployed Successfully');\n                        })\n                        .catch((error) => {\n                            if (error.response) {\n                                Alert.error(error.response.body.description);\n                            } else {\n                                Alert.error('Something went wrong while deploying the revision');\n                            }\n                            console.error(error);\n                        }).finally(() => {\n                            history.replace();\n                            getRevision();\n                            getDeployedEnv();\n                        });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                });\n            setOpenDeployPopup(false);\n        } else {\n            restProductApi.createProductRevision(api.id, body)\n                .then((response) => {\n                    Alert.info('Revision Created Successfully');\n                    const body1 = [];\n                    for (let i = 0; i < envList.length; i++) {\n                        body1.push({\n                            name: envList[i],\n                            vhost: vhostList.find((v) => v.env === envList[i]).vhost,\n                            displayOnDevportal: true,\n                        });\n                    }\n                    restProductApi.deployProductRevision(api.id, response.body.id, body1)\n                        .then(() => {\n                            Alert.info('Revision Deployed Successfully');\n                        })\n                        .catch((error) => {\n                            if (error.response) {\n                                Alert.error(error.response.body.description);\n                            } else {\n                                Alert.error('Something went wrong while deploying the revision');\n                            }\n                            console.error(error);\n                        }).finally(() => {\n                            history.replace();\n                            getRevision();\n                            getDeployedEnv();\n                        });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                });\n            setOpenDeployPopup(false);\n        }\n    }\n\n    /**\n     * Handles creating and deploying a new revision\n     * @param {Object} envList the environment list\n     * @param {Array} vhostList the vhost list\n     * @param {Object} length the length of the list\n     */\n    function handleCreateAndDeployRevision(envList, vhostList) {\n        if (extraRevisionToDelete) {\n            deleteRevision(extraRevisionToDelete[0])\n                .then(() => {\n                    createDeployRevision(envList, vhostList);\n                }).finally(() => {\n                    setExtraRevisionToDelete(null);\n                });\n        } else {\n            createDeployRevision(envList, vhostList);\n        }\n    }\n\n    const confirmDeleteDialog = (\n        <ConfirmDialog\n            key='key-dialog'\n            labelCancel={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.cancel'\n                    defaultMessage='Cancel'\n                />\n            )}\n            title={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.title'\n                    defaultMessage='Confirm Delete'\n                />\n            )}\n            message={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.message'\n                    defaultMessage='Are you sure you want to delete {revision} ?'\n                    values={{ revision: revisionToDelete[0] }}\n                />\n            )}\n            labelOk={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.ok'\n                    defaultMessage='Yes'\n                />\n            )}\n            callback={(e) => runActionDelete(e, revisionToDelete[1])}\n            open={confirmDeleteOpen}\n        />\n    );\n\n    const confirmRestoreDialog = (\n        <ConfirmDialog\n            key='key-dialog-restore'\n            labelCancel={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.cancel'\n                    defaultMessage='Cancel'\n                />\n            )}\n            title={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.title'\n                    defaultMessage='Confirm Restore'\n                />\n            )}\n            message={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.message'\n                    defaultMessage='Are you sure you want to restore {revision} (To Current API)?'\n                    values={{ revision: revisionToRestore[0] }}\n                />\n            )}\n            labelOk={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.ok'\n                    defaultMessage='Yes'\n                />\n            )}\n            callback={(e) => runActionRestore(e, revisionToRestore[1])}\n            open={confirmRestoreOpen}\n        />\n    );\n\n    let item1;\n    /**\n     * Returns modified item1\n     * @param {*} revDescription The description of the revision\n     * @returns {Object} Returns the item1\n     */\n    function ReturnItem1({ revDescription, revName, revCreatedTime }) {\n        const [anchorEl, setAnchorEl] = useState(null);\n\n        const handlePopoverOpen = (event) => {\n            setAnchorEl(event.currentTarget);\n        };\n\n        const handlePopoverClose = () => {\n            setAnchorEl(null);\n        };\n\n        const openPopover = Boolean(anchorEl);\n        item1 = (\n            <Grid\n                className={classes.containerInline}\n            >\n                <Grid item className={classes.shapeRec} />\n                <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                    <Grid\n                        className={clsx(classes.shapeInnerComplete, classes.shapeCircle)}\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                    />\n                    <Popover\n                        id='mouse-over-popover'\n                        className={classes.popover}\n                        classes={{\n                            paper: classes.paper,\n\n                        }}\n                        open={openPopover}\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        transformOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                    >\n                        <div>\n                            <Typography variant='body1'>\n                                <b>{revName}</b>\n                            </Typography>\n                            <Typography variant='body2'>\n                                {revDescription}\n                            </Typography>\n                            <div className={classes.timePaddingStyle}>\n                                <Typography variant='caption'>\n                                    <span>{moment(revCreatedTime).fromNow()}</span>\n                                </Typography>\n                            </div>\n                        </div>\n                    </Popover>\n                </Grid>\n                <Grid item className={classes.shapeRecBack} />\n            </Grid>\n        );\n        return item1;\n    }\n    const item2 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid className={clsx(classes.shapeInnerInactive, classes.shapeCircle)} />\n            </Grid>\n            <Grid item className={classes.shapeRecBack} />\n        </Grid>\n    );\n    const item3 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid className={clsx(classes.shapeDottedEnd, classes.shapeCircle)} />\n            </Grid>\n        </Grid>\n    );\n    const item4 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid\n                    onClick={handleClickOpen}\n                    className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                    style={{ cursor: 'pointer' }}\n                >\n                    <AddIcon style={{ fontSize: 30 }} className={classes.plusIconStyle} />\n                </Grid>\n            </Grid>\n            <Grid item className={classes.shapeRecBack} />\n        </Grid>\n    );\n    const item5 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid\n                    onClick={handleClickOpen}\n                    className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                    style={{ cursor: 'pointer' }}\n                >\n                    <AddIcon style={{ fontSize: 30 }} className={classes.plusIconStyle} />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n    let item6;\n    /**\n     * Returns modified item6\n     * @param {*} revDescription The description of the revision\n     * @returns {Object} Returns the item6\n     */\n    function ReturnItem6({ revDescription, revName, revCreatedTime }) {\n        const [anchorEl1, setAnchorEl1] = useState(null);\n\n        const handlePopoverOpen = (event) => {\n            setAnchorEl1(event.currentTarget);\n        };\n\n        const handlePopoverClose = () => {\n            setAnchorEl1(null);\n        };\n\n        const openPopover = Boolean(anchorEl1);\n        item6 = (\n            <Grid\n                className={classes.containerInline}\n            >\n                <Grid item className={classes.shapeRec} />\n                <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                    <Grid\n                        className={clsx(classes.shapeDottedStart1, classes.shapeCircle)}\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                    />\n                    <Popover\n                        id='mouse-over-popover'\n                        className={classes.popover}\n                        classes={{\n                            paper: classes.paper,\n                        }}\n                        open={openPopover}\n                        anchorEl={anchorEl1}\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'right',\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                    >\n                        <div>\n                            <Typography variant='body1'>\n                                <b>{revName}</b>\n                            </Typography>\n                            <Typography variant='body2'>\n                                {revDescription}\n                            </Typography>\n                            <div className={classes.timePaddingStyle}>\n                                <Typography variant='caption'>\n                                    <span>{moment(revCreatedTime).fromNow()}</span>\n                                </Typography>\n                            </div>\n                        </div>\n                    </Popover>\n                </Grid>\n                <Grid item className={classes.shapeRecBack} />\n            </Grid>\n        );\n        return item6;\n    }\n\n    const items = [];\n    if (!api.isRevision) {\n        if (allRevisions && allRevisions.length !== 0) {\n            items.push(\n                <Grid item className={clsx(classes.shapeCircleBlack, classes.shapeCircle)} />,\n            );\n            for (let revision = 0; revision < (allRevisions.length); revision++) {\n                if (revision % 2 === 0) {\n                    items.push(\n                        <Grid item>\n                            <Grid className={classes.textShape4} />\n                            <ReturnItem1\n                                revDescription={allRevisions[revision].description}\n                                revName={allRevisions[revision].displayName}\n                                revCreatedTime={allRevisions[revision].createdTime}\n                            />\n                            {item1}\n                            <Grid className={classes.textShape2}>\n                                {allRevisions[revision].displayName}\n                            </Grid>\n                            <Grid>\n                                <Button\n                                    className={classes.textShape3}\n                                    onClick={() => toggleOpenConfirmRestore(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    size='small'\n                                    type='submit'\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    startIcon={<RestoreIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.restore'\n                                        defaultMessage='Restore'\n                                    />\n                                </Button>\n                                <Button\n                                    className={classes.textShape7}\n                                    onClick={() => toggleOpenConfirmDelete(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    disabled={(allEnvRevision && allEnvRevision.filter(\n                                        (o1) => o1.id === allRevisions[revision].id,\n                                    ).length !== 0) || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    size='small'\n                                    color='#38536c'\n                                    startIcon={<DeleteForeverIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </Grid>\n                        </Grid>,\n                    );\n                } else {\n                    items.push(\n                        <Grid item>\n                            <Grid className={classes.textShape5} />\n                            <Grid className={classes.textShape2}>\n                                {allRevisions[revision].displayName}\n                            </Grid>\n                            <Grid className={classes.textPadding}>\n                                <Button\n                                    className={classes.textShape3}\n                                    onClick={() => toggleOpenConfirmRestore(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    size='small'\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    type='submit'\n                                    startIcon={<RestoreIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.restore'\n                                        defaultMessage='Restore'\n                                    />\n                                </Button>\n                                <Button\n                                    className={classes.textShape7}\n                                    onClick={() => toggleOpenConfirmDelete(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    disabled={(allEnvRevision && allEnvRevision.filter(\n                                        (o1) => o1.id === allRevisions[revision].id,\n                                    ).length !== 0) || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    size='small'\n                                    color='#38536c'\n                                    startIcon={<DeleteForeverIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </Grid>\n                            <ReturnItem6\n                                revDescription={allRevisions[revision].description}\n                                revName={allRevisions[revision].displayName}\n                                revCreatedTime={allRevisions[revision].createdTime}\n                            />\n                            {item6}\n                        </Grid>,\n                    );\n                }\n            }\n            if (allRevisions.length !== revisionCount) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4}>\n                            {item4}\n                        </Grid>\n                    </Grid>,\n                );\n            }\n            if (allRevisions.length === revisionCount) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4}>\n                            {item5}\n                        </Grid>\n                    </Grid>,\n                );\n            }\n            for (let unassignRevision = 0; unassignRevision\n                < (revisionCount - (allRevisions.length + 1)); unassignRevision++) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item2}\n                    </Grid>,\n                );\n            }\n            if (revisionCount !== allRevisions.length) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item3}\n                    </Grid>,\n                );\n            }\n        }\n\n        if (allRevisions && allRevisions.length === 0) {\n            items.push(\n                <div>\n                    <Grid className={classes.textShape8} />\n                    <Grid item className={clsx(classes.shapeCircleBlack, classes.shapeCircle)} />\n                </div>,\n            );\n            items.push(\n                <Grid item>\n                    <Grid className={classes.textShape4}>\n                        {item4}\n                    </Grid>\n                </Grid>,\n            );\n            for (let revision = 0; revision < (revisionCount - (allRevisions.length + 1)); revision++) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item2}\n                    </Grid>,\n                );\n            }\n            items.push(\n                <Grid item>\n                    <Grid className={classes.textShape4} />\n                    {item3}\n                </Grid>,\n            );\n        }\n    }\n\n    /**\n     * Get gateway access URL from vhost\n     * @param vhost VHost object\n     * @param type URL type WS or HTTP\n     * @returns {{secondary: string, primary: string}}\n     */\n    function getGatewayAccessUrl(vhost, type) {\n        const endpoints = { primary: '', secondary: '', combined: '' };\n        if (!vhost) {\n            return endpoints;\n        }\n\n        if (type === 'WS') {\n            endpoints.primary = 'ws://' + vhost.host + ':' + vhost.wsPort;\n            endpoints.secondary = 'wss://' + vhost.host + ':' + vhost.wssPort;\n            endpoints.combined = endpoints.secondary + ' ' + endpoints.primary;\n            return endpoints;\n        }\n\n        const httpContext = vhost.httpContext ? '/' + vhost.httpContext.replace(/^\\//g, '') : '';\n        endpoints.primary = 'http://' + vhost.host\n            + (vhost.httpPort === 80 ? '' : ':' + vhost.httpPort) + httpContext;\n        endpoints.secondary = 'https://' + vhost.host\n            + (vhost.httpsPort === 443 ? '' : ':' + vhost.httpsPort) + httpContext;\n        endpoints.combined = endpoints.secondary + ' ' + endpoints.primary;\n        return endpoints;\n    }\n\n    function getVhostHelperText(env, selectionList, shorten, maxTextLen) {\n        const selected = selectionList && selectionList.find((v) => v.env === env);\n        if (selected) {\n            const vhost = settings.environment.find((e) => e.name === env).vhosts.find(\n                (v) => v.host === selected.vhost,\n            );\n\n            const maxtLen = maxTextLen || 30;\n            const gatewayUrls = getGatewayAccessUrl(vhost, api.isWebSocket() ? 'WS' : 'HTTP');\n            if (shorten) {\n                const helperText = getGatewayAccessUrl(vhost, api.isWebSocket() ? 'WS' : 'HTTP').secondary;\n                return helperText.length > maxtLen ? helperText.substring(0, maxtLen) + '...' : helperText;\n            }\n            return gatewayUrls.combined;\n        }\n        return '';\n    }\n\n    return (\n        <>\n            {allRevisions && allRevisions.length === 0 && (\n                <DeploymentOnbording\n                    classes={classes}\n                    getVhostHelperText={getVhostHelperText}\n                    createDeployRevision={createDeployRevision}\n                    description\n                    setDescription={setDescription}\n                />\n            )}\n            {allRevisions && allRevisions.length !== 0 && (\n                <Grid md={12}>\n                    <Typography id='itest-api-details-deployments-head' variant='h5' gutterBottom>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deployments.heading'\n                            defaultMessage='Deployments'\n                        />\n                    </Typography>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deployments.sub.heading'\n                            defaultMessage='Create revisions and deploy in Gateway Environments'\n                        />\n                    </Typography>\n                </Grid>\n            )}\n            {!api.isRevision && allRevisions && allRevisions.length !== 0\n            && (\n                <Grid container>\n                    <Button\n                        onClick={toggleDeployRevisionPopup}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                        variant='contained'\n                        color='primary'\n                        size='large'\n                        className={classes.deployNewRevButtonStyle}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deploy.new.revision'\n                            defaultMessage='Deploy New Revision'\n                        />\n                    </Button>\n                </Grid>\n            )}\n            <Grid container>\n                <Dialog\n                    open={openDeployPopup}\n                    onClose={handleCloseDeployPopup}\n                    aria-labelledby='form-dialog-title'\n                    classes={{ paper: classes.dialogPaper }}\n                >\n                    <DialogTitle id='form-dialog-title' variant='h2'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deploy.new.revision.heading'\n                            defaultMessage='Deploy New Revision'\n                        />\n                    </DialogTitle>\n                    <DialogContent className={classes.dialogContent}>\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Typography variant='body' align='left' className={classes.warningText}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.select.rev.warning'\n                                    defaultMessage={'Please delete a revision as '\n                                    + 'the number of revisions have reached a maximum of {count}'}\n                                    values={{ count: revisionCount }}\n                                />\n                            </Typography>\n                        )}\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Box mb={3}>\n                                <TextField\n                                    fullWidth\n                                    id='revision-to-delete-selector'\n                                    required\n                                    select\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.select.rev.delete'\n                                            defaultMessage='Revision to delete'\n                                        />\n                                    )}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            anchorOrigin: {\n                                                vertical: 'bottom',\n                                                horizontal: 'left',\n                                            },\n                                            getContentAnchorEl: null,\n                                        },\n                                    }}\n                                    name='extraRevisionToDelete'\n                                    onChange={handleDeleteSelect}\n                                    helperText={allRevisions && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper1'\n                                                defaultMessage={'Please undeploy and delete a revision as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper'\n                                                defaultMessage={'Please select a revision to delete as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        )}\n                                    margin='normal'\n                                    variant='outlined'\n                                    disabled={api.isRevision || allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0}\n                                >\n                                    {allRevisions && allRevisions.length !== 0 && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).map(\n                                        (revision) => (\n                                            <MenuItem value={revision.id} name={revision.displayName}>\n                                                {revision.displayName}\n                                            </MenuItem>\n                                        ),\n                                    )}\n                                </TextField>\n                            </Box>\n                        )}\n                        <Box mb={3}>\n                            <TextField\n                                autoFocus\n                                name='description'\n                                margin='dense'\n                                variant='outlined'\n                                label='Description'\n                                inputProps={{ maxLength: maxCommentLength }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.description.deploy'\n                                        defaultMessage='Brief description of the new revision'\n                                    />\n                                )}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                rowsMax={4}\n                                defaultValue={description}\n                                onBlur={handleChange}\n                            />\n                            <Typography className={classes.textCount} align='right'>\n                                {currentLength + '/' + maxCommentLength}\n                            </Typography>\n                        </Box>\n                        <Box mt={2}>\n                            <Typography variant='h6' align='left' className={classes.sectionTitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.api.gateways.heading'\n                                    defaultMessage='API Gateways'\n                                />\n                            </Typography>\n                            <Grid\n                                container\n                                spacing={3}\n                            >\n                                {settings.environment.map((row) => (\n                                    <Grid item xs={4}>\n                                        <Card\n                                            className={clsx(SelectedEnvironment\n                                                && SelectedEnvironment.includes(row.name)\n                                                ? (classes.changeCard) : (classes.noChangeCard), classes.cardHeight)}\n                                            variant='outlined'\n                                        >\n                                            <Box height='100%'>\n                                                <CardHeader\n                                                    action={(\n                                                        <Checkbox\n                                                            id={row.name.split(' ').join('')}\n                                                            value={row.name}\n                                                            checked={SelectedEnvironment.includes(row.name)}\n                                                            onChange={handleChange}\n                                                            color='primary'\n                                                            icon={<RadioButtonUncheckedIcon />}\n                                                            checkedIcon={<CheckCircleIcon color='primary' />}\n                                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                        />\n                                                    )}\n                                                    title={(\n                                                        <Typography variant='subtitle2'>\n                                                            {row.displayName}\n                                                        </Typography>\n                                                    )}\n                                                    subheader={(\n                                                        <Typography\n                                                            variant='body2'\n                                                            color='textSecondary'\n                                                            gutterBottom\n                                                        >\n                                                            {row.type}\n                                                        </Typography>\n                                                    )}\n                                                />\n                                                <CardContent className={classes.cardContentHeight}>\n                                                    <Grid\n                                                        container\n                                                        direction='column'\n                                                        spacing={2}\n                                                    >\n                                                        <Grid item xs={12}>\n                                                            <Tooltip\n                                                                title={getVhostHelperText(row.name,\n                                                                    selectedVhostDeploy)}\n                                                                placement='bottom'\n                                                            >\n                                                                <TextField\n                                                                    id='vhost-selector'\n                                                                    select\n                                                                    label={(\n                                                                        <FormattedMessage\n                                                                            id='Apis.Details.Environments.deploy.vhost'\n                                                                            defaultMessage='VHost'\n                                                                        />\n                                                                    )}\n                                                                    SelectProps={{\n                                                                        MenuProps: {\n                                                                            anchorOrigin: {\n                                                                                vertical: 'bottom',\n                                                                                horizontal: 'left',\n                                                                            },\n                                                                            getContentAnchorEl: null,\n                                                                        },\n                                                                    }}\n                                                                    name={row.name}\n                                                                    value={selectedVhostDeploy.find(\n                                                                        (v) => v.env === row.name,\n                                                                    ).vhost}\n                                                                    onChange={handleVhostDeploySelect}\n                                                                    margin='dense'\n                                                                    variant='outlined'\n                                                                    fullWidth\n                                                                    helperText={getVhostHelperText(row.name,\n                                                                        selectedVhostDeploy, true)}\n                                                                >\n                                                                    {row.vhosts.map(\n                                                                        (vhost) => (\n                                                                            <MenuItem value={vhost.host}>\n                                                                                {vhost.host}\n                                                                            </MenuItem>\n                                                                        ),\n                                                                    )}\n                                                                </TextField>\n                                                            </Tooltip>\n                                                        </Grid>\n                                                        <Grid item>\n                                                            {allEnvRevision\n                                                                && allEnvRevision.filter(\n                                                                    (o1) => {\n                                                                        if (o1.deploymentInfo.filter(\n                                                                            (o2) => o2.name === row.name,\n                                                                        ).length > 0) {\n                                                                            return o1;\n                                                                        }\n                                                                        return null;\n                                                                    },\n                                                                ).length !== 0 ? (\n                                                                    allEnvRevision && allEnvRevision.filter(\n                                                                        (o1) => {\n                                                                            if (o1.deploymentInfo.filter(\n                                                                                (o2) => o2.name === row.name,\n                                                                            ).length > 0) {\n                                                                                return o1;\n                                                                            }\n                                                                            return null;\n                                                                        },\n                                                                    ).map((o3) => (\n                                                                        <div>\n                                                                            <Chip\n                                                                                label={o3.displayName}\n                                                                                style={{ backgroundColor: '#15B8CF' }}\n                                                                            />\n                                                                        </div>\n                                                                    ))) : (\n                                                                // eslint-disable-next-line react/jsx-indent\n                                                                    <div />\n                                                                )}\n                                                        </Grid>\n                                                        <Grid item />\n                                                    </Grid>\n                                                </CardContent>\n                                            </Box>\n                                        </Card>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseDeployPopup}>\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.deploy.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            type='submit'\n                            variant='contained'\n                            onClick={\n                                () => handleCreateAndDeployRevision(SelectedEnvironment, selectedVhostDeploy)\n                            }\n                            color='primary'\n                            disabled={SelectedEnvironment.length === 0\n                                || (allRevisions && allRevisions.length === revisionCount && !extraRevisionToDelete)\n                                || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.deploy.deploy'\n                                defaultMessage='Deploy'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Grid>\n            {allRevisions && allRevisions.length !== 0 && (\n                <>\n                    <Grid\n                        container\n                        direction='row'\n                        alignItems='flex-start'\n                        spacing={1}\n                    >\n                        <Grid item>\n                            <Typography variant='h6' gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.Deployments'\n                                    defaultMessage='Revisions'\n                                />\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.Create.Revision.Deploy'\n                                        defaultMessage='Create new revision and deploy'\n                                    />\n                                )}\n                                placement='top-end'\n                                aria-label='New Deployment'\n                            >\n                                <IconButton size='small' aria-label='delete'>\n                                    <HelpOutlineIcon fontSize='small' />\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n\n                    </Grid>\n                    <Box className={classes.containerOverflow}>\n                        <Grid\n                            xs={12}\n                            className={classes.containerInline}\n                        >\n                            {items}\n                            {confirmDeleteDialog}\n                            {confirmRestoreDialog}\n                        </Grid>\n                    </Box>\n                </>\n            )}\n            <Grid container>\n                <Dialog\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby='form-dialog-title'\n                    classes={{ paper: classes.createRevisionDialogStyle }}\n                >\n                    <DialogTitle id='form-dialog-title' variant='h2'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.revision.create.heading'\n                            defaultMessage='Create New Revision (From Current API)'\n                        />\n                    </DialogTitle>\n                    <DialogContent className={classes.dialogContent}>\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Typography variant='body' align='left' className={classes.warningText}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.select.rev.warning'\n                                    defaultMessage={'Please delete a revision as '\n                                    + 'the number of revisions have reached a maximum of {count}'}\n                                    values={{ count: revisionCount }}\n                                />\n                            </Typography>\n                        )}\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Box mb={3}>\n                                <TextField\n                                    fullWidth\n                                    id='revision-to-delete-selector'\n                                    required\n                                    select\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.select.rev.delete'\n                                            defaultMessage='Revision to delete'\n                                        />\n                                    )}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            anchorOrigin: {\n                                                vertical: 'bottom',\n                                                horizontal: 'left',\n                                            },\n                                            getContentAnchorEl: null,\n                                        },\n                                    }}\n                                    name='extraRevisionToDelete'\n                                    onChange={handleDeleteSelect}\n                                    helperText={allRevisions && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper1'\n                                                defaultMessage={'Please undeploy and delete a revision as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper'\n                                                defaultMessage={'Please select a revision to delete as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        )}\n                                    margin='normal'\n                                    variant='outlined'\n                                    disabled={api.isRevision || allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0}\n                                >\n                                    {allRevisions && allRevisions.length !== 0 && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).map(\n                                        (revision) => (\n                                            <MenuItem value={revision.id} name={revision.displayName}>\n                                                {revision.displayName}\n                                            </MenuItem>\n                                        ),\n                                    )}\n                                </TextField>\n                            </Box>\n                        )}\n                        <Box mb={3}>\n                            <TextField\n                                autoFocus\n                                name='description'\n                                margin='dense'\n                                variant='outlined'\n                                label='Description'\n                                inputProps={{ maxLength: maxCommentLength }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.description.create'\n                                        defaultMessage='Brief description of the new revision'\n                                    />\n                                )}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                rowsMax={4}\n                                defaultValue={description}\n                                onBlur={handleChange}\n                            />\n                            <Typography className={classes.textCount} align='right'>\n                                {currentLength + '/' + maxCommentLength}\n                            </Typography>\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose}>\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.create.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            onClick={handleClickAddRevision}\n                            type='submit'\n                            variant='contained'\n                            color='primary'\n                            disabled={api.isRevision\n                                || (allRevisions && allRevisions.length === revisionCount && !extraRevisionToDelete)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.create.create'\n                                defaultMessage='Create'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Grid>\n            {allRevisions && allRevisions.length !== 0 && (\n                <Box mx='auto' mt={5}>\n                    <Typography variant='h6' className={classes.sectionTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.APIGateways'\n                            defaultMessage='API Gateways'\n                        />\n                    </Typography>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.api.gateways.name'\n                                            defaultMessage='Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.gateway.accessUrl'\n                                            defaultMessage='Gateway Access URL'\n                                        />\n                                    </TableCell>\n                                    {api && api.isDefaultVersion !== true\n                                        ? (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.gateway\n                                                    .deployed.revision'\n                                                    defaultMessage='Deployed Revision'\n                                                />\n                                            </TableCell>\n                                        )\n                                        : (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.gateway.action'\n                                                    defaultMessage='Action'\n                                                />\n                                            </TableCell>\n                                        )}\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.visibility.in.devportal'\n                                            defaultMessage='Gateway URL Visibility'\n                                        />\n                                        <Tooltip\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.display.devportal'\n                                                    defaultMessage='Display Gateway Access URLs in developer portal.'\n                                                />\n                                            )}\n                                            placement='top-end'\n                                            aria-label='New Deployment'\n                                        >\n                                            <IconButton size='small' aria-label='delete'>\n                                                <HelpOutlineIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {settings.environment.map((row) => (\n                                    <TableRow key={row.name}>\n                                        <TableCell component='th' scope='row'>\n                                            {row.displayName}\n                                        </TableCell>\n                                        {allEnvDeployments[row.name].revision != null ? (\n                                            <>\n                                                <TableCell align='left'>\n                                                    <div className={classes.primaryEndpoint}>\n                                                        {api.isWebSocket()\n                                                            ? getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                .vhost, 'WS')\n                                                                .primary : getGatewayAccessUrl(\n                                                                allEnvDeployments[row.name].vhost, 'HTTP',\n                                                            ).primary}\n                                                    </div>\n                                                    <div className={classes.secondaryEndpoint}>\n                                                        {api.isWebSocket()\n                                                            ? getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                .vhost, 'WS')\n                                                                .secondary : getGatewayAccessUrl(\n                                                                allEnvDeployments[row.name].vhost, 'HTTP',\n                                                            ).secondary}\n                                                    </div>\n                                                </TableCell>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <TableCell align='left' className={classes.tableCellVhostSelect}>\n                                                    <Tooltip\n                                                        title={getVhostHelperText(row.name, selectedVhosts)}\n                                                        placement='bottom'\n                                                    >\n                                                        <TextField\n                                                            id='vhost-selector'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Environments.Environments\n                                                                    .select.vhost'\n                                                                    defaultMessage='Select Access URL'\n                                                                />\n                                                            )}\n                                                            SelectProps={{\n                                                                MenuProps: {\n                                                                    anchorOrigin: {\n                                                                        vertical: 'bottom',\n                                                                        horizontal: 'left',\n                                                                    },\n                                                                    getContentAnchorEl: null,\n                                                                },\n                                                            }}\n                                                            name={row.name}\n                                                            value={selectedVhosts.find((v) => v.env === row.name).vhost}\n                                                            onChange={handleVhostSelect}\n                                                            margin='dense'\n                                                            variant='outlined'\n                                                            className={classes.vhostSelect}\n                                                            fullWidth\n                                                            disabled={api.isRevision\n                                                            || !allRevisions || allRevisions.length === 0}\n                                                            helperText={getVhostHelperText(row.name, selectedVhosts,\n                                                                true, 100)}\n                                                        >\n                                                            {row.vhosts.map(\n                                                                (vhost) => (\n                                                                    <MenuItem value={vhost.host}>\n                                                                        {vhost.host}\n                                                                    </MenuItem>\n                                                                ),\n                                                            )}\n                                                        </TextField>\n                                                    </Tooltip>\n                                                </TableCell>\n                                            </>\n                                        )}\n                                        <TableCell align='left' style={{ width: '300px' }}>\n                                            {allEnvDeployments[row.name].revision != null\n                                                ? (\n                                                    <div>\n                                                        <Chip\n                                                            label={allEnvDeployments[row.name].revision.displayName}\n                                                            style={{ backgroundColor: '#15B8CF' }}\n                                                        />\n                                                        <Button\n                                                            className={classes.button1}\n                                                            variant='outlined'\n                                                            disabled={api.isRevision\n                                                                || isRestricted(['apim:api_create',\n                                                                    'apim:api_publish'], api)}\n                                                            onClick={() => undeployRevision(\n                                                                allEnvDeployments[row.name].revision.id, row.name,\n                                                            )}\n                                                            size='small'\n                                                            id='undeploy-btn'\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments.undeploy.btn'\n                                                                defaultMessage='Undeploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                ) : (\n                                                    <div>\n                                                        <TextField\n                                                            id='revision-selector'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Environments.Environments\n                                                                    .select.table'\n                                                                    defaultMessage='Select Revision'\n                                                                />\n                                                            )}\n                                                            SelectProps={{\n                                                                MenuProps: {\n                                                                    anchorOrigin: {\n                                                                        vertical: 'bottom',\n                                                                        horizontal: 'left',\n                                                                    },\n                                                                    getContentAnchorEl: null,\n                                                                },\n                                                            }}\n                                                            name={row.name}\n                                                            onChange={handleSelect}\n                                                            margin='dense'\n                                                            variant='outlined'\n                                                            style={{ width: '50%' }}\n                                                            disabled={api.isRevision\n                                                                || !allRevisions || allRevisions.length === 0}\n                                                        >\n                                                            {allRevisions && allRevisions.length !== 0\n                                                            && allRevisions.map(\n                                                                (number) => (\n                                                                    <MenuItem value={number.id}>\n                                                                        {number.displayName}\n                                                                    </MenuItem>\n                                                                ),\n                                                            )}\n                                                        </TextField>\n                                                        <Button\n                                                            className={classes.button2}\n                                                            disabled={api.isRevision || !selectedRevision.some(\n                                                                (r) => r.env === row.name && r.revision,\n                                                            ) || !selectedVhosts.some(\n                                                                (v) => v.env === row.name && v.vhost,\n                                                            )}\n                                                            variant='outlined'\n                                                            onClick={() => deployRevision(selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).revision, row.name, selectedVhosts.find(\n                                                                (v) => v.env === row.name,\n                                                            ).vhost, selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).displayOnDevPortal)}\n\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments\n                                                                .deploy.button'\n                                                                defaultMessage='Deploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                )}\n                                        </TableCell>\n                                        <TableCell align='left'>\n                                            <DisplayDevportal\n                                                name={row.name}\n                                                api={api}\n                                                EnvDeployments={allEnvDeployments[row.name]}\n                                            />\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Box>\n            )}\n        </>\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Switch from '@material-ui/core/Switch';\nimport React, { useState, useEffect } from 'react';\nimport API from 'AppData/api';\nimport base64url from 'base64url';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIProduct from 'AppData/APIProduct';\n\n/**\n * Renders an Deployrevision list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DisplayDevportal(props) {\n    const {\n        api,\n        name,\n        EnvDeployments,\n    } = props;\n    const restApi = new API();\n    const restAPIProduct = new APIProduct();\n    const [check, setCheck] = useState(EnvDeployments.disPlayDevportal);\n\n    useEffect(() => {\n        setCheck(typeof EnvDeployments.disPlayDevportal === 'undefined' ? false : EnvDeployments.disPlayDevportal);\n    },\n    [EnvDeployments.disPlayDevportal]);\n\n    const handleDisplayOnDevPortal = (event) => {\n        if (typeof EnvDeployments.revision === 'undefined') {\n            setCheck(event.target.checked);\n        } else {\n            const body = {\n                revisionUuid: EnvDeployments.revision.id,\n                displayOnDevportal: event.target.checked,\n            };\n            setCheck(event.target.checked);\n            if (api.apiType === API.CONSTS.APIProduct) {\n                restAPIProduct.displayInDevportalProduct(api.id, base64url.encode(event.target.name), body);\n            } else {\n                restApi.displayInDevportalAPI(api.id, base64url.encode(event.target.name), body);\n            }\n        }\n    };\n\n    return (\n        <Switch\n            checked={check}\n            onChange={handleDisplayOnDevPortal}\n            disabled={api.isRevision || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n            name={name}\n        />\n    );\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport clsx from 'clsx';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport PropTypes from 'prop-types';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useTheme } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        minHeight: '480px',\n    },\n    textOptional: {\n        fontSize: 'small',\n        color: '#707070',\n        fontWeight: '100',\n    },\n    textRevision: {\n        fontSize: '16px',\n        color: '#707070',\n    },\n    textDeploy: {\n        fontSize: '26px',\n        color: '#1B3A57',\n    },\n    textDescription: {\n        fontSize: '16px',\n        color: '#707070',\n        fontWeight: '400',\n    },\n    descriptionWidth: {\n        minWidth: '550px',\n    },\n    textAlign: {\n        textAlign: 'center',\n    },\n}));\n/**\n * Renders an Deployment Onboarding\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DeploymentOnboarding(props) {\n    const {\n        classes,\n        getVhostHelperText,\n        createDeployRevision,\n        description,\n        setDescription,\n    } = props;\n    const classes1 = useStyles();\n    const theme = useTheme();\n    const { maxCommentLength } = theme.custom;\n    const { settings: { environment: environments } } = useAppContext();\n    const hasOnlyOneEnvironment = environments.length === 1;\n\n    const defaultVhosts = environments.map(\n        (e) => (e.vhosts && e.vhosts.length > 0 ? { env: e.name, vhost: e.vhosts[0].host } : undefined),\n    );\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\n    const [selectedEnvironment, setSelectedEnvironment] = useState(hasOnlyOneEnvironment ? [environments[0].name] : []);\n    const [selectedVhostDeploy, setVhostsDeploy] = useState(defaultVhosts);\n\n    /**\n     * Handle Description\n     */\n    function handleDescriptionOpen() {\n        setDescriptionOpen(!descriptionOpen);\n    }\n\n    const handleVhostDeploySelect = (event) => {\n        const vhosts = selectedVhostDeploy.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhostsDeploy(vhosts);\n    };\n\n    const handleChange = (event) => {\n        if (event.target.checked) {\n            setSelectedEnvironment([...selectedEnvironment, event.target.value]);\n        } else {\n            setSelectedEnvironment(\n                selectedEnvironment.filter((env) => env !== event.target.value),\n            );\n        }\n        if (event.target.name === 'description') {\n            setDescription(event.target.value);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={2}>\n                <Grid item xs={2} />\n                <Grid item xs={8}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={2} />\n                        <Grid item xs={8} className={classes1.textAlign}>\n                            <Typography variant='h6' className={classes1.textDeploy}>\n                                Deploy the API\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2} />\n                    </Grid>\n                    <Box pb={2}>\n                        <Grid container>\n                            <Grid item xs={2} />\n                            <Grid item xs={8} className={classes1.textAlign}>\n                                <Typography variant='h6' className={classes1.textDescription}>\n                                    Deploy API to the Gateway Environment\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={2} />\n                        </Grid>\n                    </Box>\n                    <Paper fullWidth className={classes1.root}>\n                        <Box p={5}>\n                            <Typography className={classes1.textRevision}>\n                                API Gateways\n                            </Typography>\n                            <Box mt={4}>\n                                <Grid\n                                    container\n                                    spacing={3}\n                                >\n                                    {environments.map((row) => (\n                                        <Grid item xs={3}>\n                                            <Card\n                                                className={clsx(selectedEnvironment\n                                                    && selectedEnvironment.includes(row.name)\n                                                    ? (classes.changeCard) : (classes.noChangeCard),\n                                                classes.cardHeight)}\n                                                variant='outlined'\n                                            >\n                                                <Box height='100%'>\n                                                    <CardHeader\n                                                        action={(\n                                                            <Checkbox\n                                                                id={row.name.split(' ').join('')}\n                                                                value={row.name}\n                                                                checked={selectedEnvironment.includes(row.name)}\n                                                                onChange={handleChange}\n                                                                color='primary'\n                                                                icon={<RadioButtonUncheckedIcon />}\n                                                                checkedIcon={<CheckCircleIcon color='primary' />}\n                                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                            />\n                                                        )}\n                                                        title={(\n                                                            <Typography variant='subtitle2'>\n                                                                {row.displayName}\n                                                            </Typography>\n                                                        )}\n                                                        subheader={(\n                                                            <Typography\n                                                                variant='body2'\n                                                                color='textSecondary'\n                                                                gutterBottom\n                                                            >\n                                                                {row.type}\n                                                            </Typography>\n                                                        )}\n                                                    />\n                                                    <CardContent className={classes.cardContentHeight}>\n                                                        <Grid\n                                                            container\n                                                            direction='column'\n                                                            spacing={2}\n                                                        >\n                                                            <Grid item xs={12}>\n                                                                <Tooltip\n                                                                    title={getVhostHelperText(row.name,\n                                                                        selectedVhostDeploy)}\n                                                                    placement='bottom'\n                                                                >\n                                                                    <TextField\n                                                                        id='vhost-selector'\n                                                                        select={row.vhosts.length > 1}\n                                                                        disabled={row.vhosts.length === 1}\n                                                                        label={(\n                                                                            <FormattedMessage\n                                                                                id='Apis.Details.Environments\n                                                                                .deploy.vhost'\n                                                                                defaultMessage='VHost'\n                                                                            />\n                                                                        )}\n                                                                        SelectProps={{\n                                                                            MenuProps: {\n                                                                                anchorOrigin: {\n                                                                                    vertical: 'bottom',\n                                                                                    horizontal: 'left',\n                                                                                },\n                                                                                getContentAnchorEl: null,\n                                                                            },\n                                                                        }}\n                                                                        name={row.name}\n                                                                        value={selectedVhostDeploy.find(\n                                                                            (v) => v.env === row.name,\n                                                                        ).vhost}\n                                                                        onChange={handleVhostDeploySelect}\n                                                                        margin='dense'\n                                                                        variant='outlined'\n                                                                        fullWidth\n                                                                        helperText={getVhostHelperText(row.name,\n                                                                            selectedVhostDeploy, true)}\n                                                                    >\n                                                                        {row.vhosts.map(\n                                                                            (vhost) => (\n                                                                                <MenuItem value={vhost.host}>\n                                                                                    {vhost.host}\n                                                                                </MenuItem>\n                                                                            ),\n                                                                        )}\n                                                                    </TextField>\n                                                                </Tooltip>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </CardContent>\n                                                </Box>\n                                            </Card>\n                                        </Grid>\n                                    ))}\n                                </Grid>\n                            </Box>\n                            <Box mt={2}>\n                                <Button\n                                    color='primary'\n                                    className={classes.button}\n                                    display='inline'\n                                    startIcon={<AddIcon />}\n                                    onClick={handleDescriptionOpen}\n                                    id='add-description-btn'\n                                >\n                                    Add a description\n                                </Button>\n                                <Typography display='inline' className={classes1.textOptional}>\n                                    (optional)\n                                </Typography>\n                                <br />\n                                {descriptionOpen && (\n                                    <>\n                                        <TextField\n                                            className={classes1.descriptionWidth}\n                                            name='description'\n                                            margin='dense'\n                                            variant='outlined'\n                                            label='Description'\n                                            inputProps={{ maxLength: maxCommentLength }}\n                                            helperText={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.revision\n                                                    .description.deploy'\n                                                    defaultMessage='Add a description to the revision'\n                                                />\n                                            )}\n                                            multiline\n                                            rows={3}\n                                            defaultValue={description === true ? '' : description}\n                                            onBlur={handleChange}\n                                            id='add-description'\n                                        />\n                                    </>\n                                )}\n                            </Box>\n                            <Box mt={3}>\n                                <Button\n                                    id='deploy-btn'\n                                    type='submit'\n                                    variant='contained'\n                                    onClick={\n                                        () => createDeployRevision(selectedEnvironment, selectedVhostDeploy)\n                                    }\n                                    color='primary'\n                                    disabled={selectedEnvironment.length === 0}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.deploy.deploy'\n                                        defaultMessage='Deploy'\n                                    />\n                                </Button>\n                            </Box>\n                        </Box>\n                    </Paper>\n                </Grid>\n                <Grid item xs={2} />\n            </Grid>\n        </>\n    );\n}\nDeploymentOnboarding.propTypes = {\n    getVhostHelperText: PropTypes.shape({}).isRequired,\n    createDeployRevision: PropTypes.shape({}).isRequired,\n    setDescription: PropTypes.shape({}).isRequired,\n    description: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CircularProgress, Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { FormattedMessage } from 'react-intl';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport SubscriptionsTable from './SubscriptionsTable';\nimport SubscriptionPoliciesManage from './SubscriptionPoliciesManage';\nimport SubscriptionAvailability from './SubscriptionAvailability';\n\nconst useStyles = makeStyles((theme) => ({\n    buttonSection: {\n        marginTop: theme.spacing(2),\n    },\n    emptyBox: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n/**\n * Subscriptions component\n *\n * @class Subscriptions\n * @extends {Component}\n */\nfunction Subscriptions(props) {\n    const classes = useStyles();\n    const [api] = useAPI();\n    const { updateAPI } = props;\n    const restApi = new API();\n    const [tenants, setTenants] = useState(null);\n    const [policies, setPolices] = useState([...api.policies]);\n    const [availability, setAvailability] = useState({ subscriptionAvailability: api.subscriptionAvailability });\n    const [tenantList, setTenantList] = useState(api.subscriptionAvailableTenants);\n    const [updateInProgress, setUpdateInProgress] = useState(false);\n    const { settings } = useAppContext();\n\n    /**\n     * Save subscription information (policies, subscriptionAvailability, subscriptionAvailableTenants)\n     */\n    function saveAPI() {\n        setUpdateInProgress(true);\n        const { subscriptionAvailability } = availability;\n        const newApi = {\n            policies,\n            subscriptionAvailability,\n            subscriptionAvailableTenants: tenantList,\n        };\n        updateAPI(newApi)\n            .then(() => {\n                Alert.info('Subscription configurations updated successfully');\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error('Error occurred while updating subscription configurations');\n            }).finally(() => {\n                setUpdateInProgress(false);\n            });\n    }\n\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                setTenants(result.body.count);\n            });\n    }, []);\n\n    if (typeof tenants !== 'number') {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        );\n    }\n    return (\n        <>\n            <SubscriptionPoliciesManage api={api} policies={policies} setPolices={setPolices} />\n            {tenants !== 0 && settings.crossTenantSubscriptionEnabled && (\n                <SubscriptionAvailability\n                    api={api}\n                    availability={availability}\n                    setAvailability={setAvailability}\n                    tenantList={tenantList}\n                    setTenantList={setTenantList}\n                />\n            )}\n            { updateInProgress && <Progress /> }\n            <Grid\n                container\n                direction='row'\n                alignItems='flex-start'\n                spacing={1}\n                className={classes.buttonSection}\n            >\n                <Grid item>\n                    <Button\n                        type='submit'\n                        variant='contained'\n                        color='primary'\n                        disabled={api.isRevision || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                        onClick={() => saveAPI()}\n                        id='subscriptions-save-btn'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Subscriptions.Subscriptions.save'\n                            defaultMessage='Save'\n                        />\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Link to={'/apis/' + api.id + '/overview'}>\n                        <Button>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.Subscriptions.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                    </Link>\n                </Grid>\n            </Grid>\n            <SubscriptionsTable api={api} />\n        </>\n    );\n}\n\nSubscriptions.propTypes = {\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default withStyles(makeStyles)(Subscriptions);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport MUIDataTable from 'mui-datatables';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport { ScopeValidation, resourceMethod, resourcePath } from 'AppData/ScopeValidation';\nimport AuthManager from 'AppData/AuthManager';\nimport Invoice from './Invoice';\nimport SubscriberDetailsPopup from './SubscriberDetailsPopup';\n\nconst styles = (theme) => ({\n    heading: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(2),\n        display: 'flex',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    headline: { paddingTop: theme.spacing(1.25), paddingLeft: theme.spacing(2.5) },\n    popupHeadline: {\n        alignItems: 'center',\n        borderBottom: '2px solid #40E0D0',\n        textAlign: 'center',\n    },\n    table: {\n        '& td': {\n            fontSize: theme.typography.fontSize,\n        },\n        '& th': {\n            fontSize: theme.typography.fontSize * 1.2,\n        },\n    },\n    searchDiv: {\n        float: 'right',\n        paddingTop: theme.spacing(1.25),\n        paddingRight: theme.spacing(1.25),\n    },\n    searchRoot: {\n        paddingTop: theme.spacing(0.25),\n        paddingBottom: theme.spacing(0.25),\n        paddingRight: theme.spacing(0.5),\n        paddingLeft: theme.spacing(0.5),\n        display: 'flex',\n        alignItems: 'right',\n        width: theme.spacing(50),\n        borderBottom: '1px solid #E8E8E8',\n    },\n    searchInput: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    searchIconButton: {\n        padding: theme.spacing(1.25),\n    },\n    noDataMessage: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: '#888888',\n        width: '100%',\n    },\n    tableColumnSize: {\n        width: '14%',\n    },\n    tableColumnSize2: {\n        width: '30%',\n    },\n    dialogColumnSize: {\n        width: '50%',\n    },\n    dialog: {\n        float: 'center',\n        alignItems: 'center',\n    },\n    invoiceTable: {\n        '& td': {\n            fontSize: theme.typography.fontSize * 1.5,\n        },\n    },\n    uniqueCell: {\n        borderTop: '1px solid #000000',\n        fontWeight: 'bold',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n        marginTop: theme.spacing(3),\n    },\n    titleWrapper: {\n        marginBottom: theme.spacing(3),\n    },\n    typography: {\n        padding: theme.spacing(2),\n    },\n    root: {\n        flexGrow: 1,\n    },\n    InfoToolTip: {\n        backgroundColor: theme.custom.disableColor,\n        color: theme.palette.getContrastText(theme.custom.disableColor),\n        fontSize: theme.typography.fontSize,\n        fontWeight: theme.typography.h6.fontWeight,\n        border: 'solid 1px ' + theme.palette.grey,\n        borderRadius: theme.shape.borderRadius,\n        padding: theme.spacing(2),\n    },\n    subscriberHeader: {\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n});\n\nconst subscriptionStatus = {\n    BLOCKED: 'BLOCKED',\n    PROD_BLOCKED: 'PROD_ONLY_BLOCKED',\n};\n\n/**\n * Table pagination for subscriptions table\n *\n * @param props props used for SubscriptionTablePagination\n * @returns {*}\n */\nfunction SubscriptionTablePagination(props) {\n    const {\n        count, page, rowsPerPage, onChangePage,\n    } = props;\n\n    /**\n     * handleFirstPageButtonClick loads data of the first page\n     * */\n    function handleFirstPageButtonClick() {\n        if (onChangePage) {\n            onChangePage(0);\n        }\n    }\n\n    /**\n     * handleBackButtonClick load data of the prev page\n     * */\n    function handleBackButtonClick() {\n        if (onChangePage) {\n            onChangePage(page - 1);\n        }\n    }\n\n    /**\n     * handleNextButtonClick load data of the next page\n     * */\n    function handleNextButtonClick() {\n        if (onChangePage) {\n            onChangePage(page + 1);\n        }\n    }\n\n    /**\n     * handleLastPageButtonClick load data of the last page\n     * */\n    function handleLastPageButtonClick() {\n        if (onChangePage) {\n            onChangePage(Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n        }\n    }\n\n    return (\n        <div\n            style={{ display: 'flex' }}\n        >\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton\n                onClick={handleBackButtonClick}\n                disabled={page === 0}\n            >\n                <KeyboardArrowLeft />\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n\nSubscriptionTablePagination.propTypes = {\n    count: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n};\n\n/**\n * Lists all subscriptions.\n *\n * @class SubscriptionsTable\n * @extends {React.Component}\n */\nclass SubscriptionsTable extends Component {\n    constructor(props) {\n        super(props);\n        this.api = props.api;\n        this.state = {\n            subscriptions: null,\n            totalSubscription: 0,\n            page: 0,\n            rowsPerPage: 5,\n            searchQuery: null,\n            rowsPerPageOptions: [5, 10, 25, 50, 100],\n            emptyColumnHeight: 60,\n            policies: [],\n            subscriberClaims: null,\n        };\n        this.formatSubscriptionStateString = this.formatSubscriptionStateString.bind(this);\n        this.blockSubscription = this.blockSubscription.bind(this);\n        this.blockProductionOnly = this.blockProductionOnly.bind(this);\n        this.unblockSubscription = this.unblockSubscription.bind(this);\n        this.handleChangePage = this.handleChangePage.bind(this);\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\n        this.filterSubscriptions = this.filterSubscriptions.bind(this);\n        this.isMonetizedPolicy = this.isMonetizedPolicy.bind(this);\n        this.isNotCreator = AuthManager.isNotCreator();\n        this.isNotPublisher = AuthManager.isNotPublisher();\n    }\n\n    componentDidMount() {\n        this.fetchSubscriptionData();\n    }\n\n    // TODO: This is a React anti-pattern, have to move this to a component ~tmkb\n    /**\n     * Returns the set of action buttons based on the current subscription state\n     *\n     * @param {*} state State of the subscription (PROD_ONLY_BLOCKED/BLOCKED/ACTIVE)\n     * @param {*} subscriptionId Subscription ID\n     * @returns {JSX} Action buttons in JSX\n     * @memberof SubscriptionsTable\n     */\n    getSubscriptionBlockingButtons(state, subscriptionId) {\n        const { classes } = this.props;\n        if (state === subscriptionStatus.PROD_BLOCKED) {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        } else if (state === subscriptionStatus.BLOCKED) {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        } else {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        }\n    }\n\n    /**\n     * handleChangePage handle change in selected page\n     *\n     * @param page selected page\n     * */\n    handleChangePage(page) {\n        this.setState({ page }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * handleChangeRowsPerPage handle change in rows per page\n     *\n     * @param event rows per page change event\n     * */\n    handleChangeRowsPerPage(event) {\n        this.setState({ rowsPerPage: event.target.value, page: 0 }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * Returns subscription state string based on te current subscription state\n     *\n     * @param {*} state The current state of subscription\n     * @returns {JSX} Subscription state string\n     * @memberof SubscriptionsTable\n     */\n    formatSubscriptionStateString(state) {\n        if (state === subscriptionStatus.PROD_BLOCKED) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.blocked.production.only.subs.state'\n                    defaultMessage='Blocked Production Only'\n                />\n            );\n        } else if (state === subscriptionStatus.BLOCKED) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.blocked.subs.state'\n                    defaultMessage='Blocked'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.active.subs.state'\n                    defaultMessage='Active'\n                />\n            );\n        }\n    }\n\n    /**\n     * Blocks the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    blockSubscription(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.blockSubscriptions(subscriptionId, subscriptionStatus.BLOCKED);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.blocked',\n                    defaultMessage: 'Subscription was blocked.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.block',\n                        defaultMessage: 'Error: Unable to block subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Blocks production only for the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    blockProductionOnly(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.blockSubscriptions(subscriptionId, subscriptionStatus.PROD_BLOCKED);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.blocked.prod.only',\n                    defaultMessage: 'Subscription was blocked for production only.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.block.prod.only',\n                        defaultMessage: 'Error: Unable to block subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Unblocks the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    unblockSubscription(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.unblockSubscriptions(subscriptionId);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.unblocked',\n                    defaultMessage: 'Subscription was unblocked.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.unblock',\n                        defaultMessage: 'Error: Unable to unblock subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Fetches subscription data\n     *\n     * @memberof SubscriptionsTable\n     */\n    fetchSubscriptionData() {\n        const api = new API();\n        const { page, rowsPerPage, searchQuery } = this.state;\n        const { intl } = this.props;\n        const promisedSubscriptions = api.subscriptions(this.api.id, page * rowsPerPage, rowsPerPage, searchQuery);\n        promisedSubscriptions\n            .then((response) => {\n                for (let i = 0; i < response.body.list.length; i++) {\n                    response.body.list[i].name = response.body.list[i].applicationInfo.name;\n                    response.body.list[i].subscriber = response.body.list[i].applicationInfo.subscriber;\n                }\n                this.setState({\n                    subscriptions: response.body.list,\n                    totalSubscription: response.body.pagination.total,\n                });\n            })\n            .catch((errorMessage) => {\n                console.error(errorMessage);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscriptions.error',\n                    defaultMessage: 'Error while retrieving the subscriptions',\n                }));\n            });\n        api.getMonetization(this.props.api.id).then((status) => {\n            this.setState({ monetizationStatus: status.enabled });\n        });\n        api.getSubscriptionPolicies(this.api.id).then((policies) => {\n            const filteredPolicies = policies ? policies.filter((policy) => policy.tierPlan === 'COMMERCIAL') : [];\n            this.setState({ policies: filteredPolicies });\n        });\n    }\n\n    /**\n     * Checks whether the policy is a usage based monetization plan\n     *\n     * */\n    isMonetizedPolicy(policyName) {\n        const { policies, monetizationStatus } = this.state;\n        if (policies.length > 0) {\n            const filteredPolicies = policies.filter(\n                (policy) => policy.name === policyName && policy.monetizationAttributes.pricePerRequest != null,\n            );\n            return (filteredPolicies.length > 0 && monetizationStatus);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Filter subscriptions based on user search value\n     *\n     * @param event onChange event of user search\n     */\n    filterSubscriptions(event) {\n        this.setState({ searchQuery: event.target.value }, this.fetchSubscriptionData);\n    }\n\n    /**\n     *\n     */\n    render() {\n        const {\n            subscriptions, page, rowsPerPage, totalSubscription, rowsPerPageOptions, emptyColumnHeight,\n            subscriberClaims, searchQuery,\n        } = this.state;\n        const { classes, api, intl } = this.props;\n        if (!subscriptions) {\n            return (\n                <Grid container direction='row' justify='center' alignItems='center'>\n                    <Grid item>\n                        <CircularProgress />\n                    </Grid>\n                </Grid>\n            );\n        }\n        const columns = [\n            {\n                name: 'subscriptionId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.applicationId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'subscriber',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscriber'\n                        defaultMessage='Subscriber'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    filter: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const subscriptionId = tableMeta.rowData[0];\n                            return (<SubscriberDetailsPopup subscriptionId={subscriptionId} subscriber={value} />);\n                        } else {\n                            return <span>{value}</span>;\n                        }\n                    },\n                },\n            },\n            {\n                name: 'name',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.application'\n                        defaultMessage='Application'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'applicationInfo.description',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.subscriptionCount',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'throttlingPolicy',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.throttling.tier'\n                        defaultMessage='Tier'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'subscriptionStatus',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.status'\n                        defaultMessage='Status'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'actions',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.actions'\n                        defaultMessage='Actions'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const status = tableMeta.rowData[7];\n                            const subscriptionId = tableMeta.rowData[0];\n                            return (\n                                <ScopeValidation\n                                    resourceMethod={resourceMethod.POST}\n                                    resourcePath={resourcePath.BLOCK_SUBSCRIPTION}\n                                >\n                                    {\n                                        this.getSubscriptionBlockingButtons(\n                                            status,\n                                            subscriptionId,\n                                        )\n                                    }\n                                </ScopeValidation>\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n            {\n                name: 'invoice',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.invoice'\n                        defaultMessage='Invoice'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const throttlingPolicy = tableMeta.rowData[6];\n                            const subscriptionId = tableMeta.rowData[0];\n                            return (\n                                <Invoice\n                                    subscriptionId={subscriptionId}\n                                    isNotAuthorized={this.isNotCreator && this.isNotPublisher}\n                                    isMonetizedUsagePolicy={\n                                        this.isMonetizedPolicy(throttlingPolicy)\n                                    }\n                                    api={api}\n                                />\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n        ];\n\n        const options = {\n            title: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            elevation: 1,\n            customToolbar: false,\n            search: false,\n            selectableRows: 'none',\n            rowsPerPageOptions: [5, 10, 25, 50, 100],\n            rowsPerPage: this.state.rowsPerPage,\n            customFooter: () => {\n                return (\n                    <TablePagination\n                        rowsPerPageOptions={rowsPerPageOptions}\n                        colSpan={6}\n                        count={totalSubscription}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={this.handleChangePage}\n                        onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        ActionsComponent={SubscriptionTablePagination}\n                    />\n                );\n            },\n        };\n        const subMails = {};\n        const emails = subscriberClaims && Object.entries(subscriberClaims).map(([, v]) => {\n            let email = null;\n            if (!subMails[v.name]) {\n                email = v.claims.find((claim) => claim.uri === 'http://wso2.org/claims/emailaddress').value;\n                subMails[v.name] = email;\n            }\n            return email;\n        }).reduce((a, b) => {\n            return b !== null ? `${a || ''},${b}` : a;\n        });\n        let names = null;\n        if (subMails) {\n            Object.entries(subMails).map(([k, v]) => {\n                if (v) {\n                    if (names === null) {\n                        names = k;\n                    } else {\n                        names = `${names}, ${k}`;\n                    }\n                }\n                return null;\n            });\n        }\n        const Tip = names ? React.Fragment : Tooltip;\n        return (\n            <>\n                <div className={classes.heading}>\n                    <Box flex={1}>\n                        <Typography variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionsTable.manage.subscriptions'\n                                defaultMessage='Manage Subscriptions'\n                            />\n                            {'   '}\n                            {subscriptions.length > 0 && (\n                                <Tip title='No contact details' placement='top'>\n                                    <span>\n                                        <Button\n                                            target='_blank'\n                                            rel='noopener'\n                                            href={`mailto:?subject=Message from the API Publisher&cc=${emails}`\n                                                + `&body=Hi ${names},`}\n                                            size='small'\n                                            disabled={!names}\n                                            variant='outlined'\n                                        >\n                                            Contact Subscribers\n                                        </Button>\n                                    </span>\n                                </Tip>\n                            )}\n                        </Typography>\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionsTable.sub.heading'\n                                defaultMessage='Manage subscriptions of the API'\n                            />\n                        </Typography>\n                    </Box>\n                    <Box>\n                        <TextField\n                            style={{ width: 400 }}\n                            autoFocus\n                            id='subscription-search-box'\n                            label={intl.formatMessage({\n                                id: 'Apis.Details.Subscriptions.SubscriptionsTable.search.label',\n                                defaultMessage: 'Search',\n                            })}\n                            placeholder={intl.formatMessage({\n                                id: 'Apis.Details.Subscriptions.SubscriptionsTable.search.placeholder',\n                                defaultMessage: 'Subscriber Name',\n                            })}\n                            margin='dense'\n                            variant='outlined'\n                            value={searchQuery || ''}\n                            onChange={this.filterSubscriptions}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            helperText={intl.formatMessage({\n                                id: 'Apis.Details.Subscriptions.SubscriptionsTable.search.help',\n                                defaultMessage: 'Filter subscriptions by subscriber name',\n                            })}\n                        />\n                    </Box>\n                </div>\n                <Paper elevation={0}>\n                    {subscriptions.length > 0 ? (\n                        <div>\n                            <MUIDataTable title='' data={subscriptions} columns={columns} options={options} />\n                        </div>\n                    )\n                        : (\n                            <div className={classes.noDataMessage} style={{ height: rowsPerPage * emptyColumnHeight }}>\n                                <FormattedMessage\n                                    id='Apis.Details.Subscriptions.SubscriptionsTable.no.subscriptions'\n                                    defaultMessage='No subscriptions data available'\n                                />\n                            </div>\n                        )}\n                </Paper>\n            </>\n        );\n    }\n}\n\nSubscriptionsTable.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(SubscriptionsTable));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport MUIDataTable from 'mui-datatables';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport { FormattedMessage } from 'react-intl';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nconst columns = ['Name', 'Value'];\n\nconst options = {\n    filterType: 'checkbox',\n    sort: false,\n    search: false,\n    viewColumns: false,\n    filter: false,\n    selectableRowsHeader: false,\n    selectableRows: 'none',\n    pagination: false,\n    download: false,\n};\n\n// eslint-disable-next-line require-jsdoc\nfunction Invoice(props) {\n    const {\n        subscriptionId,\n        isMonetizedUsagePolicy,\n        isNotAuthorized,\n        api,\n    } = props;\n    const [showPopup, setShowPopup] = useState(false);\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    const [invoice, setInvoice] = useState(null);\n\n    /**\n   * Handle the popup for invoice\n   */\n    const handlePopup = () => {\n        setShowPopup(true);\n        setInvoice(null);\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            const promiseInvoice = apiProduct.getMonetizationInvoice(subscriptionId);\n            promiseInvoice.then((response) => {\n                const invoiceData = [];\n                Object.keys(response.properties).map((invoiceItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiceItem);\n                    insideArray.push(response.properties[invoiceItem]);\n                    invoiceData.push(insideArray);\n                    return true;\n                });\n                setInvoice(invoiceData);\n            }).catch((error) => {\n                console.error(error);\n                setShowErrorPopup(true);\n            });\n        } else {\n            const promiseInvoice = api.getMonetizationInvoice(subscriptionId);\n            promiseInvoice.then((response) => {\n                const invoiceData = [];\n                Object.keys(response.properties).map((invoiceItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiceItem);\n                    insideArray.push(response.properties[invoiceItem]);\n                    invoiceData.push(insideArray);\n                    return true;\n                });\n                setInvoice(invoiceData);\n            }).catch((error) => {\n                console.error(error);\n                setShowErrorPopup(true);\n            });\n        }\n    };\n\n    /**\n   * Handle closing the popup for invoice\n   */\n    const handleClose = () => {\n        setShowPopup(false);\n    };\n\n    const handleAlertClose = () => {\n        setShowErrorPopup(false);\n    };\n\n    return (\n        <>\n            <Button\n                variant='outlined'\n                size='small'\n                color='primary'\n                disabled={!isMonetizedUsagePolicy || isNotAuthorized}\n                onClick={handlePopup}\n            >\n                <FormattedMessage\n                    id='Applications.Details.Invoice.view.btn'\n                    defaultMessage='View Invoice'\n                />\n            </Button>\n            <Dialog open={showPopup} onClose={handleClose} fullWidth='true'>\n                {invoice && (\n                    <MUIDataTable\n                        title='Upcoming Invoice'\n                        data={invoice}\n                        columns={columns}\n                        options={options}\n                    />\n                )}\n            </Dialog>\n            <Dialog open={showErrorPopup} onClose={handleAlertClose} fullWidth='true'>\n                <DialogTitle>No Data Available</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='invoice-dialog-description'>\n                        Pending invoice data not found for this subscription.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color='primary'>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nInvoice.propTypes = {\n    subscriptionId: PropTypes.string.isRequired,\n    isMonetizedUsagePolicy: PropTypes.string.isRequired,\n    isNotAuthorized: PropTypes.string.isRequired,\n    api: PropTypes.instanceOf(API).isRequired,\n};\n\nexport default Invoice;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under\n * this license, please see the license as well as any agreement you’ve\n * entered into with WSO2 governing the purchase of this software and any\n * associated services.\n */\nimport React from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\nimport UserIcon from '@material-ui/icons/Person';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InfoIcon from '@material-ui/icons/Info';\n\n\nconst PopoverContent = ({ subscriptionId }) => {\n    const intl = useIntl();\n    const [subscriberClaims, setSubscriberClaims] = React.useState(null);\n    const api = new API();\n\n    React.useEffect(() => {\n        const promisedInfo = api.getSubscriberInfo(subscriptionId);\n        promisedInfo\n            .then((resp) => {\n                if (resp.body) {\n                    setSubscriberClaims(resp.body);\n                } else {\n                    setSubscriberClaims('no-data');\n                }\n            })\n            .catch((errorMessage) => {\n                console.error(errorMessage);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriberDetailsPopup.subscriber.info.error',\n                    defaultMessage: 'Error while retrieving the subscriber information',\n                }));\n            });\n    }, [subscriptionId]);\n    if (!subscriberClaims) {\n        return (<CircularProgress />);\n    }\n    if (subscriberClaims === 'no-data') {\n        return (\n            <div>\n                <Typography>\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.SubscriberDetailsPopup.no.claims'\n                        defaultMessage='No subscriber claims data available'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    return (\n        <Box p={2} alignItems='center' display='flex'>\n            <Box p={2} display='flex' alignContent='center' justifyContent='center' flexDirection='column'>\n                <UserIcon color='primary' />\n                {subscriberClaims.name}\n            </Box>\n            {subscriberClaims.claims && (\n                <Table>\n                    <TableBody>\n                        {subscriberClaims.claims.map((claim) => (\n                            <TableRow hover>\n                                <TableCell>{claim.name}</TableCell>\n                                {claim.value ? (\n                                    <TableCell>{claim.value}</TableCell>\n                                ) : (\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriberDetailsPopup.not.available'\n                                            defaultMessage='Not Available'\n                                        />\n                                    </TableCell>\n                                )}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            )}\n        </Box>\n    );\n};\n\n/**\n * Adds two numbers together.\n * @param {JSON} props props to render the popup.\n * @returns {int} The sum of the two numbers.\n */\nexport default function SubscriberDetailsPopup(props) {\n    const { subscriptionId, subscriber } = props;\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    /**\n     * Fetches subscription data\n     * @param {string} subscriptionId subscriber of the application\n     * @memberof SubscriptionsTable\n     */\n\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'subscriber-details-popper' : undefined;\n\n    return (\n        <Box p={2} alignItems='center' display='flex'>\n            <Box alignItems='center' justifyContent='center' pr={1}>{subscriber}</Box>\n            <InfoIcon aria-describedby={id} color='action' onClick={handleClick} style={{ cursor: 'pointer' }} />\n            <Popover\n                id={id}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <PopoverContent subscriptionId={subscriptionId} />\n            </Popover>\n        </Box>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Box from '@material-ui/core/Box';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Paper from '@material-ui/core/Paper';\nimport API from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    subscriptionPoliciesPaper: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    grid: {\n        margin: theme.spacing(1.25),\n    },\n    gridLabel: {\n        marginTop: theme.spacing(1.5),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n});\n\n/**\n * Manage subscription policies of the API\n * */\nclass SubscriptionPoliciesManage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscriptionPolicies: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        const { api } = this.props;\n        const isAsyncAPI = (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE');\n        const policyPromise = isAsyncAPI ? API.asyncAPIPolicies() : API.policies('subscription');\n        policyPromise\n            .then((res) => {\n                this.setState({ subscriptionPolicies: res.body.list });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n            });\n    }\n\n    /**\n     * Handle onChange of selected subsription policies\n     *\n     * @param event onChange event\n     */\n    handleChange(event) {\n        const { name, checked } = event.target;\n        const { setPolices, policies } = this.props;\n        let newSelectedPolicies = [...policies];\n        if (checked) {\n            newSelectedPolicies.push(name);\n        } else {\n            newSelectedPolicies = policies.filter((policy) => policy !== name);\n        }\n        setPolices(newSelectedPolicies);\n    }\n\n    render() {\n        const { classes, api, policies } = this.props;\n        const { subscriptionPolicies } = this.state;\n\n        /*\n        Following logic is to identify migrated users policies.\n        Before 4.0.0 there were no different policy set for async apis\n        So the same policies are attached to the API. ex: api.policies = [\"Unlimited\"]\n        But throttling-policies/streaming/subscription does not have this \"Unlimited\" policy after 4.0\n        So logic in UI shows no policy is attached to the API.\n        Following logic identifies that special case.\n        */\n        let migratedCase = false;\n        let preMigrationPolicies;\n        if (Object.keys(subscriptionPolicies).length !== 0 && api.policies && api.policies.length > 0) {\n            preMigrationPolicies = api.policies.filter((apiPolicy) => {\n                const samePolicies = subscriptionPolicies.filter((subPolicy) => apiPolicy === subPolicy.displayName);\n                return samePolicies.length === 0;\n            });\n            migratedCase = preMigrationPolicies.length > 0;\n        }\n\n        return (\n            <>\n                <Typography id='itest-api-details-bushiness-plans-head' variant='h4'>\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.business.plans'\n                        defaultMessage='Business Plans'\n                    />\n                </Typography>\n                {api.apiType === API.CONSTS.APIProduct\n                    ? (\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.APIProduct.sub.heading'\n                                defaultMessage='Attach business plans to API'\n                            />\n                        </Typography>\n                    )\n                    : (\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.sub.heading'\n                                defaultMessage='Attach business plans to API'\n                            />\n                        </Typography>\n                    )}\n                <Paper className={classes.subscriptionPoliciesPaper}>\n                    <FormControl className={classes.formControl}>\n                        <FormGroup>\n                            { subscriptionPolicies && Object.entries(subscriptionPolicies).map((value) => (\n                                <FormControlLabel\n                                    data-testid={'policy-checkbox-' + value[1].displayName.toLowerCase()}\n                                    key={value[1].displayName}\n                                    control={(\n                                        <Checkbox\n                                            disabled={isRestricted(['apim:api_publish', 'apim:api_create'], api)}\n                                            color='primary'\n                                            checked={policies.includes(value[1].displayName)}\n                                            onChange={(e) => this.handleChange(e)}\n                                            name={value[1].displayName}\n                                        />\n                                    )}\n                                    label={value[1].displayName + ' : ' + value[1].description}\n                                />\n                            ))}\n                            { migratedCase && (\n                                <Box display='flex' flexDirection='column'>\n                                    <Box className={classes.migrateMessage}>\n                                        <Typography variant='caption' gutterBottom>\n                                            <FormattedMessage\n                                                id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.sub.migrated'\n                                                defaultMessage={`Following policies are migrated from an \n                                            old version of APIM. You can uncheck and select a different policy. \n                                            Note that this is an irreversible operation.`}\n                                            />\n                                        </Typography>\n                                    </Box>\n                                    {preMigrationPolicies.map((policy) => (\n                                        <FormControlLabel\n                                            data-testid={'policy-checkbox-' + policy.toLowerCase()}\n                                            key={policy}\n                                            control={(\n                                                <Checkbox\n                                                    disabled={\n                                                        isRestricted(['apim:api_publish', 'apim:api_create'], api)\n                                                    }\n                                                    color='primary'\n                                                    checked={policies.includes(policy)}\n                                                    onChange={(e) => this.handleChange(e)}\n                                                    name={policy}\n                                                />\n                                            )}\n                                            label={policy}\n                                        />\n                                    ))}\n                                </Box>\n                            )}\n                        </FormGroup>\n                    </FormControl>\n                </Paper>\n            </>\n        );\n    }\n}\n\nSubscriptionPoliciesManage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    api: PropTypes.shape({ policies: PropTypes.arrayOf(PropTypes.shape({})) }).isRequired,\n    setPolices: PropTypes.func.isRequired,\n    policies: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(SubscriptionPoliciesManage));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport TenantAutocomplete from 'AppComponents/Apis/Details/Subscriptions/TenantAutocomplete';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 400,\n    },\n    textControl: {\n        margin: theme.spacing(1),\n        minWidth: 300,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    subscriptionAvailabilityPaper: {\n        marginTop: theme.spacing(2),\n        paddingLeft: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    grid: {\n        display: 'flex',\n        margin: theme.spacing(1.25),\n    },\n    gridLabel: {\n        marginTop: theme.spacing(3.5),\n    },\n    saveButton: {\n        marginTop: theme.spacing(2),\n    },\n    heading: {\n        marginTop: theme.spacing(3),\n    },\n    tenantsList: {\n        height: theme.spacing(12),\n    },\n}));\n\n/**\n * Allows user to select API availability for tenants\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function SimpleSelect(props) {\n    const classes = useStyles();\n    const {\n        api, setAvailability, tenantList, setTenantList,\n    } = props;\n    let currentAvailability;\n    if (api.subscriptionAvailability === null || api.subscriptionAvailability === 'CURRENT_TENANT') {\n        currentAvailability = 'currentTenant';\n    } else if (api.subscriptionAvailability === 'ALL_TENANTS') {\n        currentAvailability = 'allTenants';\n    } else if (api.subscriptionAvailability === 'SPECIFIC_TENANTS') {\n        currentAvailability = 'specificTenants';\n    }\n    const [values, setValues] = React.useState({\n        availability: currentAvailability,\n    });\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    const isSpecificTenants = values.availability === 'specificTenants';\n    const isUIElementDisabled = isRestricted(['apim:api_publish', 'apim:api_create'], api);\n\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    /**\n     * Handle onchange for the subscription availability dropdown\n     * @param {string} value the new value selected for subscription availability\n     */\n    function subscriptionAvailableTenants(value) {\n        let availabilityValue;\n\n        setValues({\n            ...values,\n            availability: value,\n        });\n\n        if (value === 'currentTenant') {\n            availabilityValue = 'CURRENT_TENANT';\n            setTenantList([]);\n        } else if (value === 'allTenants') {\n            availabilityValue = 'ALL_TENANTS';\n            setTenantList([]);\n        } else if (value === 'specificTenants') {\n            availabilityValue = 'SPECIFIC_TENANTS';\n        }\n        setAvailability({\n            subscriptionAvailability: availabilityValue,\n        });\n    }\n\n    return (\n        <Grid item xs={12} md={12} lg={12}>\n            <Typography variant='h4' className={classes.heading}>\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionAvailability.subscription.availability'\n                    defaultMessage='Subscription Availability'\n                />\n            </Typography>\n            <Typography variant='caption' gutterBottom>\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionAvailability.sub.heading'\n                    defaultMessage='Make subscriptions available to tenants'\n                />\n            </Typography>\n            <Paper className={classes.subscriptionAvailabilityPaper}>\n                <form className={classes.root} autoComplete='off' onSubmit={(e) => { e.preventDefault(); }}>\n                    <Grid container xs={12} spacing={1} className={classes.grid}>\n                        <Grid item xs={10}>\n                            <FormControl\n                                variant='outlined'\n                                className={classes.formControl}\n                                disabled={isUIElementDisabled}\n                            >\n                                <InputLabel ref={inputLabel} htmlFor='outlined-age-simple' />\n                                <Select\n                                    value={values.availability}\n                                    onChange={({ target: { value } }) => {\n                                        subscriptionAvailableTenants(value);\n                                    }}\n                                    labelWidth={labelWidth}\n                                    displayEmpty\n                                    name='availability'\n                                    inputProps={{\n                                        name: 'availability',\n                                        id: 'outlined-availabi;ity-simple',\n                                    }}\n                                >\n                                    <MenuItem value='currentTenant'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.current.tenant.only'\n                                            defaultMessage='Available to current tenant only'\n                                        />\n                                    </MenuItem>\n                                    <MenuItem value='allTenants'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.all.tenants'\n                                            defaultMessage='Available to all the tenants'\n                                        />\n                                    </MenuItem>\n                                    <MenuItem value='specificTenants'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.specific.tenants'\n                                            defaultMessage='Available to specific tenants'\n                                        />\n                                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        {isSpecificTenants ? (\n                            <Grid item xs={8} className={classes.tenantsList}>\n                                <TenantAutocomplete setTenantList={setTenantList} tenantList={tenantList} api={api} />\n                            </Grid>\n                        ) : <Grid item xs={8} />}\n                    </Grid>\n                </form>\n            </Paper>\n        </Grid>\n    );\n}\nSimpleSelect.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    api: PropTypes.shape({ policies: PropTypes.arrayOf(PropTypes.shape({})) }).isRequired,\n    setAvailability: PropTypes.func.isRequired,\n    setTenantList: PropTypes.func.isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport API from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n}));\n\n/**\n * Renders the input component\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    classes: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    InputProps: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n};\n\n/**\n * Renders the suggestion component\n */\nfunction renderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, tenantList,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (tenantList || '').indexOf(suggestion) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion}\n            selected={isHighlighted}\n            component='div'\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    itemProps: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n    suggestion: PropTypes.string.isRequired,\n};\n\n/**\n * Gets suggestion list\n */\nfunction getSuggestions(value, suggestions, { showEmpty = false } = {}) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n\n    return inputLength === 0 && !showEmpty\n        ? []\n        : suggestions.filter((suggestion) => {\n            const keep = count < 15 && suggestion.slice(0, inputLength).toLowerCase() === inputValue;\n            if (keep) {\n                count += 1;\n            }\n            return keep;\n        });\n}\n\n/**\n * Downshift selection component\n */\nfunction DownshiftMultiple(props) {\n    const { tenantList, setTenantList } = props;\n    const { classes, suggestions } = props;\n    const [inputValue, setInputValue] = React.useState('');\n\n    function handleKeyDown(event) {\n        if (tenantList.length && !inputValue.length && event.key === 'Backspace') {\n            setTenantList(tenantList.slice(0, tenantList.length - 1));\n        }\n    }\n\n    function handleInputChange(event) {\n        setInputValue(event.target.value);\n    }\n\n    function handleChange(item) {\n        let newSelectedItem = [...tenantList];\n        if (newSelectedItem.indexOf(item) === -1) {\n            newSelectedItem = [...newSelectedItem, item];\n        }\n        setInputValue('');\n        setTenantList(newSelectedItem);\n    }\n\n    const handleDelete = (item) => () => {\n        const newSelectedItem = [...tenantList];\n        newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n        setTenantList(newSelectedItem);\n    };\n\n    return (\n        <Downshift\n            id='downshift-multiple'\n            inputValue={inputValue}\n            onChange={handleChange}\n            tenantList={tenantList}\n        >\n            {({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                isOpen,\n                inputValue: inputValue2,\n                tenantList: tenantList2,\n                highlightedIndex,\n            }) => {\n                const {\n                    onBlur, onChange, onFocus, ...inputProps\n                } = getInputProps({\n                    onKeyDown: handleKeyDown,\n                    placeholder: 'Type and select tenants from the suggested list',\n                });\n\n                return (\n                    <div className={classes.container}>\n                        {renderInput({\n                            fullWidth: true,\n                            classes,\n                            label: 'Tenants',\n                            InputLabelProps: getLabelProps(),\n                            InputProps: {\n                                startAdornment: tenantList.map((item) => (\n                                    <Chip\n                                        key={item}\n                                        tabIndex={-1}\n                                        label={item}\n                                        className={classes.chip}\n                                        onDelete={handleDelete(item)}\n                                    />\n                                )),\n                                onBlur,\n                                onChange: (event) => {\n                                    handleInputChange(event);\n                                    onChange(event);\n                                },\n                                onFocus,\n                            },\n                            inputProps,\n                        })}\n\n                        {isOpen ? (\n                            <Paper className={classes.paper} square>\n                                {getSuggestions(inputValue2, suggestions).map((suggestion, index) => renderSuggestion({\n                                    suggestion,\n                                    index,\n                                    itemProps: getItemProps({ item: suggestion }),\n                                    highlightedIndex,\n                                    tenantList: tenantList2,\n                                }))}\n                            </Paper>\n                        ) : null}\n                    </div>\n                );\n            }}\n        </Downshift>\n    );\n}\n\nDownshiftMultiple.propTypes = {\n    classes: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    setTenantList: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    suggestions: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n\n/**\n * Gets tenant list in order to populate suggestions list\n */\nexport default function IntegrationDownshift(props) {\n    const classes = useStyles();\n    const [suggestions, setsuggestions] = useState({});\n    const { setTenantList, tenantList } = props;\n\n    const restApi = new API();\n\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                const tenants = result.body.list;\n                const newSuggestions = tenants.map((tenant) => { return tenant.domain; });\n                setsuggestions(newSuggestions);\n            });\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.divider} />\n            <DownshiftMultiple\n                classes={classes}\n                suggestions={suggestions}\n                tenantList={tenantList}\n                setTenantList={setTenantList}\n            />\n            <div className={classes.divider} />\n        </div>\n    );\n}\n\nIntegrationDownshift.propTypes = {\n    setTenantList: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport CommentsAPI from 'AppData/Comments';\nimport Comment from './Comment';\nimport CommentAdd from './CommentAdd';\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    paper: {\n        marginRight: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n        paddingRight: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    contentWrapper: {\n        paddingLeft: theme.spacing(3),\n        marginTop: theme.spacing(1),\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    contentWrapperOverview: {\n        padding: 0,\n        width: '100%',\n        boxShadow: 'none',\n    },\n    titleSub: {\n        cursor: 'pointer',\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    link: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n    verticalSpace: {\n        marginTop: theme.spacing(0.2),\n    },\n    loadMoreLink: {\n        textDecoration: 'none',\n    },\n    genericMessageWrapper: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        marginRight: theme.spacing(3),\n    },\n    paperProgress: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(2),\n        textAlign: 'center',\n    },\n    dialogContainer: {\n        width: 1000,\n        padding: theme.spacing(2),\n    },\n});\n\n/**\n * Display a comment list\n * @class Comments\n * @extends {React.Component}\n */\nclass Comments extends Component {\n    /**\n     * Creates an instance of Comments\n     * @param {*} props properies passed by the parent element\n     * @memberof Comments\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            allComments: [],\n            comments: [],\n            totalComments: 0,\n            apiId: null,\n            loading: true,\n        };\n        this.handleExpandClick = this.handleExpandClick.bind(this);\n        this.handleLoadMoreComments = this.handleLoadMoreComments.bind(this);\n        this.addComment = this.addComment.bind(this);\n        this.updateComment = this.updateComment.bind(this);\n        this.onDeleteComment = this.onDeleteComment.bind(this);\n    }\n\n    /**\n     * Gets all the comments for a particular API, when component mounts\n     * @memberof Comments\n     */\n    componentDidMount() {\n        const { api, theme } = this.props;\n        this.setState({ apiId: api.id });\n        const limit = theme.custom.commentsLimit;\n        const offset = 0;\n\n        CommentsAPI.all(api.id, limit, offset)\n            .then((result) => {\n                const commentList = result.body.list;\n                this.setState({\n                    allComments: commentList,\n                    comments: commentList,\n                    totalComments: result.body.pagination.total,\n                    loading: false,\n                });\n            })\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.message);\n                } else {\n                    Alert.error('Something went wrong while retrieving comments');\n                }\n            });\n    }\n\n    /**\n     * Delete a comment\n     * @param {string} commentIdOfCommentToDelete id of deleted commetn\n     * @memberof Comments\n     */\n    onDeleteComment(commentIdOfCommentToDelete) {\n        const {\n            apiId, comments, totalComments,\n        } = this.state;\n\n        const remainingComments = comments.filter((item) => item.id !== commentIdOfCommentToDelete);\n        const newTotal = totalComments - 1;\n\n        if (newTotal > remainingComments.length) {\n            CommentsAPI\n                .all(apiId, 1, remainingComments.length)\n                .then((result) => {\n                    if (result.body) {\n                        this.setState({\n                            totalComments: newTotal,\n                            comments: [...remainingComments, ...result.body.list],\n                            allComments: [...remainingComments, ...result.body.list],\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                });\n        } else {\n            this.setState({\n                totalComments: newTotal,\n                comments: remainingComments,\n                allComments: remainingComments,\n            });\n        }\n    }\n\n    /**\n     * Add comment to the comment list\n     * @param {any} comment added comment\n     * @memberof Comments\n     */\n    addComment(comment) {\n        const { totalComments, allComments } = this.state;\n        const newTotal = totalComments + 1;\n\n        this.setState({\n            allComments: [comment, ...allComments],\n            totalComments: newTotal,\n            comments: [comment, ...allComments],\n        });\n    }\n\n    /**\n     * Update a specific comment in the comment list\n     * @param {any} comment updated comment\n     * @memberof Comments\n     */\n    updateComment(comment) {\n        const { comments } = this.state;\n\n        const newComments = comments.reduce((acc, cur) => {\n            let temp = cur;\n            if (cur.id === comment.id) {\n                temp = comment;\n            }\n            return [...acc, temp];\n        }, []);\n        this.setState({\n            allComments: newComments,\n            comments: newComments,\n        });\n    }\n\n    /**\n     * Handles loading the previous comments\n     * @memberof Comments\n     */\n    handleLoadMoreComments() {\n        const { allComments, comments } = this.state;\n        const { theme, api: { id: apiId } } = this.props;\n        const limit = theme.custom.commentsLimit;\n        const offset = comments.length;\n\n        CommentsAPI.all(apiId, limit, offset)\n            .then((result) => {\n                const newAllCommentList = allComments.concat(result.body.list);\n                this.setState({ allComments: newAllCommentList, comments: newAllCommentList });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }\n\n    /**\n     * Handles expanding the comment section\n     * @memberof Comments\n     */\n    handleExpandClick() {\n        const { expanded } = this.state;\n        this.setState({ expanded: !expanded });\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof Comments\n     */\n    render() {\n        const { classes, api } = this.props;\n        const {\n            comments, allComments, totalComments, loading,\n        } = this.state;\n        return (\n            <div className={classes.contentWrapper}>\n                <div className={classes.root}>\n                    <Typography id='itest-api-details-comments-head' variant='h4' className={classes.titleSub}>\n                        {totalComments > 0 ? totalComments + (' ') : ''}\n                        <FormattedMessage id='Apis.Details.Comments.title' defaultMessage='Comments' />\n                    </Typography>\n                </div>\n\n                <div className={classes.paper}>\n                    <CommentAdd\n                        api={api}\n                        commentsUpdate={this.addComment}\n                        addComment={this.addComment}\n                        allComments={allComments}\n                        replyTo={null}\n                        cancelButton\n                    />\n                </div>\n\n                {loading && (\n                    <div className={classes.paperProgress}>\n                        <CircularProgress size={24} />\n                    </div>\n                )}\n                {!loading && totalComments === 0\n                    && (\n                        <div className={classes.genericMessageWrapper}>\n                            <InlineMessage type='info' className={classes.dialogContainer}>\n                                <Typography variant='h5' component='h3'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.no.comments'\n                                        defaultMessage='No Comments Yet'\n                                    />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.no.comments.content'\n                                        defaultMessage='No comments available for this API yet'\n                                    />\n                                </Typography>\n                            </InlineMessage>\n                        </div>\n                    )}\n                <Comment\n                    comments={comments}\n                    api={api}\n                    allComments={allComments}\n                    onDeleteComment={this.onDeleteComment}\n                    updateComment={this.updateComment}\n                />\n                {totalComments > comments.length && (\n                    <div className={classes.contentWrapper}>\n                        <Grid container spacing={4} className={classes.root}>\n                            <Grid item>\n                                <Typography className={classes.verticalSpace} variant='body1'>\n                                    <a\n                                        className={classes.link + ' ' + classes.loadMoreLink}\n                                        onClick={this.handleLoadMoreComments}\n                                        onKeyDown={this.handleLoadMoreComments}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Comments.load.previous.comments'\n                                            defaultMessage='Show More'\n                                        />\n                                    </a>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography className={classes.verticalSpace} variant='body1'>\n                                    {'(' + comments.length + ' of ' + totalComments + ')'}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nComments.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Comments));\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Box from '@material-ui/core/Box';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\nimport CommentsAPI from 'AppData/Comments';\nimport API from 'AppData/api';\nimport CommentEdit from './CommentEdit';\nimport CommentOptions from './CommentOptions';\nimport CommentAdd from './CommentAdd';\n\ndayjs.extend(relativeTime);\n\nconst styles = (theme) => ({\n    link: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    commentText: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: 0,\n        width: '99%',\n        whiteSpace: 'pre-wrap',\n        overflowWrap: 'break-word',\n        wordBreak: 'break-all',\n    },\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    contentWrapper: {\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n    },\n    contentWrapperOverview: {\n        background: 'transparent',\n        width: '100%',\n    },\n    divider: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(2),\n        width: '60%',\n    },\n    paper: {\n        margin: 0,\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n    },\n    cleanBack: {\n        background: 'transparent',\n        width: '100%',\n        boxShadow: 'none',\n    },\n});\n\n/**\n * Display a particular comment and details\n * @class Comment\n * @extends {React.Component}\n */\nclass Comment extends React.Component {\n    /**\n     * Creates an instance of Comment\n     * @param {*} props properies passed by the parent element\n     * @memberof Comment\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openDialog: false,\n            replyId: -1,\n            editIndex: -1,\n            deleteComment: null,\n        };\n        this.handleClickDeleteComment = this.handleClickDeleteComment.bind(this);\n        this.handleShowEdit = this.handleShowEdit.bind(this);\n        this.handleShowReply = this.handleShowReply.bind(this);\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.showAddComment = this.showAddComment.bind(this);\n        this.showEditComment = this.showEditComment.bind(this);\n        this.handleConfirmDialog = this.handleConfirmDialog.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.filterRemainingComments = this.filterRemainingComments.bind(this);\n        this.filterCommentToDelete = this.filterCommentToDelete.bind(this);\n        this.handleLoadMoreReplies = this.handleLoadMoreReplies.bind(this);\n        this.handleAddReply = this.handleAddReply.bind(this);\n        this.handleDeleteReply = this.handleDeleteReply.bind(this);\n    }\n\n    /**\n     * Genereates unique keys for comments\n     * @memberof Comment\n     */\n    getKey() {\n        return this.keyCount++;\n    }\n\n    /**\n     * Add two numbers.\n     * @param {string} commentToFilter comment to filter.\n     * @returns {boolean} filtering needed or not.\n     */\n    filterRemainingComments(commentToFilter) {\n        const { deleteComment } = this.state;\n        return commentToFilter.id !== deleteComment.id;\n    }\n\n    /**\n     * Add two numbers.\n     * @param {JSON} commentToFilter comment to filter.\n     * @returns {string} id of the comment.\n     */\n    filterCommentToDelete(commentToFilter) {\n        const { deleteComment } = this.state;\n        return commentToFilter.id === deleteComment.parentCommentId;\n    }\n\n    /**\n     * Shows the component to add a new comment\n     * @param {any} id of comment\n     * @memberof Comment\n     */\n    showAddComment(id) {\n        this.setState({ replyId: id });\n    }\n\n    /**\n     * Shows the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    showEditComment(index) {\n        const { editIndex } = this.state;\n        if (editIndex === -1) {\n            this.setState({ editIndex: index });\n        }\n    }\n\n    /**\n     * Hides the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    handleShowEdit() {\n        this.setState({ editIndex: -1 });\n    }\n\n    /**\n     * Hides the component to add a new comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    handleShowReply() {\n        this.setState({ replyId: -1 });\n    }\n\n    /**\n     * Shows the confimation dialog to delete a comment\n     * @param {Object} comment Comment that has to be deleted\n     * @memberof Comment\n     */\n    handleClickOpen(comment) {\n        const { editIndex } = this.state;\n        if (editIndex === -1) {\n            this.setState({ deleteComment: comment, openDialog: true });\n        }\n    }\n\n    /**\n     * Hides the confimation dialog to delete a comment\n     * @memberof Comment\n     */\n    handleClose() {\n        this.setState({ openDialog: false });\n    }\n\n    /**\n     * Handles the Confirm Dialog\n     * @param {*} message properies passed by the Confirm Dialog\n     * @memberof Comment\n     */\n    handleConfirmDialog(message) {\n        if (message) {\n            this.handleClickDeleteComment();\n        } else {\n            this.handleClose();\n        }\n    }\n\n    /**\n     * Handles loading more comment replies\n     * @param {Object} comment comment for which replies should be loaded\n     * @memberof Comments\n     */\n    handleLoadMoreReplies(comment) {\n        const { api: { id: apiId }, comments, updateComment } = this.props;\n        const { id, replies: { count, list } } = comment;\n        const restApi = new API();\n\n        restApi\n            .getAllCommentReplies(apiId, id, 3, count)\n            .then((result) => {\n                if (result.body) {\n                    const { list: replyList, count: replyCount } = result.body;\n                    const existingComment = comments.find((entry) => entry.id === id);\n\n                    const newRepliesList = list.concat(replyList);\n                    const newCount = count + replyCount;\n                    const newLimit = newCount <= 3 ? 3 : newCount;\n\n                    const updatedComment = {\n                        ...existingComment,\n                        replies: {\n                            count: newCount,\n                            list: newRepliesList,\n                            pagination: { ...existingComment.replies.pagination, limit: newLimit },\n                        },\n                    };\n                    if (updateComment) {\n                        updateComment(updatedComment);\n                    }\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }\n\n    /**\n     * Handles deleting a comment\n     * @memberof Comment\n     */\n    handleClickDeleteComment() {\n        const apiClient = new CommentsAPI();\n\n        const { deleteComment } = this.state;\n        const {\n            api, onDeleteComment, intl,\n        } = this.props;\n        const apiId = api.id;\n        const commentIdOfCommentToDelete = deleteComment.id;\n        const parentCommentIdOfCommentToDelete = deleteComment.parentCommentId;\n        this.handleClose();\n\n        apiClient\n            .deleteComment(apiId, commentIdOfCommentToDelete)\n            .then(() => {\n                if (parentCommentIdOfCommentToDelete === null) {\n                    if (onDeleteComment) {\n                        onDeleteComment(commentIdOfCommentToDelete);\n                    }\n                    Alert.info('Comment has been successfully deleted');\n                } else {\n                    this.handleDeleteReply(parentCommentIdOfCommentToDelete, commentIdOfCommentToDelete);\n                    Alert.info('Reply comment has been successfully deleted');\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.message);\n                } else {\n                    Alert.error(\n                        intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting comment',\n                            id: 'Apis.Details.Comments.Comment.something.went.wrong',\n                        })\n                        + ' - '\n                        + commentIdOfCommentToDelete,\n                    );\n                }\n            });\n    }\n\n    /**\n     * Delete reply\n     * @param {string} parentCommentId parent comment of reply\n     * @param {string} replyCommentId deleted reply comment\n     * @memberof Comments\n     */\n    handleDeleteReply(parentCommentId, replyCommentId) {\n        const { comments, updateComment, api: { id: apiId } } = this.props;\n        const existingComment = comments.find((item) => item.id === parentCommentId);\n        const { replies } = existingComment;\n        // updated values\n        const updatedRepliesList = replies.list.filter((reply) => reply.id !== replyCommentId);\n        const newTotal = replies.pagination.total - 1;\n        const newLimit = replies.pagination.limit > newTotal ? newTotal : replies.pagination.limit;\n        const newCount = replies.count - 1;\n\n        if (newTotal > newCount) {\n            const restApi = new API();\n            restApi\n                .getAllCommentReplies(apiId, parentCommentId, 1, newLimit - 1)\n                .then((result) => {\n                    if (result.body) {\n                        const updatedComment = {\n                            ...existingComment,\n                            replies: {\n                                ...replies,\n                                list: [...updatedRepliesList, ...result.body.list],\n                                pagination: {\n                                    ...replies.pagination,\n                                    total: newTotal,\n                                },\n                            },\n                        };\n                        if (updateComment) {\n                            updateComment(updatedComment);\n                        }\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                });\n        } else {\n            const updatedComment = {\n                ...existingComment,\n                replies: {\n                    ...replies,\n                    count: newCount,\n                    list: updatedRepliesList,\n                    pagination: {\n                        ...replies.pagination,\n                        limit: newLimit,\n                        total: newTotal,\n                    },\n                },\n            };\n            if (updateComment) {\n                updateComment(updatedComment);\n            }\n        }\n    }\n\n    /**\n     * Add new reply\n     * @param {Object} comment added reply comment\n     * @memberof Comments\n     */\n    handleAddReply(comment) {\n        const { comments, updateComment } = this.props;\n        const { parentCommentId } = comment;\n        const existingComment = comments.find((item) => item.id === parentCommentId);\n        const { replies } = existingComment;\n        const newCount = (replies.count || 0) + 1;\n        const newLimit = newCount <= 3 ? 3 : newCount;\n        const updatedComment = {\n            ...existingComment,\n            replies: {\n                ...replies,\n                count: newCount,\n                list: [...replies.list, comment],\n                pagination: {\n                    ...replies.pagination,\n                    limit: newLimit,\n                    offset: replies.pagination.offset || 0,\n                    total: replies.pagination.total + 1,\n                },\n            },\n        };\n        if (updateComment) {\n            updateComment(updatedComment);\n        }\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof Comment\n     */\n    render() {\n        const {\n            classes, comments, api, allComments, isOverview,\n        } = this.props;\n\n        const { editIndex, openDialog, replyId } = this.state;\n        return (\n            <>\n                <div className={classes.paper} id='comment-list'>\n                    {comments\n                        && comments\n                            .slice(0)\n                            .map((comment, index) => (\n                                <div key={comment.id} className={classes.contentWrapper}>\n                                    {index !== 0 && <Divider light className={classes.divider} />}\n                                    <Grid\n                                        md={8}\n                                        container\n                                        spacing={1}\n                                        className={classNames({ [classes.root]: !isOverview })}\n                                    >\n                                        <Grid item>\n                                            <Icon className={classes.commentIcon}>account_circle</Icon>\n                                        </Grid>\n                                        <Grid item xs zeroMinWidth>\n                                            <Typography noWrap className={classes.commentText}>\n                                                {(comment.commenterInfo && comment.commenterInfo.firstName)\n                                                    ? (comment.commenterInfo.firstName + comment.commenterInfo.lastName)\n                                                    : comment.createdBy}\n                                            </Typography>\n                                            <Tooltip title={comment.createdTime} aria-label={comment.createdTime}>\n                                                <Typography noWrap className={classes.commentText} variant='caption'>\n                                                    {dayjs(comment.createdTime).fromNow()}\n                                                </Typography>\n                                            </Tooltip>\n\n                                            <Typography className={classes.commentText}>{comment.content}</Typography>\n\n                                            {!api.isRevision && (\n                                                <CommentOptions\n                                                    comment={comment}\n                                                    editIndex={editIndex}\n                                                    index={index}\n                                                    showAddComment={this.showAddComment}\n                                                    handleClickOpen={this.handleClickOpen}\n                                                    showEditComment={this.showEditComment}\n                                                />\n                                            )}\n\n                                            {comment.id === replyId && (\n                                                <Box ml={6} mb={2}>\n                                                    <CommentAdd\n                                                        api={api}\n                                                        replyTo={comment.id}\n                                                        allComments={allComments}\n                                                        handleShowReply={this.handleShowReply}\n                                                        cancelButton\n                                                        addReply={this.handleAddReply}\n                                                    />\n                                                </Box>\n                                            )}\n\n                                            {comment.replies && comment.replies.list.map((reply, commentIndex) => (\n                                                <>\n                                                    <Box ml={8}>\n                                                        {commentIndex !== 0\n                                                            && <Divider light className={classes.divider} />}\n                                                        <Grid container spacing={1} className={classes.root}>\n                                                            <Grid item>\n                                                                <Icon className={classes.commentIcon}>\n                                                                    account_circle\n                                                                </Icon>\n                                                            </Grid>\n                                                            <Grid item xs zeroMinWidth>\n                                                                <Typography noWrap className={classes.commentText}>\n                                                                    {(reply.commenterInfo\n                                                                        && reply.commenterInfo.fullName)\n                                                                        ? reply.commenterInfo.fullName\n                                                                        : reply.createdBy}\n                                                                </Typography>\n                                                                <Tooltip\n                                                                    title={comment.createdTime}\n                                                                    aria-label={comment.createdTime}\n                                                                >\n                                                                    <Typography\n                                                                        noWrap\n                                                                        className={classes.commentText}\n                                                                        variant='caption'\n                                                                    >\n                                                                        {dayjs(reply.createdTime).fromNow()}\n                                                                    </Typography>\n                                                                </Tooltip>\n\n                                                                {commentIndex !== editIndex && (\n                                                                    <Typography className={classes.commentText}>\n                                                                        {reply.content}\n                                                                    </Typography>\n                                                                )}\n\n                                                                {commentIndex === editIndex && (\n                                                                    <CommentEdit\n                                                                        api={api}\n                                                                        allComments={reply}\n                                                                        comment={reply}\n                                                                        toggleShowEdit={this.handleShowEdit}\n                                                                    />\n                                                                )}\n\n                                                                {!api.isRevision && (\n                                                                    <CommentOptions\n                                                                        comment={reply}\n                                                                        editIndex={editIndex}\n                                                                        index={commentIndex}\n                                                                        showAddComment={this.showAddComment}\n                                                                        handleClickOpen={this.handleClickOpen}\n                                                                        showEditComment={this.showEditComment}\n                                                                    />\n                                                                )}\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Box>\n                                                </>\n                                            ))}\n                                            {comment.replies && comment.replies.count < comment.replies.pagination.total\n                                                && (\n                                                    <div className={classes.contentWrapper}>\n                                                        <Grid container spacing={4} className={classes.root}>\n                                                            <Grid item>\n                                                                <Typography\n                                                                    className={classes.verticalSpace}\n                                                                    variant='body1'\n                                                                >\n                                                                    <a\n                                                                        className={classes.link + ' '\n                                                                            + classes.loadMoreLink}\n                                                                        onClick={\n                                                                            () => this.handleLoadMoreReplies(comment)\n                                                                        }\n                                                                        onKeyDown={\n                                                                            () => this.handleLoadMoreReplies(comment)\n                                                                        }\n                                                                    >\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.Comments.Comment.load.'\n                                                                                + 'more.replies'}\n                                                                            defaultMessage='Show More Replies'\n                                                                        />\n                                                                    </a>\n                                                                </Typography>\n                                                            </Grid>\n                                                            <Grid item>\n                                                                <Typography\n                                                                    className={classes.verticalSpace}\n                                                                    zvariant='body1'\n                                                                >\n                                                                    {'(' + (comment.replies.count) + ' of '\n                                                                        + comment.replies.pagination.total + ')'}\n                                                                </Typography>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </div>\n                                                )}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            ))}\n                </div>\n                <ConfirmDialog\n                    key='key-dialog'\n                    labelCancel='Cancel'\n                    title='Confirm Delete'\n                    message='Are you sure you want to delete this comment?'\n                    labelOk='Yes'\n                    callback={this.handleConfirmDialog}\n                    open={openDialog}\n                />\n            </>\n        );\n    }\n}\n\nComment.defaultProps = {\n    isOverview: false,\n};\n\nComment.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    allComments: PropTypes.instanceOf(Array).isRequired,\n    comments: PropTypes.instanceOf(Array).isRequired,\n    isOverview: PropTypes.bool,\n    updateComment: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Comment));\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Button, Typography } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\n\nconst styles = (theme) => ({\n    textField: {\n        marginTop: 0,\n        width: '87.5%',\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        marginTop: theme.spacing(2),\n    },\n    category: {\n        width: '12%',\n        marginRight: '0.5%',\n    },\n});\n\n/**\n * Display a component to edit a comment\n * @class CommmentEdit\n * @extends {React.Component}\n */\nclass CommentEdit extends React.Component {\n    /**\n     * Creates an instance of CommentEdit\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentEdit\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            commentText: '',\n            category: '',\n            currentLength: 0,\n        };\n        this.inputChange = this.inputChange.bind(this);\n        this.handleCategoryChange = this.handleCategoryChange.bind(this);\n        this.handleClickUpdateComment = this.handleClickUpdateComment.bind(this);\n        this.handleClickCancel = this.handleClickCancel.bind(this);\n        this.filterCommentToUpdate = this.filterCommentToUpdate.bind(this);\n        this.filterCommentToUpdateReply = this.filterCommentToUpdateReply.bind(this);\n    }\n\n    /**\n     * @memberof Comments\n     */\n    componentDidMount() {\n        const { comment } = this.props;\n        this.setState({\n            commentText: comment.commentText,\n            category: comment.category,\n            currentLength: comment.commentText.length,\n        });\n    }\n\n    /**\n     * Hides the component to edit a comment when cancelled\n     * @memberof CommentEdit\n     */\n    handleClickCancel() {\n        const { toggleShowEdit, commentsUpdate, allComments } = this.props;\n        toggleShowEdit();\n        commentsUpdate(allComments);\n    }\n\n    /**\n     * Handles category when the category is changed\n     * @param {any} event Drop down select event\n     * @memberof CommentEdit\n     */\n    handleCategoryChange(event) {\n        this.setState({ category: event.target.value });\n    }\n\n    /**\n     * Handles updating a comment\n     * @memberof CommentEdit\n     */\n    handleClickUpdateComment() {\n        const {\n            api, comment, allComments, toggleShowEdit, commentsUpdate,\n        } = this.props;\n        const { category, commentText } = this.state;\n        const Api = new API();\n        const apiId = api.id;\n        const commentToEdit = comment;\n        commentToEdit.commentText = commentText.trim();\n        commentToEdit.category = category;\n\n        // to check whether a string does not contain only whitehis spaces\n        if (comment.commentText.replace(/\\s/g, '').length) {\n            Api.updateComment(apiId, commentToEdit.commentId, commentToEdit)\n                .then((result) => {\n                    const updatedComment = result.body;\n                    if (commentToEdit.parentCommentId === undefined) {\n                        const index = allComments.findIndex(this.filterCommentToUpdate);\n                        allComments[index].category = updatedComment.category;\n                        allComments[index].commentText = updatedComment.commentText;\n                    } else {\n                        const index = allComments.findIndex(this.filterCommentToUpdateReply);\n                        const replyIndex = allComments[index].replies.findIndex(this.filterCommentToUpdate);\n                        allComments[index].replies[replyIndex] = updatedComment;\n                    }\n                    toggleShowEdit();\n                    commentsUpdate(allComments);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.message);\n                    } else {\n                        Alert.error('Something went wrong while adding the comment');\n                    }\n                });\n        } else {\n            Alert.error('You cannot enter a blank comment');\n        }\n    }\n\n    /**\n     * Filters the comment to update\n     * @memberof CommentAdd\n     */\n    filterCommentToUpdate(commentToFilter) {\n        const { comment } = this.props;\n        return commentToFilter.commentId === comment.commentId;\n    }\n\n    /**\n     * Filters the comment to update\n     * @memberof CommentAdd\n     */\n    filterCommentToUpdateReply(commentToFilter) {\n        const { comment } = this.props;\n        return commentToFilter.commentId === comment.parentCommentId;\n    }\n\n    /**\n     * Handles the comment text when input changes\n     * @param {Object} {target} target element\n     * @memberof CommentEdit\n     */\n    inputChange({ target }) {\n        this.setState({ commentText: target.value, currentLength: target.value.length });\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentEdit\n     */\n    render() {\n        const { classes, theme } = this.props;\n        const { category, commentText, currentLength } = this.state;\n        return (\n            <div>\n                <FormControl className={classes.category}>\n                    <Select value={category} onChange={this.handleCategoryChange}>\n                        <MenuItem value='General'>General</MenuItem>\n                        <MenuItem value='Feature Request'>Feature Request</MenuItem>\n                        <MenuItem value='Bug Report'>Bug Report</MenuItem>\n                    </Select>\n                </FormControl>\n                <TextField\n                    id='multiline-static'\n                    autoFocus\n                    multiline\n                    className={classes.textField}\n                    margin='normal'\n                    placeholder='Write a comment'\n                    inputProps={{ maxLength: theme.custom.maxCommentLength }}\n                    value={commentText}\n                    onChange={this.inputChange}\n                />\n                <Typography className={classes.commentText} align='right'>\n                    {currentLength + '/' + theme.custom.maxCommentLength}\n                </Typography>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <Button variant='contained' color='primary' onClick={() => this.handleClickUpdateComment()}>\n                            Save\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button onClick={() => this.handleClickCancel()} className={classes.button}>\n                            Cancel\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nCommentEdit.defaultProps = {\n    commentsUpdate: null,\n};\n\nCommentEdit.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    allComments: PropTypes.instanceOf(Array).isRequired,\n    // todo make commentsUpdate required once comment edit feature is supported\n    commentsUpdate: PropTypes.func,\n    toggleShowEdit: PropTypes.func.isRequired,\n    comment: PropTypes.instanceOf(Object).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CommentEdit);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport AuthManager from 'AppData/AuthManager';\nimport Utils from 'AppData/Utils';\n\nconst styles = (theme) => ({\n    link: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        '& span.MuiButton-label': {\n            color: theme.palette.primary.main,\n            fontWeight: '400',\n        },\n        cursor: 'pointer',\n    },\n    time: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: theme.spacing(0.3),\n    },\n    verticalSpace: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    disable: {\n        color: theme.palette.grey[200],\n    },\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    commentText: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: theme.spacing.unig,\n        width: '100%',\n        whiteSpace: 'pre-wrap',\n        overflowWrap: 'break-word',\n    },\n    root: {\n        marginTop: theme.spacing(2.5),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing.unig,\n    },\n});\n\n/**\n * Component to display options of the comment\n * @class CommentOptions\n * @extends {React.Component}\n */\nclass CommentOptions extends React.Component {\n    /**\n     * Creates an instance of CommentAdd\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentAdd\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.showAddComment = this.showAddComment.bind(this);\n        this.showEditComment = this.showEditComment.bind(this);\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n    }\n\n    /**\n     * Shows the confimation dialog to delete a comment\n     * @param {Object} comment Comment that has to be deleted\n     * @memberof Comment\n     */\n    handleClickOpen(comment) {\n        const { editIndex, handleClickOpen } = this.props;\n        if (editIndex === -1) {\n            handleClickOpen(comment);\n        }\n    }\n\n    /**\n     * Shows the component to add a new comment\n     * @param {any} index Index of comment in the array\n     * @memberof CommentOptions\n     */\n    showAddComment(replyId) {\n        const { showAddComment } = this.props;\n        showAddComment(replyId);\n    }\n\n    /**\n     * Shows the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    showEditComment(index) {\n        const { editIndex, showEditComment } = this.props;\n        if (editIndex === -1) {\n            showEditComment(index);\n        }\n    }\n\n    /**\n     * Returns the date and time in a particular format\n     * @param {any} timestamp Timestamp that has to be formatted\n     * @memberof CommentOptions\n     */\n    displayDate(timestamp) {\n        const localDate = new Date(timestamp);\n        const localDateString = localDate.toLocaleDateString(undefined, {\n            day: 'numeric',\n            month: 'short',\n            year: 'numeric',\n        });\n        const localTimeString = localDate.toLocaleTimeString(undefined, {\n            hour: '2-digit',\n            minute: '2-digit',\n        });\n\n        return localDateString + ' ' + localTimeString;\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentOptions\n     */\n    render() {\n        const {\n            classes, comment,\n        } = this.props;\n        const user = AuthManager.getUser();\n        const username = Utils.getUserNameWithoutDomain(user.name);\n        const canDelete = (comment.createdBy === username) || user.isAdmin();\n        // const canModify = comment.createdBy === username;\n        return (\n            <Grid container spacing={1} className={classes.verticalSpace} key={comment.id}>\n\n                {/* only the comment owner or admin can delete a comment */}\n                {canDelete && [\n                    <Grid item key='key-delete'>\n                        <Button\n                            size='small'\n                            onClick={() => this.handleClickOpen(comment)}\n                            color='primary'\n                            aria-label={'Delete comment ' + comment.content}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Comments.CommentOptions.delete'\n                                defaultMessage='Delete'\n                            />\n                        </Button>\n                    </Grid>,\n                ]}\n                {comment.parentCommentId === null && [\n                    <Grid item key='key-reply'>\n                        <Button\n                            size='small'\n                            onClick={() => this.showAddComment(comment.id)}\n                            color='primary'\n                            aria-label={'Reply to comment ' + comment.content}\n                        >\n                            <FormattedMessage id='Apis.Details.Comments.CommentOptions.reply' defaultMessage='Reply' />\n                        </Button>\n                    </Grid>,\n                ]}\n\n                {/* only the comment owner can modify the comment from the exact entry point */}\n                {/* {canModify && [\n                    <Grid item key='key-edit'>\n                        <Button\n                            size='small'\n                            className={classes.link}\n                            onClick={() => this.showAddComment(comment.id)}\n                            color='primary'\n                        >\n                            <FormattedMessage id='Apis.Details.Comments.CommentOptions.reply' defaultMessage='Reply' />\n                        </Button>\n                    </Grid>,\n                ]} */}\n\n            </Grid>\n        );\n    }\n}\n\nCommentOptions.defaultProps = {\n    showAddComment: null,\n};\n\nCommentOptions.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    editIndex: PropTypes.number.isRequired,\n    comment: PropTypes.instanceOf(Object).isRequired,\n    handleClickOpen: PropTypes.func.isRequired,\n    showEditComment: PropTypes.func.isRequired,\n    showAddComment: PropTypes.func,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CommentOptions);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CreateScope from './CreateScope';\nimport EditScope from './EditScope';\nimport Scopes from './Scopes';\n\nconst Scope = () => {\n    const [api, updateAPI] = useAPI();\n    const urlPrefix = api.isAPIProduct() ? 'api-products' : 'apis';\n    return (\n        <Switch>\n            <Route exact path={'/' + urlPrefix + '/:api_uuid/scopes/'} component={Scopes} />\n            <Route\n                exact\n                path={'/' + urlPrefix + '/:api_uuid/scopes/create'}\n                component={(props) => <CreateScope api={api} {...props} updateAPI={updateAPI} />}\n            />\n            <Route\n                exact\n                path={'/' + urlPrefix + '/:api_uuid/scopes/edit'}\n                component={(props) => <EditScope api={api} {...props} updateAPI={updateAPI} />}\n            />\n            <Route component={ResourceNotFound} />\n        </Switch>\n    );\n};\n\nScope.propTypes = {\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        additionalProperties: PropTypes.shape({\n            key: PropTypes.string,\n            value: PropTypes.string,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default Scope;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport { red } from '@material-ui/core/colors/';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 20,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n        marginRight: theme.spacing(1),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    FormControl: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlLabel: {\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        fontSize: theme.typography.caption.fontSize,\n    },\n    buttonSection: {\n        paddingTop: theme.spacing(3),\n    },\n    saveButton: {\n        marginRight: theme.spacing(1),\n    },\n    helpText: {\n        color: theme.palette.text.hint,\n        marginTop: theme.spacing(1),\n    },\n    extraPadding: {\n        paddingLeft: theme.spacing(2),\n    },\n    addNewOther: {\n        paddingTop: 40,\n    },\n    titleGrid: {\n        ' & .MuiGrid-item': {\n            padding: 0,\n            margin: 0,\n        },\n    },\n    descriptionForm: {\n        marginTop: theme.spacing(1),\n    },\n    progress: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Create new scopes for an API\n * @class CreateScope\n * @extends {Component}\n */\nclass CreateScope extends React.Component {\n    /**\n     * constructor\n     * @param {JSON} props parent props.\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        const valid = [];\n        valid.name = {\n            invalid: false,\n            error: '',\n        };\n        valid.description = {\n            invalid: false,\n            error: '',\n        };\n        valid.displayName = {\n            invalid: false,\n            error: '',\n        };\n        this.state = {\n            apiScopes: null,\n            apiScope: {},\n            validRoles: [],\n            valid,\n            roleValidity: true,\n            invalidRoles: [],\n            scopeAddDisabled: false,\n        };\n        this.addScope = this.addScope.bind(this);\n        this.validateScopeName = this.validateScopeName.bind(this);\n        this.handleScopeNameInput = this.handleScopeNameInput.bind(this);\n        this.validateScopeDescription = this.validateScopeDescription.bind(this);\n        this.validateScopeDisplayName = this.validateScopeDisplayName.bind(this);\n        this.handleRoleAddition = this.handleRoleAddition.bind(this);\n        this.handleRoleDeletion = this.handleRoleDeletion.bind(this);\n    }\n\n    handleRoleDeletion = (role) => {\n        const { validRoles, invalidRoles } = this.state;\n        if (invalidRoles.includes(role)) {\n            const invalidRolesArray = invalidRoles.filter((existingRole) => existingRole !== role);\n            this.setState({ invalidRoles: invalidRolesArray });\n            if (invalidRolesArray.length === 0) {\n                this.setState({ roleValidity: true });\n            }\n        } else {\n            this.setState({ validRoles: validRoles.filter((existingRole) => existingRole !== role) });\n        }\n    };\n\n    /**\n     * Handle ScopeName Input.\n     * @param {JSON} event click event.\n     */\n    handleScopeNameInput({ target: { id, value } }) {\n        this.validateScopeName(id, value);\n    }\n\n    /**\n     * Handle Role Addition.\n     * @param {string} role The first number.\n     */\n    handleRoleAddition(role) {\n        const { validRoles, invalidRoles } = this.state;\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise\n            .then(() => {\n                this.setState({\n                    roleValidity: true,\n                    validRoles: [...validRoles, role],\n                });\n            })\n            .catch((error) => {\n                if (error.status === 404) {\n                    this.setState({\n                        roleValidity: false,\n                        invalidRoles: [...invalidRoles, role],\n                    });\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating role ' + error);\n                }\n            });\n    }\n\n    /**\n     * validate Scope Description.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDescription({ target: { id, value } }) {\n        const { valid, apiScope } = this.state;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        if (value && value.length !== '' && value.length >= 512) {\n            valid[id].invalid = true;\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.description.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 512 characters',\n            });\n        } else {\n            valid[id].invalid = false;\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Display Name.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDisplayName({ target: { id, value } }) {\n        const { valid, apiScope } = this.state;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        if (value && value.length !== '' && value.length >= 512) {\n            valid[id].invalid = true;\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.display.name.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 512 characters',\n            });\n        } else {\n            valid[id].invalid = false;\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Name.\n     * @param {string} id click event object.\n     * @param {string} value click event object.\n     * @returns {boolean} valid state\n     */\n    validateScopeName(id, value) {\n        const { valid, apiScope } = this.state;\n        const {\n            api: { scopes },\n        } = this.props;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        valid[id].invalid = !(value && value.length > 0);\n        // length validation\n        if (valid[id].invalid) {\n            valid[id].error = 'Scope name cannot be empty';\n        }\n        valid[id].invalid = !(value && value.length <= 60);\n        if (valid[id].invalid) {\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.name.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 60 characters',\n            });\n        }\n\n        if (/\\s/.test(value)) {\n            valid[id].invalid = true;\n            valid[id].error = 'Scope name cannot have spaces';\n        }\n\n        const exist = scopes.find((scope) => {\n            return scope.name === value;\n        });\n        if (!valid[id].invalid && exist) {\n            valid[id].invalid = true;\n            valid[id].error = 'Scope name already exist';\n        }\n        if (!valid[id].invalid && /[!@#$%^&*(),?\"{}[\\]|<>\\t\\n]|(^apim:)/i.test(value)) {\n            valid[id].invalid = true;\n            valid[id].error = 'Field contains special characters';\n        }\n        if (!valid[id].invalid) {\n            const promise = APIValidation.scope.validate(base64url.encode(value));\n            promise\n                .then(() => {\n                    valid[id].invalid = true;\n                    valid[id].error = 'Scope name is already used by another API';\n                    this.setState({\n                        valid,\n                    });\n                })\n                .catch((error) => {\n                    if (error.status === 404) {\n                        valid[id].invalid = false;\n                        valid[id].error = '';\n                        this.setState({\n                            valid,\n                        });\n                    } else {\n                        Alert.error('Error when validating scope: ' + value);\n                        console.error('Error when validating scope ' + error);\n                    }\n                });\n        }\n        if (!valid[id].invalid) {\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n        return valid[id].invalid;\n    }\n\n    /**\n     * Add new scope\n     * @memberof Scopes\n     */\n    addScope() {\n        const {\n            intl, api, history, updateAPI,\n        } = this.props;\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        if (this.validateScopeName('name', this.state.apiScope.name)) {\n            // return status of the validation\n            return;\n        }\n        const scope = this.state.apiScope;\n        scope.bindings = this.state.validRoles;\n        const scopes = api.scopes.map((aScope) => {\n            return aScope;\n        });\n        scopes.push({\n            scope,\n            shared: false,\n        });\n        const updateProperties = { scopes };\n        const promisedApiUpdate = updateAPI(updateProperties);\n        this.setState({ scopeAddDisabled: true });\n        promisedApiUpdate\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Scopes.CreateScope.scope.added.successfully',\n                    defaultMessage: 'Scope added successfully',\n                }));\n                const { apiScopes } = this.state;\n                const redirectURL = '/' + urlPrefix + '/' + api.id + '/scopes/';\n                history.push(redirectURL);\n                this.setState({\n                    apiScopes,\n                    apiScope: {},\n                    validRoles: [],\n                });\n            })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            })\n            .finally(() => {\n                this.setState({ scopeAddDisabled: false });\n            });\n    }\n\n    /**\n     * Render.\n     * @returns {JSX} rendered component.\n     */\n    render() {\n        const { classes, api } = this.props;\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/scopes`;\n        const {\n            roleValidity, validRoles, invalidRoles, scopeAddDisabled,\n        } = this.state;\n\n        return (\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5} className={classes.titleGrid}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={url} className={classes.titleLink}>\n                                    <Typography variant='h4'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.heading.scope.heading'\n                                            defaultMessage='Scopes'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h4'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Scopes.CreateScope.create.new.scope'\n                                        defaultMessage='Create New Scope'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0} className={classes.root}>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='name'\n                                        label='Name'\n                                        placeholder='Scope Name'\n                                        error={this.state.valid.name.invalid}\n                                        helperText={\n                                            this.state.valid.name.invalid ? (\n                                                this.state.valid.name.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                    defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                                />\n                                            )\n                                        }\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={this.state.apiScope.name || ''}\n                                        onChange={this.handleScopeNameInput}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='displayName'\n                                        label='Display Name'\n                                        placeholder='Scope Display Name'\n                                        error={this.state.valid.displayName.invalid}\n                                        helperText={\n                                            this.state.valid.displayName.invalid ? (\n                                                this.state.valid.displayName.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                    defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                                />\n                                            )\n                                        }\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={this.state.apiScope.displayName || ''}\n                                        onChange={this.validateScopeDisplayName}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal' classes={{ root: classes.descriptionForm }}>\n                                    <TextField\n                                        id='description'\n                                        label='Description'\n                                        variant='outlined'\n                                        placeholder='Short description about the scope'\n                                        error={this.state.valid.description.invalid}\n                                        helperText={\n                                            this.state.valid.description.invalid ? (\n                                                this.state.valid.description.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.description.about.the.scope'\n                                                    defaultMessage='Short description about the scope'\n                                                />\n                                            )\n                                        }\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.validateScopeDescription}\n                                        value={this.state.apiScope.description || ''}\n                                        multiline\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <ChipInput\n                                        label='Roles'\n                                        id='roles-input'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        variant='outlined'\n                                        value={validRoles.concat(invalidRoles)}\n                                        alwaysShowPlaceholder={false}\n                                        placeholder='Enter roles and press Enter'\n                                        blurBehavior='clear'\n                                        InputProps={{\n                                            endAdornment: !roleValidity && (\n                                                <InputAdornment position='end'>\n                                                    <Error color='error' />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onAdd={this.handleRoleAddition}\n                                        error={!roleValidity}\n                                        helperText={\n                                            !roleValidity ? (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.Roles.Invalid'\n                                                    defaultMessage='Role is invalid'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.roles.help'\n                                                    defaultMessage='Enter a valid role and press `Enter`.'\n                                                />\n                                            )\n                                        }\n                                        chipRenderer={({ value }, key) => (\n                                            <Chip\n                                                key={key}\n                                                label={value}\n                                                onDelete={() => {\n                                                    this.handleRoleDeletion(value);\n                                                }}\n                                                style={{\n                                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                                    margin: '8px 8px 8px 0',\n                                                    float: 'left',\n                                                }}\n                                            />\n                                        )}\n                                    />\n                                </FormControl>\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        id='scope-save-btn'\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={this.addScope}\n                                        disabled={\n                                            isRestricted(['apim:api_create'], api)\n                                            || this.state.valid.name.invalid\n                                            || invalidRoles.length !== 0\n                                            || scopeAddDisabled\n                                            || api.isRevision\n                                            || this.state.valid.description.invalid\n                                        }\n                                        className={classes.saveButton}\n                                    >\n                                        {scopeAddDisabled ? (\n                                            <>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.saving'\n                                                    defaultMessage='Saving'\n                                                />\n                                                <CircularProgress size={16} classes={{ root: classes.progress }} />\n                                            </>\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.save'\n                                                defaultMessage='Save'\n                                            />\n                                        )}\n                                    </Button>\n                                    <Link to={url}>\n                                        <Button>\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCreateScope.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nCreateScope.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withStyles(styles)(CreateScope));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Icon from '@material-ui/core/Icon';\nimport base64url from 'base64url';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Error from '@material-ui/core/SvgIcon/SvgIcon';\nimport Api from 'AppData/api';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 20,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n        marginRight: theme.spacing(1),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    FormControl: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlLabel: {\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        fontSize: theme.typography.caption.fontSize,\n    },\n    buttonSection: {\n        paddingTop: theme.spacing(3),\n    },\n    saveButton: {\n        marginRight: theme.spacing(2),\n    },\n    helpText: {\n        color: theme.palette.text.hint,\n        marginTop: theme.spacing(1),\n    },\n    extraPadding: {\n        paddingLeft: theme.spacing(2),\n    },\n    addNewOther: {\n        paddingTop: 40,\n    },\n    titleGrid: {\n        ' & .MuiGrid-item': {\n            padding: 0,\n            margin: 0,\n        },\n    },\n});\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Create new scopes for an API\n * @class CreateScope\n * @extends {Component}\n */\nclass EditScope extends React.Component {\n    /**\n     * constructor\n     * @param {JSON} props parent props.\n     */\n    constructor(props) {\n        super(props);\n        // this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        const { api, location } = this.props;\n        const thisScope = api.scopes.find((apiScope) => {\n            return apiScope.scope.name === location.state.scopeName;\n        });\n        this.state = {\n            apiScope: { ...thisScope },\n            validRoles: thisScope.scope.bindings,\n            invalidRoles: [],\n            roleValidity: true,\n        };\n        this.updateScope = this.updateScope.bind(this);\n        this.handleInputs = this.handleInputs.bind(this);\n        this.handleRoleDeletion = this.handleRoleDeletion.bind(this);\n        this.handleRoleAddition = this.handleRoleAddition.bind(this);\n        this.validateScopeDescription = this.validateScopeDescription.bind(this);\n        this.validateScopeDisplayName = this.validateScopeDisplayName.bind(this);\n    }\n\n    handleRoleDeletion = (role) => {\n        const { validRoles, invalidRoles } = this.state;\n        if (invalidRoles.includes(role)) {\n            const invalidRolesArray = invalidRoles.filter((existingRole) => existingRole !== role);\n            this.setState({ invalidRoles: invalidRolesArray });\n            if (invalidRolesArray.length === 0) {\n                this.setState({ roleValidity: true });\n            }\n        } else {\n            this.setState({ validRoles: validRoles.filter((existingRole) => existingRole !== role) });\n        }\n    };\n\n    /**\n     * Handle api scope addition event\n     * @param {any} event Button Click event\n     * @memberof Scopes\n     */\n    handleInputs(event) {\n        if (Array.isArray(event)) {\n            const { apiScope } = this.state;\n            apiScope.scope.bindings = event;\n            this.setState({\n                apiScope,\n            });\n        } else {\n            const input = event.target;\n            const { apiScope } = this.state;\n            apiScope[input.id] = input.value;\n            this.setState({\n                apiScope,\n            });\n        }\n    }\n\n    /**\n     * Handle Role Addition.\n     * @param {string} role The first number.\n     */\n    handleRoleAddition(role) {\n        const { validRoles, invalidRoles } = this.state;\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise\n            .then(() => {\n                this.setState({\n                    roleValidity: true,\n                    validRoles: [...validRoles, role],\n                });\n            })\n            .catch((error) => {\n                if (error.status === 404) {\n                    this.setState({\n                        roleValidity: false,\n                        invalidRoles: [...invalidRoles, role],\n                    });\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating role ' + error);\n                }\n            });\n    }\n\n    /**\n     * Add new scope\n     * @memberof Scopes\n     */\n    updateScope() {\n        const { apiScope, validRoles } = this.state;\n        const {\n            intl, api, history, updateAPI,\n        } = this.props;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: originalScope.displayName,\n            description: originalScope.description,\n            bindings: validRoles,\n        };\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        const scopes = api.scopes.map((scopeObj) => {\n            if (scopeObj.scope.name === apiScope.scope.name) {\n                return apiScope;\n            } else {\n                return scopeObj;\n            }\n        });\n        const updateProperties = { scopes };\n        const promisedApiUpdate = updateAPI(updateProperties);\n        promisedApiUpdate.then(() => {\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.Scopes.CreateScope.scope.updated.successfully',\n                defaultMessage: 'Scope updated successfully',\n            }));\n            const redirectURL = '/' + urlPrefix + '/' + api.id + '/scopes/';\n            history.push(redirectURL);\n        }).catch((error) => {\n            const { response } = error;\n            if (response.body) {\n                const { description } = response.body;\n                Alert.error(description);\n            }\n        });\n    }\n\n    /**\n     * validate Scope Description.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDescription({ target: { value } }) {\n        const { apiScope } = this.state;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: originalScope.displayName,\n            description: value,\n            bindings: originalScope.bindings,\n        };\n        this.setState({\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Display Name.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDisplayName({ target: { value } }) {\n        const { apiScope } = this.state;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: value,\n            description: originalScope.description,\n            bindings: originalScope.bindings,\n        };\n        this.setState({\n            apiScope,\n        });\n    }\n\n    /**\n     * Render.\n     * @returns {JSX} rendered component.\n     */\n    render() {\n        const { classes, api, isAPIProduct } = this.props;\n        const {\n            apiScope, roleValidity, validRoles, invalidRoles,\n        } = this.state;\n        const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/scopes`;\n        return (\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5} className={classes.titleGrid}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={url} className={classes.titleLink}>\n                                    <Typography variant='h4'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.heading.edit.scope.heading'\n                                            defaultMessage='Scopes'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h4'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Scopes.EditScope.update.scope'\n                                        defaultMessage='Update Scope'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0} className={classes.root}>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='name'\n                                        label='Name'\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={apiScope.scope.name}\n                                        onChange={this.handleScopeNameInput}\n                                        disabled\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='displayName'\n                                        label='Display Name'\n                                        placeholder='Scope Display Name'\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                            />\n                                        )}\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={apiScope.scope.displayName || ''}\n                                        onChange={this.validateScopeDisplayName}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='description'\n                                        label='Description'\n                                        variant='outlined'\n                                        placeholder='Short description about the scope'\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.EditScope.short.description.about.the.scope'\n                                                defaultMessage='Short description about the scope'\n                                            />\n                                        )}\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.validateScopeDescription}\n                                        value={apiScope.scope.description || ''}\n                                        multiline\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <ChipInput\n                                        label='Roles'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        variant='outlined'\n                                        value={validRoles.concat(invalidRoles)}\n                                        alwaysShowPlaceholder={false}\n                                        placeholder='Enter roles and press Enter'\n                                        blurBehavior='clear'\n                                        InputProps={{\n                                            endAdornment: !roleValidity && (\n                                                <InputAdornment position='end'>\n                                                    <Error color='error' />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onAdd={this.handleRoleAddition}\n                                        error={!roleValidity}\n                                        helperText={\n                                            !roleValidity ? (\n                                                <FormattedMessage\n                                                    id='Apis.Details.EditScopes.Roles.Invalid'\n                                                    defaultMessage='Role is invalid'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.EditScopes.roles.help'\n                                                    defaultMessage='Enter a valid role and press `Enter`.'\n                                                />\n                                            )\n                                        }\n                                        chipRenderer={({ value }, key) => (\n                                            <Chip\n                                                key={key}\n                                                label={value}\n                                                onDelete={() => {\n                                                    this.handleRoleDeletion(value);\n                                                }}\n                                                style={{\n                                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                                    margin: '8px 8px 8px 0',\n                                                    float: 'left',\n                                                }}\n                                            />\n                                        )}\n                                    />\n                                </FormControl>\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={this.updateScope}\n                                        disabled={invalidRoles.length !== 0 || api.isRevision}\n                                        className={classes.saveButton}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.EditScope.update'\n                                            defaultMessage='Update'\n                                        />\n                                    </Button>\n                                    <Link to={url}>\n                                        <Button variant='contained'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.EditScope.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nEditScope.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    location: PropTypes.shape({\n        state: PropTypes.shape({\n            scopeName: PropTypes.string,\n        }),\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nEditScope.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(EditScope)));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport 'react-tagsinput/react-tagsinput.css';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport MUIDataTable from 'mui-datatables';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport Grid from '@material-ui/core/Grid';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Delete from './Delete';\n\nconst styles = (theme) => ({\n    root: {\n        paddingTop: 0,\n        paddingLeft: 0,\n    },\n    buttonProgress: {\n        position: 'relative',\n        margin: theme.spacing(1),\n    },\n    headline: { paddingTop: theme.spacing(1.25), paddingLeft: theme.spacing(2.5) },\n    heading: {\n        flexGrow: 1,\n        marginTop: 10,\n        '& table td:nth-child(2)': {\n            'word-break': 'break-word',\n        },\n        '& table td button span, & table th': {\n            'white-space': 'nowrap',\n        },\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(2),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    content: {\n        margin: `${theme.spacing(2)}px 0 ${theme.spacing(2)}px 0`,\n    },\n    head: {\n        fontWeight: 200,\n    },\n});\n/**\n * Generate the scopes UI in API details page.\n * @class Scopes\n * @extends {React.Component}\n */\nclass Scopes extends React.Component {\n    /**\n     * Creates an instance of Scopes.\n     * @param {any} props Generic props\n     * @memberof Scopes\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        this.api_data = props.api;\n    }\n\n    /**\n     * Render Scopes section\n     * @returns {React.Component} React Component\n     * @memberof Scopes\n     */\n    render() {\n        const {\n            intl, classes, api,\n        } = this.props;\n        const urlPrefix = (api.apiType === Api.CONSTS.APIProduct) ? 'api-products' : 'apis';\n        const { scopes } = api;\n        const url = `/${urlPrefix}/${api.id}/scopes/create`;\n        const editUrl = `/${urlPrefix}/${api.id}/scopes/edit`;\n        const columns = [\n            intl.formatMessage({\n                id: 'Apis.Details.Scopes.Scopes.table.header.name',\n                defaultMessage: 'Name',\n            }),\n            intl.formatMessage({\n                id: 'Apis.Details.Scopes.Scopes.table.header.description',\n                defaultMessage: 'Description',\n            }),\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const roles = value || [];\n                            return roles.join(',');\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.roles'\n                            defaultMessage='Roles'\n                        />\n                    ),\n                },\n            },\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (value && tableMeta.rowData) {\n                            return (\n                                <List component='nav' className={classes.root}>\n                                    {value.map((resource) => (\n                                        <ListItem button>\n                                            <ListItemText primary={resource} />\n                                        </ListItem>\n                                    ))}\n                                </List>\n                            );\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.usages'\n                            defaultMessage='Used In'\n                        />\n                    ),\n                },\n            },\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const scopeName = tableMeta.rowData[0];\n                            return (\n                                <table className={classes.actionTable}>\n                                    <tr>\n                                        <td>\n                                            <Link\n                                                to={\n                                                    !isRestricted(['apim:api_create'], api) && !api.isRevision && {\n                                                        pathname: editUrl,\n                                                        state: {\n                                                            scopeName,\n                                                        },\n                                                    }\n                                                }\n                                            >\n                                                <Button\n                                                    disabled={isRestricted(\n                                                        ['apim:api_create'],\n                                                        api,\n                                                    ) || api.isRevision}\n                                                >\n                                                    <Icon>edit</Icon>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.scopes.Edit.text.editor.edit'\n                                                        defaultMessage='Edit'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <Delete scopeName={scopeName} api={api} isAPIProduct />\n                                        </td>\n                                    </tr>\n                                </table>\n                            );\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.actions'\n                            defaultMessage='Actions'\n                        />\n                    ),\n                },\n            },\n        ];\n        const options = {\n            filterType: 'multiselect',\n            selectableRows: false,\n            title: false,\n            filter: false,\n            sort: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n        };\n\n        const scopesList = api.scopes.filter((apiScope) => {\n            return !apiScope.shared;\n        }).map((apiScope) => {\n            const aScope = [];\n            aScope.push(apiScope.scope.name);\n            aScope.push(apiScope.scope.description);\n            aScope.push(apiScope.scope.bindings);\n            const resources = api.operations && api.operations\n                .filter((op) => {\n                    return op.scopes.includes(apiScope.scope.name);\n                })\n                .map((op) => {\n                    return op.target + ' ' + op.verb;\n                });\n            aScope.push(resources);\n            return aScope;\n        });\n\n        if (!scopes) {\n            return <Progress />;\n        }\n\n        if (scopes.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Typography\n                            id='itest-api-details-scopes-onboarding-head'\n                            variant='h4'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.local.Scopes.heading.scope.heading'\n                                defaultMessage='Local Scopes'\n                            />\n                        </Typography>\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.heading.scope.title.tooltip'\n                                    defaultMessage='Manage scopes that are local to this API'\n                                />\n                            )}\n                            placement='top-end'\n                            aria-label='Local Scopes'\n                        >\n                            <IconButton size='small' aria-label='delete'>\n                                <HelpOutlineIcon fontSize='small' />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography variant='h5' component='h3' className={classes.head}>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.create.scopes.title'\n                                    defaultMessage='Create API Local Scopes'\n                                />\n                            </Typography>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.scopes.enable.fine.gained.access.control'\n                                    defaultMessage={\n                                        'Scopes enable fine-grained access control to API resources'\n                                        + ' based on user roles.'\n                                    }\n                                />\n                            </Typography>\n                            <div className={classes.actions}>\n                                <Link to={!isRestricted(['apim:api_create'], api) && !api.isRevision && url}>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        className={classes.button}\n                                        disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.create.scopes.button'\n                                            defaultMessage='Create Scopes'\n                                        />\n                                    </Button>\n                                </Link>\n                            </div>\n                        </div>\n                    </InlineMessage>\n                </div>\n            );\n        }\n\n        return (\n            <div className={classes.heading}>\n                <div className={classes.titleWrapper}>\n                    <Typography variant='h4' align='left' className={classes.mainTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.local.Scopes.heading.edit.heading'\n                            defaultMessage='Local Scopes'\n                        />\n                    </Typography>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Scopes.Scopes.heading.scope.title.tooltip2'\n                                defaultMessage='Manage scopes that are local to this API'\n                            />\n                        )}\n                        placement='top-end'\n                        aria-label='Local Scopes'\n                    >\n                        <IconButton size='small' aria-label='delete'>\n                            <HelpOutlineIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                    <Link to={!isRestricted(['apim:api_create'], api) && !api.isRevision && url}>\n                        <Button\n                            variant='outlined'\n                            color='primary'\n                            size='small'\n                            disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                        >\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Scopes.Scopes.heading.scope.add_new'\n                                defaultMessage='Add New Local Scope'\n                            />\n                        </Button>\n                    </Link>\n                    {isRestricted(['apim:api_create'], api) && (\n                        <Grid item>\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.update.not.allowed'\n                                    defaultMessage={\n                                        '*You are not authorized to update scopes of'\n                                        + ' the API due to insufficient permissions'\n                                    }\n                                />\n                            </Typography>\n                        </Grid>\n                    )}\n                </div>\n\n                <MUIDataTable title={false} data={scopesList} columns={columns} options={options} />\n            </div>\n        );\n    }\n}\n\nScopes.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.instanceOf(Object).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nScopes.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(Scopes)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n};\n\nfunction Delete(props) {\n    const [api, updateAPI] = useAPI();\n    const { intl } = props;\n    const [open, setOpen] = useState(false);\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteScope = () => {\n        const { scopeName } = props;\n        const ops = api.operations && JSON.parse(JSON.stringify(api.operations));\n        const operations = ops && ops.map((op) => {\n            // eslint-disable-next-line no-param-reassign\n            op.scopes = op.scopes.filter((scope) => {\n                return scope !== scopeName;\n            });\n            return op;\n        });\n        const scopes = api.scopes.filter((apiScope) => {\n            return apiScope.scope.name !== scopeName;\n        });\n        const updateProperties = { scopes, operations };\n        const setOpenLocal = setOpen; // Need to copy this to access inside the promise.then\n        const promisedUpdate = updateAPI(updateProperties);\n        promisedUpdate\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Resources.Resources.api.scope.deleted.successfully',\n                    defaultMessage: 'API Scope deleted successfully!',\n                }));\n                setOpenLocal(!open);\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Resources.Resources.something.went.wrong.while.updating.the.api',\n                    defaultMessage: 'Error occurred while updating API',\n                }));\n            });\n    };\n\n    const runAction = (confirm) => {\n        if (confirm) {\n            deleteScope();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const { scopeName } = props;\n\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create'], api) || api.isRevision}>\n                <Icon>delete_forever</Icon>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Delete.document.delete'\n                    defaultMessage='Delete'\n                />\n            </Button>\n            <ConfirmDialog\n                key='key-dialog'\n                labelCancel={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.cancel'\n                        defaultMessage='Cancel'\n                    />\n                )}\n                title={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.confirm'\n                        defaultMessage='Confirm Delete'\n                    />\n                )}\n                message={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.ok.confirm'\n                        defaultMessage='Are you sure you want to delete scope {scope} ?'\n                        values={{ scope: scopeName }}\n                    />\n                )}\n                labelOk={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.ok.yes'\n                        defaultMessage='Yes'\n                    />\n                )}\n                callback={runAction}\n                open={open}\n            />\n        </div>\n    );\n}\nDelete.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    scopeName: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Delete));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport SecurityOverview from './SecurityOverview';\n\nconst Security = () => {\n    return (\n        <Switch>\n            <Route path='/apis/:api_uuid/security' component={SecurityOverview} />\n        </Switch>\n    );\n};\n\nexport default Security;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\n\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport PropTypes from 'prop-types';\n\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Divider from '@material-ui/core/Divider';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport AddPolicy from './AddPolicy';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    table: {\n        '& td': {\n            fontSize: theme.typography.fontSize,\n        },\n        '& th': {\n            fontSize: theme.typography.fontSize * 1.2,\n        },\n        tableLayout: 'fixed',\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addJsonContent: {\n        whiteSpace: 'pre',\n    },\n});\n\nclass SecurityOverview extends Component {\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.state = {\n            api: {\n                name: '',\n            },\n            policies: [],\n            showAddPolicy: false,\n        };\n        this.updateData = this.updateData.bind(this);\n        this.toggleShowAddPolicy = this.toggleShowAddPolicy.bind(this);\n        this.updateData = this.updateData.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateData();\n    }\n\n    updateData() {\n        const promisedApi = this.api.get(this.props.match.params.api_uuid);\n        promisedApi.then((response) => {\n            this.setState({ api: response.obj });\n            this.updatePolicyData();\n        });\n    }\n\n    updatePolicyData() {\n        this.setState({ policies: [] });\n        const policyIds = this.state.api.threatProtectionPolicies.list;\n        for (let i = 0; i < policyIds.length; i++) {\n            const id = policyIds[i].policyId;\n            const promisedPolicies = this.api.getThreatProtectionPolicy(id);\n            promisedPolicies.then((response) => {\n                const updatedPolicies = this.state.policies;\n                updatedPolicies.push(response.obj);\n                this.setState({ policies: updatedPolicies });\n            });\n        }\n    }\n\n    deletePolicy(id) {\n        const { intl } = this.props;\n        const associatedApi = this.state.api;\n        const promisedPolicyDelete = this.api.deleteThreatProtectionPolicyFromApi(associatedApi.id, id);\n        promisedPolicyDelete.then((response) => {\n            if (response.status === 200) {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Security.SecurityOverview.policy.remove.success',\n                    defaultMessage: 'Policy removed successfully.',\n                }));\n\n                //   remove policy from local api\n                const index = associatedApi.threatProtectionPolicies.list.indexOf({ policyId: id });\n                associatedApi.threatProtectionPolicies.list.splice(index, 1);\n                this.setState({ api: associatedApi });\n                this.updatePolicyData();\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Security.SecurityOverview.policy.remove.failure',\n                    defaultMessage: 'Failed to remove policy.',\n                }));\n            }\n        });\n    }\n\n    toggleShowAddPolicy = () => {\n        this.setState({ showAddPolicy: !this.state.showAddPolicy });\n    }\n\n    formatPolicy = (policy) => {\n        let formattedPolicy = policy;\n        formattedPolicy = formattedPolicy.replace(':', ' : ');\n        formattedPolicy = formattedPolicy.split(',').join(',\\n');\n        return formattedPolicy;\n    }\n\n    render() {\n        let data = [];\n        if (this.state.policies) {\n            data = this.state.policies;\n        }\n        const { classes } = this.props;\n        const { showAddPolicy } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4' align='left' className={classes.mainTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.threat.protection.policies'\n                                defaultMessage='Threat Protection Policies'\n                            />\n                        </Typography>\n                        <Button size='small' className={classes.button} onClick={this.toggleShowAddPolicy}>\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.add.threat.protection.policy'\n                                defaultMessage='Add New Threat Protection Policy'\n                            />\n                        </Button>\n                    </div>\n                </div>\n                <div className={classes.contentWrapper}>\n                    {showAddPolicy &&\n                    <AddPolicy\n                        id={this.state.api.id}\n                        toggleShowAddPolicy={this.toggleShowAddPolicy}\n                        updateData={this.updateData}\n                    />\n                    }\n                </div>\n                <br />\n                <div className={classes.contentWrapper}>\n                    <div className={classes.addNewWrapper}>\n                        <Typography className={classes.addNewHeader}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.manage.threat.protection.policies'\n                                defaultMessage='Manage Threat Protection Policies'\n                            />\n                        </Typography>\n                        <Divider className={classes.divider} />\n                        <Table className={classes.table}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy.name'\n                                            defaultMessage='Policy Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy.type'\n                                            defaultMessage='Policy Type'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy'\n                                            defaultMessage='Policy'\n                                        />\n                                    </TableCell>\n                                    <TableCell />\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((n) => {\n                                    return (\n                                        <TableRow key={n.uuid}>\n                                            <TableCell>{n.name + (n.uuid === 'GLOBAL-JSON' ? ' (GLOBAL)' : '')}</TableCell>\n                                            <TableCell>{n.type}</TableCell>\n                                            <TableCell>\n                                                <div className={classes.addJsonContent}>\n                                                    {this.formatPolicy(n.policy)}\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                <span>\n                                                    <Button color='accent' onClick={() => this.deletePolicy(n.uuid)} >\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Security.SecurityOverview.delete'\n                                                            defaultMessage='Delete'\n                                                        />\n                                                    </Button>\n                                                </span>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nSecurityOverview.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            api_uuid: PropTypes.string,\n        }),\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\n\nexport default injectIntl(withStyles(styles)(SecurityOverview));\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst styles = (theme) => ({\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addJsonContent: {\n        whiteSpace: 'pre',\n    },\n});\n\nclass AddPolicy extends Component {\n    /**\n     * AddPolicy\n     */\n    constructor() {\n        super();\n        this.state = {\n            selectedPolicy: {\n                uuid: '',\n                name: 'Select',\n                policy: '',\n                type: '',\n            },\n            policies: [],\n        };\n    }\n\n    /**\n     * AddPolicy\n     */\n    componentDidMount() {\n        const api = new API();\n        const promisedPolicies = api.getThreatProtectionPolicies();\n        promisedPolicies.then((response) => {\n            this.setState({ policies: response.obj.list });\n        });\n        const promisedApi = api.get(this.props.id);\n        promisedApi.then((response) => {\n            this.setState({ currentApi: response.obj });\n        });\n    }\n\n    /**\n     * AddPolicy\n     */\n    formatPolicy = (policy) => {\n        let formattedPolicy = policy;\n        formattedPolicy = formattedPolicy.replace(':', ' : ');\n        formattedPolicy = formattedPolicy.split(',').join(',\\n');\n        return formattedPolicy;\n    }\n\n    handleChange = () => (event) => {\n        const policyId = event.target.value;\n        const api = new API();\n        const promisedPolicy = api.getThreatProtectionPolicy(policyId);\n        promisedPolicy.then((response) => {\n            this.setState({ selectedPolicy: response.obj });\n        });\n    }\n\n\n    handlePolicyAdd() {\n        const { intl } = this.props;\n        const policy = this.state.selectedPolicy;\n        if (policy.uuid === '' || policy.name === '') {\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.Security.AddPolicy.select.policy',\n                defaultMessage: 'Please select a policy',\n            }));\n            return;\n        }\n\n        if (this.state.currentApi) {\n            const { currentApi } = this.state;\n            const api = new API();\n            const promisedPolicyAdd = api.addThreatProtectionPolicyToApi(currentApi.id, this.state.selectedPolicy.uuid);\n            promisedPolicyAdd.then((response) => {\n                if (response.status === 200) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Security.AddPolicy.threat.protection.policy.add.success',\n                        defaultMessage: 'Threat protection policy added successfully.',\n                    }));\n                    this.props.updateData();\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Security.AddPolicy.threat.protection.policy.add.failure',\n                        defaultMessage: 'Failed to add threat protection policy.',\n                    }));\n                }\n            });\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className={classes.contentWrapper}>\n                <div className={classes.addNewWrapper}>\n                    <Typography className={classes.addNewHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Security.AddPolicy.add.threat.protection.policy'\n                            defaultMessage='Add New Threat Protection Policy'\n                        />\n                    </Typography>\n                    <Divider className={classes.divider} />\n                    <div className={classes.addNewOther}>\n                        <InputLabel htmlFor='selectedPolicy'>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.policy'\n                                defaultMessage='Policy'\n                            />\n                        </InputLabel>\n                        &nbsp;&nbsp;\n                        <Select\n                            value={this.state.selectedPolicy.uuid}\n                            onChange={this.handleChange('selectedPolicy')}\n                            input={<Input name='selectedPolicy' id='selectedPolicy' />}\n                        >\n                            {this.state.policies.map((n) => {\n                                return (\n                                    <MenuItem key={n.uuid} value={n.uuid}>{n.name}</MenuItem>\n                                );\n                            })}\n                            ;\n                        </Select>\n                        <br />\n                        <br />\n                        <p>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.policy.type.label'\n                                defaultMessage='Policy Type: '\n                            />\n                            {this.state.selectedPolicy.type}\n                        </p>\n                        <div>\n                            <p>\n                                <FormattedMessage\n                                    id='Apis.Details.Security.AddPolicy.policy.label'\n                                    defaultMessage='Policy: '\n                                />\n                            </p>\n                            <div className={classes.addJsonContent}>\n                                {this.formatPolicy(this.state.selectedPolicy.policy)}\n                            </div>\n                        </div>\n                    </div>\n                    <Divider className={classes.divider} />\n                    <div className={classes.addNewOther}>\n                        <Button variant='contained' color='primary' onClick={() => this.handlePolicyAdd()}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.add.policy.to.api'\n                                defaultMessage='Add Policy to API'\n                            />\n                        </Button>\n                        <Button className={classes.button} onClick={this.props.toggleShowAddPolicy}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddPolicy.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    toggleShowAddPolicy: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    updateData: PropTypes.func.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\n\nexport default injectIntl(withStyles(styles)(AddPolicy));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport EditRounded from '@material-ui/icons/EditRounded';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport LockRounded from '@material-ui/icons/LockRounded';\nimport SwapHorizontalCircle from '@material-ui/icons/SwapHorizontalCircle';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport YAML from 'js-yaml';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api.js';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport { withRouter } from 'react-router';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ResourceNotFound from '../../../Base/Errors/ResourceNotFound';\nimport APISecurityAudit from './APISecurityAudit';\nimport ImportDefinition from './ImportDefinition';\nimport DefinitionOutdated from './DefinitionOutdated';\n\nconst EditorDialog = lazy(() => import('./SwaggerEditorDrawer' /* webpackChunkName: \"EditorDialog\" */));\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"APIDefMonacoEditor\" */));\nconst AsyncAPIEditor = lazy(() => import('./AsyncApiEditorDrawer'));\n\nconst styles = (theme) => ({\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    swaggerEditorWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    buttonWarningColor: {\n        color: theme.palette.warning.light,\n    },\n    topBar: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginBottom: theme.spacing(2),\n    },\n    converterWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        flex: '1',\n        fontSize: '0.6964285714285714rem',\n    },\n    downloadLink: {\n        color: 'black',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    progressLoader: {\n        marginLeft: theme.spacing(1),\n    },\n    updateApiWarning: {\n        marginLeft: theme.spacing(5),\n        color: theme.custom.serviceCatalog.onboarding.buttonText,\n        borderColor: theme.custom.serviceCatalog.onboarding.buttonText,\n    },\n    warningIconStyle: {\n        color: theme.custom.serviceCatalog.onboarding.buttonText,\n    },\n});\n/**\n * This component holds the functionality of viewing the api definition content of an api. The initial view is a\n * read-only representation of the api definition file.\n * Users can either edit the content by clicking the 'Edit' button or upload a new api definition file by clicking\n * 'Import API Definition'.\n * */\nclass APIDefinition extends React.Component {\n    /**\n     * @inheritDoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openEditor: false,\n            swagger: null,\n            swaggerModified: null,\n            graphQL: null,\n            format: null,\n            convertTo: null,\n            isAuditApiClicked: false,\n            securityAuditProperties: [],\n            isSwaggerValid: true,\n            isUpdating: false,\n            asyncAPI: null,\n            asyncAPIModified: null,\n            isAsyncAPIValid: true,\n            errorDetails: {},\n            noOfErrors: 0,\n            isValid: {},\n        };\n        this.handleNo = this.handleNo.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleSaveAndDeploy = this.handleSaveAndDeploy.bind(this);\n        this.openEditor = this.openEditor.bind(this);\n        this.transition = this.transition.bind(this);\n        this.closeEditor = this.closeEditor.bind(this);\n        this.hasJsonStructure = this.hasJsonStructure.bind(this);\n        this.getConvertToFormat = this.getConvertToFormat.bind(this);\n        this.onAuditApiClick = this.onAuditApiClick.bind(this);\n        this.onChangeFormatClick = this.onChangeFormatClick.bind(this);\n        this.openUpdateConfirmation = this.openUpdateConfirmation.bind(this);\n        this.updateSwaggerDefinition = this.updateSwaggerDefinition.bind(this);\n        this.updateAsyncAPIDefinitionAndDeploy = this.updateAsyncAPIDefinitionAndDeploy.bind(this);\n        this.updateSwaggerDefinitionAndDeploy = this.updateSwaggerDefinitionAndDeploy.bind(this);\n        this.onChangeSwaggerContent = this.onChangeSwaggerContent.bind(this);\n        this.updateAsyncAPIDefinition = this.updateAsyncAPIDefinition.bind(this);\n        this.onChangeAsyncAPIContent = this.onChangeAsyncAPIContent.bind(this);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        const { settings } = this.context;\n        let promisedApi;\n        if (api.type === 'GRAPHQL') {\n            promisedApi = api.getSchema(api.id);\n        } else if (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE') {\n            promisedApi = api.getAsyncAPIDefinition(api.id);\n        } else {\n            promisedApi = api.getSwagger(api.id);\n        }\n\n        this.setState({ securityAuditProperties: settings.securityAuditProperties });\n\n        promisedApi\n            .then((response) => {\n                if (api.type === 'GRAPHQL') {\n                    this.setState({\n                        graphQL: response.obj.schemaDefinition,\n                        format: 'txt',\n                    });\n                } else if (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE') {\n                    this.setState({\n                        asyncAPI: YAML.safeDump(YAML.safeLoad(response.data)),\n                        asyncAPIModified: YAML.safeDump(YAML.safeLoad(response.data)),\n                        format: 'yaml',\n                        convertTo: this.getConvertToFormat('yaml'),\n                    });\n                } else {\n                    this.setState({\n                        swagger: YAML.safeDump(YAML.safeLoad(response.data)),\n                        swaggerModified: YAML.safeDump(YAML.safeLoad(response.data)),\n                        format: 'yaml',\n                        convertTo: this.getConvertToFormat('yaml'),\n                    });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n\n    /**\n     * Method to handle asyncAPI content change\n     *\n     * @param {string} modifiedContent : The modified asyncAPI content.\n     * */\n    onChangeAsyncAPIContent(modifiedContent) {\n        const { format } = this.state;\n        /**\n         * Validate for the basic json/ yaml format.\n         * */\n        try {\n            if (format === 'json') {\n                JSON.parse(modifiedContent, null);\n            } else {\n                YAML.load(modifiedContent);\n            }\n            this.setState({ isAsyncAPIValid: true, asyncAPIModified: modifiedContent });\n        } catch (e) {\n            this.setState({ isAsyncAPIValid: false, asyncAPIModified: modifiedContent });\n        }\n    }\n\n    /**\n     * Toggle the format of the api definition.\n     * JSON -> YAML, YAML -> JSON\n     */\n    onChangeFormatClick() {\n        const {\n            format, swagger, convertTo, asyncAPI,\n        } = this.state;\n        let formattedString = '';\n        if (asyncAPI === null) {\n            if (convertTo === 'json') {\n                formattedString = JSON.stringify(YAML.load(swagger), null, 1);\n            } else {\n                formattedString = YAML.safeDump(YAML.safeLoad(swagger));\n            }\n            this.setState({\n                swagger: formattedString,\n                swaggerModified: formattedString,\n                format: convertTo,\n                convertTo: format,\n                errorDetails: {},\n                noOfErrors: 0,\n                isValid: {},\n            });\n        } else {\n            if (convertTo === 'json') {\n                formattedString = JSON.stringify(YAML.load(asyncAPI), null, 1);\n            } else {\n                formattedString = YAML.safeDump(YAML.safeLoad(asyncAPI));\n            }\n            this.setState({\n                asyncAPI: formattedString,\n                asyncAPIModified: formattedString,\n                format: convertTo,\n                convertTo: format,\n            });\n        }\n    }\n\n    /**\n      * Set isAuditApiClicked to true when Audit API is clicked\n      */\n    onAuditApiClick() {\n        this.setState({ isAuditApiClicked: true });\n    }\n\n    /**\n     * Method to handle swagger content change\n     *\n     * @param {string} modifiedContent : The modified swagger content.\n     * */\n    onChangeSwaggerContent(modifiedContent) {\n        const { format } = this.state;\n        /**\n         * Validate for the basic json/ yaml format.\n         * */\n        try {\n            if (format === 'json') {\n                JSON.parse(modifiedContent, null);\n            } else {\n                YAML.load(modifiedContent);\n            }\n            this.setState({\n                isSwaggerValid: true,\n                swaggerModified: modifiedContent,\n                errorDetails: {},\n                noOfErrors: 0,\n                isValid: {},\n            });\n        } catch (e) {\n            this.setState({\n                isSwaggerValid: false,\n                swaggerModified: modifiedContent,\n                errorDetails: {},\n                noOfErrors: 0,\n                isValid: {},\n            });\n        }\n    }\n\n    setSchemaDefinition = (schemaContent, contentType) => {\n        const { api } = this.props;\n        const isGraphql = api.isGraphql();\n        const isWebSocket = api.isWebSocket();\n        const isWebSub = api.isWebSub();\n        if (isGraphql) {\n            this.setState({ graphQL: schemaContent });\n        } else if (isWebSocket || isWebSub) {\n            this.setState({\n                asyncAPI: schemaContent,\n                asyncAPIModified: schemaContent,\n                convertTo: this.getConvertToFormat(contentType),\n                format: contentType,\n            });\n        } else {\n            this.setState({\n                swagger: schemaContent,\n                swaggerModified: schemaContent,\n                convertTo: this.getConvertToFormat(contentType),\n                format: contentType,\n            });\n        }\n    };\n\n    /**\n     * Util function to get the format which the definition can be converted to.\n     * @param {*} format : The current format of definition.\n     * @returns {string} The possible conversion format.\n     */\n    getConvertToFormat(format) {\n        return format === 'json' ? 'yaml' : 'json';\n    }\n\n    /**\n     * Handles the No button action of the save api definition confirmation dialog box.\n     */\n    handleNo() {\n        this.setState({ openDialog: false });\n    }\n\n    /**\n     * Handles the yes button action of the save api definition confirmation dialog box.\n     */\n    handleSave() {\n        const { swaggerModified, asyncAPIModified } = this.state;\n        if (asyncAPIModified !== null) {\n            this.setState({ openDialog: false }, () => this.updateAsyncAPIDefinition(asyncAPIModified, '', ''));\n        } else {\n            this.setState({ openDialog: false }, () => this.updateSwaggerDefinition(swaggerModified, '', ''));\n        }\n    }\n\n    handleSaveAndDeploy() {\n        const { swaggerModified, asyncAPIModified } = this.state;\n        const { api, history } = this.props;\n        if (asyncAPIModified !== null) {\n            this.updateAsyncAPIDefinitionAndDeploy(asyncAPIModified, '', '');\n            history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            });\n        } else {\n            this.updateSwaggerDefinitionAndDeploy(swaggerModified, '', '');\n            history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            });\n        }\n    }\n\n    /**\n     * Checks whether the swagger content is json type.\n     * @param {string} definition The swagger string.\n     * @return {boolean} Whether the content is a json or not.\n     * */\n    hasJsonStructure(definition) {\n        if (typeof definition !== 'string') return false;\n        try {\n            const result = JSON.parse(definition);\n            return result && typeof result === 'object';\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Method to set the state for opening the swagger editor drawer.\n     * Swagger editor loads the definition content from the local storage. Hence we set the swagger content to the\n     * local storage.\n     * */\n    openEditor() {\n        this.setState({ openEditor: true });\n    }\n\n    /**\n     * Sets the state to close the swagger-editor drawer.\n     * */\n    closeEditor() {\n        this.setState({ openEditor: false });\n        const { intl, api, history } = this.props;\n        const { isAuditApiClicked } = this.state;\n        if (isAuditApiClicked === true) {\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.APIDefinition.info.updating.auditapi',\n                defaultMessage: 'To reflect the changes made, you need to click Audit API',\n            }));\n            const redirectUrl = '/apis/' + api.id + '/api definition';\n            history.push(redirectUrl);\n        }\n    }\n\n    /**\n     * Handles the transition of the drawer.\n     * @param {object} props list of props\n     * @return {object} The Slide transition component\n     * */\n    transition(props) {\n        return <Slide direction='up' {...props} />;\n    }\n\n    /**\n     * Updates swagger content in the local storage.\n     * */\n    openUpdateConfirmation() {\n        this.setState({ openDialog: true });\n    }\n\n    /**\n     * Updates swagger definition of the api.\n     * @param {string} swaggerContent The swagger file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     * */\n    updateSwaggerDefinition(swaggerContent, specFormat, toFormat) {\n        const { api, intl, updateAPI } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(swaggerContent)) {\n            parsedContent = JSON.parse(swaggerContent);\n        } else {\n            try {\n                parsedContent = YAML.load(swaggerContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.parsing.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateSwagger(parsedContent);\n        promise\n            .then((response) => {\n                const { endpointImplementationType } = api;\n                if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                }\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ swagger: swaggerContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ swagger: swaggerContent });\n                    }\n                }\n                /*\n                 *updateAPI() will make a /GET call to get the latest api once the swagger definition is updated.\n                 *Otherwise, we need to refresh the page to get changes.\n                 */\n                updateAPI();\n                this.setState({ isUpdating: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message, error } } } = err;\n                const isValid = false;\n                const file = \"{ message: 'OpenAPI content validation failed!' }\";\n                const url = null;\n                const isValidFile = { file, url };\n                if (description && message) {\n                    if (error.length > 0) {\n                        const newParams = { isValid, errors: error };\n                        this.setState({\n                            errorDetails: newParams,\n                            noOfErrors: err.response.body.error.length,\n                            isValid: isValidFile,\n                        });\n                    } else {\n                        const errorMsg = {};\n                        errorMsg.description = message + ', ' + description;\n                        error.push(errorMsg);\n                        const newParams = { isValid, errors: error };\n                        this.setState({\n                            errorDetails: newParams,\n                            noOfErrors: error.length,\n                            isValid: isValidFile,\n                        });\n                    }\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n\n                this.setState({ isUpdating: false });\n            });\n    }\n\n    /**\n     * Updates swagger definition of the api.\n     * @param {string} swaggerContent The swagger file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     * */\n    updateSwaggerDefinitionAndDeploy(swaggerContent, specFormat, toFormat) {\n        const { api, intl } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(swaggerContent)) {\n            parsedContent = JSON.parse(swaggerContent);\n        } else {\n            try {\n                parsedContent = YAML.load(swaggerContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.parsing.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateSwagger(parsedContent);\n        promise\n            .then((response) => {\n                const { endpointImplementationType } = api;\n                if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                }\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ swagger: swaggerContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ swagger: swaggerContent });\n                    }\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n            });\n    }\n\n\n    /**\n     * Updates asyncAPI definition of the API\n     * @param {string} asyncAPIContent The AsyncAPi file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     */\n    updateAsyncAPIDefinitionAndDeploy(asyncAPIContent, specFormat, toFormat) {\n        const { api, intl } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(asyncAPIContent)) {\n            parsedContent = JSON.parse(asyncAPIContent);\n        } else {\n            try {\n                parsedContent = YAML.load(asyncAPIContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateAsyncAPIDefinition(parsedContent);\n        promise\n            .then((response) => {\n                /* const { endpointImplementationType } = api; */\n                /* if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                } */\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.async.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ asyncAPI: asyncAPIContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ asyncAPI: asyncAPIContent });\n                    }\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n                this.setState({ isUpdating: false });\n            });\n    }\n\n    /**\n     * Updates asyncAPI definition of the API\n     * @param {string} asyncAPIContent The AsyncAPi file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     */\n    updateAsyncAPIDefinition(asyncAPIContent, specFormat, toFormat) {\n        const { api, intl, updateAPI } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(asyncAPIContent)) {\n            parsedContent = JSON.parse(asyncAPIContent);\n        } else {\n            try {\n                parsedContent = YAML.load(asyncAPIContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateAsyncAPIDefinition(parsedContent);\n        promise\n            .then((response) => {\n                /* const { endpointImplementationType } = api; */\n                /* if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                } */\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.async.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ asyncAPI: asyncAPIContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ asyncAPI: asyncAPIContent });\n                    }\n                }\n                /*\n                 * updateAPI() will make a /GET call to get the latest api once the asyncAPI definition is updated.\n                 * Otherwise, we need to refresh the page to get changes.\n                 */\n                updateAPI();\n                this.setState({ isUpdating: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n                this.setState({ isUpdating: false });\n            });\n    }\n\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            swagger, graphQL, openEditor, openDialog, format, convertTo, notFound, isAuditApiClicked,\n            securityAuditProperties, isSwaggerValid, swaggerModified, isUpdating,\n            asyncAPI, asyncAPIModified, isAsyncAPIValid, errorDetails, noOfErrors, isValid,\n        } = this.state;\n\n        const {\n            classes, resourceNotFountMessage, api,\n        } = this.props;\n\n        let downloadLink;\n        let fileName;\n        let isGraphQL = 0;\n\n        if (graphQL !== null) {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(graphQL);\n            fileName = api.provider + '-' + api.name + '-' + api.version + '.graphql';\n            isGraphQL = 1;\n        } else if (asyncAPI !== null) {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(asyncAPI);\n            fileName = 'asyncapi.' + format;\n        } else {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(swagger);\n            fileName = 'swagger.' + format;\n        }\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n        };\n\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n        if (!swagger && !graphQL && !asyncAPI && api === 'undefined') {\n            return <Progress />;\n        }\n\n        return (\n            <>\n                <div className={classes.topBar}>\n                    <div className={classes.titleWrapper}>\n                        <Typography id='itest-api-details-api-definition-head' variant='h4'>\n                            {/* eslint-disable-next-line no-nested-ternary */}\n                            {graphQL ? (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.schema.definition'\n                                    defaultMessage='Schema Definition'\n                                />\n                            ) : asyncAPI ? (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.asyncAPI.definition'\n                                    defaultMessage='AsyncAPI Definition'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.api.definition'\n                                    defaultMessage='API Definition'\n                                />\n                            )}\n                        </Typography>\n                        {asyncAPI ? (\n                            <Button\n                                size='small'\n                                className={classes.button}\n                                onClick={this.openEditor}\n                                disabled={isRestricted(['apim:api_create'], api)}\n                            >\n                                <EditRounded className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.edit'\n                                    defaultMessage='Edit'\n                                />\n                            </Button>\n                        ) : (\n                            !(graphQL || api.type === API.CONSTS.APIProduct) && (\n                                <Button\n                                    size='small'\n                                    className={classes.button}\n                                    onClick={this.openEditor}\n                                    disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                                >\n                                    <EditRounded className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.edit'\n                                        defaultMessage='Edit'\n                                    />\n                                </Button>\n                            )\n                        )}\n                        {api.type !== API.CONSTS.APIProduct && (\n                            <ImportDefinition setSchemaDefinition={this.setSchemaDefinition} />\n                        )}\n                        {api.serviceInfo && api.serviceInfo.outdated && (\n                            <DefinitionOutdated\n                                api={api}\n                                classes={classes}\n                            />\n                        )}\n\n                        <a\n                            className={classes.downloadLink}\n                            href={downloadLink}\n                            download={fileName}\n                            id='download-definition-btn'\n                        >\n                            <Button size='small' className={classes.button}>\n                                <CloudDownloadRounded className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.download.definition'\n                                    defaultMessage='Download Definition'\n                                />\n                            </Button>\n                        </a>\n\n                        {(securityAuditProperties.apiToken && securityAuditProperties.collectionId\n                        && api.type !== 'GRAPHQL' && !asyncAPI)\n                            && (\n                                <Button size='small' className={classes.button} onClick={this.onAuditApiClick}>\n                                    <LockRounded className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.audit.api'\n                                        defaultMessage='Audit API'\n                                    />\n                                </Button>\n                            )}\n\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.update.not.allowed'\n                                    defaultMessage='Unauthorized: Insufficient permissions to update API Definition'\n                                />\n                            </Typography>\n                        )}\n                    </div>\n                    {isGraphQL === 0 && (\n                        <div className={classes.titleWrapper}>\n                            <Button size='small' className={classes.button} onClick={this.onChangeFormatClick}>\n                                <SwapHorizontalCircle className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.convert.to'\n                                    defaultMessage='Convert to'\n                                />\n                                {' '}\n                                {convertTo}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n                <div>\n                    <Suspense fallback={<Progress />}>\n                        {isAuditApiClicked ? (\n                            <APISecurityAudit apiId={api.id} />\n                        ) : (\n                            <MonacoEditor\n                                language={format}\n                                width='100%'\n                                height='calc(100vh - 51px)'\n                                theme='vs-dark'\n                                /* eslint-disable-next-line no-nested-ternary */\n                                value={swagger !== null ? swagger : asyncAPI !== null ? asyncAPI : graphQL}\n                                options={editorOptions}\n                            />\n                        )}\n                    </Suspense>\n                </div>\n                <Dialog fullScreen open={openEditor} onClose={this.closeEditor} TransitionComponent={this.transition}>\n                    <Paper square className={classes.popupHeader}>\n                        <IconButton\n                            className={classes.button}\n                            color='inherit'\n                            onClick={this.closeEditor}\n                            aria-label={(\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.btn.close'\n                                    defaultMessage='Close'\n                                />\n                            )}\n                        >\n                            <Icon>close</Icon>\n                        </IconButton>\n\n                        <Button\n                            className={classes.button}\n                            variant='contained'\n                            color='primary'\n                            onClick={this.openUpdateConfirmation}\n                            disabled={(!isSwaggerValid || isUpdating) || (!isAsyncAPIValid || isUpdating)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.documents.swagger.editor.update.content'\n                                defaultMessage='Update Content'\n                            />\n                            {isUpdating && <CircularProgress className={classes.progressLoader} size={24} />}\n                        </Button>\n                    </Paper>\n                    <Suspense\n                        fallback={(\n                            <Progress />\n                        )}\n                    >\n                        {swagger ? (\n                            <EditorDialog\n                                swagger={swaggerModified}\n                                language={format}\n                                onEditContent={this.onChangeSwaggerContent}\n                                errorDetails={errorDetails}\n                                noOfErrors={noOfErrors}\n                                isValid={isValid}\n                            />\n                        ) : (\n                            <AsyncAPIEditor\n                                asyncAPI={asyncAPIModified}\n                                language={format}\n                                onEditContent={this.onChangeAsyncAPIContent}\n                            />\n                        )}\n                    </Suspense>\n                </Dialog>\n                <Dialog\n                    open={openDialog}\n                    onClose={this.handleNo}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <Typography align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.save.api.definition'\n                                defaultMessage='Save API Definition'\n                            />\n                        </Typography>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.api.definition.save.confirmation'\n                                defaultMessage={\n                                    'Are you sure you want to save the API Definition? This might affect the'\n                                    + ' existing resources.'\n                                }\n                            />\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Grid\n                            container\n                            direction='row'\n                            alignItems='flex-start'\n                            spacing={1}\n                        >\n                            <Grid item>\n                                <Button onClick={this.handleNo} color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.btn.no'\n                                        defaultMessage='CANCEL'\n                                    />\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <CustomSplitButton\n                                    handleSave={this.handleSave}\n                                    handleSaveAndDeploy={this.handleSaveAndDeploy}\n                                    isUpdating={isUpdating}\n                                />\n                            </Grid>\n                        </Grid>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nAPIDefinition.contextType = AppContext;\nAPIDefinition.propTypes = {\n    classes: PropTypes.shape({\n        button: PropTypes.shape({}),\n        popupHeader: PropTypes.shape({}),\n        buttonIcon: PropTypes.shape({}),\n        root: PropTypes.shape({}),\n        topBar: PropTypes.shape({}),\n        titleWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n        converterWrapper: PropTypes.shape({}),\n        dropzone: PropTypes.shape({}),\n        downloadLink: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({\n        updateSwagger: PropTypes.func,\n        getSwagger: PropTypes.func,\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    resourceNotFountMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\nexport default withRouter(injectIntl(withStyles(styles, { withTheme: true })(APIDefinition)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'AppData/api';\nimport PropTypes from 'prop-types';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles, createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { Line } from 'rc-progress';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { withRouter } from 'react-router';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\n\nimport MUIDataTable from 'mui-datatables';\n\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport MonacoEditor from 'react-monaco-editor';\n\nconst styles = (theme) => ({\n    rootPaper: {\n        padding: theme.spacing(3),\n        margin: theme.spacing(2),\n    },\n    inlineDecoration: {\n        background: '#FF0000',\n    },\n    contentLine: {\n        background: '#add8e6',\n    },\n    htmlToolTip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n        'margin-left': 10,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    tableRow: {\n        'background-color': '#d3d3d3',\n    },\n    referenceErrorTypography: {\n        width: '70%',\n        marginTop: '15%',\n    },\n    referenceTypography: {\n        width: '70%',\n    },\n    subheadingTypography: {\n        paddingTop: 30,\n        paddingLeft: 20,\n    },\n    paperDiv: {\n        marginTop: 30,\n    },\n    sectionHeadingTypography: {\n        marginBottom: 18,\n    },\n    auditSummaryDiv: {\n        display: 'flex',\n        marginTop: 25,\n    },\n    auditSummarySubDiv: {\n        width: 250,\n        marginLeft: 40,\n        marginRight: 40,\n        display: 'table',\n    },\n    circularProgressBarScore: {\n        fontSize: 70,\n        color: '#3d98c7',\n        marginTop: 18,\n    },\n    circularProgressBarScoreFooter: {\n        fontSize: 18,\n        marginTop: 10,\n    },\n    auditSummaryDivRight: {\n        flexGrow: 1,\n        marginLeft: 200,\n        marginTop: 10,\n    },\n    columnOne: {\n        display: 'block',\n        width: '50%',\n        float: 'left',\n    },\n    columnTwo: {\n        width: '40%',\n        float: 'right',\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    linkText: {\n        float: 'right',\n    },\n});\n\n/**\n * This Component hosts the API Security Audit Component\n * More specifically, rendering of the Security Audit\n * Report.\n */\nclass APISecurityAudit extends Component {\n    /**\n     * @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            report: null,\n            overallScore: 0,\n            numErrors: 0,\n            externalApiId: null,\n            loading: false,\n            apiDefinition: null,\n        };\n        this.criticalityObject = {\n            1: 'INFO',\n            2: 'LOW',\n            3: 'MEDIUM',\n            4: 'HIGH',\n            5: 'CRITICAL',\n        };\n        this.searchTerm = null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        this.setState({ loading: true });\n        const { apiId, history, intl } = this.props;\n        const currentApi = new API();\n        const promisedDefinition = currentApi.getSwagger(apiId);\n        promisedDefinition.then((response) => {\n            this.setState({\n                apiDefinition: JSON.stringify(response.obj, null, 1),\n            });\n        })\n            .catch((error) => {\n                console.log(error);\n            });\n\n        currentApi.getSecurityAuditReport(apiId)\n            .then((response) => {\n                this.setState({\n                    report: response.body.report,\n                    overallScore: response.body.grade,\n                    numErrors: response.body.numErrors,\n                    externalApiId: response.body.externalApiId,\n                    loading: false,\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                this.setState({ loading: false });\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.AuditApi.GetReportError',\n                    defaultMessage: 'Something went wrong while retrieving the API Security Report',\n                }));\n                const redirectUrl = '/apis/' + apiId + '/api definition';\n                history.push(redirectUrl);\n            });\n    }\n\n    getMuiTheme = () => createMuiTheme({\n        typography: {\n            useNextVariants: true,\n        },\n        overrides: {\n            MUIDataTableBodyCell: {\n                root: {\n                    width: '30%',\n                },\n            },\n            MUIDataTableSelectCell: {\n                root: {\n                    display: 'none',\n                },\n            },\n            MUIDataTableToolbarSelect: {\n                title: {\n                    display: 'none',\n                },\n            },\n        },\n    });\n\n    getErrorMuiTheme = () => createMuiTheme({\n        typography: {\n            useNextVariants: true,\n        },\n        overrides: {\n            MUIDataTableBodyCell: {\n                root: {\n                    width: '100%',\n                },\n            },\n            MUIDataTableSelectCell: {\n                root: {\n                    display: 'none',\n                },\n            },\n            MUIDataTableToolbarSelect: {\n                title: {\n                    display: 'none',\n                },\n            },\n        },\n    });\n\n    /**\n     * Get Row data for MUI Table\n     * @param {*} issues Issues array\n     * @param {String} category The category of the issue\n     * @param {*} rowType The type of row - normal or error\n     * @return {*} dataObject The dataObject array\n     */\n    getRowData(issues, category, rowType) {\n        const dataObject = [];\n        for (const item in issues) {\n            if ({}.hasOwnProperty.call(issues, item)) {\n                for (let i = 0; i < issues[item].issues.length; i++) {\n                    const rowObject = [];\n                    if (rowType === 'error') {\n                        if (issues[item].issues[i].specificDescription) {\n                            rowObject.push(\n                                issues[item].issues[i].specificDescription, issues[item].issues[i].pointer,\n                                category, rowType, item,\n                            );\n                        } else {\n                            rowObject.push(\n                                issues[item].description, issues[item].issues[i].pointer,\n                                category, rowType, item,\n                            );\n                        }\n                    } else if (rowType === 'normal') {\n                        if (issues[item].issues[i].specificDescription) {\n                            rowObject.push(\n                                this.criticalityObject[issues[item].criticality],\n                                issues[item].issues[i].specificDescription,\n                                this.roundScore(issues[item].issues[i].score), issues[item].issues[i].pointer,\n                                issues[item].issues[i].tooManyImpacted,\n                                issues[item].issues[i].pointersAffected, category, issues[item].tooManyError,\n                                rowType, item,\n                            );\n                        } else {\n                            rowObject.push(\n                                this.criticalityObject[issues[item].criticality],\n                                issues[item].description, this.roundScore(issues[item].issues[i].score),\n                                issues[item].issues[i].pointer, issues[item].issues[i].tooManyImpacted,\n                                issues[item].issues[i].pointersAffected, category, issues[item].tooManyError,\n                                rowType, item,\n                            );\n                        }\n                    }\n                    dataObject.push(rowObject);\n                }\n            }\n        }\n        return dataObject;\n    }\n\n    /**\n     * Method to get the URL to display for each issue\n     * @param {*} category Category of the issue\n     * @returns {*} String URL\n     */\n    getMoreDetailUrl(category) {\n        const baseUrl = 'https://apisecurity.io/ref/';\n        let url = '';\n\n        switch (category) {\n            case 'OpenAPI Format Requirements':\n                url = baseUrl + 'oasconformance/';\n                break;\n            case 'Security':\n                url = baseUrl + 'security/';\n                break;\n            case 'Data Validation':\n                url = baseUrl + 'datavalidation/datavalidation/';\n                break;\n            default:\n                url = baseUrl;\n        }\n        return url;\n    }\n\n    /**\n     * editorDidMount method for Monaco Editor\n     * @param {*} editor Monaco Editor editor\n     * @param {*} monaco Monaco Editor monaco\n     * @param {String} searchTerm SearchTerm for pointer\n     */\n    editorDidMount = (editor, monaco, searchTerm) => {\n        const { classes } = this.props;\n        if (searchTerm !== '') {\n            const lastTerms = [];\n            const termObject = searchTerm.split('/');\n            const regexPatterns = [];\n            for (let i = 0; i < termObject.length; i++) {\n                if (termObject[i] !== '' && termObject[i] !== '0') {\n                    let appendedString = '\"' + termObject[i] + '\":';\n                    if (appendedString.includes('~1')) {\n                        appendedString = appendedString.replace(/~1/i, '/');\n                    }\n                    regexPatterns.push(appendedString);\n                }\n            }\n\n            for (let j = 0; j < regexPatterns.length; j++) {\n                if (regexPatterns[j] !== '') {\n                    if (j !== 0 && lastTerms.length !== 0 && lastTerms[lastTerms.length - 1] !== null) {\n                        lastTerms.push(editor.getModel().findNextMatch(\n                            regexPatterns[j],\n                            { lineNumber: lastTerms[lastTerms.length - 1].range.endLineNumber, column: 1 },\n                            true, true, null, false,\n                        ));\n                    } else {\n                        lastTerms.push(editor.getModel().findNextMatch(regexPatterns[j], 1, true, true, null, true));\n                    }\n                }\n            }\n            const finalMatchIndex = lastTerms.length - 1;\n            if (lastTerms[finalMatchIndex] != null) {\n                editor.revealLineInCenter(lastTerms[finalMatchIndex].range.startLineNumber);\n                editor.deltaDecorations([], [\n                    {\n                        range: new monaco.Range(\n                            lastTerms[finalMatchIndex].range.startLineNumber,\n                            lastTerms[finalMatchIndex].range.startColumn,\n                            lastTerms[finalMatchIndex].range.endLineNumber,\n                            lastTerms[finalMatchIndex].range.endColumn,\n                        ),\n                        options: {\n                            isWholeLine: true,\n                            className: classes.inlineDecoration,\n                            glyphMarginClassName: classes.contentLine,\n                        },\n                    },\n                ]);\n            }\n        }\n    }\n\n    /**\n     * Method to round off the score of a section of the report\n     * @param {*} score Score of section\n     * @returns {*} roundScore Rounded off score\n     */\n    roundScore(score) {\n        if (score !== 0) {\n            return Math.round(score * 100) / 100;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            report, overallScore, numErrors, externalApiId, loading, apiDefinition,\n        } = this.state;\n\n        const reportObject = JSON.parse(report);\n        const linkToDetailedReport = 'https://platform.42crunch.com/apis/' + externalApiId + '/security-audit-report';\n        if (loading) {\n            return (\n                <div>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography\n                                variant='h5'\n                                component='h3'\n                                className={classes.head}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.AuditApi.WaitForReport'\n                                    defaultMessage='Please wait...'\n                                />\n                            </Typography>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.AuditApi.WaitForReport.Content'\n                                    defaultMessage='Auditing an API for the first time will take some time'\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>\n                    <Progress />\n                </div>\n            );\n        }\n        const columns = [\n            {\n                name: 'Severity',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Description',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Score Impact',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Pointer',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Too Many Impacted',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Pointers Affected',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Issue Category',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Too Many Errors',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'isError',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'ReferenceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n\n        const errorColumns = [\n            {\n                name: 'Description',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Pointer',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Issue Category',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'isError',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'ReferenceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n            glyphMargin: true,\n        };\n\n        const options = {\n            filterType: 'dropdown',\n            responsive: 'stacked',\n            print: false,\n            download: false,\n            selectableRows: false,\n            expandableRows: true,\n            expandableRowsOnClick: true,\n            renderExpandableRow: (rowData) => {\n                let searchTerm = null;\n                if (rowData[3] === 'error') {\n                    searchTerm = reportObject.index[rowData[1]];\n\n                    return (\n                        <TableRow className={classes.tableRow}>\n                            <TableCell className={classes.columnOne}>\n                                <MonacoEditor\n                                    height='250px'\n                                    theme='vs-dark'\n                                    value={apiDefinition}\n                                    options={editorOptions}\n                                    editorDidMount={(editor, monaco) => this.editorDidMount(editor, monaco, searchTerm)}\n                                />\n                            </TableCell>\n                            <TableCell className={classes.columnTwo}>\n                                <Typography variant='body1' className={classes.referenceErrorTypography}>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.AuditApi.ReferenceSection'\n                                        description='Link to visit for detail on how to remedy issue'\n                                        defaultMessage='Visit this {link} to view a detailed description, possible\n                                        exploits and remediation for this issue.'\n                                        values={{\n                                            link: (\n                                                <strong>\n                                                    <a\n                                                        href={this.getMoreDetailUrl(rowData[2])}\n                                                        target='_blank'\n                                                        rel='noopener noreferrer'\n                                                    >\n                                                        link\n                                                    </a>\n                                                </strong>),\n                                        }}\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    );\n                } else {\n                    searchTerm = reportObject.index[rowData[3]];\n                    return (\n                        <TableRow className={classes.tableRow}>\n                            <TableCell colSpan='2'>\n                                <MonacoEditor\n                                    width='85%'\n                                    height='250px'\n                                    theme='vs-dark'\n                                    value={apiDefinition}\n                                    options={editorOptions}\n                                    editorDidMount={(editor, monaco) => this.editorDidMount(editor, monaco, searchTerm)}\n                                />\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='body1' className={classes.referenceTypography}>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.AuditApi.ReferenceSection'\n                                        description='Link to visit for detail on how to remedy issue'\n                                        defaultMessage='Visit this {link} to view a detailed description, possible\n                                        exploits and remediation for this issue.'\n                                        values={{\n                                            link: (\n                                                <strong>\n                                                    <a\n                                                        href={this.getMoreDetailUrl(rowData[6])}\n                                                        target='_blank'\n                                                        rel='noopener noreferrer'\n                                                    >\n                                                        link\n                                                    </a>\n                                                </strong>),\n                                        }}\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    );\n                }\n            },\n        };\n        return (\n            <div>\n                {report && (\n                    <div\n                        width='100%'\n                        height='calc(100vh - 51px)'\n                    >\n                        <Typography variant='h4' className={classes.subheadingTypography}>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.AuditApi.ApiSecurityAuditReport'\n                                defaultMessage='API Security Audit Report'\n                            />\n                        </Typography>\n                        <div className={classes.paperDiv}>\n                            <Paper elevation={1} className={classes.rootPaper}>\n                                <div>\n                                    <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.AuditApi.AuditScoreSummary'\n                                            defaultMessage='Audit Score and Summary'\n                                        />\n                                    </Typography>\n                                    <Typography variant='body1' className={classes.linkText}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.AuditApi.LinkToDetailedReport'\n                                            defaultMessage='{linkToDetailedReportText} {link} {afterLinkText}'\n                                            values={{\n                                                linkToDetailedReportText: 'Check out the ',\n                                                link: (\n                                                    <b>\n                                                        <a\n                                                            href={linkToDetailedReport}\n                                                            target='_blank'\n                                                            rel='noopener noreferrer'\n                                                        >\n                                                            detailed Report\n                                                        </a>\n                                                    </b>),\n                                                afterLinkText: ' from 42Crunch',\n                                            }}\n                                        />\n                                    </Typography>\n                                    <div className={classes.auditSummaryDiv}>\n                                        <div className={classes.auditSummarySubDiv}>\n                                            <CircularProgressbarWithChildren\n                                                value={overallScore}\n                                            >\n                                                <Typography\n                                                    variant='body1'\n                                                    className={classes.circularProgressBarScore}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi\n                                                                    .OverallScoreProgress'\n                                                        defaultMessage='{overallScore}'\n                                                        values={{\n                                                            overallScore: (\n                                                                <strong>{Math.round(overallScore)}</strong>\n                                                            ),\n                                                        }}\n                                                    />\n                                                </Typography>\n                                                <Typography\n                                                    variant='body1'\n                                                    className={classes.circularProgressBarScoreFooter}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.ScoreFooter'\n                                                        defaultMessage='out of 100'\n                                                    />\n                                                </Typography>\n                                            </CircularProgressbarWithChildren>\n                                        </div>\n                                        <div className={classes.auditSummaryDivRight}>\n                                            {{}.hasOwnProperty.call(reportObject, 'score')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.overallScore'\n                                                            defaultMessage='{overallScoreText} {overallScore} / 100'\n                                                            values={{\n                                                                overallScoreText: <strong>Overall Score:</strong>,\n                                                                overallScore: this.roundScore(overallScore),\n                                                            }}\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {numErrors !== null\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.TotalNumOfErrors'\n                                                            defaultMessage='{totalNumOfErrorsText} {totalNumOfErrors}'\n                                                            values={{\n                                                                totalNumOfErrorsText: (\n                                                                    <strong>Total Number of Errors: </strong>\n                                                                ),\n                                                                totalNumOfErrors: numErrors,\n                                                            }}\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'criticality')\n                                                && (\n                                                    <>\n                                                        <Typography variant='body1'>\n                                                            <FormattedMessage\n                                                                id={'Apis.Details.APIDefinition'\n                                                                + '.AuditApi.OverallCriticality'}\n                                                                defaultMessage={'{overallCriticalityText}'\n                                                                + ' {overallCriticality}'}\n                                                                values={{\n                                                                    overallCriticalityText: (\n                                                                        <strong>Overall Severity:</strong>\n                                                                    ),\n                                                                    overallCriticality: (\n                                                                        this.criticalityObject[reportObject.criticality]\n                                                                    ),\n                                                                }}\n                                                            />\n                                                            <Tooltip\n                                                                placement='right'\n                                                                classes={{\n                                                                    tooltip: classes.htmlTooltip,\n                                                                }}\n                                                                title={(\n                                                                    <>\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                            defaultMessage='Severity ranges from: '\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                            defaultMessage='1. INFO'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                            defaultMessage='2. LOW'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                            defaultMessage='3. MEDIUM'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                            defaultMessage='4. HIGH'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                            defaultMessage='5. CRITICAL'\n                                                                        />\n                                                                        <br />\n                                                                    </>\n                                                                )}\n                                                            >\n                                                                <Button className={classes.helpButton}>\n                                                                    <HelpOutline className={classes.helpIcon} />\n                                                                </Button>\n                                                            </Tooltip>\n                                                        </Typography>\n                                                    </>\n                                                )}\n                                            <hr />\n                                            {{}.hasOwnProperty.call(reportObject, 'security')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.SecuritySummary'\n                                                            defaultMessage='{securitySummary}'\n                                                            values={{\n                                                                securitySummary: (\n                                                                    <strong>\n                                                                        Security -\n                                                                        (\n                                                                        {\n                                                                            this.roundScore(reportObject.security.score)\n                                                                        }\n                                                                        {' '}\n                                                                        / 30)\n                                                                    </strong>\n                                                                ),\n                                                            }}\n                                                        />\n                                                        <Line\n                                                            percent={((this.roundScore(reportObject.security.score)\n                                                                / 30\n                                                            ) * 100)}\n                                                            strokeColor='#3d98c7'\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'data')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.APIDefinition'\n                                                            + '.AuditApi.DataValidationSummary'}\n                                                            defaultMessage='{dataValidationSummary}'\n                                                            values={{\n                                                                dataValidationSummary: (\n                                                                    <strong>\n                                                                        Data Validation -\n                                                                        (\n                                                                        {this.roundScore(reportObject.data.score)}\n                                                                        {' '}\n                                                                        / 70)\n                                                                    </strong>\n                                                                ),\n                                                            }}\n                                                        />\n                                                        <Line\n                                                            percent={((this.roundScore(reportObject.data.score) / 70\n                                                            ) * 100)}\n                                                            strokeColor='#3d98c7'\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                                && (\n                                                    <InlineMessage type='warning' height={140}>\n                                                        <div className={classes.contentWrapper}>\n                                                            <Typography\n                                                                variant='h5'\n                                                                component='h3'\n                                                                className={classes.head}\n                                                            >\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                    + '.AuditApi.FailedToValidate.Heading'}\n                                                                    defaultMessage='Failed to Validate OpenAPI File'\n                                                                />\n                                                            </Typography>\n                                                            <Typography component='p' className={classes.content}>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                    + '.AuditApi.FailedToValidate.Content'}\n                                                                    defaultMessage={'Fix the critical errors '\n                                                                    + 'shown below and run the audit again.'}\n                                                                />\n                                                            </Typography>\n                                                        </div>\n                                                    </InlineMessage>\n                                                )}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Paper>\n                        </div>\n                        {\n                            <div className={classes.paperDiv}>\n                                <Paper elevation={1} className={classes.rootPaper}>\n                                    <div>\n                                        <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                            <FormattedMessage\n                                                id='Apis.Details.APIDefinition.AuditApi.OpenApiFormatRequirements'\n                                                defaultMessage='OpenAPI Format Requirements'\n                                            />\n                                        </Typography>\n                                        {{}.hasOwnProperty.call(reportObject, 'semanticErrors')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Semantic Errors'\n                                                                    data={this.getRowData(\n                                                                        reportObject.semanticErrors.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getErrorMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Structural Errors'\n                                                                    data={this.getRowData(\n                                                                        reportObject.validationErrors.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {{}.hasOwnProperty.call(reportObject, 'warnings')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getErrorMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Best Practices Issues'\n                                                                    data={this.getRowData(\n                                                                        reportObject.warnings.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {!{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                        && !{}.hasOwnProperty.call(reportObject, 'semanticErrors')\n                                        && !{}.hasOwnProperty.call(reportObject, 'warnings')\n                                        && (\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.OASNoIssuesFound'\n                                                    defaultMessage='No Issues Found'\n                                                />\n                                            </Typography>\n                                        )}\n                                    </div>\n                                </Paper>\n                            </div>\n                        }\n                        {{}.hasOwnProperty.call(reportObject, 'security')\n                            && (\n                                <div className={classes.paperDiv}>\n                                    <Paper elevation={1} className={classes.rootPaper}>\n                                        <div>\n                                            <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.Security'\n                                                    defaultMessage='Security'\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.SecurityNumOfIssues'\n                                                    defaultMessage='{securityNumOfIssuesText} {securityNumOfIssues}'\n                                                    values={{\n                                                        securityNumOfIssuesText: (\n                                                            <strong>Number of Issues:</strong>\n                                                        ),\n                                                        securityNumOfIssues: reportObject.security.issueCounter,\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.SecurityScore'\n                                                    defaultMessage='{securityScoreText} {securityScore}  / 30'\n                                                    values={{\n                                                        securityScoreText: (\n                                                            <strong>Score:</strong>\n                                                        ),\n                                                        securityScore: (\n                                                            (Math.round(reportObject.security.score * 100) / 100)\n                                                        ),\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <>\n                                                <Typography variant='body1'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.securityCriticality'\n                                                        defaultMessage='{securityCriticalityText} {securityCriticality}'\n                                                        values={{\n                                                            securityCriticalityText: (\n                                                                <strong>Severity:</strong>\n                                                            ),\n                                                            securityCriticality: (\n                                                                // eslint-disable-next-line max-len\n                                                                this.criticalityObject[reportObject.security.criticality]\n                                                            ),\n                                                        }}\n                                                    />\n                                                    <Tooltip\n                                                        placement='right'\n                                                        classes={{\n                                                            tooltip: classes.htmlTooltip,\n                                                        }}\n                                                        title={(\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                    defaultMessage='Severity ranges from: '\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                    defaultMessage='1. INFO'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                    defaultMessage='2. LOW'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                    defaultMessage='3. MEDIUM'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                    defaultMessage='4. HIGH'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                    defaultMessage='5. CRITICAL'\n                                                                />\n                                                                <br />\n                                                            </>\n                                                        )}\n                                                    >\n                                                        <Button className={classes.helpButton}>\n                                                            <HelpOutline className={classes.helpIcon} />\n                                                        </Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </>\n                                            {(reportObject.security.issueCounter !== 0)\n                                            && (\n                                                <div>\n                                                    <hr />\n                                                    <Typography variant='body1'>\n                                                        <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                            <MUIDataTable\n                                                                title='Issues'\n                                                                data={this.getRowData(\n                                                                    reportObject.security.issues,\n                                                                    'Security',\n                                                                    'normal',\n                                                                )}\n                                                                columns={columns}\n                                                                options={options}\n                                                            />\n                                                        </MuiThemeProvider>\n                                                    </Typography>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Paper>\n                                </div>\n                            )}\n                        {{}.hasOwnProperty.call(reportObject, 'data')\n                            && (\n                                <div className={classes.paperDiv}>\n                                    <Paper elevation={1} className={classes.rootPaper}>\n                                        <div>\n                                            <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidation'\n                                                    defaultMessage='Data Validation'\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidationNumOfIssues'\n                                                    defaultMessage='{dataNumOfIssuesText} {dataNumOfIssues}'\n                                                    values={{\n                                                        dataNumOfIssuesText: (\n                                                            <strong>Number of Issues:</strong>\n                                                        ),\n                                                        dataNumOfIssues: reportObject.data.issueCounter,\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidationScore'\n                                                    defaultMessage='{dataScoreText} {dataScore}  / 70'\n                                                    values={{\n                                                        dataScoreText: (\n                                                            <strong>Score:</strong>\n                                                        ),\n                                                        dataScore: (\n                                                            (Math.round(reportObject.data.score * 100) / 100)\n                                                        ),\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <>\n                                                <Typography variant='body1'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.dataCriticality'\n                                                        defaultMessage='{dataCriticalityText} {dataCriticality}'\n                                                        values={{\n                                                            dataCriticalityText: (\n                                                                <strong>Severity:</strong>\n                                                            ),\n                                                            dataCriticality: (\n                                                                this.criticalityObject[reportObject.data.criticality]\n                                                            ),\n                                                        }}\n                                                    />\n                                                    <Tooltip\n                                                        placement='right'\n                                                        classes={{\n                                                            tooltip: classes.htmlTooltip,\n                                                        }}\n                                                        title={(\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                    defaultMessage='Severity ranges from: '\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                    defaultMessage='1. INFO'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                    defaultMessage='2. LOW'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                    defaultMessage='3. MEDIUM'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                    defaultMessage='4. HIGH'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                    defaultMessage='5. CRITICAL'\n                                                                />\n                                                                <br />\n                                                            </>\n                                                        )}\n                                                    >\n                                                        <Button className={classes.helpButton}>\n                                                            <HelpOutline className={classes.helpIcon} />\n                                                        </Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </>\n                                            {(reportObject.data.issueCounter !== 0)\n                                            && (\n                                                <div>\n                                                    <hr />\n                                                    <Typography variant='body1'>\n                                                        <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                            <MUIDataTable\n                                                                title='Issues'\n                                                                data={this.getRowData(\n                                                                    reportObject.data.issues,\n                                                                    'Data Validation',\n                                                                    'normal',\n                                                                )}\n                                                                columns={columns}\n                                                                options={options}\n                                                            />\n                                                        </MuiThemeProvider>\n                                                    </Typography>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Paper>\n                                </div>\n                            )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nAPISecurityAudit.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default withRouter(injectIntl(withStyles(styles)(APISecurityAudit)));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport PropTypes from 'prop-types';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Dialog from '@material-ui/core/Dialog';\nimport Typography from '@material-ui/core/Typography';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ServiceCatalog from 'AppData/ServiceCatalog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport API from 'AppData/api.js';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * This component hosts the Swagger Editor component.\n * Known Issue: The cursor jumps back to the start of the first line when updating the swagger-ui based on the\n * modification done via the editor.\n * https://github.com/wso2/product-apim/issues/5071\n * */\n/**\n * Renders an Environments list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DefinitionOutdated(props) {\n    const {\n        api,\n        classes,\n    } = props;\n    const [openImport, setOpenImport] = useState(false);\n    const [showDiff, setShowDiff] = useState(false);\n    const [newDefinition, setNewDefinition] = useState('');\n    const [oldDefinition, setOldDefinition] = useState('');\n    const [isRendering, setIsRendering] = useState(false);\n    const { updateAPI } = useContext(APIContext);\n\n    /**\n     * Re import service definition\n     */\n    function reimportService() {\n        const promisedReimportService = API.reimportService(api.id);\n        promisedReimportService.then(() => {\n            Alert.info(\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.DefinitionOutdated.import.success'\n                    defaultMessage='Re-imported API definition successfully!'\n                />,\n            );\n            setOpenImport(false);\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.DefinitionOutdated.import.error'\n                        defaultMessage='Error while re-importing API definition'\n                    />,\n                );\n            }\n        }).finally(() => {\n            updateAPI();\n        });\n    }\n\n    /**\n     * Show diff between old service definition and new service definition\n     */\n    function showdiff() {\n        setIsRendering(true);\n        const promisedNewServiceDef = ServiceCatalog.searchServiceByKey(api.serviceInfo.key);\n        const promisedOldServiceDef = api.getSwagger(api.id);\n        Promise.all([promisedNewServiceDef, promisedOldServiceDef])\n            .then((response) => {\n                const newServiceDef = response[0];\n                const oldServiceDef = response[1];\n                return ServiceCatalog.getServiceDefinition(newServiceDef.body.list[0].id).then((file) => {\n                    setNewDefinition(JSON.stringify(file, null, 2));\n                    setOldDefinition(JSON.stringify(oldServiceDef.obj, null, 2));\n                }).catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.new.api.definition.error'\n                                defaultMessage='Something went wrong while retrieving new API definition.'\n                            />,\n                        );\n                    }\n                    console.error(error);\n                });\n            }).catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.DefinitionOutdated.service.retrieve.error'\n                            defaultMessage='Something went wrong while rendering diff for API Definition'\n                        />,\n                    );\n                }\n                console.error(error);\n            }).finally(() => {\n                setShowDiff(true);\n                setIsRendering(false);\n            });\n    }\n\n    const hideDiff = () => {\n        setShowDiff(false);\n    };\n\n    const handleOpen = () => {\n        setOpenImport(true);\n    };\n\n    const handleClose = () => {\n        setOpenImport(false);\n    };\n\n    return (\n        <>\n            <div>\n                <Button\n                    size='small'\n                    className={classes.button}\n                    onClick={handleOpen}\n                >\n                    <WarningIcon className={classes.buttonWarningColor} />\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.DefinitionOutdated.outdated.definition.heading'\n                        defaultMessage='Outdated Definition'\n                    />\n                </Button>\n                <Dialog\n                    open={openImport}\n                    onClose={handleClose}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                    fullWidth\n                    maxWidth='md'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <Typography align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.outdated.definition'\n                                defaultMessage='Outdated Definition'\n                            />\n                        </Typography>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.api.outdated.definition'\n                                defaultMessage='Current API definition is outdated.\n                                You can either re-import the new definition or create a new version of this API.'\n                            />\n                        </DialogContentText>\n                        {showDiff && !isRendering && (\n                            <ReactDiffViewer\n                                oldValue={oldDefinition}\n                                newValue={newDefinition}\n                                splitView\n                                disableWordDiff\n                                leftTitle='Outdated Definition from API'\n                                rightTitle='New Service Definition'\n                            />\n                        )}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.btn.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        {!showDiff ? (\n                            <Button onClick={showdiff} color='primary'>\n                                {isRendering ? (<CircularProgress size={24} />) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.DefinitionOutdated.btn.show.diff'\n                                        defaultMessage='Show Diff'\n                                    />\n                                )}\n                            </Button>\n                        ) : (\n                            <Button onClick={hideDiff} color='primary'>\n                                {isRendering ? (<CircularProgress size={24} />) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.DefinitionOutdated.btn.hide.diff'\n                                        defaultMessage='Hide Diff'\n                                    />\n                                )}\n                            </Button>\n                        )}\n                        <Button\n                            onClick={reimportService}\n                            color='primary'\n                            autoFocus\n                            variant='contained'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.btn.reimport'\n                                defaultMessage='Re-import'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        </>\n    );\n}\n\nDefinitionOutdated.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport API from 'AppData/api.js';\nimport { withRouter } from 'react-router';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Utils from 'AppData/Utils';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ResourceNotFound from '../../../Base/Errors/ResourceNotFound';\nimport ImportDefinition from './ImportDefinition';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"APIDefMonacoEditor\" */));\n\nconst styles = (theme) => ({\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    swaggerEditorWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    topBar: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginBottom: theme.spacing(2),\n    },\n    converterWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        flex: '1',\n        fontSize: '0.6964285714285714rem',\n    },\n    downloadLink: {\n        color: 'black',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n/**\n * This component holds the functionality of viewing the WSDL content of an api. The view is a\n * read-only representation of the WSDL file. If the API has a WSDL ZIP archive, the preview will not be\n * available and it will be indicated in the UI.\n * Users can upload a new api definition file by clicking 'Import WSDL'.\n *\n * @class WSDL\n * @extends {Component}\n * */\nclass WSDL extends React.Component {\n    /**\n     * @inheritDoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isArchive: false,\n            wsdl: null,\n        };\n        this.loadWSDLInEditor = this.loadWSDLInEditor.bind(this);\n        this.handleDownloadWSDLZip = this.handleDownloadWSDLZip.bind(this);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        const { api, intl } = this.props;\n        const promisedWSDLInfo = api.getWSDLInfo(api.id);\n        promisedWSDLInfo\n            .then((response) => {\n                const wsdlType = response.obj.type;\n                if (wsdlType === 'WSDL') {\n                    this.loadWSDLInEditor(api);\n                } else {\n                    this.setState({ isArchive: true, wsdl: null });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.WSDL.error.loading.wsdl.info',\n                        defaultMessage: 'Error loading WSDL',\n                    }));\n                }\n            });\n    }\n\n    /**\n     * Downloads and loads the API's WSDL in the editor. If the WSDL is ZIP, the operation is skipped\n     * and it is indicated in the UI.\n     *\n     *  @param {boolean} isArchive states whether the WSDL is a ZIP\n     */\n    setSchemaDefinition = (isArchive) => {\n        this.setState({ isArchive, wsdl: null });\n        if (!isArchive) {\n            const { api } = this.props;\n            this.loadWSDLInEditor(api);\n        }\n    }\n\n    /**\n     * Downloads WSDL ZIP file.\n     *\n     */\n    handleDownloadWSDLZip() {\n        const { api, intl } = this.props;\n        const wsdlZipContent = api.getWSDL(api.id);\n        wsdlZipContent.then((response) => {\n            Utils.forceDownload(response);\n        })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.WSDL.download.error',\n                    defaultMessage: 'Error downloading WSDL ZIP file',\n                }));\n            });\n    }\n\n    /**\n     * Downloads and loads the API's WSDL in the editor.\n     *\n     * @param {*} api API\n     */\n    loadWSDLInEditor(api) {\n        const { intl } = this.props;\n        const promisedApi = api.getWSDL(api.id);\n\n        promisedApi\n            .then((response) => {\n                response.data.text().then((text) => {\n                    this.setState({\n                        isArchive: false,\n                        wsdl: text,\n                    });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.WSDL.error.loading.wsdl',\n                        defaultMessage: 'Error loading WSDL',\n                    }));\n                }\n            });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            wsdl, notFound, isArchive,\n        } = this.state;\n        const { classes, resourceNotFountMessage, api } = this.props;\n\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n            cursorStyle: 'line-thin',\n        };\n\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n\n        if (!isArchive && !wsdl) {\n            return <Progress />;\n        }\n\n        let downloadWidget;\n        const downloadButtonContent = (\n            <>\n                <CloudDownloadRounded className={classes.buttonIcon} />\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.WSDL.download.definition'\n                    defaultMessage='Download WSDL'\n                />\n            </>\n        );\n        if (!isArchive) {\n            const downloadLink = 'data:text/xml;charset=utf-8,' + encodeURIComponent(wsdl);\n            const fileName = api.name + '-' + api.version + '.wsdl';\n            downloadWidget = (\n                <a className={classes.downloadLink} href={downloadLink} download={fileName}>\n                    <Button size='small' className={classes.button}>\n                        {downloadButtonContent}\n                    </Button>\n                </a>\n            );\n        } else {\n            downloadWidget = (\n                <Button size='small' className={classes.button} onClick={this.handleDownloadWSDLZip}>\n                    {downloadButtonContent}\n                </Button>\n            );\n        }\n\n        return (\n            <>\n                <div className={classes.topBar}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.WSDL.wsdl.definition'\n                                defaultMessage='WSDL Definition'\n                            />\n                        </Typography>\n                        <ImportDefinition setSchemaDefinition={this.setSchemaDefinition} />\n                        {downloadWidget}\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.WSDL.update.not.allowed'\n                                    defaultMessage='Unauthorized: Insufficient permissions to update WSDL Definition'\n                                />\n                            </Typography>\n                        )}\n                    </div>\n                </div>\n                <div>\n                    <Suspense fallback={<Progress />}>\n                        {isArchive ? (\n                            <InlineMessage type='info' height={80} className={classes.emptyBox}>\n                                <div className={classes.contentWrapper}>\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.WSDL.preview.not.available'\n                                            defaultMessage='The API has a WSDL ZIP hence the preview is not available.'\n                                        />\n                                    </Typography>\n                                </div>\n                            </InlineMessage>\n                        ) : (\n                            <MonacoEditor\n                                language='xml'\n                                width='100%'\n                                height='calc(100vh - 51px)'\n                                theme='vs-dark'\n                                value={wsdl}\n                                options={editorOptions}\n                            />\n                        )}\n\n                    </Suspense>\n                </div>\n            </>\n        );\n    }\n}\n\nWSDL.contextType = AppContext;\nWSDL.propTypes = {\n    classes: PropTypes.shape({\n        button: PropTypes.shape({}),\n        popupHeader: PropTypes.shape({}),\n        buttonIcon: PropTypes.shape({}),\n        root: PropTypes.shape({}),\n        topBar: PropTypes.shape({}),\n        titleWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n        converterWrapper: PropTypes.shape({}),\n        dropzone: PropTypes.shape({}),\n        downloadLink: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({\n        updateSwagger: PropTypes.func,\n        getSwagger: PropTypes.func,\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    resourceNotFountMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\nexport default withRouter(injectIntl(withStyles(styles, { withTheme: true })(WSDL)));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Utils from 'AppData/Utils';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link, useHistory } from 'react-router-dom';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport ThumbnailView from 'AppComponents/Apis/Listing/components/ImageGenerator/ThumbnailView';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport GoTo from 'AppComponents/Apis/Details/GoTo/GoTo';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport API from 'AppData/api';\nimport MUIAlert from 'AppComponents/Shared/MuiAlert';\nimport DeleteApiButton from './DeleteApiButton';\nimport CreateNewVersionButton from './CreateNewVersionButton';\n\nconst styles = (theme) => ({\n    root: {\n        height: theme.custom.apis.topMenu.height,\n        background: theme.palette.background.paper,\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    alertMessage: {\n        height: 20,\n        borderRadius: '20px',\n        alignItems: 'center',\n    },\n    backLink: {\n        alignItems: 'center',\n        textDecoration: 'none',\n        display: 'flex',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    backIcon: {\n        color: theme.palette.primary.main,\n        fontSize: 56,\n        cursor: 'pointer',\n    },\n    backText: {\n        color: theme.palette.primary.main,\n        cursor: 'pointer',\n        fontFamily: theme.typography.fontFamily,\n    },\n    viewInStoreLauncher: {\n        display: 'flex',\n        flexDirection: 'column',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        textAlign: 'center',\n        justifyContent: 'center',\n        height: 70,\n    },\n    linkText: {\n        fontSize: theme.typography.fontSize,\n    },\n    dateWrapper: {\n        flex: 1,\n        alignSelf: 'center',\n    },\n    lastUpdatedTypography: {\n        display: 'inline-block',\n        minWidth: 30,\n    },\n    apiName: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n    downloadApi: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        height: 70,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    downloadApiFlex: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    revisionWrapper: {\n        paddingRight: theme.spacing(2),\n    },\n    topRevisionStyle: {\n        marginLeft: theme.spacing(1),\n        maxWidth: 500,\n    },\n    readOnlyStyle: {\n        color: 'red',\n    },\n    active: {\n        background: theme.custom.revision.activeRevision.background,\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        alignItems: 'center',\n    },\n});\n\nconst APIDetailsTopMenu = (props) => {\n    const {\n        classes, theme, api, isAPIProduct, imageUpdate, intl,\n    } = props;\n    const history = useHistory();\n    const prevLocation = history.location.pathname;\n    const lastIndex = prevLocation.split('/')[3];\n    const [revisionId, setRevisionId] = useState(api.id);\n    const isVisibleInStore = ['PROTOTYPED', 'PUBLISHED'].includes(api.lifeCycleStatus);\n    /**\n         * The component for advanced endpoint configurations.\n         * @param {string} name The name of the\n         * @param {string} version Version of the API\n         * @param {string} provider Provider of the API\n         * @param {string} format Weather to recive files in YALM of JSON format\n         * @returns {zip} Zpi file containing the API directory.\n     */\n    function exportAPI() {\n        return api.export().then((zipFile) => {\n            return Utils.forceDownload(zipFile);\n        }).catch((error) => {\n            console.error(error);\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.components.APIDetailsTopMenu.error',\n                    defaultMessage: 'Something went wrong while downloading the API.',\n                }));\n            }\n        });\n    }\n\n    const handleChange = (event) => {\n        setRevisionId(event.target.value);\n    };\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setRevisionId(api.id);\n    }, [api.id]);\n\n    const isDownloadable = [API.CONSTS.API, API.CONSTS.APIProduct].includes(api.apiType);\n    const { settings, user } = useAppContext();\n    const { allRevisions, allEnvRevision } = useRevisionContext();\n    const { tenantList } = useContext(ApiContext);\n    const userNameSplit = user.name.split('@');\n    const tenantDomain = userNameSplit[userNameSplit.length - 1];\n    let devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview`;\n    if (tenantList && tenantList.length > 0) {\n        devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview?tenant=${tenantDomain}`;\n    }\n\n    function getDeployments(revisionKey) {\n        const array = [];\n        allEnvRevision.filter(\n            (env) => env.id === revisionKey,\n        )[0].deploymentInfo.map((environment) => array.push(environment.name));\n        return array.join(', ');\n    }\n\n    // todo: need to support rev proxy ~tmkb\n    return (\n        <div className={classes.root}>\n            <Link\n                to={isAPIProduct\n                    ? `/api-products/${api.id}/overview`\n                    : `/apis/${api.id}/overview`}\n                className={classes.backLink}\n            >\n                <Box width={70} height={50} marginLeft={1}>\n                    <ThumbnailView api={api} width={70} height={50} imageUpdate={imageUpdate} />\n                </Box>\n                <div style={{ marginLeft: theme.spacing(1), maxWidth: 500 }}>\n                    <Typography id='itest-api-name-version' variant='h4' className={classes.apiName}>\n                        {api.name}\n                        {' '}\n                        {isAPIProduct ? '' : ':' + api.version}\n                    </Typography>\n                    <Typography variant='caption' gutterBottom align='left'>\n                        <FormattedMessage\n                            id='Apis.Details.components.APIDetailsTopMenu.created.by'\n                            defaultMessage='Created by:'\n                        />\n                        {' '}\n                        {api.provider}\n                    </Typography>\n                </div>\n            </Link>\n            <VerticalDivider height={70} />\n            <div className={classes.infoItem}>\n                <Typography data-testid='itest-api-state' variant='subtitle1'>\n                    {isAPIProduct ? api.state : api.lifeCycleStatus}\n                </Typography>\n                <Typography variant='caption' align='left'>\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.state'\n                        defaultMessage='State'\n                    />\n                </Typography>\n            </div>\n\n            <div className={classes.dateWrapper} />\n            {api.isRevision && (\n                <MUIAlert\n                    variant='standard'\n                    severity='warning'\n                    icon={false}\n                    className={classes.alertMessage}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.read.only.label'\n                        defaultMessage='Read only'\n                    />\n                </MUIAlert>\n            )}\n            <div className={classes.topRevisionStyle}>\n                <TextField\n                    id='revision-selector'\n                    value={revisionId}\n                    select\n                    SelectProps={{\n                        MenuProps: {\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                        },\n                    }}\n                    name='selectRevision'\n                    onChange={handleChange}\n                    margin='dense'\n                    variant='outlined'\n                >\n                    {!isAPIProduct ? (\n                        <MenuItem\n                            value={api.isRevision ? api.revisionedApiId : api.id}\n                            component={Link}\n                            to={'/apis/' + (api.isRevision ? api.revisionedApiId : api.id) + '/' + lastIndex}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.components.APIDetailsTopMenu.current.api'\n                                defaultMessage='Current API'\n                            />\n                        </MenuItem>\n                    ) : (\n                        <MenuItem\n                            value={api.isRevision ? api.revisionedApiProductId : api.id}\n                            component={Link}\n                            to={'/api-products/' + (api.isRevision\n                                ? api.revisionedApiProductId : api.id) + '/' + lastIndex}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.components.APIDetailsTopMenu.current.api'\n                                defaultMessage='Current API'\n                            />\n                        </MenuItem>\n                    )}\n                    {allRevisions && !isAPIProduct && allRevisions.map((item) => (\n                        <MenuItem value={item.id} component={Link} to={'/apis/' + item.id + '/' + lastIndex}>\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='center'\n                            >\n                                <Grid item>\n                                    {item.displayName}\n                                </Grid>\n                                {allEnvRevision && allEnvRevision.find((env) => env.id === item.id) && (\n                                    <Grid item>\n                                        <Box ml={2}>\n                                            <Tooltip\n                                                title={getDeployments(item.id)}\n                                                placement='bottom'\n                                            >\n                                                <Grid className={classes.active} />\n                                            </Tooltip>\n                                        </Box>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </MenuItem>\n                    ))}\n                    {allRevisions && isAPIProduct && allRevisions.map((item) => (\n                        <MenuItem value={item.id} component={Link} to={'/api-products/' + item.id + '/' + lastIndex}>\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='center'\n                            >\n                                <Grid item>\n                                    {item.displayName}\n                                </Grid>\n                                {allEnvRevision && allEnvRevision.find((env) => env.id === item.id) && (\n                                    <Grid item>\n                                        <Box ml={2}>\n                                            <Tooltip\n                                                title={getDeployments(item.id)}\n                                                placement='bottom'\n                                            >\n                                                <Grid className={classes.active} />\n                                            </Tooltip>\n                                        </Box>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n\n            <VerticalDivider height={70} />\n            <GoTo api={api} isAPIProduct={isAPIProduct} />\n            {(isVisibleInStore || isAPIProduct) && <VerticalDivider height={70} />}\n            {(isVisibleInStore || isAPIProduct) && (\n                <a\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={devportalUrl}\n                    className={classes.viewInStoreLauncher}\n                    style={{ minWidth: 90 }}\n                >\n                    <div>\n                        <LaunchIcon />\n                    </div>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.components.APIDetailsTopMenu.view.in.portal'\n                            defaultMessage='View in Dev Portal'\n                        />\n                    </Typography>\n                </a>\n            )}\n            {/* Page error banner */}\n            {/* end of Page error banner */}\n            {isAPIProduct || api.isRevision\n                ? null : <CreateNewVersionButton buttonClass={classes.viewInStoreLauncher} api={api} />}\n            {(isDownloadable) && <VerticalDivider height={70} />}\n            <div className={classes.downloadApi}>\n                {(isDownloadable) && (\n                    <a\n                        onClick={exportAPI}\n                        onKeyDown={null}\n                        className={classes.downloadApiFlex}\n                        id='download-api-btn'\n                    >\n                        <div>\n                            <CloudDownloadRounded />\n                        </div>\n                        <Typography variant='caption' align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDetailsTopMenu.download.api'\n                                defaultMessage='Download API'\n                            />\n                        </Typography>\n                    </a>\n                )}\n            </div>\n            {api.isRevision || isRestricted(['apim:api_create'], api)\n                ? (<div className={classes.revisionWrapper} />)\n                : (<DeleteApiButton buttonClass={classes.viewInStoreLauncher} api={api} isAPIProduct={isAPIProduct} />)}\n        </div>\n    );\n};\n\nAPIDetailsTopMenu.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    imageUpdate: PropTypes.number.isRequired,\n};\n\n// export default withStyles(styles, { withTheme: true })(APIDetailsTopMenu);\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(APIDetailsTopMenu));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint object-shorthand: 0 */\n/* eslint jsx-a11y/click-events-have-key-events: 0 */\n\n/* eslint no-unused-expressions: 0 */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport GoToSuggestions from 'AppComponents/Apis/Details/GoTo/Components/GoToSuggestions';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: theme.zIndex.goToSearch,\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n        fontSize: '20px',\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n    linkButton: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        padding: 10,\n        cursor: 'pointer',\n        minWidth: 30,\n    },\n    goToWrapper: {\n        position: 'relative',\n    },\n    downshiftWrapper: {\n        padding: theme.spacing(1),\n        background: theme.palette.background.paper,\n        borderRadius: 10,\n        width: '70vw',\n        marginBottom: '20%',\n        boxShadow: '0px 0px 20px 3px rgb(0 0 0 / 56%)',\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        backdropFilter: 'blur(1px)',\n    },\n}));\n\n/**\n * Method to render the input of the user\n * @param {*} inputProps inputProps\n * @returns {*} TextField\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n\n    return (\n        <TextField\n            variant='outlined'\n            autoFocus\n            InputProps={{\n                inputRef: ref,\n                autoFocus: true,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                startAdornment: (\n                    <InputAdornment position='start'>\n                        <SearchIcon color='disabled' fontSize='large' />\n                    </InputAdornment>\n                ),\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes: PropTypes.shape({}).isRequired,\n    InputProps: PropTypes.shape({}).isRequired,\n};\n\n/**\n * Method to render the GoTo search feature\n * @param {*} props props param\n * @returns {*} Downshift element\n */\nfunction GoTo(props) {\n    const { isAPIProduct, api } = props;\n    const classes = useStyles();\n    const [showSearch, setShowSearch] = useState(false);\n    const intl = useIntl();\n    let isGraphQL = false;\n\n    if (api.type === 'GRAPHQL') {\n        isGraphQL = true;\n    }\n    const toggleSearch = () => {\n        setShowSearch(!showSearch);\n    };\n    const handleClickAway = () => {\n        setShowSearch(false);\n    };\n\n    return (\n        <div className={classes.goToWrapper}>\n            <a className={classes.linkButton} onClick={toggleSearch}>\n                <Icon>find_in_page</Icon>\n                <Typography variant='caption'>\n                    <FormattedMessage id='Apis.Details.GoTo.GoTo.btn' defaultMessage='Go To' />\n                </Typography>\n            </a>\n            <Backdrop className={classes.backdrop} open={showSearch} onClick={handleClickAway}>\n                <div onClick={(e) => { e.stopPropagation(); e.preventDefault(); }} className={classes.downshiftWrapper}>\n                    {showSearch && (\n                        <Downshift id='downshift-simple'>\n                            {({\n                                getInputProps,\n                                getItemProps,\n                                getLabelProps,\n                                getMenuProps,\n                                highlightedIndex,\n                                inputValue,\n                                isOpen,\n                                selectedItem,\n                            }) => {\n                                const { onBlur, onFocus, ...inputProps } = getInputProps({\n                                    placeholder: intl.formatMessage({\n                                        id: 'Apis.Details.GoTo.button.placeholder',\n                                        defaultMessage: 'Page Search',\n                                    }),\n                                });\n\n                                return (\n                                    <div className={classes.container}>\n                                        {renderInput({\n                                            fullWidth: true,\n                                            classes,\n                                            InputLabelProps: getLabelProps({ shrink: true }),\n                                            InputProps: { onBlur, onFocus },\n                                            inputProps,\n                                        })}\n\n                                        <div {...getMenuProps()}>\n                                            {isOpen ? (\n                                                <GoToSuggestions\n                                                    inputValue={inputValue}\n                                                    isAPIProduct={isAPIProduct}\n                                                    isGraphQL={isGraphQL}\n                                                    getItemProps={getItemProps}\n                                                    highlightedIndex={highlightedIndex}\n                                                    selectedItem={selectedItem}\n                                                    handleClickAway={handleClickAway}\n                                                    apiId={api.id}\n                                                />\n                                            ) : null}\n                                        </div>\n                                    </div>\n                                );\n                            }}\n                        </Downshift>\n                    )}\n                </div>\n            </Backdrop>\n        </div>\n    );\n}\n\nGoTo.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n};\n\nexport default GoTo;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport deburr from 'lodash/deburr';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\n\nimport suggestions from 'AppComponents/Apis/Details/GoTo/RouteMappings';\nimport GoToSuggestion from 'AppComponents/Apis/Details/GoTo/Components/GoToSuggestion';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        zIndex: theme.zIndex.goToSearch,\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n}));\n\n/**\n * Method to retrieve suggestions\n * @param {*} value Value of suggestion\n * @param {*} isAPIProduct Boolean to check if it is an APIProduct\n * @param {*} param2 showEmpty\n * @returns {*} filter\n */\nfunction getSuggestions(value, isAPIProduct, isGraphQL, { showEmpty = false } = {}) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n    const newSuggestions = [...suggestions.common];\n\n    if (isAPIProduct) {\n        newSuggestions.push(...suggestions.productOnly);\n    } else if (isGraphQL) {\n        newSuggestions.push(...suggestions.graphqlOnly);\n    } else {\n        newSuggestions.push(...suggestions.apiOnly);\n    }\n\n    return inputLength === 0 && !showEmpty\n        ? []\n        : newSuggestions.filter((suggestion) => {\n            const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n            if (keep) {\n                count += 1;\n            }\n\n            return keep;\n        });\n}\n\n\nconst GoToSuggestions = (props) => {\n    const {\n        inputValue, isAPIProduct, isGraphQL, getItemProps, highlightedIndex, selectedItem, handleClickAway, apiId,\n    } = props;\n    const classes = useStyles();\n    const currentSuggestions = getSuggestions(inputValue, isAPIProduct, isGraphQL);\n    return (\n        <Paper className={classes.paper} square>\n            {currentSuggestions.length > 0\n                ? currentSuggestions.map((suggestion, index) => (\n                    <GoToSuggestion\n                        suggestion={suggestion}\n                        index={index}\n                        itemProps={getItemProps({ item: suggestion.label })}\n                        highlightedIndex={highlightedIndex}\n                        selectedItem={selectedItem}\n                        handleClickAway={handleClickAway}\n                        apiId={apiId}\n                    />\n                ))\n                : (\n                    <Box\n                        m={3}\n                        color='text.secondary'\n                        fontSize='h5.fontSize'\n                        fontFamily='fontFamily'\n                        display='flex'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.GoTo.Components.GoToSuggestions.no.result'\n                            defaultMessage='There are no results for this query'\n                        />\n                    </Box>\n                )}\n        </Paper>\n    );\n};\n\n\nexport default GoToSuggestions;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nconst suggestions = {\n    common: [\n        {\n            label: 'Overview',\n            route: 'overview',\n        },\n        {\n            label: 'MetaData',\n            route: 'overview',\n        },\n        {\n            label: 'Runtime Configurations',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Transport Level Security',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Mutual SSL',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Design Configurations',\n            route: 'configuration',\n        },\n        {\n            label: 'Manage SSL Certificates',\n            route: 'configuration',\n        },\n        {\n            label: 'HTTP HTTPS enable disable',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Application Level Security',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable OAuth2',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable Basic Auth',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable Api Key',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Authorization Headers',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'CORS Configuration',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Backend Throughput',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Message Mediation',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Response',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Request',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Backend',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Access Control Allow Origins',\n            route: 'configuration',\n        },\n        {\n            label: 'Access Control Allow Headers',\n            route: 'configuration',\n        },\n        {\n            label: 'Access Control Allow Credentials',\n            route: 'configuration',\n        },\n        {\n            label: 'Response caching',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Publisher Access Control',\n            route: 'configuration',\n        },\n        {\n            label: 'Developer Portal Visibility',\n            route: 'configuration',\n        },\n        {\n            label: 'Tags',\n            route: 'configuration',\n        },\n        {\n            label: 'Default Version',\n            route: 'configuration',\n        },\n        {\n            label: 'Image',\n            route: 'configuration',\n        },\n        {\n            label: 'Thumbnail',\n            route: 'configuration',\n        },\n        {\n            label: 'Description',\n            route: 'configuration',\n        },\n        {\n            label: 'Documents',\n            route: 'documents',\n        },\n        {\n            label: 'Add New Documents',\n            route: 'documents',\n        },\n        {\n            label: 'API Help',\n            route: 'documents',\n        },\n        {\n            label: 'Markdown Documents',\n            route: 'documents',\n        },\n        {\n            label: 'Business Information',\n            route: 'business info',\n        },\n        {\n            label: 'Business Owner',\n            route: 'business info',\n        },\n        {\n            label: 'Technical Owner',\n            route: 'business info',\n        },\n        {\n            label: 'Properties',\n            route: 'business info',\n        },\n        {\n            label: 'Subscriptions',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Subscription Policies',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Subscription Availability',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Revisions',\n            route: 'deployments',\n        },\n        {\n            label: 'VHosts',\n            route: 'deployments',\n        },\n    ],\n    apiOnly: [\n        {\n            label: 'API Gateways',\n            route: 'deployments',\n        },\n        {\n            label: 'Environments',\n            route: 'deployments',\n        },\n        {\n            label: 'Deployments',\n            route: 'deployments',\n        },\n        {\n            label: 'Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Publish API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Block API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Depricate API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Change Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Deploy as a Prototype API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Requirements',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Mediation Policies',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Monetization',\n            route: 'monetization',\n        },\n        {\n            label: 'Monetization Properties',\n            route: 'monetization',\n        },\n        {\n            label: 'Commercial Policies',\n            route: 'monetization',\n        },\n        {\n            label: 'Create New Version',\n            route: 'new_version',\n        },\n        {\n            label: 'Prototyped API',\n            route: 'endpoints',\n        },\n        {\n            label: 'AWS Lambda Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/HTTPS Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/SOAP Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Dynamic Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoint Security',\n            route: 'endpoints',\n        },\n        {\n            label: 'Certificates',\n            route: 'endpoints',\n        },\n        {\n            label: 'Production Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Sandbox Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Failover Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Load Balance Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Import API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Download API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Import Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Download Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Resources',\n            route: 'resources',\n        },\n        {\n            label: 'Resources Configuration',\n            route: 'resources',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'resources',\n        },\n        {\n            label: 'Operation Governance',\n            route: 'resources',\n        },\n        {\n            label: 'Scopes',\n            route: 'scopes',\n        },\n        {\n            label: 'Add New Scope',\n            route: 'scopes',\n        },\n        {\n            label: 'Schema validation',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Properties',\n            route: 'properties',\n        },\n    ],\n    productOnly: [\n        {\n            label: 'Product only feature',\n            route: 'configuration',\n        },\n        {\n            label: 'API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Import API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Download API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Import Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Download Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Resources',\n            route: 'resources',\n        },\n        {\n            label: 'Resources Configuration',\n            route: 'resources',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'resources',\n        },\n        {\n            label: 'Operation Governance',\n            route: 'resources',\n        },\n        {\n            label: 'Schema validation',\n            route: 'runtime-configuration',\n        },\n    ],\n    graphqlOnly: [\n        {\n            label: 'Operations',\n            route: 'operations',\n        },\n        {\n            label: 'Operation Type',\n            route: 'operations',\n        },\n        {\n            label: 'Operations Configuration',\n            route: 'operations',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'operations',\n        },\n        {\n            label: 'Schema Definition',\n            route: 'schema definition',\n        },\n        {\n            label: 'Scopes',\n            route: 'scopes',\n        },\n        {\n            label: 'Add New Scope',\n            route: 'scopes',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Environments',\n            route: 'deployments',\n        },\n        {\n            label: 'Deployments',\n            route: 'deployments',\n        },\n        {\n            label: 'API Gateways',\n            route: 'deployments',\n        },\n        {\n            label: 'Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Publish API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Block API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Depricate API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Change Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Deploy as a Prototype API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Requirements',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Monetization',\n            route: 'monetization',\n        },\n        {\n            label: 'Monetization Properties',\n            route: 'monetization',\n        },\n        {\n            label: 'Commercial Policies',\n            route: 'monetization',\n        },\n        {\n            label: 'Create New Version',\n            route: 'new_version',\n        },\n        {\n            label: 'Prototyped API',\n            route: 'endpoints',\n        },\n        {\n            label: 'AWS Lambda Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/HTTPS Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/SOAP Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Dynamic Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoint Security',\n            route: 'endpoints',\n        },\n        {\n            label: 'Certificates',\n            route: 'endpoints',\n        },\n        {\n            label: 'Production Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Sandbox Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Failover Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Load Balance Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Properties',\n            route: 'properties',\n        },\n    ],\n};\nexport default suggestions;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport PropTypes from 'prop-types';\n\n/**\n * Method to render the suggestions\n * @param {*} suggestionProps suggestionProps\n * @returns {*} ListItem list of suggestions\n */\nfunction RenderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, isAPIProduct, handleClickAway, apiId,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n\n    const route = (isAPIProduct\n        ? (`/api-products/${apiId}/${suggestion.route}`)\n        : (`/apis/${apiId}/${suggestion.route}`));\n    return (\n        <Link\n            component={RouterLink}\n            to={route}\n            underline='none'\n            onClick={handleClickAway}\n        >\n            <ListItem\n                key={suggestion.label}\n                {...itemProps}\n                selected={isHighlighted}\n                button\n                aria-haspopup='true'\n                aria-controls='lock-menu'\n                aria-label='when device is locked'\n            >\n                <ListItemText primary={suggestion.label} secondary={suggestion.route} />\n            </ListItem>\n        </Link>\n    );\n}\n\nRenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    itemProps: PropTypes.shape({}).isRequired,\n    selectedItem: PropTypes.string.isRequired,\n    suggestion: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default RenderSuggestion;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\n\nimport LibraryAdd from '@material-ui/icons/LibraryAdd';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\n\nimport { resourceMethod, resourcePath, ScopeValidation } from 'AppData/ScopeValidation';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\n\nconst styles = (theme) => ({\n    root: {\n        height: 70,\n        background: theme.palette.background.paper,\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    backLink: {\n        alignItems: 'center',\n        textDecoration: 'none',\n        display: 'flex',\n    },\n    backIcon: {\n        color: theme.palette.primary.main,\n        fontSize: 56,\n        cursor: 'pointer',\n    },\n    backText: {\n        color: theme.palette.primary.main,\n        cursor: 'pointer',\n        fontFamily: theme.typography.fontFamily,\n    },\n    createNewVersionWrapper: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    createNewVersion: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        color: theme.custom.createNewVersionButtonColor || 'inherit',\n    },\n    linkText: {\n        fontSize: theme.typography.fontSize,\n    },\n});\n\n/**\n *\n * Function to create a 'CreateNewVersion' button\n *\n * @param {any} props props\n * @returns {*} React CreateNewVersion function component\n * @constructor\n */\nfunction CreateNewVersionButton(props) {\n    const { api, classes } = props;\n    return (\n        <>\n            {/* allowing create new version based on scopes */}\n            <ScopeValidation resourceMethod={resourceMethod.POST} resourcePath={resourcePath.API_COPY}>\n                <div className={classes.createNewVersionWrapper} id='create-new-version-btn'>\n                    <VerticalDivider height={70} />\n                    <Link\n                        className={classes.createNewVersion}\n                        to={'/apis/' + api.id + '/new_version'}\n                        style={{ minWidth: 95 }}\n                    >\n\n                        <div>\n                            <LibraryAdd />\n                        </div>\n                        <Typography variant='caption'>\n                            <FormattedMessage\n                                id='Apis.Details.components.CreateNewVersionButton.create.new.version'\n                                defaultMessage='Create New Version'\n                            />\n                        </Typography>\n                    </Link>\n                </div>\n            </ScopeValidation>\n        </>\n    );\n}\n\nCreateNewVersionButton.propTypes = {\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withRouter(withStyles(styles, { withTheme: true })(CreateNewVersionButton));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api.js';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIValidation from 'AppData/APIValidation';\n\nconst styles = (theme) => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    buttonWrapper: {\n        paddingTop: 20,\n    },\n    paperRoot: {\n        padding: 20,\n        marginTop: 20,\n    },\n});\n\n/**\n *\n *\n * @class BusinessInformation\n * @extends {React.Component}\n */\nclass BusinessInformation extends React.Component {\n    /**\n     *Creates an instance of BusinessInformation.\n     * @param {*} props\n     * @memberof BusinessInformation\n     */\n    constructor(props) {\n        super(props);\n        const {\n            businessOwner,\n            businessOwnerEmail,\n            technicalOwner,\n            technicalOwnerEmail,\n        } = this.props.api.businessInformation;\n        this.state = {\n            businessOwner,\n            businessOwnerEmail,\n            technicalOwner,\n            technicalOwnerEmail,\n        };\n        this.isFormUpdated = false;\n        this.isValidBusinessOwnerEmail = true;\n        this.isValidTechnicalOwnerEmail = true;\n    }\n\n    handleChange = (name) => (event) => {\n        let { value } = event.target;\n        const { checked } = event.target;\n        if (name === 'accessControlRoles' || name === 'visibleRoles') {\n            value = value.split(',');\n        } else if (name === 'isDefaultVersion') {\n            value = value === 'yes';\n        } else if (name === 'responseCaching') {\n            value = checked ? 'Enabled' : 'Disabled';\n        }\n        // Validate whether given email addresses are valid.\n        if (name === 'businessOwnerEmail') {\n            const emailStatus = APIValidation.email.validate(value).error;\n            this.isValidBusinessOwnerEmail = (emailStatus === null || value === '');\n        }\n        if (name === 'technicalOwnerEmail') {\n            const emailStatus = APIValidation.email.validate(value).error;\n            this.isValidTechnicalOwnerEmail = (emailStatus === null || value === '');\n        }\n        this.isFormUpdated = true;\n        this.setState({ [name]: value });\n    };\n\n    isValid = () => {\n        return (this.isValidBusinessOwnerEmail && this.isValidTechnicalOwnerEmail && this.isFormUpdated);\n    }\n\n    /**\n     *\n     *\n     * @param {*} oldAPI\n     * @param {*} updateAPI\n     * @memberof BusinessInformation\n     */\n    handleSubmit(updateAPI) {\n        const {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        } = this.state;\n        const businessInformation = {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        };\n        updateAPI({ businessInformation });\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @returns\n     * @memberof BusinessInformation\n     */\n    render() {\n        const { classes, api, updateAPI } = this.props;\n        const {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        } = this.state;\n\n        return (\n            <>\n                <Container maxWidth='md'>\n                    <Box mb={3}>\n                        <Typography id='itest-api-details-bushiness-info-head' variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.BusinessInformation.BusinessInformation.business.info'\n                                defaultMessage='Business Information'\n                            />\n                        </Typography>\n                        {api.apiType === API.CONSTS.APIProduct\n                            ? (\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Apis.Details.BusinessInformation.BusinessInformation.APIProduct.sub.heading'\n                                        defaultMessage='Business Information of the API Product'\n                                    />\n                                </Typography>\n                            )\n                            : (\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Apis.Details.BusinessInformation.BusinessInformation.sub.heading'\n                                        defaultMessage='Business Information of the API'\n                                    />\n                                </Typography>\n                            )}\n                    </Box>\n                    <Paper elevation={0}>\n                        <Box px={8} py={5}>\n                            <form noValidate autoComplete='off'>\n                                <TextField\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='name'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                    + '.business.owner.name'\n                                                }\n                                                defaultMessage='Business Owner'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.name.helper.text'\n                                            }\n                                            defaultMessage='Provide the name of the business owner'\n                                        />\n                                    )}\n                                    type='text'\n                                    name='name'\n                                    margin='normal'\n                                    variant='outlined'\n                                    value={businessOwner}\n                                    onChange={this.handleChange('businessOwner')}\n                                    autoFocus\n                                />\n                                <TextField\n                                    error={!this.isValidBusinessOwnerEmail}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='Email'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation.'\n                                                    + 'business.owner.email'\n                                                }\n                                                defaultMessage='Business Owner Email'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={this.isValidBusinessOwnerEmail\n                                        ? (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.email.helper.text'\n                                                }\n                                                defaultMessage='Provide the email of the business owner'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.email.helper.text'\n                                                + '.error'\n                                                }\n                                                defaultMessage='Please enter a valid email address'\n                                            />\n                                        )}\n                                    type='email'\n                                    name='name'\n                                    margin='normal'\n                                    value={businessOwnerEmail}\n                                    onChange={this.handleChange('businessOwnerEmail')}\n                                    variant='outlined'\n                                />\n                                <TextField\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='TOname'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                    + '.technical.owner.name'\n                                                }\n                                                defaultMessage='Technical Owner'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.name.helper.text'\n                                            }\n                                            defaultMessage='Provide the name of the technical owner'\n                                        />\n                                    )}\n                                    type='text'\n                                    name='name'\n                                    margin='normal'\n                                    value={technicalOwner}\n                                    onChange={this.handleChange('technicalOwner')}\n                                    variant='outlined'\n                                />\n                                <TextField\n                                    error={!this.isValidTechnicalOwnerEmail}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='TOemail'\n                                    label={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email'\n                                            }\n                                            defaultMessage='Technical Owner Email'\n                                        />\n                                    )}\n                                    helperText={this.isValidTechnicalOwnerEmail\n                                        ? (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email.helper.text'\n                                                }\n                                                defaultMessage='Provide the email of the technical owner'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email.helper.text'\n                                                + '.error'\n                                                }\n                                                defaultMessage='Please enter a valid email address'\n                                            />\n                                        )}\n                                    type='email'\n                                    name='name'\n                                    margin='normal'\n                                    value={technicalOwnerEmail}\n                                    onChange={this.handleChange('technicalOwnerEmail')}\n                                    variant='outlined'\n                                />\n                            </form>\n                            <div className={classes.buttonWrapper}>\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='flex-start'\n                                    spacing={1}\n                                    className={classes.buttonSection}\n                                >\n                                    <Grid item>\n                                        <div>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                onClick={() => this.handleSubmit(updateAPI)}\n                                                disabled={\n                                                    isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                                    || !this.isValid() || api.isRevision\n                                                }\n                                                id='business-info-save'\n                                            >\n                                                <FormattedMessage id='save' defaultMessage='Save' />\n                                            </Button>\n                                        </div>\n                                    </Grid>\n                                    <Grid item>\n                                        <Link\n                                            to={\n                                                (api.apiType === API.CONSTS.APIProduct ? '/api-products/' : '/apis/')\n                                                + api.id\n                                                + '/overview'\n                                            }\n                                        >\n                                            <Button>\n                                                <FormattedMessage id='cancel' defaultMessage='Cancel' />\n                                            </Button>\n                                        </Link>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Box>\n                    </Paper>\n                </Container>\n            </>\n        );\n    }\n}\n\nBusinessInformation.propTypes = {\n    state: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        businessInformation: PropTypes.shape({\n            businessOwner: PropTypes.string,\n            businessOwnerEmail: PropTypes.string,\n            technicalOwner: PropTypes.string,\n            technicalOwnerEmail: PropTypes.string,\n            apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n        }).isRequired,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default withAPI(withStyles(styles)(BusinessInformation));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n/* eslint-disable react/jsx-no-bind */\n\nimport React, { useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash.isempty';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Box from '@material-ui/core/Box';\nimport APIContext, { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api.js';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Alert from 'AppComponents/Shared/Alert';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport EditableRow from './EditableRow';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingTop: 0,\n        paddingLeft: 0,\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    buttonWrapper: {\n        paddingTop: theme.spacing(3),\n    },\n    paperRoot: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(3),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    addProperty: {\n        marginRight: theme.spacing(2),\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    link: {\n        cursor: 'pointer',\n    },\n    messageBox: {\n        marginTop: 20,\n    },\n    actions: {\n        padding: '20px 0',\n        '& button': {\n            marginLeft: 0,\n        },\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    marginRight: {\n        marginRight: theme.spacing(1),\n    },\n    helpText: {\n        paddingTop: theme.spacing(1),\n    },\n    checkBoxStyles: {\n        whiteSpace: 'nowrap',\n        marginLeft: 10,\n    },\n    tableHead: {\n        fontWeight: 600,\n    },\n    table: {\n        '& th': {\n            fontWeight: 600,\n        },\n    },\n}));\n\n/**\n *\n *\n * @class Properties\n * @extends {React.Component}\n */\nfunction Properties(props) {\n    /**\n     * @inheritdoc\n     * @param {*} props properties\n     */\n    const { intl } = props;\n    const classes = useStyles();\n    const history = useHistory();\n    const { api, updateAPI } = useContext(APIContext);\n    const additionalPropertiesTemp = cloneDeep(api.additionalProperties);\n\n    if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n        delete additionalPropertiesTemp.github_repo;\n    }\n    if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n        delete additionalPropertiesTemp.slack_url;\n    }\n\n    const [additionalProperties, setAdditionalProperties] = useState(additionalPropertiesTemp);\n    const [showAddProperty, setShowAddProperty] = useState(false);\n    const [propertyKey, setPropertyKey] = useState(null);\n    const [propertyValue, setPropertyValue] = useState(null);\n    const [isUpdating, setUpdating] = useState(false);\n    const [editing, setEditing] = useState(false);\n    const [isAdditionalPropertiesStale, setIsAdditionalPropertiesStale] = useState(false);\n    const [isVisibleInStore, setIsVisibleInStore] = useState(false);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    const keywords = ['provider', 'version', 'context', 'status', 'description',\n        'subcontext', 'doc', 'lcState', 'name', 'tags'];\n\n    const toggleAddProperty = () => {\n        setShowAddProperty(!showAddProperty);\n    };\n    const handleChange = (name) => (event) => {\n        const { value } = event.target;\n        if (name === 'propertyKey') {\n            setPropertyKey(value);\n        } else if (name === 'propertyValue') {\n            setPropertyValue(value);\n        }\n    };\n\n    /**\n     *\n     *\n     * @param {*} itemValue\n     * @returns\n     * @memberof Properties\n     */\n    const validateEmpty = function (itemValue) {\n        if (itemValue === null) {\n            return false;\n        } else if (!isVisibleInStore && itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const isKeyword = (itemValue) => {\n        return keywords.includes(itemValue);\n    };\n    /**\n     *\n     *\n     * @param {*} oldAPI\n     * @param {*} updateAPI\n     * @memberof Properties\n     */\n    const handleSave = () => {\n        setUpdating(true);\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n            additionalProperties.github_repo = api.additionalProperties.github_repo;\n        }\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n            additionalProperties.slack_url = api.additionalProperties.slack_url;\n        }\n        const updatePromise = updateAPI({ additionalProperties });\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n\n\n    const handleSaveAndDeploy = () => {\n        setUpdating(true);\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n            additionalProperties.github_repo = api.additionalProperties.github_repo;\n        }\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n            additionalProperties.slack_url = api.additionalProperties.slack_url;\n        }\n        const updatePromise = updateAPI({ additionalProperties });\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    };\n\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @param {*} oldKey\n     * @memberof Properties\n     */\n    const handleDelete = (oldKey) => {\n        let additionalPropertiesCopy = cloneDeep(additionalProperties);\n        additionalPropertiesCopy = additionalPropertiesCopy.filter((property) => property.name !== oldKey);\n        setAdditionalProperties(additionalPropertiesCopy);\n\n        if (additionalPropertiesCopy !== additionalProperties) {\n            setIsAdditionalPropertiesStale(true);\n        }\n    };\n    const validateBeforeAdd = (fieldKey, fieldValue, additionalPropertiesCopy, action = 'add', oldKey) => {\n        if (additionalPropertiesCopy != null && action === 'add') {\n            let valid = true;\n            additionalPropertiesCopy.forEach((property) => {\n                if (property.name === fieldKey) {\n                    Alert.warning(intl.formatMessage({\n                        id: `Apis.Details.Properties.Properties.\n                            property.name.exists`,\n                        defaultMessage: 'Property name already exists',\n                    }));\n                    valid = false;\n                }\n            });\n            return valid;\n        } else if (additionalPropertiesCopy != null && action === 'update' && oldKey === fieldKey) {\n            let valid = true;\n            additionalPropertiesCopy.forEach((property) => {\n                if (property.name === fieldKey) {\n                    Alert.warning(intl.formatMessage({\n                        id: `Apis.Details.Properties.Properties.\n                                property.name.exists`,\n                        defaultMessage: 'Property name already exists',\n                    }));\n                    valid = false;\n                }\n            });\n            return valid;\n        } else if (validateEmpty(fieldKey) || validateEmpty(fieldValue)) {\n            Alert.warning(intl.formatMessage({\n                id: `Apis.Details.Properties.Properties.\n                    property.name.empty.error`,\n                defaultMessage: 'Property name/value can not be empty',\n            }));\n            return false;\n        } else if (isKeyword(fieldKey)) {\n            Alert.warning(intl.formatMessage({\n                id:\n                `Apis.Details.Properties.Properties.\n                    property.name.keyword.error`,\n                defaultMessage:\n                'Property name can not be a system reserved keyword',\n            }));\n            return false;\n        } else {\n            return true;\n        }\n    };\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @param {*} oldRow\n     * @param {*} newRow\n     * @memberof Properties\n     */\n    const handleUpdateList = (oldRow, newRow) => {\n        const additionalPropertiesCopy = cloneDeep(additionalProperties);\n\n        const { oldKey, oldValue, isDisplayInStore } = oldRow;\n        const { newKey, newValue, display } = newRow;\n        if (oldKey === newKey && oldValue === newValue && isDisplayInStore === display) {\n            Alert.warning(intl.formatMessage({\n                id: `Apis.Details.Properties.Properties.\n                    no.changes.to.save`,\n                defaultMessage: 'No changes to save',\n            }));\n            return false;\n        }\n        if (!validateBeforeAdd(newKey, newValue, additionalPropertiesCopy, 'update')) {\n            return false;\n        }\n\n        const newProperty = {\n            name: newKey,\n            value: newValue,\n            display,\n        };\n        let newPropertiesList = additionalPropertiesCopy.map((property) => {\n            if (property.name === newKey) {\n                return newProperty;\n            }\n            return property;\n        });\n        if (oldKey !== newKey) {\n            newPropertiesList = newPropertiesList.filter((property) => property.name !== oldKey);\n            newPropertiesList = [...newPropertiesList, newProperty];\n        }\n        setAdditionalProperties(newPropertiesList);\n        return true;\n    };\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @memberof Properties\n     */\n    const handleAddToList = () => {\n        const additionalPropertiesCopy = cloneDeep(additionalProperties);\n        if (validateBeforeAdd(propertyKey, propertyValue, additionalPropertiesCopy, 'add')) {\n            const newProperty = {\n                name: propertyKey,\n                value: propertyValue,\n                display: isVisibleInStore,\n            };\n            setAdditionalProperties([...additionalPropertiesCopy, newProperty]);\n            setPropertyKey(null);\n            setPropertyValue(null);\n        }\n    };\n\n    /**\n     *\n     *\n     * @memberof Properties\n     */\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleAddToList();\n        }\n    };\n\n    const handleChangeVisibleInStore = (event) => {\n        setIsVisibleInStore(event.target.checked);\n    };\n    /**\n     *\n     *\n     * @param {*} additionalProperties\n     * @param {*} apiAdditionalProperties\n     * @returns\n     * @memberof Properties\n     */\n    const renderAdditionalProperties = () => {\n        const items = additionalProperties.map((property) => {\n            return (\n                <EditableRow\n                    oldKey={property.name}\n                    oldValue={property.value}\n                    isDisplayInStore={property.display}\n                    handleUpdateList={handleUpdateList}\n                    handleDelete={handleDelete}\n                    apiAdditionalProperties={additionalProperties}\n                    {...props}\n                    setEditing={setEditing}\n                    isRestricted={isRestricted}\n                    api={api}\n                    validateEmpty={validateEmpty}\n                    isKeyword={isKeyword}\n                />\n            );\n        });\n        return items;\n    };\n    const getKeyValue = () => {\n        if (propertyKey === null) {\n            return '';\n        } else {\n            return propertyKey;\n        }\n    };\n    /**\n     *\n     *\n     * @returns\n     * @memberof Properties\n     */\n    return (\n        <>\n            <div className={classes.titleWrapper}>\n                {api.apiType === API.CONSTS.APIProduct\n                    ? (\n                        <Typography\n                            id='itest-api-details-api-products-properties-head'\n                            variant='h4'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.api.product.properties'\n                                defaultMessage='API Product Properties'\n                            />\n                        </Typography>\n                    )\n                    : (\n                        <Typography\n                            id='itest-api-details-api-properties-head'\n                            variant='h4'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.api.properties'\n                                defaultMessage='API Properties'\n                            />\n                        </Typography>\n                    )}\n\n                {(!isEmpty(additionalProperties) || showAddProperty) && (\n                    <Box ml={1}>\n                        <Button\n                            id='add-new-property'\n                            variant='outlined'\n                            color='primary'\n                            size='small'\n                            onClick={toggleAddProperty}\n                            disabled={showAddProperty\n                            || isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                        >\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.add.new.property'\n                                defaultMessage='Add New Property'\n                            />\n                        </Button>\n                    </Box>\n                )}\n            </div>\n            <Typography variant='caption' component='div' className={classes.helpText}>\n                <FormattedMessage\n                    id='Apis.Details.Properties.Properties.help.main'\n                    defaultMessage={`Usually, APIs have a pre-defined set of properties such as \n                        the name, version, context, etc. API Properties allows you to \n                         add specific custom properties to the API.`}\n                />\n            </Typography>\n            {isEmpty(additionalProperties) && !isAdditionalPropertiesStale && !showAddProperty && (\n                <div className={classes.messageBox}>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography variant='h5' component='h3' className={classes.head}>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.add.new.property.message.title'\n                                    defaultMessage='Create Additional Properties'\n                                />\n                            </Typography>\n                            {api.apiType === API.CONSTS.APIProduct\n                                ? (\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Properties.Properties.APIProduct.\n                                            add.new.property.message.content'\n                                            defaultMessage={\n                                                'Add specific custom properties to your '\n                                        + 'API here.'\n                                            }\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Properties.Properties.add.new.property.message.content'\n                                            defaultMessage={\n                                                'Add specific custom properties to your '\n                                        + 'API here.'\n                                            }\n                                        />\n                                    </Typography>\n                                )}\n                            <div className={classes.actions}>\n                                <Button\n                                    id='add-new-property'\n                                    variant='outlined'\n                                    color='primary'\n                                    onClick={toggleAddProperty}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                        || api.isRevision}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Properties.Properties.add.new.property'\n                                        defaultMessage='Add New Property'\n                                    />\n                                </Button>\n                            </div>\n                        </div>\n                    </InlineMessage>\n                </div>\n            )}\n            {(!isEmpty(additionalProperties) || showAddProperty || isAdditionalPropertiesStale) && (\n                <Grid container spacing={7}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.paperRoot}>\n                            <Table className={classes.table}>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.table'\n                                                defaultMessage='Property Name'\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.value'\n                                                defaultMessage='Property Value'\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.visibility'\n                                                defaultMessage='Visibility'\n                                            />\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {showAddProperty && (\n                                        <>\n                                            <TableRow>\n                                                <TableCell>\n                                                    <TextField\n                                                        fullWidth\n                                                        required\n                                                        id='property-name'\n                                                        label={intl.formatMessage({\n                                                            id: `Apis.Details.Properties.Properties.\n                                                                show.add.property.property.name`,\n                                                            defaultMessage: 'Name',\n                                                        })}\n                                                        margin='dense'\n                                                        variant='outlined'\n                                                        className={classes.addProperty}\n                                                        value={getKeyValue()}\n                                                        onChange={handleChange('propertyKey')}\n                                                        onKeyDown={handleKeyDown('propertyKey')}\n                                                        helperText={validateEmpty(propertyKey) ? ''\n                                                            : iff(isKeyword(propertyKey), intl.formatMessage({\n                                                                id: `Apis.Details.Properties.Properties.\n                                                                    show.add.property.invalid.error`,\n                                                                defaultMessage: 'Invalid property name',\n                                                            }), '')}\n                                                        error={validateEmpty(propertyKey) || isKeyword(propertyKey)}\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create', 'apim:api_publish'],\n                                                            api,\n                                                        )}\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <TextField\n                                                        fullWidth\n                                                        required\n                                                        id='property-value'\n                                                        label={intl.formatMessage({\n                                                            id: 'Apis.Details.Properties.Properties.property.value',\n                                                            defaultMessage: 'Value',\n                                                        })}\n                                                        margin='dense'\n                                                        variant='outlined'\n                                                        className={classes.addProperty}\n                                                        value={propertyValue === null ? '' : propertyValue}\n                                                        onChange={handleChange('propertyValue')}\n                                                        onKeyDown={handleKeyDown('propertyValue')}\n                                                        error={validateEmpty(propertyValue)}\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create', 'apim:api_publish'],\n                                                            api,\n                                                        )}\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <FormControlLabel\n                                                        control={(\n                                                            <Checkbox\n                                                                checked={isVisibleInStore}\n                                                                onChange={handleChangeVisibleInStore}\n                                                                name='checkedB'\n                                                                color='primary'\n                                                            />\n                                                        )}\n                                                        label={intl.formatMessage({\n                                                            id: `Apis.Details.Properties.\n                                                            Properties.editable.show.in.devporal`,\n                                                            defaultMessage: 'Show in devportal',\n                                                        })}\n                                                        className={classes.checkBoxStyles}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align='right'>\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            id='properties-add-btn'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            disabled={\n                                                                !propertyValue\n                                                            || !propertyKey\n                                                            || isRestricted(\n                                                                ['apim:api_create', 'apim:api_publish'], api,\n                                                            )\n                                                            }\n                                                            onClick={handleAddToList}\n                                                            className={classes.marginRight}\n                                                        >\n                                                            <Typography variant='caption' component='div'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Properties.Properties.add'\n                                                                    defaultMessage='Add'\n                                                                />\n                                                            </Typography>\n                                                        </Button>\n\n                                                        <Button onClick={toggleAddProperty}>\n                                                            <Typography variant='caption' component='div'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Properties.Properties.cancel'\n                                                                    defaultMessage='Cancel'\n                                                                />\n                                                            </Typography>\n                                                        </Button>\n                                                    </Box>\n                                                </TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell colSpan={4}>\n                                                    <Typography variant='caption'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Properties.Properties.help'\n                                                            defaultMessage={\n                                                                'Property name should be unique, should not contain '\n                                                                + 'spaces, cannot be more than 80 chars '\n                                                                + 'and cannot be any of the following '\n                                                                + 'reserved keywords : '\n                                                                + 'provider, version, context, status, description, '\n                                                                + 'subcontext, doc, lcState, name, tags.'\n                                                            }\n                                                        />\n                                                    </Typography>\n                                                </TableCell>\n                                            </TableRow>\n                                        </>\n                                    )}\n                                    {renderAdditionalProperties()}\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                        <div className={classes.buttonWrapper}>\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='flex-start'\n                                spacing={1}\n                                className={classes.buttonSection}\n                            >\n                                <Grid item id='save-api-properties'>\n                                    <div>\n                                        {editing || api.isRevision || (isEmpty(additionalProperties)\n                                            && !isAdditionalPropertiesStale)\n                                            || isRestricted(['apim:api_create', 'apim:api_publish'], api) ? (\n                                                <Button\n                                                    id='save-api-properties'\n                                                    data-testid='save-api-properties-btn'\n                                                    disabled\n                                                    type='submit'\n                                                    variant='contained'\n                                                    color='primary'\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Configuration.Configuration.save'\n                                                        defaultMessage='Save'\n                                                    />\n                                                </Button>\n                                            ) : (\n                                                <CustomSplitButton\n                                                    handleSave={handleSave}\n                                                    handleSaveAndDeploy={handleSaveAndDeploy}\n                                                    isUpdating={isUpdating}\n                                                />\n                                            )}\n                                    </div>\n                                </Grid>\n                                <Grid item>\n                                    <Link to={'/apis/' + api.id + '/overview'}>\n                                        <Button>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </Grid>\n                                {isRestricted(['apim:api_create', 'apim:api_publish'], api) && (\n                                    <Grid item xs={12}>\n                                        <Typography variant='body2' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.update.not.allowed'\n                                                defaultMessage='*You are not authorized to update properties of\n                                                    the API due to insufficient permissions'\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n            )}\n        </>\n    );\n}\n\nProperties.propTypes = {\n    state: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\nexport default withAPI(injectIntl(Properties));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n/* eslint-disable react/jsx-no-bind */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst useStyles = makeStyles(() => ({\n    link: {\n        cursor: 'pointer',\n    },\n    checkBoxStyles: {\n        whiteSpace: 'nowrap',\n        marginLeft: 0,\n        paddingLeft: 0,\n    },\n    colorPrimary: {\n        marginLeft: 0,\n        paddingLeft: 0,\n    },\n    cancelButton: {\n        marginLeft: 4,\n    },\n}));\n\n/**\n *\n * @param {*} props properties\n */\nfunction EditableRow(props) {\n    const {\n        oldKey, oldValue, handleUpdateList, handleDelete, intl, setEditing, isRestricted, api,\n        isDisplayInStore, isKeyword, validateEmpty,\n    } = props;\n    const [newKey, setKey] = useState(oldKey);\n    const [newValue, setValue] = useState(oldValue);\n    const [editMode, setEditMode] = useState(false);\n    const [isVisibleInStore, setIsVisibleInStore] = useState(isDisplayInStore);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    const resetText = () => {\n        setIsVisibleInStore(isDisplayInStore);\n        setKey(oldKey);\n        setValue(oldValue);\n    };\n    useEffect(() => {\n        resetText();\n    }, [oldKey, oldValue]);\n\n    const updateEditMode = () => {\n        setEditMode(!editMode);\n        setEditing(true);\n        resetText();\n    };\n    const handleKeyChange = (event) => {\n        const { value } = event.target;\n        setKey(value);\n    };\n    const handleValueChange = (event) => {\n        const { value } = event.target;\n        setValue(value);\n    };\n    const saveRow = () => {\n        const oldRow = { oldKey, oldValue, isDisplayInStore };\n        const newRow = { newKey, newValue, display: isVisibleInStore };\n        if (handleUpdateList(oldRow, newRow)) {\n            setEditMode(false);\n            setEditing(false);\n        }\n    };\n    const deleteRow = () => {\n        handleDelete(oldKey);\n    };\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            saveRow();\n        }\n    };\n    const handleChangeVisibleInStore = (event) => {\n        setIsVisibleInStore(event.target.checked);\n    };\n    const classes = useStyles();\n\n    return (\n        <TableRow>\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='property-name-edit'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Properties.Properties.editable.row.property.name',\n                            defaultMessage: 'Property Name',\n                        })}\n                        margin='dense'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newKey}\n                        onChange={handleKeyChange}\n                        onKeyDown={handleKeyDown}\n                        helperText={validateEmpty(newKey) ? ''\n                            : iff(isKeyword(newKey), intl.formatMessage({\n                                id: `Apis.Details.Properties.Properties.\n                                show.add.property.invalid.error`,\n                                defaultMessage: 'Invalid property name',\n                            }), '')}\n                        error={validateEmpty(newKey) || isKeyword(newKey)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>\n                    {oldKey}\n                </TableCell>\n            )}\n            {editMode ? (\n                <>\n                    <TableCell>\n                        <TextField\n                            fullWidth\n                            required\n                            id='property-value-edit'\n                            label={intl.formatMessage({\n                                id: 'Apis.Details.Properties.Properties.editable.row.edit.mode.property.value',\n                                defaultMessage: 'Property Value',\n                            })}\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.addProperty}\n                            value={newValue}\n                            onChange={handleValueChange}\n                            onKeyDown={handleKeyDown}\n                            error={validateEmpty(newValue)}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    checked={isVisibleInStore}\n                                    onChange={handleChangeVisibleInStore}\n                                    name='checkedB'\n                                    color='primary'\n                                />\n                            )}\n                            label={intl.formatMessage({\n                                id: 'Apis.Details.Properties.Properties.editable.show.in.devporal',\n                                defaultMessage: 'Show in devportal',\n                            })}\n                            classes={{ root: classes.checkBoxStyles, colorPrimary: classes.colorPrimary }}\n                        />\n                    </TableCell>\n                </>\n            ) : (\n                <>\n                    <TableCell>\n                        <Box display='inline-block' minWidth={150}>\n                            {oldValue}\n                        </Box>\n                    </TableCell>\n                    <TableCell>\n                        {isVisibleInStore && (\n                            <Box display='flex' alignItems='center'>\n                                <VisibilityIcon />\n                                <Box ml={1} display='inline-block'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Properties.Properties.editable.visible.in.store'\n                                        defaultMessage='Visible in devportal'\n                                    />\n                                </Box>\n                            </Box>\n                        )}\n                    </TableCell>\n                </>\n            )}\n            <TableCell align='right'>\n                {editMode ? (\n                    <>\n                        <Button\n                            color='primary'\n                            onClick={saveRow}\n                            onKeyDown={() => { }}\n                            variant='contained'\n                            aria-label={'Update ' + oldKey}\n                        >\n                            <Typography variant='caption' component='div'>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.editable.update'\n                                    defaultMessage='Update'\n                                />\n                            </Typography>\n                        </Button>\n                        <Button onClick={updateEditMode} className={classes.cancelButton}>\n                            <Typography variant='caption' component='div'>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.editable.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Typography>\n                        </Button>\n\n                    </>\n                ) : (\n                    <IconButton\n                        className={classes.link}\n                        aria-label={'Edit ' + oldKey}\n                        onClick={updateEditMode}\n                        onKeyDown={() => { }}\n                        color='inherit'\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <EditIcon className={classes.buttonIcon} />\n                    </IconButton>\n                )}\n                <IconButton\n                    className={classes.link}\n                    aria-label={'Remove ' + oldKey}\n                    onClick={deleteRow}\n                    onKeyDown={() => { }}\n                    color='inherit'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                >\n                    <DeleteForeverIcon className={classes.buttonIcon} />\n                </IconButton>\n            </TableCell>\n        </TableRow>\n    );\n}\nEditableRow.propTypes = {\n    oldKey: PropTypes.shape({}).isRequired,\n    oldValue: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    handleUpdateList: PropTypes.shape({}).isRequired,\n    handleDelete: PropTypes.shape({}).isRequired,\n    apiAdditionalProperties: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    setEditing: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(EditableRow);\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Grid, Paper, Typography } from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router';\nimport { Progress } from 'AppComponents/Shared';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport { isRestricted } from 'AppData/AuthManager';\n\nimport BusinessPlans from './BusinessPlans';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    margin: {\n        margin: theme.spacing(),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n        paddingBottom: '10px',\n    },\n    grid: {\n        paddingLeft: '10px',\n        paddingRight: '10px',\n        paddingBottom: '10px',\n        minWidth: '50%',\n    },\n    button: {\n        margin: theme.spacing(),\n    },\n});\n\n/**\n *\n *\n * @class Monetization\n * @extends {Component}\n */\nclass Monetization extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monetizationAttributes: [],\n            monStatus: null,\n            property: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.getMonetizationData();\n    }\n\n    getMonetizationData() {\n        const { api } = this.props;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            apiProduct.getSettings().then((settings) => {\n                if (settings.monetizationAttributes != null) {\n                    this.setState({ monetizationAttributes: settings.monetizationAttributes });\n                }\n            });\n            apiProduct.getMonetization(this.props.api.id).then((status) => {\n                this.setState({ monStatus: status.enabled });\n            });\n        } else {\n            api.getSettings().then((settings) => {\n                if (settings.monetizationAttributes != null) {\n                    this.setState({ monetizationAttributes: settings.monetizationAttributes });\n                }\n            });\n            api.getMonetization(this.props.api.id).then((status) => {\n                this.setState({ monStatus: status.enabled });\n            });\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ monStatus: event.target.checked });\n    };\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState((oldState) => {\n            const { property } = oldState;\n            property[name] = value;\n            return { property };\n        });\n    };\n\n    /**\n     * Handles the submit action for configuring monetization\n     */\n    handleSubmit() {\n        const { api, intl } = this.props;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const properties = this.state.property;\n            const enabled = this.state.monStatus;\n            const body = {\n                enabled,\n                properties,\n            };\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            const promisedMonetization = apiProduct.configureMonetizationToApiProduct(api.id, body);\n            promisedMonetization.then((response) => {\n                const status = JSON.parse(response.data);\n                if (status.enabled) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.configured.successfully',\n                        defaultMessage: 'Monetization Enabled Successfully',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.disabled.successfully',\n                        defaultMessage: 'Monetization Disabled Successfully',\n                    }));\n                }\n                this.setState((cState) => ({ monStatus: !cState.monStatus }));\n            }).catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.something.went.wrong.while.configuring.monetization',\n                        defaultMessage: 'Something went wrong while configuring monetization',\n                    }));\n                }\n            });\n        } else {\n            const properties = this.state.property;\n            const enabled = this.state.monStatus;\n            const body = {\n                enabled,\n                properties,\n            };\n            const promisedMonetizationConf = api.configureMonetizationToApi(this.props.api.id, body);\n            promisedMonetizationConf.then((response) => {\n                const status = JSON.parse(response.data);\n                if (status.enabled) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.configured.successfully',\n                        defaultMessage: 'Monetization Enabled Successfully',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.disabled.successfully',\n                        defaultMessage: 'Monetization Disabled Successfully',\n                    }));\n                }\n                this.setState((cState) => ({ monStatus: !cState.monStatus }));\n            }).catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.something.went.wrong.while.configuring.monetization',\n                        defaultMessage: 'Something went wrong while configuring monetization',\n                    }));\n                }\n            });\n        }\n    }\n\n    render() {\n        const { api, classes } = this.props;\n        const { monetizationAttributes, monStatus } = this.state;\n        if (api && isRestricted(['apim:api_publish'], api)) {\n            return (\n                <Grid\n                    container\n                    direction='row'\n                    alignItems='center'\n                    spacing={4}\n                    style={{ marginTop: 20 }}\n                >\n                    <Grid item>\n                        <Typography variant='body2' color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.update.not.allowed'\n                                defaultMessage={'* You are not authorized to update API monetization'\n                                    + ' due to insufficient permissions'}\n                            />\n                        </Typography>\n                    </Grid>\n                </Grid>\n            );\n        }\n        if (!monetizationAttributes || monStatus === null) {\n            return <Progress />;\n        }\n        return (\n            <form method='post' onSubmit={this.handleSubmit}>\n                <Grid container xs={6} spacing={2}>\n                    <Grid item xs={12}>\n                        <Typography id='itest-api-details-api-monetization-head' variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.monetization'\n                                defaultMessage='Monetization'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_publish'], api)}\n                                    id='monStatus'\n                                    name='monStatus'\n                                    checked={monStatus}\n                                    onChange={this.handleChange}\n                                    value={monStatus}\n                                    color='primary'\n                                />\n                            )}\n                            label='Enable Monetization'\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper className={classes.root}>\n                            <Grid item xs={12} className={classes.grid}>\n                                <Typography className={classes.heading} variant='h6'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Monetization.Index.monetization.properties'\n                                        defaultMessage='Monetization Properties'\n                                    />\n                                </Typography>\n                                {\n                                    (monetizationAttributes.length > 0) ? (\n                                        (monetizationAttributes.map((monetizationAttribute, i) => (\n                                            <TextField\n                                                disabled={!monStatus || isRestricted(['apim:api_publish'], api)}\n                                                fullWidth\n                                                id={'attribute' + i}\n                                                label={monetizationAttribute.displayName}\n                                                placeholder={monetizationAttribute.displayName}\n                                                name={monetizationAttribute.name}\n                                                type='text'\n                                                margin='normal'\n                                                variant='outlined'\n                                                required={monetizationAttribute.required}\n                                                onChange={this.handleInputChange}\n                                                autoFocus\n                                            />\n                                        )))\n                                    ) : (\n                                        <Typography>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Monetization.Index.there.are.no'\n                                                   + ' .monetization.properties.configured'}\n                                                defaultMessage='There are no monetization properties configured'\n                                            />\n                                        </Typography>\n                                    )\n                                }\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper className={classes.root}>\n                            <Grid item xs={12} className={classes.grid}>\n                                <BusinessPlans api={api} monStatus={monStatus} />\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.handleSubmit}\n                            color='primary'\n                            variant='contained'\n                            className={classes.button}\n                            disabled={api.isRevision}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.save'\n                                defaultMessage='Save'\n                            />\n                        </Button>\n                        <Link to={'/apis/' + api.id + '/overview'}>\n                            <Button>\n                                <FormattedMessage\n                                    id='Apis.Details.Monetization.Index.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                        </Link>\n                    </Grid>\n                </Grid>\n            </form>\n        );\n    }\n}\n\nMonetization.propTypes = {\n    api: PropTypes.instanceOf(API).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(Monetization)));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Grid, Typography } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport API from 'AppData/api';\nimport Banner from 'AppComponents/Shared/Banner';\nimport { Progress } from 'AppComponents/Shared';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        paddingBottom: '10px',\n    },\n    margin: {\n        margin: theme.spacing(),\n    },\n    rightDataColumn: {\n        display: 'flex',\n        flex: 1,\n    },\n    grid: {\n        marginTop: '10px',\n        paddingRight: '10px',\n        paddingBottom: '10px',\n    },\n    box: {\n        display: 'block',\n    },\n    tableCel: {\n        width: 50,\n    },\n    table: {\n        width: '100%',\n        border: 'solid 1px #ccc',\n    },\n    tableHeadCell: {\n        color: 'black',\n        background: theme.palette.grey[200],\n    },\n    stateWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    tableHeadTitle: {\n        flex: 1,\n        fontWeight: 'bold',\n    },\n});\n\n/**\n *\n *\n * @class BusinessPlans\n * @extends {Component}\n */\nclass BusinessPlans extends Component {\n    /**\n     *Creates an instance of BusinessPlans.\n     * @param {Object} props\n     * @memberof BusinessPlans\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            policies: [],\n            monetizedPolices: null,\n        };\n        this.monetizationQuery = this.monetizationQuery.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @memberof BusinessPlans\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        api.getSubscriptionPolicies(api.id).then((policies) => {\n            const filteredPolicies = policies.filter((policy) => policy.tierPlan === 'COMMERCIAL');\n            this.setState({ policies: filteredPolicies });\n        });\n        api.getMonetization(api.id).then((status) => {\n            this.setState({ monetizedPolices: status.properties });\n        });\n    }\n\n    monetizationQuery(policyName) {\n        const { monetizedPolices } = this.state;\n        return policyName in monetizedPolices;\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @returns {React.Component} Policies / Business plans list\n     * @memberof BusinessPlans\n     */\n    render() {\n        const { policies, monetizedPolices } = this.state;\n        const { classes } = this.props;\n        if (monetizedPolices === null) {\n            return <Progress />;\n        }\n        const policiesList = policies.map((policy) => (\n            <Grid item xs={12}>\n                <Table className={classes.table}>\n                    <TableRow>\n                        <TableCell variant='head' colSpan={2} className={classes.tableHeadCell}>\n                            <Box display='flex'>\n                                <Typography component='div' className={classes.tableHeadTitle} variant='subtitle1'>\n                                    {policy.name}\n                                </Typography>\n                                {\n                                    this.monetizationQuery(policy.name) ? (\n                                        <div className={classes.stateWrapper}>\n                                            <div><CheckIcon color='primary' /></div>\n                                            <Typography component='div'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Monetization.BusinessPlans.monetized'\n                                                    defaultMessage='Monetized'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    ) : (\n                                        <div className={classes.stateWrapper}>\n                                            <div><CloseIcon color='error' /></div>\n                                            <Typography component='div'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Monetization.BusinessPlans.not.monetized'\n                                                    defaultMessage='Not Monetized'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    )\n                                }\n                            </Box>\n                        </TableCell>\n                    </TableRow>\n                    {Object.keys(policy.monetizationAttributes).map((key) => {\n                        if (policy.monetizationAttributes[key] !== null) {\n                            return (\n                                <TableRow>\n                                    <TableCell className={classes.tableCel} align='left'>\n                                        <Typography component='p' variant='subtitle2'>\n                                            {key}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        {policy.monetizationAttributes[key]}\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        } else {\n                            return false;\n                        }\n                    })}\n\n                </Table>\n            </Grid>\n        ));\n        return (\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.Monetization.BusinessPlans.commercial.policies'\n                            defaultMessage='Commercial Policies'\n                        />\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container direction='row' spacing={3}>\n                        {policiesList}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        (policies.length > 0) ? (\n                            <Banner\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='info'\n                                message='Click Save to monetize all unmonetized policies'\n                            />\n                        ) : (\n                            <Banner\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='info'\n                                message='No commercial policies to monetize'\n                            />\n                        )\n                    }\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nBusinessPlans.propTypes = {\n    api: PropTypes.instanceOf(API).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(BusinessPlans);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\n\nimport 'react-tagsinput/react-tagsinput.css';\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport API from '../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: theme.custom.contentAreaWidth,\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n    viewInExStoreLink: {\n        color: theme.palette.common.black,\n        textDecoration: 'underline',\n    },\n}));\n\n/**\n * Renders an External Store list\n * @class ExternalStores\n * @extends {React.Component}\n */\nexport default function ExternalStores() {\n    const { api } = useContext(APIContext);\n    const { settings } = useAppContext();\n    const [allExternalStores, setAllExternalStores] = useState([]);\n    const [publishedExternalStores, setPublishedExternalStores] = useState([]);\n    const [isUpdating, setUpdating] = useState(false);\n    const classes = useStyles();\n    const intl = useIntl();\n    if (!settings.externalStoresEnabled) {\n        const resourceNotFoundMessageText = defineMessages({\n            titleMessage: {\n                id: 'Apis.Details.ExternalStores.ExternalStores.external.stores.not.found.title',\n                defaultMessage: 'External Developert Portals not found for the API : {apiUUID}',\n            },\n            bodyMessage: {\n                id: 'Apis.Details.ExternalStores.ExternalStores.external.stores.not.found.body',\n                defaultMessage: 'No External Developer Portals configured for the current tenant',\n            },\n        });\n        const resourceNotFountMessage = {\n            title: intl.formatMessage(resourceNotFoundMessageText.titleMessage, {\n                apiUUID: `${api.id}`,\n            }),\n            body: intl.formatMessage(resourceNotFoundMessageText.bodyMessage),\n        };\n        return <ResourceNotFound message={resourceNotFountMessage} />;\n    }\n\n    /**\n     * Gets published external stores\n     */\n    function getPublishedExternalStores() {\n        API.getPublishedExternalStores(api.id)\n            .then((response) => {\n                const publishedStoreIds = response.body.list.map((store) => store.id);\n                setPublishedExternalStores(publishedStoreIds);\n            })\n            .catch((error) => {\n                const response = error.response && error.response.obj;\n                const reason = response && ('[' + response.message + '] ' + response.description);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.error.getting.published.external.stores',\n                    defaultMessage: 'Error while getting published external developer portals!! {reason}',\n                }, { reason }));\n            });\n    }\n\n    useEffect(() => {\n        API.getAllExternalStores().then((response) => {\n            setAllExternalStores([...response.body.list]);\n        });\n        getPublishedExternalStores();\n    }, []);\n\n    /**\n     * Handle publish to external store button action\n     */\n    function updateStores() {\n        setUpdating(true);\n        API.publishAPIToExternalStores(api.id, publishedExternalStores)\n            .then((response) => {\n                const successfulStores = response.body.list.map((store) => store.id).join(',');\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.successfully.published.to.external.stores',\n                    defaultMessage: 'Successfully Published to external developer portals: {successfulStores}',\n                }, { successfulStores }));\n            })\n            .catch((error) => {\n                const response = error.response && error.response.obj;\n                const reason = response && ('[' + response.message + '] ' + response.description);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.error.while.updating.external.stores',\n                    defaultMessage: 'Error while updating external developer portals!! {reason}',\n                }, { reason }));\n            })\n            .finally(() => {\n                setUpdating(false);\n                getPublishedExternalStores();\n            });\n    }\n\n    return (\n        <div>\n            <div>\n                <Typography variant='h4' align='left'>\n                    <FormattedMessage\n                        id='Apis.Details.ExternalStores.ExternalStores.external-stores'\n                        defaultMessage='External Developer Portals'\n                    />\n                </Typography>\n                <Paper className={classes.root}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell />\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.name'\n                                            defaultMessage='Name'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.type'\n                                            defaultMessage='Type'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.endpoint'\n                                            defaultMessage='Endpoint'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {allExternalStores.map((row) => (\n                                <TableRow key={row.id}>\n                                    <TableCell padding='checkbox'>\n                                        <Checkbox\n                                            checked={publishedExternalStores.includes(row.id)}\n                                            disabled={api.lifeCycleStatus !== 'PUBLISHED'\n                                                || isRestricted(['apim:api_publish'], api)}\n                                            onChange={\n                                                (event) => {\n                                                    const { checked, name } = event.target;\n                                                    if (checked) {\n                                                        if (!publishedExternalStores.includes(name)) {\n                                                            setPublishedExternalStores([\n                                                                ...publishedExternalStores, name]);\n                                                        }\n                                                    } else {\n                                                        setPublishedExternalStores(publishedExternalStores\n                                                            .filter((store) => store !== name));\n                                                    }\n                                                }\n                                            }\n                                            name={row.id}\n                                            color='primary'\n                                        />\n                                    </TableCell>\n                                    <TableCell component='th' scope='row'>\n                                        <Typography>\n                                            {' '}\n                                            {row.displayName}\n                                            {' '}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        {' '}\n                                        <Typography>{row.type}</Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <a\n                                            target='_blank'\n                                            rel='noopener noreferrer'\n                                            href={row.endpoint}\n                                            className={classes.viewInExStoreLink}\n                                        >\n                                            <Typography>\n                                                {row.endpoint}\n                                            </Typography>\n                                        </a>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Paper>\n                <Grid container>\n                    <Grid\n                        container\n                        direction='row'\n                        alignItems='center'\n                        spacing={4}\n                        style={{ marginTop: 20 }}\n                    >\n                        <Grid item>\n                            <Button\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                                disabled={isUpdating || api.lifeCycleStatus !== 'PUBLISHED'\n                                    || isRestricted(['apim:api_publish'], api)}\n                                onClick={updateStores}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.ExternalStores.ExternalStores.save'\n                                    defaultMessage='Save'\n                                />\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.ExternalStores.ExternalStores.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                        {(isRestricted(['apim:api_publish'], api))\n                            && (\n                                <Grid item>\n                                    <Typography variant='body2' color='primary'>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.update.not.allowed'\n                                            defaultMessage={'* You are not authorized to publish the API'\n                                                + ' to external developer portals due to insufficient permissions'}\n                                        />\n                                    </Typography>\n                                </Grid>\n                            )}\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport FormControl from '@material-ui/core/FormControl';\nimport ServiceCatalog from 'AppData/ServiceCatalog';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = (theme) => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 20,\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormLabel: {\n        transform: 'translate(0, 1.5px) scale(0.75)',\n        transformOrigin: 'top left',\n    },\n    buttonWrapper: {\n        paddingTop: 20,\n    },\n    root: {\n        padding: 20,\n        marginTop: 20,\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    htmlTooltip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n});\n\n/**\n * React component to create a new version of an API\n * @class CreateNewVersion\n * @extends {Component}\n */\nclass CreateNewVersion extends React.Component {\n    /**\n     * Creates an instance of CreateNewVersion.\n     * @param {any} props @inheritDoc\n     * @memberof CreateNewVersion\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDefaultVersion: 'no',\n            serviceVersion: null,\n            versionList: [],\n            valid: {\n                version: {\n                    empty: false,\n                    alreadyExists: false,\n                    hasSpecialChars: false,\n                    MaxLengthExceeds: false,\n                },\n            },\n        };\n    }\n\n    componentDidMount() {\n        const { api } = this.props;\n        if (api.serviceInfo !== null) {\n            const promisedServices = ServiceCatalog.getServiceByName(api.serviceInfo);\n            promisedServices.then((data) => {\n                const array = data.list.map((item) => item.version);\n                this.setState({ versionList: array });\n            }).catch((error) => {\n                console.error(error);\n                Alert.error('Error while loading services version');\n            });\n        }\n    }\n\n    handleDefaultVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            isDefaultVersion: value,\n        });\n    };\n\n    handleServiceVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            serviceVersion: value,\n        });\n    };\n\n    handleVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            newVersion: value,\n            valid: {\n                version: {\n                    empty: !value,\n                    alreadyExists: false,\n                    hasSpecialChars: this.hasSpecialChars(value),\n                    MaxLengthExceeds: this.isMaxLengthExceeds(value),\n                },\n            },\n        });\n    };\n\n    /**\n     * Handles the submit action for new version creation\n     *\n     * @param {API} api current API\n     * @param {string} newVersion new version to create\n     * @param {string} isDefaultVersion specifies whether the new API should be marked as default version ('yes' | 'no')\n     */\n    handleSubmit(api, newVersion, isDefaultVersion, serviceVersion) {\n        if (!newVersion) {\n            this.setState({ valid: { version: { empty: true } } });\n            return;\n        }\n        const isDefaultVersionBool = isDefaultVersion === 'yes';\n        const { intl } = this.props;\n        api.createNewAPIVersion(newVersion, isDefaultVersionBool, serviceVersion)\n            .then((response) => {\n                this.setState({\n                    redirectToReferrer: true,\n                    apiId: response.obj.id,\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.NewVersion.NewVersion.success',\n                    defaultMessage: 'Successfully created new version ',\n                }) + newVersion);\n            })\n            .catch((error) => {\n                if (error.status === 409) {\n                    this.setState({ valid: { version: { alreadyExists: true } } });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.NewVersion.NewVersion.error',\n                        defaultMessage: 'Something went wrong while creating a new version!. Error: ',\n                    }) + error.status);\n                }\n            });\n    }\n\n    /**\n     *\n     * @param {String} value String to be checked for special characters\n     * @returns {Boolean} Has special character or not\n     */\n    hasSpecialChars(value) {\n        if (/^[^~!@#;:%^*()+={}|\\\\<>\"',&/$]+$/.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    isMaxLengthExceeds(value) {\n        if (value.length > 30) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Renders the CreateNewVersion component.\n     * Once new version is created, redirects to the overview page of the new API.\n     * @returns {*} CreateNewVersion component\n     */\n    render() {\n        const { classes, api } = this.props;\n        const {\n            isDefaultVersion, newVersion, redirectToReferrer, apiId, valid, serviceVersion, versionList,\n        } = this.state;\n        if (redirectToReferrer) {\n            return <Redirect to={'/apis/' + apiId + '/overview'} />;\n        }\n\n        let helperText = '';\n        if (valid.version.empty) {\n            helperText = 'This field cannot be empty';\n        } else if (valid.version.alreadyExists) {\n            helperText = 'An API with version \"' + newVersion + '\" already exists.';\n        } else if (valid.version.hasSpecialChars) {\n            helperText = 'API Version should not contain special characters';\n        } else if (valid.version.MaxLengthExceeds) {\n            helperText = 'API version exceeds maximum length of 30 characters';\n        }\n\n        return (\n            <>\n                <Container maxWidth='md'>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4' align='left' className={classes.mainTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewVersion.NewVersion.create.new.version'\n                                defaultMessage='Create New Version'\n                            />\n                        </Typography>\n                    </div>\n                    <Grid container spacing={7}>\n                        <Grid item xs={12}>\n                            <Paper className={classes.root} elevation={0}>\n                                <FormControl margin='normal' className={classes.FormControlOdd}>\n                                    <TextField\n                                        fullWidth\n                                        id='newVersion'\n                                        error={\n                                            valid.version.empty\n                                            || valid.version.alreadyExists\n                                            || valid.version.hasSpecialChars\n                                            || valid.version.MaxLengthExceeds\n                                        }\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.NewVersion.NewVersion.new.version'\n                                                defaultMessage='New Version'\n                                            />\n                                        )}\n                                        helperText={\n                                            helperText\n                                        }\n                                        type='text'\n                                        name='newVersion'\n                                        placeholder='Eg: 2.0.0'\n                                        value={newVersion}\n                                        variant='outlined'\n                                        onChange={this.handleVersionChange()}\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        autoFocus\n                                    />\n                                </FormControl>\n                                {api.serviceInfo && (\n                                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                                        <TextField\n                                            id='version-selector'\n                                            select\n                                            label={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.NewVersion.NewVersion.service.version'\n                                                    defaultMessage='Service Version'\n                                                />\n                                            )}\n                                            name='selectVersion'\n                                            onChange={this.handleServiceVersionChange()}\n                                            margin='dense'\n                                            variant='outlined'\n                                        >\n                                            {versionList && versionList.map((item) => (\n                                                <MenuItem value={item}>\n                                                    {item}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </FormControl>\n                                )}\n                                <FormControl margin='normal' className={classes.FormControl}>\n                                    <FormLabel className={classes.FormLabel} component='legend'>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewVersion.NewVersion.default'\n                                            defaultMessage='Make this the default version'\n                                        />\n                                        <Tooltip\n                                            placement='top'\n                                            classes={{\n                                                tooltip: classes.htmlTooltip,\n                                            }}\n                                            title={(\n                                                <>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.tooltip'\n                                                        defaultMessage={\n                                                            'Indicates if this is the default version of the API. '\n                                                            + 'If an API is invoked without specifying a version, '\n                                                            + 'the API Gateway will route the request to the default '\n                                                            + 'version of the API.'\n                                                        }\n                                                    />\n                                                </>\n                                            )}\n                                            interactive\n                                            aria-label='Default Version Selector'\n                                            tabIndex='-1'\n                                        >\n                                            <Button className={classes.helpButton}>\n                                                <HelpOutline className={classes.helpIcon} />\n                                            </Button>\n                                        </Tooltip>\n                                    </FormLabel>\n                                    <RadioGroup\n                                        name='isDefaultVersion'\n                                        id='isDefaultVersion'\n                                        className={classes.group}\n                                        value={isDefaultVersion}\n                                        onChange={this.handleDefaultVersionChange()}\n                                    >\n                                        <FormControlLabel value='yes' control={<Radio color='primary' />} label='Yes' />\n                                        <FormControlLabel value='no' control={<Radio color='primary' />} label='No' />\n                                    </RadioGroup>\n                                </FormControl>\n                                <div className={classes.buttonWrapper}>\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='flex-start'\n                                        spacing={1}\n                                        className={classes.buttonSection}\n                                    >\n                                        <Grid item>\n                                            <div>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    id='createBtn'\n                                                    onClick={() => this.handleSubmit(api, newVersion, isDefaultVersion,\n                                                        serviceVersion)}\n                                                    disabled={\n                                                        valid.version.empty\n                                                        || valid.version.alreadyExists\n                                                        || valid.version.hasSpecialChars\n                                                        || valid.version.MaxLengthExceeds\n                                                        || api.isRevision\n                                                    }\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.create'\n                                                        defaultMessage='Create'\n                                                    />\n                                                </Button>\n                                            </div>\n                                        </Grid>\n                                        <Grid item>\n                                            <Link to={'/apis/' + api.id + '/overview'}>\n                                                <Button id='cancelBtn'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.cancel'\n                                                        defaultMessage='Cancel'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </>\n        );\n    }\n}\n\nCreateNewVersion.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(CreateNewVersion)));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport 'swagger-ui-react/swagger-ui.css';\n\nimport React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useReducer,\n    useState,\n} from 'react';\n\nimport Alert from 'AppComponents/Shared/MuiAlert';\nimport Api from 'AppData/api';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport CONSTS from 'AppData/Constants';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Utils from 'AppData/Utils';\nimport cloneDeep from 'lodash.clonedeep';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { usePublisherSettings } from 'AppComponents/Shared/AppContext';\nimport SwaggerUI from './SwaggerUI';\n\ndayjs.extend(relativeTime);\n\nconst tasksReducer = (state, action) => {\n    const { name, status } = action;\n    // In the case of a key collision, the right-most (last) object's value wins out\n    return { ...state, [name]: { ...state[name], ...status } };\n};\n\n/**\n * @class TryOutConsole\n * @extends {React.Component}\n */\nconst TryOutConsole = () => {\n    const [api] = useAPI();\n    const [apiKey, setAPIKey] = useState('');\n    const [deployments, setDeployments] = useState([]);\n    const [selectedDeployment, setSelectedDeployment] = useState();\n    const [oasDefinition, setOasDefinition] = useState();\n    const publisherSettings = usePublisherSettings();\n\n    const [tasksStatus, tasksStatusDispatcher] = useReducer(tasksReducer, {\n        generateKey: { inProgress: false, completed: false, error: false },\n        getOAS: { inProgress: false, completed: false, error: false },\n        getDeployments: { inProgress: false, completed: false, error: false },\n    });\n\n    const generateInternalKey = useCallback(() => {\n        tasksStatusDispatcher({ name: 'generateKey', status: { inProgress: true } });\n        Api.generateInternalKey(api.id).then((keyResponse) => {\n            const { apikey } = keyResponse.body;\n            setAPIKey(apikey);\n            tasksStatusDispatcher({ name: 'generateKey', status: { inProgress: false, completed: true } });\n        }).catch((error) => tasksStatusDispatcher({ name: 'generateKey', status: { error, inProgress: false } }));\n    }, [api.id]);\n\n    useEffect(() => {\n        tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: true } });\n        api.getDeployedRevisions().then((deploymentsResponse) => {\n            tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: false, completed: true } });\n            const currentDeployments = deploymentsResponse.body;\n            const currentDeploymentsWithDisplayName = currentDeployments.map((deploy) => {\n                const gwEnvironment = publisherSettings.environment.find((e) => e.name === deploy.name);\n                const displayName = (gwEnvironment ? gwEnvironment.displayName : deploy.name);\n                return { ...deploy, displayName };\n            });\n            setDeployments(currentDeploymentsWithDisplayName);\n            if (currentDeploymentsWithDisplayName && currentDeploymentsWithDisplayName.length > 0) {\n                const [initialDeploymentSelection] = currentDeploymentsWithDisplayName;\n                setSelectedDeployment(initialDeploymentSelection);\n            }\n        }).catch((error) => tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: false, error } }));\n        api.getSwagger().then((swaggerResponse) => setOasDefinition(swaggerResponse.body));\n    }, []);\n\n    const updatedOasDefinition = useMemo(() => {\n        let oasCopy;\n        if (selectedDeployment && oasDefinition) {\n            const selectedGWEnvironment = publisherSettings.environment\n                .find((env) => env.name === selectedDeployment.name);\n            let selectedDeploymentVhost = selectedGWEnvironment.vhosts\n                .find((vhost) => vhost.host === selectedDeployment.vhost);\n            if (!selectedDeploymentVhost) {\n                selectedDeploymentVhost = { ...CONSTS.DEFAULT_VHOST, host: selectedDeployment.vhost };\n            }\n            let pathSeparator = '';\n            if (selectedDeploymentVhost.httpContext && !selectedDeploymentVhost.httpContext.startsWith('/')) {\n                pathSeparator = '/';\n            }\n            oasCopy = cloneDeep(oasDefinition); // If not we are directly mutating the state\n            if (oasDefinition.openapi) { // Assumed as OAS 3.x definition\n                const servers = api.transport.map((transport) => {\n                    const transportPort = selectedDeploymentVhost[`${transport}Port`];\n                    if (!transportPort) {\n                        console.error(`Can't find ${transport}Port `\n                            + `in selected deployment ( ${selectedDeploymentVhost.name} )`);\n                    }\n                    const baseURL = `${transport}://${selectedDeployment.vhost}:${transportPort}`;\n                    let url = `${baseURL}${pathSeparator}`\n                        + `${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`\n                            .replaceAll('{version}', `${api.version}`);\n                    if (`${api.context}`.includes('{version}')) {\n                        url = `${baseURL}${pathSeparator}`\n                            + `${selectedDeploymentVhost.httpContext}${api.context}`\n                                .replaceAll('{version}', `${api.version}`);\n                    } else {\n                        url = `${baseURL}${pathSeparator}`\n                            + `${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`;\n                    }\n                    return { url };\n                });\n                oasCopy.servers = servers.sort((a, b) => ((a.url > b.url) ? -1 : 1));\n            } else { // Assume the API definition is Swagger 2\n                let transportPort = selectedDeploymentVhost.httpsPort;\n                if (api.transport.length === 1 && !api.transport.includes('https')) {\n                    transportPort = selectedDeploymentVhost.httpPort;\n                } else if (api.transport.length > 1) {\n                    // TODO: fix When both HTTP and HTTPs transports are available can't switch the port between them\n                    // ~tmkb\n                    console.warn('HTTPS transport port will be used for all other transports');\n                }\n                const host = `${selectedDeploymentVhost.host}:${transportPort}`;\n                let basePath = `${pathSeparator}${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`\n                    .replaceAll('{version}', `${api.version}`);\n                if (`${api.context}`.includes('{version}')) {\n                    basePath = `${pathSeparator}${selectedDeploymentVhost.httpContext}${api.context}`\n                        .replaceAll('{version}', `${api.version}`);\n                } else {\n                    basePath = `${pathSeparator}${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`;\n                }\n                oasCopy.schemes = api.transport.slice().sort((a, b) => ((a > b) ? -1 : 1));\n                oasCopy.basePath = basePath;\n                oasCopy.host = host;\n            }\n        } else if (oasDefinition) {\n            // If no deployment just show the OAS definition\n            oasCopy = oasDefinition;\n        }\n        return oasCopy;\n    }, [selectedDeployment, oasDefinition]);\n\n    /**\n     *\n     * @param {React.SyntheticEventn} event\n     */\n    const deploymentSelectionHandler = (event) => {\n        const selectedGWEnvironment = event.target.value;\n        const currentSelection = deployments.find((deployment) => deployment.name === selectedGWEnvironment);\n        setSelectedDeployment(currentSelection);\n    };\n    const decodedJWT = useMemo(() => Utils.decodeJWT(apiKey), [apiKey]);\n    const isAPIRetired = api.lifeCycleStatus === 'RETIRED';\n    return (\n        <>\n            <Typography id='itest-api-details-try-out-head' variant='h4' component='h1'>\n                <FormattedMessage id='Apis.Details.ApiConsole.ApiConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper elevation={0}>\n                <Box display='flex' justifyContent='center'>\n                    <Grid xs={11} md={6} item>\n                        <Typography variant='h5' color='textPrimary'>\n                            <FormattedMessage\n                                id='api.console.security.heading'\n                                defaultMessage='Security'\n                            />\n                        </Typography>\n                        <TextField\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.TryOutConsole.token.label'\n                                    defaultMessage='Internal API Key'\n                                />\n                            )}\n                            type='password'\n                            value={apiKey}\n                            helperText={decodedJWT ? (\n                                <Box color='success.main'>\n                                    {`Expires ${dayjs.unix(decodedJWT.payload.exp).fromNow()}`}\n                                </Box>\n                            ) : 'Generate or provide an internal API Key'}\n                            margin='normal'\n                            variant='outlined'\n                            name='internal'\n                            multiline\n                            rows={4}\n                            onChange={(e) => setAPIKey(e.target.value)}\n                            disabled={isAPIRetired}\n                        />\n                        <Button\n                            onClick={generateInternalKey}\n                            variant='contained'\n                            color='primary'\n                            disabled={tasksStatus.generateKey.inProgress || isAPIRetired}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.generate.test.key'\n                                defaultMessage='Generate Key'\n                            />\n                        </Button>\n                        {tasksStatus.generateKey.inProgress\n                            && (\n                                <Box\n                                    display='inline'\n                                    position='absolute'\n                                    mt={1}\n                                    ml={-8}\n                                >\n                                    <CircularProgress size={24} />\n                                </Box>\n                            )}\n                    </Grid>\n                </Box>\n                <Box my={3} display='flex' justifyContent='center'>\n                    <Grid xs={11} md={6} item>\n                        {(tasksStatus.getDeployments.completed && !deployments.length && !isAPIRetired) && (\n                            <Alert variant='outlined' severity='error'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.deployments.no'\n                                    defaultMessage={'{artifactType} is not deployed yet! Please deploy '\n                                        + 'the {artifactType} before trying out'}\n                                    values={{ artifactType: api.isRevision ? 'Revision' : 'API' }}\n                                />\n                                <Link to={'/apis/' + api.id + '/deployments'}>\n                                    <LaunchIcon\n                                        color='primary'\n                                        fontSize='small'\n                                    />\n                                </Link>\n                            </Alert>\n                        )}\n                        {isAPIRetired && (\n                            <Alert variant='outlined' severity='error'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.deployments.isAPIRetired'\n                                    defaultMessage='Can not Try Out retired APIs!'\n                                />\n                            </Alert>\n                        )}\n                        {((deployments && deployments.length > 0))\n                            && (\n                                <>\n                                    <Typography\n                                        variant='h5'\n                                        color='textPrimary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.deployments.api.gateways'\n                                            defaultMessage='API Gateways'\n                                        />\n                                    </Typography>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Environment'\n                                                id='Apis.Details.ApiConsole.environment'\n                                            />\n                                        )}\n                                        value={(selectedDeployment && selectedDeployment.name) || ''}\n                                        name='selectedEnvironment'\n                                        onChange={deploymentSelectionHandler}\n                                        margin='normal'\n                                        variant='outlined'\n                                        SelectProps={{\n                                            MenuProps: {\n                                                anchorOrigin: {\n                                                    vertical: 'bottom',\n                                                    horizontal: 'left',\n                                                },\n                                                getContentAnchorEl: null,\n                                            },\n                                        }}\n                                    >\n                                        {deployments.map((deployment) => (\n                                            <MenuItem\n                                                value={deployment.name}\n                                                key={deployment.name}\n                                            >\n                                                {deployment.displayName}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </>\n                            )}\n                    </Grid>\n                </Box>\n                {updatedOasDefinition ? (\n                    <SwaggerUI\n                        api={api}\n                        accessTokenProvider={() => apiKey}\n                        spec={updatedOasDefinition}\n                        authorizationHeader='Internal-Key'\n                    />\n                ) : <CircularProgress />}\n            </Paper>\n        </>\n    );\n};\nTryOutConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        lcState: PropTypes.shape({}).isRequired,\n        theme: PropTypes.shape({}).isRequired,\n        intl: PropTypes.shape({\n            formatMessage: PropTypes.func,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default TryOutConsole;\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport './swagger-ui-overrides.css';\nimport SwaggerUILib from 'swagger-ui-react';\nimport Configurations from 'Config';\n\n\nconst disableAuthorizeAndInfoPlugin = function () {\n    if (Configurations.swaggerValidationBehaviour === 'default'\n        || Configurations.swaggerValidationBehaviour === null) {\n        return {\n            wrapComponents: {\n                info: () => () => null,\n                authorizeBtn: () => () => null,\n            },\n        };\n    } else {\n        return {\n            wrapComponents: {\n                info: () => () => null,\n                authorizeBtn: () => () => null,\n                errors: () => () => null,\n                errSelectors: () => () => null,\n            },\n        };\n    }\n};\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api,\n    } = props;\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const patternToCheck = `${context}/*`;\n            const accessToken = accessTokenProvider();\n            if (accessToken) {\n                req.headers[authorizationHeader] = accessToken;\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin],\n    };\n    return <SwaggerUILib {...componentProps} />;\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","import api from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./swagger-ui-overrides.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".swagger-ui {\\n    width: 80vw\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./source/src/app/components/Apis/Details/TryOut/swagger-ui-overrides.css\"],\"names\":[],\"mappings\":\"AAAA;IACI;AACJ\",\"sourcesContent\":[\".swagger-ui {\\n    width: 80vw\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport { amber } from '@material-ui/core/colors';\nimport VerticalDivider from './VerticalDivider';\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing(2),\n        borderRadius: theme.shape.borderRadius,\n        border: 'solid 1px ' + theme.palette.primary.main,\n        '& span.material-icons.info': {\n            fontSize: 80,\n            color: theme.palette.primary.main,\n        },\n        '& span.material-icons.warning': {\n            fontSize: 80,\n            color: amber[700],\n        },\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    content: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n    },\n});\n\n/**\n *\n *\n * @class InlineMessage\n * @extends {React.Component}\n */\nclass InlineMessage extends React.Component {\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof InlineMessage\n     * @inheritdoc\n     */\n    render() {\n        const {\n            classes, height, type, children,\n        } = this.props;\n        return (\n            <Paper className={classes.root} {...this.props}>\n                <Icon className={type}>{type}</Icon>\n                <VerticalDivider height={height} />\n                <div className={classes.content}>{children}</div>\n            </Paper>\n        );\n    }\n}\n\nInlineMessage.propTypes = {\n    classes: PropTypes.shape({\n        root: PropTypes.string,\n        iconItem: PropTypes.string,\n        content: PropTypes.string,\n    }).isRequired,\n    height: PropTypes.number,\n    type: PropTypes.string,\n    children: PropTypes.shape({}).isRequired,\n};\nInlineMessage.defaultProps = {\n    height: 100,\n    type: 'info',\n};\nexport default withStyles(styles)(InlineMessage);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nconst options = ['Save and deploy', 'Save'];\n\n/**\n *\n * @returns\n */\nexport default function CustomSplitButton(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        handleSave, handleSaveAndDeploy, isUpdating, id,\n    } = props;\n    const anchorRef = React.useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n    const handleClick = (event, index) => {\n        setSelectedIndex(index);\n        setOpen(false);\n        if (`${options[index]}` === 'Save') {\n            handleSave();\n        } else {\n            handleSaveAndDeploy();\n        }\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <Grid container direction='column' alignItems='center'>\n            <Grid item xs={12}>\n                <ButtonGroup\n                    variant='contained'\n                    color='primary'\n                    ref={anchorRef}\n                    aria-label='split button'\n                    disabled={isUpdating}\n                    style={{ width: '200px' }}\n                >\n                    <Button\n                        onClick={(event) => handleClick(event, selectedIndex)}\n                        disabled={isUpdating}\n                        data-testid='custom-select-save-button'\n                        style={{ width: '200px' }}\n                        id={id}\n                    >\n                        {options[selectedIndex]}\n                        {isUpdating && <CircularProgress size={24} />}\n                    </Button>\n                    <Button\n                        color='primary'\n                        size='small'\n                        aria-controls={open ? 'split-button-menu' : undefined}\n                        aria-expanded={open ? 'true' : undefined}\n                        aria-label='select merge strategy'\n                        aria-haspopup='menu'\n                        onClick={handleToggle}\n                    >\n                        <ArrowDropDownIcon />\n                    </Button>\n                </ButtonGroup>\n                <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n                    {({ TransitionProps, placement }) => (\n                        <Grow\n                            {...TransitionProps}\n                            style={{\n                                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                            }}\n                        >\n                            <Paper>\n                                <ClickAwayListener onClickAway={handleClose}>\n                                    <MenuList id='split-button-menu'>\n                                        {options.map((option, index) => (\n                                            <MenuItem\n                                                key={option}\n                                                selected={index === selectedIndex}\n                                                onClick={(event) => handleClick(event, index)}\n                                            >\n                                                {option}\n                                            </MenuItem>\n                                        ))}\n                                    </MenuList>\n                                </ClickAwayListener>\n                            </Paper>\n                        </Grow>\n                    )}\n                </Popper>\n            </Grid>\n        </Grid>\n    );\n}\n\nCustomSplitButton.propTypes = {\n    handleSave: PropTypes.shape({}).isRequired,\n    handleSaveAndDeploy: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nconst VERSIONS = {\n    V3: new RegExp('[3][.][0][.][0-9]'),\n    V2: new RegExp('[2][.][0]'),\n};\n\n/**\n *\n *\n * @param {*} apiProduct\n */\nfunction getAPIProductTaggedOperations(apiProduct, openAPI) {\n    const taggedOperations = { Default: [] };\n    apiProduct.apis.map((apiOperations) => {\n        return apiOperations.operations.map((operation) => {\n            const { target, verb } = operation;\n            // TODO: WARN! `toLowerCase` could cause a case sensitive issues\n            // in `verb` if definition has mixed case verbs\n            const openAPIOperation = openAPI.paths[target] && openAPI.paths[target][verb.toLowerCase()];\n            if (!openAPIOperation) {\n                console.warn(`Could not find target = ${target} `\n                        + `verb (lower cased) = ${verb.toLowerCase()} operation in OpenAPI definition`);\n                // Skipping not found operations\n                return null;\n            }\n            const operationInfo = { spec: openAPIOperation, ...operation };\n\n            if (!taggedOperations[apiOperations.name]) {\n                taggedOperations[apiOperations.name] = [];\n            }\n            taggedOperations[apiOperations.name].push(operationInfo);\n            return operationInfo;\n        });\n    });\n    return taggedOperations;\n}\n\n/**\n *\n *\n */\nfunction getTaggedOperations(api, openAPI) {\n    const taggedOperations = { Default: [] };\n    if (api.isAPIProduct()) {\n        return getAPIProductTaggedOperations(api, openAPI);\n    } else {\n        api.operations.map((apiOperation) => {\n            const { target, verb } = apiOperation;\n            // TODO: WARN! `toLowerCase` could cause a case sensitive\n            // issues in `verb` if definition has mixed case verbs\n            const openAPIOperation = openAPI.paths[target] && openAPI.paths[target][verb.toLowerCase()];\n            if (!openAPIOperation) {\n                console.warn(`Could not find target = ${target} `\n                        + `verb (lower cased) = ${verb.toLowerCase()} operation in OpenAPI definition`);\n                // Skipping not found operations\n                return null;\n            }\n            const operationInfo = { spec: openAPIOperation, ...apiOperation };\n            if (openAPIOperation.tags) {\n                openAPIOperation.tags.map((tag) => {\n                    if (!taggedOperations[tag]) {\n                        taggedOperations[tag] = [];\n                    }\n                    taggedOperations[tag].push(operationInfo);\n                    return operationInfo; // Just to satisfy an es-lint rule or could use `for ... of ...`\n                });\n            } else {\n                taggedOperations.Default.push(operationInfo);\n            }\n            return operationInfo; // Just to satisfy an es-lint rule or could use `for ... of ...`\n        });\n        return taggedOperations;\n    }\n}\n\n/**\n * Return the definition version given the parsed spec object\n *\n * @param {SwaggerObject} spec\n * @returns {String} version\n */\nfunction getVersion(spec) {\n    return spec.openapi || spec.swagger;\n}\n/**\n *Extract the path parameters from URI template. User has to give the Open API spec version as well\n * https://github.com/OAI/OpenAPI-Specification/tree/master/versions\n * @param {String} target URI template\n * @param {String} openAPIVersion Should be a valid Open API specification version (i:e \"2.0\", \"3.0.0\")\n * @returns {Array} List of parameter objects according to the given spec version\n */\nfunction extractPathParameters(target, spec) {\n    const regEx = /[^{}]+(?=})/g;\n    const params = target.match(regEx) || [];\n    let parameters = [];\n    const openAPIVersion = getVersion(spec);\n    if (VERSIONS.V3.test(openAPIVersion)) {\n        parameters = params.map((para) => {\n            const paraObj = {};\n            paraObj.name = para;\n            paraObj.in = 'path';\n            paraObj.required = true;\n            paraObj.schema = {\n                type: 'string',\n                format: 'string',\n            };\n            return paraObj;\n        });\n    } else if (VERSIONS.V2.test(openAPIVersion)) {\n        parameters = params.map((para) => {\n            const paraObj = {};\n            paraObj.name = para;\n            paraObj.in = 'path';\n            paraObj.required = true;\n            paraObj.type = 'string';\n            paraObj.format = 'string';\n            return paraObj;\n        });\n    }\n\n    return parameters;\n}\n\n/**\n * Extract AsyncAPI path parameters from the channel name.\n * @param {*} target\n */\nfunction extractAsyncAPIPathParameters(target) {\n    const regEx = /[^{}]+(?=})/g;\n    const params = target.match(regEx) || [];\n    const parameters = { };\n    params.forEach((param) => {\n        parameters[param] = {\n            description: '',\n            schema: {\n                type: 'string',\n            },\n        };\n    });\n    return parameters;\n}\n\n/**\n *\n * Return the WSO2 specific scopes array (currently only use the first element of the array)\n * @param {*} operation\n * @param {*} openAPIVersion\n * @returns {Array} Scopes of the `default` security scheme\n */\nfunction getOperationScopes(operation, spec) {\n    const openAPIVersion = getVersion(spec);\n    let scopes = [];\n    if (VERSIONS.V3.test(openAPIVersion)) {\n        if (Array.isArray(operation.security) && operation.security.find((item) => item.default)) {\n            scopes = operation.security.find((item) => item.default).default;\n        } else if (operation['x-scope']) {\n            scopes = [operation['x-scope']];\n        }\n    } else if (VERSIONS.V2.test(openAPIVersion)) {\n        if (Array.isArray(operation.security) && operation.security.find((item) => item.default)) {\n            scopes = operation.security.find((item) => item.default).default;\n        } else if (operation['x-scope']) {\n            scopes = [operation['x-scope']];\n        }\n    }\n    return scopes;\n}\n\n/**\n * Return AsyncAPI operation scopes array.\n * @param {*} operation\n * @param {*} spec\n */\nfunction getAsyncAPIOperationScopes(operation) {\n    const scopes = [];\n    if (operation['x-scopes']) {\n        // eslint-disable-next-line no-unused-vars\n        Object.entries(operation['x-scopes']).forEach(([k, v]) => {\n            scopes.push(v);\n        });\n    }\n    return scopes;\n}\n\n/**\n * Map the api.operations array to swagger paths like object\n * @param {Array} operations Operations in API DTO\n * @returns {Object} Mapped operations object\n */\nfunction mapAPIOperations(operations) {\n    const temp = {};\n    for (const operation of operations) {\n        const { target, verb, ...rest } = operation;\n        if (!temp[target]) {\n            temp[target] = {\n                [verb]: rest,\n            };\n        } else {\n            temp[target][verb] = rest;\n        }\n    }\n    return temp;\n}\n\n/**\n *\n *\n * @param {*} selectedOperations\n * @param {*} operations\n * @returns\n */\nfunction isSelectAll(selectedOperations, operations) {\n    for (const path in operations) {\n        if (Object.prototype.hasOwnProperty.call(operations, path)) {\n            const verbs = operations[path];\n            if (\n                !selectedOperations[path]\n                || Object.keys(selectedOperations[path]).length !== Object.keys(verbs).length\n            ) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Check whether the provided object is a Ref object.\n *\n * @param {object} content : The object that needs to be checked.\n * @return {boolean} true if Ref, false otherwise.\n * */\nfunction isRef(content) {\n    let isReference = false;\n    if (typeof content === 'object') {\n        Object.keys(content).map((name) => {\n            isReference = name === '$ref';\n            return name;\n        });\n    }\n    return isReference;\n}\n\nexport {\n    mapAPIOperations,\n    getTaggedOperations,\n    getAPIProductTaggedOperations,\n    extractPathParameters,\n    extractAsyncAPIPathParameters,\n    getOperationScopes,\n    getAsyncAPIOperationScopes,\n    isSelectAll,\n    getVersion,\n    VERSIONS,\n    isRef,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport { updateUserLocalStorage, getUserLocalStorage } from 'AppData/UserStateUtils';\n\nconst WrappedExpansionPanel = (props) => {\n    const { id } = props;\n    const [expanded, setExpanded] = useState(getUserLocalStorage(`${id}-expanded`));\n    const setExpandState = (event, expandedState) => {\n        updateUserLocalStorage(`${id}-expanded`, expandedState);\n        setExpanded(expandedState);\n    };\n    return (<ExpansionPanel expanded={expanded} {...props} onChange={setExpandState} />);\n};\nWrappedExpansionPanel.muiName = 'ExpansionPanel';\n\nexport default WrappedExpansionPanel;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// Check this file for more info  <CARBON_APIMGT>/components/apimgt/org.wso2.carbon.apimgt.impl\n// /src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n\nconst DEFAULT_API_SECURITY_OAUTH2 = 'oauth2';\nconst API_SECURITY_BASIC_AUTH = 'basic_auth';\nconst API_SECURITY_API_KEY = 'api_key';\nconst API_SECURITY_MUTUAL_SSL = 'mutualssl';\nconst API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY = 'oauth_basic_auth_api_key_mandatory';\nconst API_SECURITY_MUTUAL_SSL_MANDATORY = 'mutualssl_mandatory';\n\nexport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n};\n"],"sourceRoot":""}